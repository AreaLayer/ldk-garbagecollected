
using org.ldk.enums;
using org.ldk.impl;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace org { namespace ldk { namespace impl {

internal class bindings {
	static List<WeakReference> js_objs = new List<WeakReference>();

	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_lib_version_string")] public static extern string get_lib_version_string();
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_ldk_c_bindings_version")] public static extern string get_ldk_c_bindings_version();
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_ldk_version")] public static extern string get_ldk_version();

	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_allocate_buffer")] public static extern long allocate_buffer(long buflen);

	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_free_buffer")] public static extern void free_buffer(long buf);

	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_AddressZ_ty_from_ptr")] public static extern long LDKCOption_AddressZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_AddressZ_Some_get_some")] public static extern long LDKCOption_AddressZ_Some_get_some(long ptr);
	// struct LDKThirtyTwoBytes BigEndianScalar_get_bytes (struct LDKBigEndianScalar* thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_get_bytes")] public static extern long BigEndianScalar_get_bytes(long _thing);
	// static void BigEndianScalar_free (struct LDKBigEndianScalar thing)
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_free")] public static extern void BigEndianScalar_free(long _thing);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_ty_from_ptr")] public static extern long LDKBech32Error_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_InvalidChar_get_invalid_char")] public static extern int LDKBech32Error_InvalidChar_get_invalid_char(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBech32Error_InvalidData_get_invalid_data")] public static extern byte LDKBech32Error_InvalidData_get_invalid_data(long ptr);
	// struct LDKRefundMaybeWithDerivedMetadataBuilder CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_ok(LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_ok")] public static extern long CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_err(LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKRefund CResult_RefundBolt12SemanticErrorZ_get_ok(LDKCResult_RefundBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_get_ok")] public static extern long CResult_RefundBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_RefundBolt12SemanticErrorZ_get_err(LDKCResult_RefundBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_RefundBolt12SemanticErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u64Z_ty_from_ptr")] public static extern long LDKCOption_u64Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u64Z_Some_get_some")] public static extern long LDKCOption_u64Z_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDecodeError_ty_from_ptr")] public static extern long LDKDecodeError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDecodeError_Io_get_io")] public static extern IOError LDKDecodeError_Io_get_io(long ptr);
	// struct LDKRefund CResult_RefundDecodeErrorZ_get_ok(LDKCResult_RefundDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_get_ok")] public static extern long CResult_RefundDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RefundDecodeErrorZ_get_err(LDKCResult_RefundDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_get_err")] public static extern long CResult_RefundDecodeErrorZ_get_err(long _owner);
	// struct LDKRefund CResult_RefundBolt12ParseErrorZ_get_ok(LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_get_ok")] public static extern long CResult_RefundBolt12ParseErrorZ_get_ok(long _owner);
	// struct LDKBolt12ParseError CResult_RefundBolt12ParseErrorZ_get_err(LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_get_err")] public static extern long CResult_RefundBolt12ParseErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_ty_from_ptr")] public static extern long LDKRetry_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_Attempts_get_attempts")] public static extern int LDKRetry_Attempts_get_attempts(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRetry_Timeout_get_timeout")] public static extern long LDKRetry_Timeout_get_timeout(long ptr);
	// struct LDKRetry CResult_RetryDecodeErrorZ_get_ok(LDKCResult_RetryDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_get_ok")] public static extern long CResult_RetryDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RetryDecodeErrorZ_get_err(LDKCResult_RetryDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_get_err")] public static extern long CResult_RetryDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ThirtyTwoBytesZ_ty_from_ptr")] public static extern long LDKCOption_ThirtyTwoBytesZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ThirtyTwoBytesZ_Some_get_some")] public static extern long LDKCOption_ThirtyTwoBytesZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_u8ZZ_ty_from_ptr")] public static extern long LDKCOption_CVec_u8ZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_u8ZZ_Some_get_some")] public static extern long LDKCOption_CVec_u8ZZ_Some_get_some(long ptr);
	// struct LDKRecipientOnionFields CResult_RecipientOnionFieldsDecodeErrorZ_get_ok(LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_get_ok")] public static extern long CResult_RecipientOnionFieldsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RecipientOnionFieldsDecodeErrorZ_get_err(LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_get_err")] public static extern long CResult_RecipientOnionFieldsDecodeErrorZ_get_err(long _owner);
	// uint64_t C2Tuple_u64CVec_u8ZZ_get_a(LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_get_a")] public static extern long C2Tuple_u64CVec_u8ZZ_get_a(long _owner);
	// struct LDKCVec_u8Z C2Tuple_u64CVec_u8ZZ_get_b(LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_get_b")] public static extern long C2Tuple_u64CVec_u8ZZ_get_b(long _owner);
	// struct LDKRecipientOnionFields CResult_RecipientOnionFieldsNoneZ_get_ok(LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_get_ok")] public static extern long CResult_RecipientOnionFieldsNoneZ_get_ok(long _owner);
	// void CResult_RecipientOnionFieldsNoneZ_get_err(LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_get_err")] public static extern void CResult_RecipientOnionFieldsNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDNSResolverMessage_ty_from_ptr")] public static extern long LDKDNSResolverMessage_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDNSResolverMessage_DNSSECQuery_get_dnssec_query")] public static extern long LDKDNSResolverMessage_DNSSECQuery_get_dnssec_query(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDNSResolverMessage_DNSSECProof_get_dnssec_proof")] public static extern long LDKDNSResolverMessage_DNSSECProof_get_dnssec_proof(long ptr);
	// struct LDKDNSResolverMessage C2Tuple_DNSResolverMessageResponseInstructionZ_get_a(LDKC2Tuple_DNSResolverMessageResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageResponseInstructionZ_get_a")] public static extern long C2Tuple_DNSResolverMessageResponseInstructionZ_get_a(long _owner);
	// struct LDKResponseInstruction C2Tuple_DNSResolverMessageResponseInstructionZ_get_b(LDKC2Tuple_DNSResolverMessageResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageResponseInstructionZ_get_b")] public static extern long C2Tuple_DNSResolverMessageResponseInstructionZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_ty_from_ptr")] public static extern long LDKDestination_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_Node_get_node")] public static extern long LDKDestination_Node_get_node(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDestination_BlindedPath_get_blinded_path")] public static extern long LDKDestination_BlindedPath_get_blinded_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_ty_from_ptr")] public static extern long LDKOffersContext_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_InvoiceRequest_get_nonce")] public static extern long LDKOffersContext_InvoiceRequest_get_nonce(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_OutboundPayment_get_payment_id")] public static extern long LDKOffersContext_OutboundPayment_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_OutboundPayment_get_nonce")] public static extern long LDKOffersContext_OutboundPayment_get_nonce(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_OutboundPayment_get_hmac")] public static extern long LDKOffersContext_OutboundPayment_get_hmac(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_InboundPayment_get_payment_hash")] public static extern long LDKOffersContext_InboundPayment_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_InboundPayment_get_nonce")] public static extern long LDKOffersContext_InboundPayment_get_nonce(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersContext_InboundPayment_get_hmac")] public static extern long LDKOffersContext_InboundPayment_get_hmac(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsContext_ty_from_ptr")] public static extern long LDKAsyncPaymentsContext_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsContext_OutboundPayment_get_payment_id")] public static extern long LDKAsyncPaymentsContext_OutboundPayment_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsContext_OutboundPayment_get_nonce")] public static extern long LDKAsyncPaymentsContext_OutboundPayment_get_nonce(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsContext_OutboundPayment_get_hmac")] public static extern long LDKAsyncPaymentsContext_OutboundPayment_get_hmac(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageContext_ty_from_ptr")] public static extern long LDKMessageContext_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageContext_Offers_get_offers")] public static extern long LDKMessageContext_Offers_get_offers(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageContext_AsyncPayments_get_async_payments")] public static extern long LDKMessageContext_AsyncPayments_get_async_payments(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageContext_DNSResolver_get_dns_resolver")] public static extern long LDKMessageContext_DNSResolver_get_dns_resolver(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageContext_Custom_get_custom")] public static extern long LDKMessageContext_Custom_get_custom(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendInstructions_ty_from_ptr")] public static extern long LDKMessageSendInstructions_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendInstructions_WithSpecifiedReplyPath_get_destination")] public static extern long LDKMessageSendInstructions_WithSpecifiedReplyPath_get_destination(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendInstructions_WithSpecifiedReplyPath_get_reply_path")] public static extern long LDKMessageSendInstructions_WithSpecifiedReplyPath_get_reply_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendInstructions_WithReplyPath_get_destination")] public static extern long LDKMessageSendInstructions_WithReplyPath_get_destination(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendInstructions_WithReplyPath_get_context")] public static extern long LDKMessageSendInstructions_WithReplyPath_get_context(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendInstructions_WithoutReplyPath_get_destination")] public static extern long LDKMessageSendInstructions_WithoutReplyPath_get_destination(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendInstructions_ForReply_get_instructions")] public static extern long LDKMessageSendInstructions_ForReply_get_instructions(long ptr);
	// struct LDKDNSResolverMessage C2Tuple_DNSResolverMessageMessageSendInstructionsZ_get_a(LDKC2Tuple_DNSResolverMessageMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageMessageSendInstructionsZ_get_a")] public static extern long C2Tuple_DNSResolverMessageMessageSendInstructionsZ_get_a(long _owner);
	// struct LDKMessageSendInstructions C2Tuple_DNSResolverMessageMessageSendInstructionsZ_get_b(LDKC2Tuple_DNSResolverMessageMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageMessageSendInstructionsZ_get_b")] public static extern long C2Tuple_DNSResolverMessageMessageSendInstructionsZ_get_b(long _owner);
	// struct LDKDNSResolverMessage CResult_DNSResolverMessageDecodeErrorZ_get_ok(LDKCResult_DNSResolverMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_get_ok")] public static extern long CResult_DNSResolverMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_DNSResolverMessageDecodeErrorZ_get_err(LDKCResult_DNSResolverMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_get_err")] public static extern long CResult_DNSResolverMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKHumanReadableName CResult_HumanReadableNameNoneZ_get_ok(LDKCResult_HumanReadableNameNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_get_ok")] public static extern long CResult_HumanReadableNameNoneZ_get_ok(long _owner);
	// void CResult_HumanReadableNameNoneZ_get_err(LDKCResult_HumanReadableNameNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_get_err")] public static extern void CResult_HumanReadableNameNoneZ_get_err(long _owner);
	// struct LDKHumanReadableName CResult_HumanReadableNameDecodeErrorZ_get_ok(LDKCResult_HumanReadableNameDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_get_ok")] public static extern long CResult_HumanReadableNameDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HumanReadableNameDecodeErrorZ_get_err(LDKCResult_HumanReadableNameDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_get_err")] public static extern long CResult_HumanReadableNameDecodeErrorZ_get_err(long _owner);
	// struct LDKDNSSECQuery C2Tuple_DNSSECQueryDNSResolverContextZ_get_a(LDKC2Tuple_DNSSECQueryDNSResolverContextZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSSECQueryDNSResolverContextZ_get_a")] public static extern long C2Tuple_DNSSECQueryDNSResolverContextZ_get_a(long _owner);
	// struct LDKDNSResolverContext C2Tuple_DNSSECQueryDNSResolverContextZ_get_b(LDKC2Tuple_DNSSECQueryDNSResolverContextZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSSECQueryDNSResolverContextZ_get_b")] public static extern long C2Tuple_DNSSECQueryDNSResolverContextZ_get_b(long _owner);
	// struct LDKC2Tuple_DNSSECQueryDNSResolverContextZ CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_get_ok(LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_get_ok")] public static extern long CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_get_ok(long _owner);
	// void CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_get_err(LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_get_err")] public static extern void CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_get_err(long _owner);
	// struct LDKHumanReadableName C2Tuple_HumanReadableNameThirtyTwoBytesZ_get_a(LDKC2Tuple_HumanReadableNameThirtyTwoBytesZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_HumanReadableNameThirtyTwoBytesZ_get_a")] public static extern long C2Tuple_HumanReadableNameThirtyTwoBytesZ_get_a(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_HumanReadableNameThirtyTwoBytesZ_get_b(LDKC2Tuple_HumanReadableNameThirtyTwoBytesZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_HumanReadableNameThirtyTwoBytesZ_get_b")] public static extern long C2Tuple_HumanReadableNameThirtyTwoBytesZ_get_b(long _owner);
	// struct LDKCVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_get_a(LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_get_a")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_get_a(long _owner);
	// struct LDKOffer C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_get_b(LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_get_b")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_Some_get_some(long ptr);
	// struct LDKCVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_get_a(LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_get_a")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_get_a(long _owner);
	// struct LDKStr C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_get_b(LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_get_b")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_Some_get_some(long ptr);
	// struct LDKUnsignedBolt12Invoice CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_get_ok(LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_get_ok")] public static extern long CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_get_err(LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKBolt12Invoice CResult_Bolt12InvoiceBolt12SemanticErrorZ_get_ok(LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_get_ok")] public static extern long CResult_Bolt12InvoiceBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_Bolt12InvoiceBolt12SemanticErrorZ_get_err(LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_Bolt12InvoiceBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKSchnorrSignature CResult_SchnorrSignatureNoneZ_get_ok(LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_get_ok")] public static extern long CResult_SchnorrSignatureNoneZ_get_ok(long _owner);
	// void CResult_SchnorrSignatureNoneZ_get_err(LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_get_err")] public static extern void CResult_SchnorrSignatureNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_ThirtyTwoBytesZZ_ty_from_ptr")] public static extern long LDKCOption_CVec_ThirtyTwoBytesZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_ThirtyTwoBytesZZ_Some_get_some")] public static extern long LDKCOption_CVec_ThirtyTwoBytesZZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAmount_ty_from_ptr")] public static extern long LDKAmount_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAmount_Bitcoin_get_amount_msats")] public static extern long LDKAmount_Bitcoin_get_amount_msats(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAmount_Currency_get_iso4217_code")] public static extern long LDKAmount_Currency_get_iso4217_code(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAmount_Currency_get_amount")] public static extern long LDKAmount_Currency_get_amount(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_AmountZ_ty_from_ptr")] public static extern long LDKCOption_AmountZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_AmountZ_Some_get_some")] public static extern long LDKCOption_AmountZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKQuantity_ty_from_ptr")] public static extern long LDKQuantity_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKQuantity_Bounded_get_bounded")] public static extern long LDKQuantity_Bounded_get_bounded(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_QuantityZ_ty_from_ptr")] public static extern long LDKCOption_QuantityZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_QuantityZ_Some_get_some")] public static extern long LDKCOption_QuantityZ_Some_get_some(long ptr);
	// struct LDKThirtyTwoBytes CResult_ThirtyTwoBytesNoneZ_get_ok(LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_get_ok")] public static extern long CResult_ThirtyTwoBytesNoneZ_get_ok(long _owner);
	// void CResult_ThirtyTwoBytesNoneZ_get_err(LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_get_err")] public static extern void CResult_ThirtyTwoBytesNoneZ_get_err(long _owner);
	// struct LDKBolt12Invoice CResult_Bolt12InvoiceDecodeErrorZ_get_ok(LDKCResult_Bolt12InvoiceDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_get_ok")] public static extern long CResult_Bolt12InvoiceDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_Bolt12InvoiceDecodeErrorZ_get_err(LDKCResult_Bolt12InvoiceDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_get_err")] public static extern long CResult_Bolt12InvoiceDecodeErrorZ_get_err(long _owner);
	// struct LDKDelayedPaymentOutputDescriptor CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_get_err(long _owner);
	// struct LDKStaticPaymentOutputDescriptor CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_ty_from_ptr")] public static extern long LDKSpendableOutputDescriptor_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_outpoint")] public static extern long LDKSpendableOutputDescriptor_StaticOutput_get_outpoint(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_output")] public static extern long LDKSpendableOutputDescriptor_StaticOutput_get_output(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticOutput_get_channel_keys_id")] public static extern long LDKSpendableOutputDescriptor_StaticOutput_get_channel_keys_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_DelayedPaymentOutput_get_delayed_payment_output")] public static extern long LDKSpendableOutputDescriptor_DelayedPaymentOutput_get_delayed_payment_output(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendableOutputDescriptor_StaticPaymentOutput_get_static_payment_output")] public static extern long LDKSpendableOutputDescriptor_StaticPaymentOutput_get_static_payment_output(long ptr);
	// struct LDKSpendableOutputDescriptor CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_SpendableOutputDescriptorDecodeErrorZ_get_err(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_get_err")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u32Z_ty_from_ptr")] public static extern long LDKCOption_u32Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u32Z_Some_get_some")] public static extern int LDKCOption_u32Z_Some_get_some(long ptr);
	// struct LDKCVec_u8Z C2Tuple_CVec_u8Zu64Z_get_a(LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_get_a")] public static extern long C2Tuple_CVec_u8Zu64Z_get_a(long _owner);
	// uint64_t C2Tuple_CVec_u8Zu64Z_get_b(LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_get_b")] public static extern long C2Tuple_CVec_u8Zu64Z_get_b(long _owner);
	// struct LDKC2Tuple_CVec_u8Zu64Z CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_ok(LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_ok")] public static extern long CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_ok(long _owner);
	// void CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_err(LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_err")] public static extern void CResult_C2Tuple_CVec_u8Zu64ZNoneZ_get_err(long _owner);
	// struct LDKChannelDerivationParameters CResult_ChannelDerivationParametersDecodeErrorZ_get_ok(LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_get_ok")] public static extern long CResult_ChannelDerivationParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelDerivationParametersDecodeErrorZ_get_err(LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_get_err")] public static extern long CResult_ChannelDerivationParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKHTLCDescriptor CResult_HTLCDescriptorDecodeErrorZ_get_ok(LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_get_ok")] public static extern long CResult_HTLCDescriptorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HTLCDescriptorDecodeErrorZ_get_err(LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_get_err")] public static extern long CResult_HTLCDescriptorDecodeErrorZ_get_err(long _owner);
	// struct LDKPublicKey CResult_PublicKeyNoneZ_get_ok(LDKCResult_PublicKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_get_ok")] public static extern long CResult_PublicKeyNoneZ_get_ok(long _owner);
	// void CResult_PublicKeyNoneZ_get_err(LDKCResult_PublicKeyNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_get_err")] public static extern void CResult_PublicKeyNoneZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult__u832NoneZ_get_ok(LDKCResult__u832NoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_get_ok")] public static extern long CResult__u832NoneZ_get_ok(long _owner);
	// void CResult__u832NoneZ_get_err(LDKCResult__u832NoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_get_err")] public static extern void CResult__u832NoneZ_get_err(long _owner);
	// void CResult_NoneNoneZ_get_ok(LDKCResult_NoneNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_get_ok")] public static extern void CResult_NoneNoneZ_get_ok(long _owner);
	// void CResult_NoneNoneZ_get_err(LDKCResult_NoneNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_get_err")] public static extern void CResult_NoneNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_BigEndianScalarZ_ty_from_ptr")] public static extern long LDKCOption_BigEndianScalarZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_BigEndianScalarZ_Some_get_some")] public static extern long LDKCOption_BigEndianScalarZ_Some_get_some(long ptr);
	// struct LDKRecoverableSignature CResult_RecoverableSignatureNoneZ_get_ok(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_get_ok")] public static extern long CResult_RecoverableSignatureNoneZ_get_ok(long _owner);
	// void CResult_RecoverableSignatureNoneZ_get_err(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_get_err")] public static extern void CResult_RecoverableSignatureNoneZ_get_err(long _owner);
	// struct LDKECDSASignature CResult_ECDSASignatureNoneZ_get_ok(LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_get_ok")] public static extern long CResult_ECDSASignatureNoneZ_get_ok(long _owner);
	// void CResult_ECDSASignatureNoneZ_get_err(LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_get_err")] public static extern void CResult_ECDSASignatureNoneZ_get_err(long _owner);
	// struct LDKTransaction CResult_TransactionNoneZ_get_ok(LDKCResult_TransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_get_ok")] public static extern long CResult_TransactionNoneZ_get_ok(long _owner);
	// void CResult_TransactionNoneZ_get_err(LDKCResult_TransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_get_err")] public static extern void CResult_TransactionNoneZ_get_err(long _owner);
	// struct LDKECDSASignature C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_a(LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_a")] public static extern long C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_a(long _owner);
	// struct LDKCVec_ECDSASignatureZ C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_b(LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_b")] public static extern long C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_get_b(long _owner);
	// struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_ok(LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_ok")] public static extern long CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_ok(long _owner);
	// void CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_err(LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_err")] public static extern void CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_get_err(long _owner);
	public interface LDKChannelSigner {
		long get_per_commitment_point(long idx);
		long release_commitment_secret(long idx);
		long validate_holder_commitment(long holder_tx, long outbound_htlc_preimages);
		long validate_counterparty_revocation(long idx, long secret);
		long channel_keys_id();
		void provide_channel_parameters(long channel_parameters);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKChannelSigner_new")] public static extern long LDKChannelSigner_new_native(long impl_idx, long pubkeys);
	public static long[] LDKChannelSigner_new(LDKChannelSigner impl, long pubkeys) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKChannelSigner_new_native(i, pubkeys);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_PublicKeyNoneZ ChannelSigner_get_per_commitment_point LDKChannelSigner *NONNULL_PTR this_arg, uint64_t idx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_get_per_commitment_point")] public static extern long ChannelSigner_get_per_commitment_point(long _this_arg, long _idx);
	// LDKCResult__u832NoneZ ChannelSigner_release_commitment_secret LDKChannelSigner *NONNULL_PTR this_arg, uint64_t idx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_release_commitment_secret")] public static extern long ChannelSigner_release_commitment_secret(long _this_arg, long _idx);
	// LDKCResult_NoneNoneZ ChannelSigner_validate_holder_commitment LDKChannelSigner *NONNULL_PTR this_arg, const struct LDKHolderCommitmentTransaction *NONNULL_PTR holder_tx, struct LDKCVec_ThirtyTwoBytesZ outbound_htlc_preimages
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_validate_holder_commitment")] public static extern long ChannelSigner_validate_holder_commitment(long _this_arg, long _holder_tx, long _outbound_htlc_preimages);
	// LDKCResult_NoneNoneZ ChannelSigner_validate_counterparty_revocation LDKChannelSigner *NONNULL_PTR this_arg, uint64_t idx, const uint8_t (*secret)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_validate_counterparty_revocation")] public static extern long ChannelSigner_validate_counterparty_revocation(long _this_arg, long _idx, long _secret);
	// LDKThirtyTwoBytes ChannelSigner_channel_keys_id LDKChannelSigner *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_channel_keys_id")] public static extern long ChannelSigner_channel_keys_id(long _this_arg);
	// void ChannelSigner_provide_channel_parameters LDKChannelSigner *NONNULL_PTR this_arg, const struct LDKChannelTransactionParameters *NONNULL_PTR channel_parameters
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_provide_channel_parameters")] public static extern void ChannelSigner_provide_channel_parameters(long _this_arg, long _channel_parameters);
	// LDKChannelPublicKeys ChannelSigner_get_pubkeys LDKChannelSigner *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_get_pubkeys")] public static extern long ChannelSigner_get_pubkeys(long _this_arg);
	public interface LDKEcdsaChannelSigner {
		long sign_counterparty_commitment(long commitment_tx, long inbound_htlc_preimages, long outbound_htlc_preimages);
		long sign_holder_commitment(long commitment_tx);
		long sign_justice_revoked_output(long justice_tx, long input, long amount, long per_commitment_key);
		long sign_justice_revoked_htlc(long justice_tx, long input, long amount, long per_commitment_key, long htlc);
		long sign_holder_htlc_transaction(long htlc_tx, long input, long htlc_descriptor);
		long sign_counterparty_htlc_transaction(long htlc_tx, long input, long amount, long per_commitment_point, long htlc);
		long sign_closing_transaction(long closing_tx);
		long sign_holder_anchor_input(long anchor_tx, long input);
		long sign_channel_announcement_with_funding_key(long msg);
		long sign_splicing_funding_input(long tx, long input_index, long input_value);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEcdsaChannelSigner_new")] public static extern long LDKEcdsaChannelSigner_new_native(long impl_idx, long ChannelSigner, long pubkeys);
	public static long[] LDKEcdsaChannelSigner_new(LDKEcdsaChannelSigner impl, long ChannelSigner, long pubkeys) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEcdsaChannelSigner_new_native(i, ChannelSigner, pubkeys);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ EcdsaChannelSigner_sign_counterparty_commitment LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKCommitmentTransaction *NONNULL_PTR commitment_tx, struct LDKCVec_ThirtyTwoBytesZ inbound_htlc_preimages, struct LDKCVec_ThirtyTwoBytesZ outbound_htlc_preimages
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_counterparty_commitment")] public static extern long EcdsaChannelSigner_sign_counterparty_commitment(long _this_arg, long _commitment_tx, long _inbound_htlc_preimages, long _outbound_htlc_preimages);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_holder_commitment LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKHolderCommitmentTransaction *NONNULL_PTR commitment_tx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_holder_commitment")] public static extern long EcdsaChannelSigner_sign_holder_commitment(long _this_arg, long _commitment_tx);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_justice_revoked_output LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (*per_commitment_key)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_justice_revoked_output")] public static extern long EcdsaChannelSigner_sign_justice_revoked_output(long _this_arg, long _justice_tx, long _input, long _amount, long _per_commitment_key);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_justice_revoked_htlc LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input, uint64_t amount, const uint8_t (*per_commitment_key)[32], const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_justice_revoked_htlc")] public static extern long EcdsaChannelSigner_sign_justice_revoked_htlc(long _this_arg, long _justice_tx, long _input, long _amount, long _per_commitment_key, long _htlc);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_holder_htlc_transaction LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction htlc_tx, uintptr_t input, const struct LDKHTLCDescriptor *NONNULL_PTR htlc_descriptor
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_holder_htlc_transaction")] public static extern long EcdsaChannelSigner_sign_holder_htlc_transaction(long _this_arg, long _htlc_tx, long _input, long _htlc_descriptor);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_counterparty_htlc_transaction LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction htlc_tx, uintptr_t input, uint64_t amount, struct LDKPublicKey per_commitment_point, const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_counterparty_htlc_transaction")] public static extern long EcdsaChannelSigner_sign_counterparty_htlc_transaction(long _this_arg, long _htlc_tx, long _input, long _amount, long _per_commitment_point, long _htlc);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_closing_transaction LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKClosingTransaction *NONNULL_PTR closing_tx
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_closing_transaction")] public static extern long EcdsaChannelSigner_sign_closing_transaction(long _this_arg, long _closing_tx);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_holder_anchor_input LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction anchor_tx, uintptr_t input
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_holder_anchor_input")] public static extern long EcdsaChannelSigner_sign_holder_anchor_input(long _this_arg, long _anchor_tx, long _input);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_channel_announcement_with_funding_key LDKEcdsaChannelSigner *NONNULL_PTR this_arg, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_channel_announcement_with_funding_key")] public static extern long EcdsaChannelSigner_sign_channel_announcement_with_funding_key(long _this_arg, long _msg);
	// LDKCResult_ECDSASignatureNoneZ EcdsaChannelSigner_sign_splicing_funding_input LDKEcdsaChannelSigner *NONNULL_PTR this_arg, struct LDKTransaction tx, uintptr_t input_index, uint64_t input_value
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_sign_splicing_funding_input")] public static extern long EcdsaChannelSigner_sign_splicing_funding_input(long _this_arg, long _tx, long _input_index, long _input_value);
	// struct LDKEcdsaChannelSigner CResult_EcdsaChannelSignerDecodeErrorZ_get_ok(LDKCResult_EcdsaChannelSignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_get_ok")] public static extern long CResult_EcdsaChannelSignerDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_EcdsaChannelSignerDecodeErrorZ_get_err(LDKCResult_EcdsaChannelSignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_get_err")] public static extern long CResult_EcdsaChannelSignerDecodeErrorZ_get_err(long _owner);
	// struct LDKCVec_u8Z CResult_CVec_u8ZNoneZ_get_ok(LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_get_ok")] public static extern long CResult_CVec_u8ZNoneZ_get_ok(long _owner);
	// void CResult_CVec_u8ZNoneZ_get_err(LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_get_err")] public static extern void CResult_CVec_u8ZNoneZ_get_err(long _owner);
	// struct LDKShutdownScript CResult_ShutdownScriptNoneZ_get_ok(LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_get_ok")] public static extern long CResult_ShutdownScriptNoneZ_get_ok(long _owner);
	// void CResult_ShutdownScriptNoneZ_get_err(LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_get_err")] public static extern void CResult_ShutdownScriptNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u16Z_ty_from_ptr")] public static extern long LDKCOption_u16Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_u16Z_Some_get_some")] public static extern short LDKCOption_u16Z_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_boolZ_ty_from_ptr")] public static extern long LDKCOption_boolZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_boolZ_Some_get_some")] public static extern bool LDKCOption_boolZ_Some_get_some(long ptr);
	// struct LDKWitness CResult_WitnessNoneZ_get_ok(LDKCResult_WitnessNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_get_ok")] public static extern long CResult_WitnessNoneZ_get_ok(long _owner);
	// void CResult_WitnessNoneZ_get_err(LDKCResult_WitnessNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_get_err")] public static extern void CResult_WitnessNoneZ_get_err(long _owner);
	// struct LDKInMemorySigner CResult_InMemorySignerDecodeErrorZ_get_ok(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_get_ok")] public static extern long CResult_InMemorySignerDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InMemorySignerDecodeErrorZ_get_err(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_get_err")] public static extern long CResult_InMemorySignerDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_ty_from_ptr")] public static extern long LDKCandidateRouteHop_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_FirstHop_get_first_hop")] public static extern long LDKCandidateRouteHop_FirstHop_get_first_hop(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_PublicHop_get_public_hop")] public static extern long LDKCandidateRouteHop_PublicHop_get_public_hop(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_PrivateHop_get_private_hop")] public static extern long LDKCandidateRouteHop_PrivateHop_get_private_hop(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_Blinded_get_blinded")] public static extern long LDKCandidateRouteHop_Blinded_get_blinded(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCandidateRouteHop_OneHopBlinded_get_one_hop_blinded")] public static extern long LDKCandidateRouteHop_OneHopBlinded_get_one_hop_blinded(long ptr);
	public interface LDKScoreLookUp {
		long channel_penalty_msat(long candidate, long usage, long score_params);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKScoreLookUp_new")] public static extern long LDKScoreLookUp_new_native(long impl_idx);
	public static long[] LDKScoreLookUp_new(LDKScoreLookUp impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKScoreLookUp_new_native(i);
		ret[1] = i;
		return ret;
	}
	// uint64_t ScoreLookUp_channel_penalty_msat LDKScoreLookUp *NONNULL_PTR this_arg, const struct LDKCandidateRouteHop *NONNULL_PTR candidate, struct LDKChannelUsage usage, const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR score_params
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreLookUp_channel_penalty_msat")] public static extern long ScoreLookUp_channel_penalty_msat(long _this_arg, long _candidate, long _usage, long _score_params);
	public interface LDKScoreUpdate {
		void payment_path_failed(long path, long short_channel_id, long duration_since_epoch);
		void payment_path_successful(long path, long duration_since_epoch);
		void probe_failed(long path, long short_channel_id, long duration_since_epoch);
		void probe_successful(long path, long duration_since_epoch);
		void time_passed(long duration_since_epoch);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKScoreUpdate_new")] public static extern long LDKScoreUpdate_new_native(long impl_idx);
	public static long[] LDKScoreUpdate_new(LDKScoreUpdate impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKScoreUpdate_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void ScoreUpdate_payment_path_failed LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t short_channel_id, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_payment_path_failed")] public static extern void ScoreUpdate_payment_path_failed(long _this_arg, long _path, long _short_channel_id, long _duration_since_epoch);
	// void ScoreUpdate_payment_path_successful LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_payment_path_successful")] public static extern void ScoreUpdate_payment_path_successful(long _this_arg, long _path, long _duration_since_epoch);
	// void ScoreUpdate_probe_failed LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t short_channel_id, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_probe_failed")] public static extern void ScoreUpdate_probe_failed(long _this_arg, long _path, long _short_channel_id, long _duration_since_epoch);
	// void ScoreUpdate_probe_successful LDKScoreUpdate *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_probe_successful")] public static extern void ScoreUpdate_probe_successful(long _this_arg, long _path, long _duration_since_epoch);
	// void ScoreUpdate_time_passed LDKScoreUpdate *NONNULL_PTR this_arg, uint64_t duration_since_epoch
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_time_passed")] public static extern void ScoreUpdate_time_passed(long _this_arg, long _duration_since_epoch);
	public interface LDKLockableScore {
		long read_lock();
		long write_lock();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLockableScore_new")] public static extern long LDKLockableScore_new_native(long impl_idx);
	public static long[] LDKLockableScore_new(LDKLockableScore impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKLockableScore_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKScoreLookUp LockableScore_read_lock LDKLockableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_read_lock")] public static extern long LockableScore_read_lock(long _this_arg);
	// LDKScoreUpdate LockableScore_write_lock LDKLockableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_write_lock")] public static extern long LockableScore_write_lock(long _this_arg);
	public interface LDKWriteableScore {
		long write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWriteableScore_new")] public static extern long LDKWriteableScore_new_native(long impl_idx, long LockableScore);
	public static long[] LDKWriteableScore_new(LDKWriteableScore impl, long LockableScore) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKWriteableScore_new_native(i, LockableScore);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_u8Z WriteableScore_write LDKWriteableScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableScore_write")] public static extern long WriteableScore_write(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_WriteableScoreZ_ty_from_ptr")] public static extern long LDKCOption_WriteableScoreZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_WriteableScoreZ_Some_get_some")] public static extern long LDKCOption_WriteableScoreZ_Some_get_some(long ptr);
	// void CResult_NoneIOErrorZ_get_ok(LDKCResult_NoneIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_get_ok")] public static extern void CResult_NoneIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_NoneIOErrorZ_get_err(LDKCResult_NoneIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_get_err")] public static extern IOError CResult_NoneIOErrorZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_a(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_a")] public static extern long C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_a(long _owner);
	// struct LDKRecipientOnionFields C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_b(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_b")] public static extern long C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_b(long _owner);
	// struct LDKRouteParameters C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_c(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_c")] public static extern long C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_get_c(long _owner);
	// struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_ok(LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_ok")] public static extern long CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_ok(long _owner);
	// void CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_err(LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_err")] public static extern void CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_get_err(long _owner);
	// struct LDKRoute CResult_RouteLightningErrorZ_get_ok(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_get_ok")] public static extern long CResult_RouteLightningErrorZ_get_ok(long _owner);
	// struct LDKLightningError CResult_RouteLightningErrorZ_get_err(LDKCResult_RouteLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_get_err")] public static extern long CResult_RouteLightningErrorZ_get_err(long _owner);
	// struct LDKCVec_BlindedPaymentPathZ CResult_CVec_BlindedPaymentPathZNoneZ_get_ok(LDKCResult_CVec_BlindedPaymentPathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_get_ok")] public static extern long CResult_CVec_BlindedPaymentPathZNoneZ_get_ok(long _owner);
	// void CResult_CVec_BlindedPaymentPathZNoneZ_get_err(LDKCResult_CVec_BlindedPaymentPathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_get_err")] public static extern void CResult_CVec_BlindedPaymentPathZNoneZ_get_err(long _owner);
	// struct LDKInFlightHtlcs CResult_InFlightHtlcsDecodeErrorZ_get_ok(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_get_ok")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InFlightHtlcsDecodeErrorZ_get_err(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_get_err")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteHop CResult_RouteHopDecodeErrorZ_get_ok(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_get_ok")] public static extern long CResult_RouteHopDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteHopDecodeErrorZ_get_err(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_get_err")] public static extern long CResult_RouteHopDecodeErrorZ_get_err(long _owner);
	// struct LDKBlindedTail CResult_BlindedTailDecodeErrorZ_get_ok(LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_get_ok")] public static extern long CResult_BlindedTailDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedTailDecodeErrorZ_get_err(LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_get_err")] public static extern long CResult_BlindedTailDecodeErrorZ_get_err(long _owner);
	// struct LDKRoute CResult_RouteDecodeErrorZ_get_ok(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_get_ok")] public static extern long CResult_RouteDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteDecodeErrorZ_get_err(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_get_err")] public static extern long CResult_RouteDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteParameters CResult_RouteParametersDecodeErrorZ_get_ok(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_get_ok")] public static extern long CResult_RouteParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteParametersDecodeErrorZ_get_err(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_get_err")] public static extern long CResult_RouteParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKPaymentParameters CResult_PaymentParametersDecodeErrorZ_get_ok(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_get_ok")] public static extern long CResult_PaymentParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PaymentParametersDecodeErrorZ_get_err(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_get_err")] public static extern long CResult_PaymentParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteHint CResult_RouteHintDecodeErrorZ_get_ok(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_get_ok")] public static extern long CResult_RouteHintDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteHintDecodeErrorZ_get_err(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_get_err")] public static extern long CResult_RouteHintDecodeErrorZ_get_err(long _owner);
	// struct LDKRouteHintHop CResult_RouteHintHopDecodeErrorZ_get_ok(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_get_ok")] public static extern long CResult_RouteHintHopDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RouteHintHopDecodeErrorZ_get_err(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_get_err")] public static extern long CResult_RouteHintHopDecodeErrorZ_get_err(long _owner);
	// struct LDKFixedPenaltyScorer CResult_FixedPenaltyScorerDecodeErrorZ_get_ok(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_get_ok")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FixedPenaltyScorerDecodeErrorZ_get_err(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_get_err")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_get_err(long _owner);
	// uint64_t C2Tuple_u64u64Z_get_a(LDKC2Tuple_u64u64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_get_a")] public static extern long C2Tuple_u64u64Z_get_a(long _owner);
	// uint64_t C2Tuple_u64u64Z_get_b(LDKC2Tuple_u64u64Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_get_b")] public static extern long C2Tuple_u64u64Z_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u64ZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_u64u64ZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u64ZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_u64u64ZZ_Some_get_some(long ptr);
	// struct LDKThirtyTwoU16s C2Tuple_Z_get_a(LDKC2Tuple_Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_get_a")] public static extern long C2Tuple_Z_get_a(long _owner);
	// struct LDKThirtyTwoU16s C2Tuple_Z_get_b(LDKC2Tuple_Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_get_b")] public static extern long C2Tuple_Z_get_b(long _owner);
	// struct LDKThirtyTwoU16s C2Tuple__u1632_u1632Z_get_a(LDKC2Tuple__u1632_u1632Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_get_a")] public static extern long C2Tuple__u1632_u1632Z_get_a(long _owner);
	// struct LDKThirtyTwoU16s C2Tuple__u1632_u1632Z_get_b(LDKC2Tuple__u1632_u1632Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_get_b")] public static extern long C2Tuple__u1632_u1632Z_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_f64Z_ty_from_ptr")] public static extern long LDKCOption_f64Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_f64Z_Some_get_some")] public static extern double LDKCOption_f64Z_Some_get_some(long ptr);
	public interface LDKLogger {
		void log(long record);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLogger_new")] public static extern long LDKLogger_new_native(long impl_idx);
	public static long[] LDKLogger_new(LDKLogger impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKLogger_new_native(i);
		ret[1] = i;
		return ret;
	}
	// struct LDKProbabilisticScorer CResult_ProbabilisticScorerDecodeErrorZ_get_ok(LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_get_ok")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ProbabilisticScorerDecodeErrorZ_get_err(LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_get_err")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_get_err(long _owner);
	// struct LDKBestBlock CResult_BestBlockDecodeErrorZ_get_ok(LDKCResult_BestBlockDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_get_ok")] public static extern long CResult_BestBlockDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BestBlockDecodeErrorZ_get_err(LDKCResult_BestBlockDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_get_err")] public static extern long CResult_BestBlockDecodeErrorZ_get_err(long _owner);
	// uintptr_t C2Tuple_usizeTransactionZ_get_a(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_get_a")] public static extern long C2Tuple_usizeTransactionZ_get_a(long _owner);
	// struct LDKTransaction C2Tuple_usizeTransactionZ_get_b(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_get_b")] public static extern long C2Tuple_usizeTransactionZ_get_b(long _owner);
	// struct LDKThirtyTwoBytes C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_a(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_a")] public static extern long C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_a(long _owner);
	// uint32_t C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_b(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_b")] public static extern int C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_b(long _owner);
	// struct LDKCOption_ThirtyTwoBytesZ C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_c(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_c")] public static extern long C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_get_c(long _owner);
	// enum LDKChannelMonitorUpdateStatus CResult_ChannelMonitorUpdateStatusNoneZ_get_ok(LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_get_ok")] public static extern ChannelMonitorUpdateStatus CResult_ChannelMonitorUpdateStatusNoneZ_get_ok(long _owner);
	// void CResult_ChannelMonitorUpdateStatusNoneZ_get_err(LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_get_err")] public static extern void CResult_ChannelMonitorUpdateStatusNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_ty_from_ptr")] public static extern long LDKClosureReason_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_CounterpartyForceClosed_get_peer_msg")] public static extern long LDKClosureReason_CounterpartyForceClosed_get_peer_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_HolderForceClosed_get_broadcasted_latest_txn")] public static extern long LDKClosureReason_HolderForceClosed_get_broadcasted_latest_txn(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_ProcessingError_get_err")] public static extern long LDKClosureReason_ProcessingError_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_PeerFeerateTooLow_get_peer_feerate_sat_per_kw")] public static extern int LDKClosureReason_PeerFeerateTooLow_get_peer_feerate_sat_per_kw(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKClosureReason_PeerFeerateTooLow_get_required_feerate_sat_per_kw")] public static extern int LDKClosureReason_PeerFeerateTooLow_get_required_feerate_sat_per_kw(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_ty_from_ptr")] public static extern long LDKMonitorEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HTLCEvent_get_htlc_event")] public static extern long LDKMonitorEvent_HTLCEvent_get_htlc_event(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HolderForceClosedWithInfo_get_reason")] public static extern long LDKMonitorEvent_HolderForceClosedWithInfo_get_reason(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HolderForceClosedWithInfo_get_outpoint")] public static extern long LDKMonitorEvent_HolderForceClosedWithInfo_get_outpoint(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HolderForceClosedWithInfo_get_channel_id")] public static extern long LDKMonitorEvent_HolderForceClosedWithInfo_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_HolderForceClosed_get_holder_force_closed")] public static extern long LDKMonitorEvent_HolderForceClosed_get_holder_force_closed(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_Completed_get_funding_txo")] public static extern long LDKMonitorEvent_Completed_get_funding_txo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_Completed_get_channel_id")] public static extern long LDKMonitorEvent_Completed_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMonitorEvent_Completed_get_monitor_update_id")] public static extern long LDKMonitorEvent_Completed_get_monitor_update_id(long ptr);
	// struct LDKOutPoint C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_a(LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_a")] public static extern long C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_a(long _owner);
	// struct LDKChannelId C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_b(LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_b")] public static extern long C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_b(long _owner);
	// struct LDKCVec_MonitorEventZ C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_c(LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_c")] public static extern long C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_c(long _owner);
	// struct LDKPublicKey C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_d(LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_d")] public static extern long C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_get_d(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_StrZ_ty_from_ptr")] public static extern long LDKCOption_StrZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_StrZ_Some_get_some")] public static extern long LDKCOption_StrZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_ty_from_ptr")] public static extern long LDKAPIError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_APIMisuseError_get_err")] public static extern long LDKAPIError_APIMisuseError_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_FeeRateTooHigh_get_err")] public static extern long LDKAPIError_FeeRateTooHigh_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_FeeRateTooHigh_get_feerate")] public static extern int LDKAPIError_FeeRateTooHigh_get_feerate(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_InvalidRoute_get_err")] public static extern long LDKAPIError_InvalidRoute_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_ChannelUnavailable_get_err")] public static extern long LDKAPIError_ChannelUnavailable_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAPIError_IncompatibleShutdownScript_get_script")] public static extern long LDKAPIError_IncompatibleShutdownScript_get_script(long ptr);
	// struct LDKLSPSRequestId CResult_LSPSRequestIdAPIErrorZ_get_ok(LDKCResult_LSPSRequestIdAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_get_ok")] public static extern long CResult_LSPSRequestIdAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_LSPSRequestIdAPIErrorZ_get_err(LDKCResult_LSPSRequestIdAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_get_err")] public static extern long CResult_LSPSRequestIdAPIErrorZ_get_err(long _owner);
	// struct LDKOfferId CResult_OfferIdDecodeErrorZ_get_ok(LDKCResult_OfferIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_get_ok")] public static extern long CResult_OfferIdDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OfferIdDecodeErrorZ_get_err(LDKCResult_OfferIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_get_err")] public static extern long CResult_OfferIdDecodeErrorZ_get_err(long _owner);
	// void CResult_NoneBolt12SemanticErrorZ_get_ok(LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_get_ok")] public static extern void CResult_NoneBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_NoneBolt12SemanticErrorZ_get_err(LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_NoneBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKOffer CResult_OfferBolt12SemanticErrorZ_get_ok(LDKCResult_OfferBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_get_ok")] public static extern long CResult_OfferBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_OfferBolt12SemanticErrorZ_get_err(LDKCResult_OfferBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_OfferBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok(LDKCResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok")] public static extern long CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_get_err(LDKCResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKOffer CResult_OfferDecodeErrorZ_get_ok(LDKCResult_OfferDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_get_ok")] public static extern long CResult_OfferDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OfferDecodeErrorZ_get_err(LDKCResult_OfferDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_get_err")] public static extern long CResult_OfferDecodeErrorZ_get_err(long _owner);
	// struct LDKOffer CResult_OfferBolt12ParseErrorZ_get_ok(LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_get_ok")] public static extern long CResult_OfferBolt12ParseErrorZ_get_ok(long _owner);
	// struct LDKBolt12ParseError CResult_OfferBolt12ParseErrorZ_get_err(LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_get_err")] public static extern long CResult_OfferBolt12ParseErrorZ_get_err(long _owner);
	// struct LDKNodeId CResult_NodeIdDecodeErrorZ_get_ok(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_get_ok")] public static extern long CResult_NodeIdDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeIdDecodeErrorZ_get_err(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_get_err")] public static extern long CResult_NodeIdDecodeErrorZ_get_err(long _owner);
	// struct LDKPublicKey CResult_PublicKeySecp256k1ErrorZ_get_ok(LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_get_ok")] public static extern long CResult_PublicKeySecp256k1ErrorZ_get_ok(long _owner);
	// enum LDKSecp256k1Error CResult_PublicKeySecp256k1ErrorZ_get_err(LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_get_err")] public static extern Secp256k1Error CResult_PublicKeySecp256k1ErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ty_from_ptr")] public static extern long LDKNetworkUpdate_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelFailure_get_short_channel_id")] public static extern long LDKNetworkUpdate_ChannelFailure_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_ChannelFailure_get_is_permanent")] public static extern bool LDKNetworkUpdate_ChannelFailure_get_is_permanent(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_NodeFailure_get_node_id")] public static extern long LDKNetworkUpdate_NodeFailure_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNetworkUpdate_NodeFailure_get_is_permanent")] public static extern bool LDKNetworkUpdate_NodeFailure_get_is_permanent(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetworkUpdateZ_ty_from_ptr")] public static extern long LDKCOption_NetworkUpdateZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NetworkUpdateZ_Some_get_some")] public static extern long LDKCOption_NetworkUpdateZ_Some_get_some(long ptr);
	// struct LDKCOption_NetworkUpdateZ CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_NetworkUpdateZDecodeErrorZ_get_err(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_get_err")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_get_err(long _owner);
	// struct LDKTxOut CResult_TxOutUtxoLookupErrorZ_get_ok(LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_get_ok")] public static extern long CResult_TxOutUtxoLookupErrorZ_get_ok(long _owner);
	// enum LDKUtxoLookupError CResult_TxOutUtxoLookupErrorZ_get_err(LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_get_err")] public static extern UtxoLookupError CResult_TxOutUtxoLookupErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoResult_ty_from_ptr")] public static extern long LDKUtxoResult_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoResult_Sync_get_sync")] public static extern long LDKUtxoResult_Sync_get_sync(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoResult_Async_get_async")] public static extern long LDKUtxoResult_Async_get_async(long ptr);
	public interface LDKUtxoLookup {
		long get_utxo(long chain_hash, long short_channel_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUtxoLookup_new")] public static extern long LDKUtxoLookup_new_native(long impl_idx);
	public static long[] LDKUtxoLookup_new(LDKUtxoLookup impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKUtxoLookup_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKUtxoResult UtxoLookup_get_utxo LDKUtxoLookup *NONNULL_PTR this_arg, const uint8_t (*chain_hash)[32], uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookup_get_utxo")] public static extern long UtxoLookup_get_utxo(long _this_arg, long _chain_hash, long _short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_UtxoLookupZ_ty_from_ptr")] public static extern long LDKCOption_UtxoLookupZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_UtxoLookupZ_Some_get_some")] public static extern long LDKCOption_UtxoLookupZ_Some_get_some(long ptr);
	// void CResult_NoneLightningErrorZ_get_ok(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_get_ok")] public static extern void CResult_NoneLightningErrorZ_get_ok(long _owner);
	// struct LDKLightningError CResult_NoneLightningErrorZ_get_err(LDKCResult_NoneLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_get_err")] public static extern long CResult_NoneLightningErrorZ_get_err(long _owner);
	// bool CResult_boolLightningErrorZ_get_ok(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_get_ok")] public static extern bool CResult_boolLightningErrorZ_get_ok(long _owner);
	// struct LDKLightningError CResult_boolLightningErrorZ_get_err(LDKCResult_boolLightningErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_get_err")] public static extern long CResult_boolLightningErrorZ_get_err(long _owner);
	// struct LDKChannelAnnouncement C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_a(long _owner);
	// struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_b(long _owner);
	// struct LDKChannelUpdate C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_get_c(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_ty_from_ptr")] public static extern long LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_Some_get_some")] public static extern long LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_ty_from_ptr")] public static extern long LDKErrorAction_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_DisconnectPeer_get_msg")] public static extern long LDKErrorAction_DisconnectPeer_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_DisconnectPeerWithWarning_get_msg")] public static extern long LDKErrorAction_DisconnectPeerWithWarning_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_IgnoreAndLog_get_ignore_and_log")] public static extern Level LDKErrorAction_IgnoreAndLog_get_ignore_and_log(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendErrorMessage_get_msg")] public static extern long LDKErrorAction_SendErrorMessage_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendWarningMessage_get_msg")] public static extern long LDKErrorAction_SendWarningMessage_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKErrorAction_SendWarningMessage_get_log_level")] public static extern Level LDKErrorAction_SendWarningMessage_get_log_level(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_ty_from_ptr")] public static extern long LDKMessageSendEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannel_get_node_id")] public static extern long LDKMessageSendEvent_SendAcceptChannel_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannel_get_msg")] public static extern long LDKMessageSendEvent_SendAcceptChannel_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannelV2_get_node_id")] public static extern long LDKMessageSendEvent_SendAcceptChannelV2_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAcceptChannelV2_get_msg")] public static extern long LDKMessageSendEvent_SendAcceptChannelV2_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannel_get_node_id")] public static extern long LDKMessageSendEvent_SendOpenChannel_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannel_get_msg")] public static extern long LDKMessageSendEvent_SendOpenChannel_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannelV2_get_node_id")] public static extern long LDKMessageSendEvent_SendOpenChannelV2_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendOpenChannelV2_get_msg")] public static extern long LDKMessageSendEvent_SendOpenChannelV2_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingCreated_get_node_id")] public static extern long LDKMessageSendEvent_SendFundingCreated_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingCreated_get_msg")] public static extern long LDKMessageSendEvent_SendFundingCreated_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingSigned_get_node_id")] public static extern long LDKMessageSendEvent_SendFundingSigned_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendFundingSigned_get_msg")] public static extern long LDKMessageSendEvent_SendFundingSigned_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendStfu_get_node_id")] public static extern long LDKMessageSendEvent_SendStfu_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendStfu_get_msg")] public static extern long LDKMessageSendEvent_SendStfu_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceInit_get_node_id")] public static extern long LDKMessageSendEvent_SendSpliceInit_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceInit_get_msg")] public static extern long LDKMessageSendEvent_SendSpliceInit_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceAck_get_node_id")] public static extern long LDKMessageSendEvent_SendSpliceAck_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceAck_get_msg")] public static extern long LDKMessageSendEvent_SendSpliceAck_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceLocked_get_node_id")] public static extern long LDKMessageSendEvent_SendSpliceLocked_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendSpliceLocked_get_msg")] public static extern long LDKMessageSendEvent_SendSpliceLocked_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddInput_get_node_id")] public static extern long LDKMessageSendEvent_SendTxAddInput_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddInput_get_msg")] public static extern long LDKMessageSendEvent_SendTxAddInput_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddOutput_get_node_id")] public static extern long LDKMessageSendEvent_SendTxAddOutput_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAddOutput_get_msg")] public static extern long LDKMessageSendEvent_SendTxAddOutput_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveInput_get_node_id")] public static extern long LDKMessageSendEvent_SendTxRemoveInput_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveInput_get_msg")] public static extern long LDKMessageSendEvent_SendTxRemoveInput_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveOutput_get_node_id")] public static extern long LDKMessageSendEvent_SendTxRemoveOutput_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxRemoveOutput_get_msg")] public static extern long LDKMessageSendEvent_SendTxRemoveOutput_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxComplete_get_node_id")] public static extern long LDKMessageSendEvent_SendTxComplete_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxComplete_get_msg")] public static extern long LDKMessageSendEvent_SendTxComplete_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxSignatures_get_node_id")] public static extern long LDKMessageSendEvent_SendTxSignatures_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxSignatures_get_msg")] public static extern long LDKMessageSendEvent_SendTxSignatures_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxInitRbf_get_node_id")] public static extern long LDKMessageSendEvent_SendTxInitRbf_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxInitRbf_get_msg")] public static extern long LDKMessageSendEvent_SendTxInitRbf_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAckRbf_get_node_id")] public static extern long LDKMessageSendEvent_SendTxAckRbf_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAckRbf_get_msg")] public static extern long LDKMessageSendEvent_SendTxAckRbf_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAbort_get_node_id")] public static extern long LDKMessageSendEvent_SendTxAbort_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendTxAbort_get_msg")] public static extern long LDKMessageSendEvent_SendTxAbort_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReady_get_node_id")] public static extern long LDKMessageSendEvent_SendChannelReady_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReady_get_msg")] public static extern long LDKMessageSendEvent_SendChannelReady_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAnnouncementSignatures_get_node_id")] public static extern long LDKMessageSendEvent_SendAnnouncementSignatures_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendAnnouncementSignatures_get_msg")] public static extern long LDKMessageSendEvent_SendAnnouncementSignatures_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_UpdateHTLCs_get_node_id")] public static extern long LDKMessageSendEvent_UpdateHTLCs_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_UpdateHTLCs_get_updates")] public static extern long LDKMessageSendEvent_UpdateHTLCs_get_updates(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendRevokeAndACK_get_node_id")] public static extern long LDKMessageSendEvent_SendRevokeAndACK_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendRevokeAndACK_get_msg")] public static extern long LDKMessageSendEvent_SendRevokeAndACK_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendClosingSigned_get_node_id")] public static extern long LDKMessageSendEvent_SendClosingSigned_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendClosingSigned_get_msg")] public static extern long LDKMessageSendEvent_SendClosingSigned_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShutdown_get_node_id")] public static extern long LDKMessageSendEvent_SendShutdown_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShutdown_get_msg")] public static extern long LDKMessageSendEvent_SendShutdown_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReestablish_get_node_id")] public static extern long LDKMessageSendEvent_SendChannelReestablish_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelReestablish_get_msg")] public static extern long LDKMessageSendEvent_SendChannelReestablish_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_node_id")] public static extern long LDKMessageSendEvent_SendChannelAnnouncement_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_msg")] public static extern long LDKMessageSendEvent_SendChannelAnnouncement_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelAnnouncement_get_update_msg")] public static extern long LDKMessageSendEvent_SendChannelAnnouncement_get_update_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelAnnouncement_get_msg")] public static extern long LDKMessageSendEvent_BroadcastChannelAnnouncement_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelAnnouncement_get_update_msg")] public static extern long LDKMessageSendEvent_BroadcastChannelAnnouncement_get_update_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastChannelUpdate_get_msg")] public static extern long LDKMessageSendEvent_BroadcastChannelUpdate_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_BroadcastNodeAnnouncement_get_msg")] public static extern long LDKMessageSendEvent_BroadcastNodeAnnouncement_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelUpdate_get_node_id")] public static extern long LDKMessageSendEvent_SendChannelUpdate_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelUpdate_get_msg")] public static extern long LDKMessageSendEvent_SendChannelUpdate_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_HandleError_get_node_id")] public static extern long LDKMessageSendEvent_HandleError_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_HandleError_get_action")] public static extern long LDKMessageSendEvent_HandleError_get_action(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelRangeQuery_get_node_id")] public static extern long LDKMessageSendEvent_SendChannelRangeQuery_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendChannelRangeQuery_get_msg")] public static extern long LDKMessageSendEvent_SendChannelRangeQuery_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShortIdsQuery_get_node_id")] public static extern long LDKMessageSendEvent_SendShortIdsQuery_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendShortIdsQuery_get_msg")] public static extern long LDKMessageSendEvent_SendShortIdsQuery_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendReplyChannelRange_get_node_id")] public static extern long LDKMessageSendEvent_SendReplyChannelRange_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendReplyChannelRange_get_msg")] public static extern long LDKMessageSendEvent_SendReplyChannelRange_get_msg(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendGossipTimestampFilter_get_node_id")] public static extern long LDKMessageSendEvent_SendGossipTimestampFilter_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEvent_SendGossipTimestampFilter_get_msg")] public static extern long LDKMessageSendEvent_SendGossipTimestampFilter_get_msg(long ptr);
	// struct LDKChannelUpdateInfo CResult_ChannelUpdateInfoDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_get_ok")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelUpdateInfoDecodeErrorZ_get_err(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_get_err")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelInfo CResult_ChannelInfoDecodeErrorZ_get_ok(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_get_ok")] public static extern long CResult_ChannelInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelInfoDecodeErrorZ_get_err(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_get_err")] public static extern long CResult_ChannelInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKRoutingFees CResult_RoutingFeesDecodeErrorZ_get_ok(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_get_ok")] public static extern long CResult_RoutingFeesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RoutingFeesDecodeErrorZ_get_err(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_get_err")] public static extern long CResult_RoutingFeesDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_ty_from_ptr")] public static extern long LDKSocketAddress_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV4_get_addr")] public static extern long LDKSocketAddress_TcpIpV4_get_addr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV4_get_port")] public static extern short LDKSocketAddress_TcpIpV4_get_port(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV6_get_addr")] public static extern long LDKSocketAddress_TcpIpV6_get_addr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_TcpIpV6_get_port")] public static extern short LDKSocketAddress_TcpIpV6_get_port(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV2_get_onion_v2")] public static extern long LDKSocketAddress_OnionV2_get_onion_v2(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_ed25519_pubkey")] public static extern long LDKSocketAddress_OnionV3_get_ed25519_pubkey(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_checksum")] public static extern short LDKSocketAddress_OnionV3_get_checksum(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_version")] public static extern byte LDKSocketAddress_OnionV3_get_version(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_OnionV3_get_port")] public static extern short LDKSocketAddress_OnionV3_get_port(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_Hostname_get_hostname")] public static extern long LDKSocketAddress_Hostname_get_hostname(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketAddress_Hostname_get_port")] public static extern short LDKSocketAddress_Hostname_get_port(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNodeAnnouncementInfo_ty_from_ptr")] public static extern long LDKNodeAnnouncementInfo_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNodeAnnouncementInfo_Relayed_get_relayed")] public static extern long LDKNodeAnnouncementInfo_Relayed_get_relayed(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNodeAnnouncementInfo_Local_get_local")] public static extern long LDKNodeAnnouncementInfo_Local_get_local(long ptr);
	// struct LDKNodeAnnouncementInfo CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeAnnouncementInfoDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_get_err")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeAlias CResult_NodeAliasDecodeErrorZ_get_ok(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_get_ok")] public static extern long CResult_NodeAliasDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeAliasDecodeErrorZ_get_err(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_get_err")] public static extern long CResult_NodeAliasDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NodeAnnouncementInfoZ_ty_from_ptr")] public static extern long LDKCOption_NodeAnnouncementInfoZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_NodeAnnouncementInfoZ_Some_get_some")] public static extern long LDKCOption_NodeAnnouncementInfoZ_Some_get_some(long ptr);
	// struct LDKNodeInfo CResult_NodeInfoDecodeErrorZ_get_ok(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_get_ok")] public static extern long CResult_NodeInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeInfoDecodeErrorZ_get_err(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_get_err")] public static extern long CResult_NodeInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKNetworkGraph CResult_NetworkGraphDecodeErrorZ_get_ok(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_get_ok")] public static extern long CResult_NetworkGraphDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NetworkGraphDecodeErrorZ_get_err(LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_get_err")] public static extern long CResult_NetworkGraphDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_SocketAddressZZ_ty_from_ptr")] public static extern long LDKCOption_CVec_SocketAddressZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_CVec_SocketAddressZZ_Some_get_some")] public static extern long LDKCOption_CVec_SocketAddressZZ_Some_get_some(long ptr);
	// uint64_t CResult_u64ShortChannelIdErrorZ_get_ok(LDKCResult_u64ShortChannelIdErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64ShortChannelIdErrorZ_get_ok")] public static extern long CResult_u64ShortChannelIdErrorZ_get_ok(long _owner);
	// enum LDKShortChannelIdError CResult_u64ShortChannelIdErrorZ_get_err(LDKCResult_u64ShortChannelIdErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64ShortChannelIdErrorZ_get_err")] public static extern ShortChannelIdError CResult_u64ShortChannelIdErrorZ_get_err(long _owner);
	// struct LDKPendingHTLCInfo CResult_PendingHTLCInfoInboundHTLCErrZ_get_ok(LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_get_ok")] public static extern long CResult_PendingHTLCInfoInboundHTLCErrZ_get_ok(long _owner);
	// struct LDKInboundHTLCErr CResult_PendingHTLCInfoInboundHTLCErrZ_get_err(LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_get_err")] public static extern long CResult_PendingHTLCInfoInboundHTLCErrZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TxOutZ_ty_from_ptr")] public static extern long LDKCOption_TxOutZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TxOutZ_Some_get_some")] public static extern long LDKCOption_TxOutZ_Some_get_some(long ptr);
	// struct LDKCoinSelection CResult_CoinSelectionNoneZ_get_ok(LDKCResult_CoinSelectionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_get_ok")] public static extern long CResult_CoinSelectionNoneZ_get_ok(long _owner);
	// void CResult_CoinSelectionNoneZ_get_err(LDKCResult_CoinSelectionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_get_err")] public static extern void CResult_CoinSelectionNoneZ_get_err(long _owner);
	// struct LDKCVec_UtxoZ CResult_CVec_UtxoZNoneZ_get_ok(LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_get_ok")] public static extern long CResult_CVec_UtxoZNoneZ_get_ok(long _owner);
	// void CResult_CVec_UtxoZNoneZ_get_err(LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_get_err")] public static extern void CResult_CVec_UtxoZNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentContext_ty_from_ptr")] public static extern long LDKPaymentContext_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentContext_Bolt12Offer_get_bolt12_offer")] public static extern long LDKPaymentContext_Bolt12Offer_get_bolt12_offer(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentContext_Bolt12Refund_get_bolt12_refund")] public static extern long LDKPaymentContext_Bolt12Refund_get_bolt12_refund(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PaymentContextZ_ty_from_ptr")] public static extern long LDKCOption_PaymentContextZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PaymentContextZ_Some_get_some")] public static extern long LDKCOption_PaymentContextZ_Some_get_some(long ptr);
	// uint64_t C2Tuple_u64u16Z_get_a(LDKC2Tuple_u64u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_get_a")] public static extern long C2Tuple_u64u16Z_get_a(long _owner);
	// uint16_t C2Tuple_u64u16Z_get_b(LDKC2Tuple_u64u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_get_b")] public static extern short C2Tuple_u64u16Z_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u16ZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_u64u16ZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_u64u16ZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_u64u16ZZ_Some_get_some(long ptr);
	// struct LDKChannelId CResult_ChannelIdAPIErrorZ_get_ok(LDKCResult_ChannelIdAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_get_ok")] public static extern long CResult_ChannelIdAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_ChannelIdAPIErrorZ_get_err(LDKCResult_ChannelIdAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_get_err")] public static extern long CResult_ChannelIdAPIErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_ty_from_ptr")] public static extern long LDKRecentPaymentDetails_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_AwaitingInvoice_get_payment_id")] public static extern long LDKRecentPaymentDetails_AwaitingInvoice_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Pending_get_payment_id")] public static extern long LDKRecentPaymentDetails_Pending_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Pending_get_payment_hash")] public static extern long LDKRecentPaymentDetails_Pending_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Pending_get_total_msat")] public static extern long LDKRecentPaymentDetails_Pending_get_total_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Fulfilled_get_payment_id")] public static extern long LDKRecentPaymentDetails_Fulfilled_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Fulfilled_get_payment_hash")] public static extern long LDKRecentPaymentDetails_Fulfilled_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Abandoned_get_payment_id")] public static extern long LDKRecentPaymentDetails_Abandoned_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRecentPaymentDetails_Abandoned_get_payment_hash")] public static extern long LDKRecentPaymentDetails_Abandoned_get_payment_hash(long ptr);
	// void CResult_NoneAPIErrorZ_get_ok(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_get_ok")] public static extern void CResult_NoneAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_NoneAPIErrorZ_get_err(LDKCResult_NoneAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_get_err")] public static extern long CResult_NoneAPIErrorZ_get_err(long _owner);
	// void CResult_NoneRetryableSendFailureZ_get_ok(LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_get_ok")] public static extern void CResult_NoneRetryableSendFailureZ_get_ok(long _owner);
	// enum LDKRetryableSendFailure CResult_NoneRetryableSendFailureZ_get_err(LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_get_err")] public static extern RetryableSendFailure CResult_NoneRetryableSendFailureZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OffersContextZ_ty_from_ptr")] public static extern long LDKCOption_OffersContextZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OffersContextZ_Some_get_some")] public static extern long LDKCOption_OffersContextZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt12PaymentError_ty_from_ptr")] public static extern long LDKBolt12PaymentError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt12PaymentError_SendingFailed_get_sending_failed")] public static extern RetryableSendFailure LDKBolt12PaymentError_SendingFailed_get_sending_failed(long ptr);
	// void CResult_NoneBolt12PaymentErrorZ_get_ok(LDKCResult_NoneBolt12PaymentErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_get_ok")] public static extern void CResult_NoneBolt12PaymentErrorZ_get_ok(long _owner);
	// struct LDKBolt12PaymentError CResult_NoneBolt12PaymentErrorZ_get_err(LDKCResult_NoneBolt12PaymentErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_get_err")] public static extern long CResult_NoneBolt12PaymentErrorZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult_ThirtyTwoBytesRetryableSendFailureZ_get_ok(LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_get_ok")] public static extern long CResult_ThirtyTwoBytesRetryableSendFailureZ_get_ok(long _owner);
	// enum LDKRetryableSendFailure CResult_ThirtyTwoBytesRetryableSendFailureZ_get_err(LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_get_err")] public static extern RetryableSendFailure CResult_ThirtyTwoBytesRetryableSendFailureZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_a(LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_a")] public static extern long C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_a(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_b(LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_b")] public static extern long C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKProbeSendFailure_ty_from_ptr")] public static extern long LDKProbeSendFailure_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKProbeSendFailure_ParameterError_get_parameter_error")] public static extern long LDKProbeSendFailure_ParameterError_get_parameter_error(long ptr);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_get_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_get_ok(long _owner);
	// struct LDKProbeSendFailure CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_get_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_get_err(long _owner);
	// struct LDKCVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_ok(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_ok")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_ok(long _owner);
	// struct LDKProbeSendFailure CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_err(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_err")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_get_err(long _owner);
	// struct LDKChannelId C2Tuple_ChannelIdPublicKeyZ_get_a(LDKC2Tuple_ChannelIdPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ChannelIdPublicKeyZ_get_a")] public static extern long C2Tuple_ChannelIdPublicKeyZ_get_a(long _owner);
	// struct LDKPublicKey C2Tuple_ChannelIdPublicKeyZ_get_b(LDKC2Tuple_ChannelIdPublicKeyZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ChannelIdPublicKeyZ_get_b")] public static extern long C2Tuple_ChannelIdPublicKeyZ_get_b(long _owner);
	// struct LDKPublicKey C2Tuple_PublicKeyChannelIdZ_get_a(LDKC2Tuple_PublicKeyChannelIdZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyChannelIdZ_get_a")] public static extern long C2Tuple_PublicKeyChannelIdZ_get_a(long _owner);
	// struct LDKChannelId C2Tuple_PublicKeyChannelIdZ_get_b(LDKC2Tuple_PublicKeyChannelIdZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyChannelIdZ_get_b")] public static extern long C2Tuple_PublicKeyChannelIdZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_PublicKeyChannelIdZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_PublicKeyChannelIdZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_PublicKeyChannelIdZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_PublicKeyChannelIdZZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignOrCreationError_ty_from_ptr")] public static extern long LDKSignOrCreationError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignOrCreationError_CreationError_get_creation_error")] public static extern CreationError LDKSignOrCreationError_CreationError_get_creation_error(long ptr);
	// struct LDKBolt11Invoice CResult_Bolt11InvoiceSignOrCreationErrorZ_get_ok(LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_get_ok")] public static extern long CResult_Bolt11InvoiceSignOrCreationErrorZ_get_ok(long _owner);
	// struct LDKSignOrCreationError CResult_Bolt11InvoiceSignOrCreationErrorZ_get_err(LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_get_err")] public static extern long CResult_Bolt11InvoiceSignOrCreationErrorZ_get_err(long _owner);
	// struct LDKOfferWithDerivedMetadataBuilder CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_ok(LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_ok")] public static extern long CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_err(LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_ok(long _owner);
	// void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_err")] public static extern void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes CResult_ThirtyTwoBytesAPIErrorZ_get_ok(LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_get_ok")] public static extern long CResult_ThirtyTwoBytesAPIErrorZ_get_ok(long _owner);
	// struct LDKAPIError CResult_ThirtyTwoBytesAPIErrorZ_get_err(LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_get_err")] public static extern long CResult_ThirtyTwoBytesAPIErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_ty_from_ptr")] public static extern long LDKOffersMessage_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_InvoiceRequest_get_invoice_request")] public static extern long LDKOffersMessage_InvoiceRequest_get_invoice_request(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_Invoice_get_invoice")] public static extern long LDKOffersMessage_Invoice_get_invoice(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessage_InvoiceError_get_invoice_error")] public static extern long LDKOffersMessage_InvoiceError_get_invoice_error(long ptr);
	// struct LDKOffersMessage C2Tuple_OffersMessageResponseInstructionZ_get_a(LDKC2Tuple_OffersMessageResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageResponseInstructionZ_get_a")] public static extern long C2Tuple_OffersMessageResponseInstructionZ_get_a(long _owner);
	// struct LDKResponseInstruction C2Tuple_OffersMessageResponseInstructionZ_get_b(LDKC2Tuple_OffersMessageResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageResponseInstructionZ_get_b")] public static extern long C2Tuple_OffersMessageResponseInstructionZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ_Some_get_some(long ptr);
	// struct LDKOffersMessage C2Tuple_OffersMessageMessageSendInstructionsZ_get_a(LDKC2Tuple_OffersMessageMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageMessageSendInstructionsZ_get_a")] public static extern long C2Tuple_OffersMessageMessageSendInstructionsZ_get_a(long _owner);
	// struct LDKMessageSendInstructions C2Tuple_OffersMessageMessageSendInstructionsZ_get_b(LDKC2Tuple_OffersMessageMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageMessageSendInstructionsZ_get_b")] public static extern long C2Tuple_OffersMessageMessageSendInstructionsZ_get_b(long _owner);
	// struct LDKReleaseHeldHtlc C2Tuple_ReleaseHeldHtlcResponseInstructionZ_get_a(LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ReleaseHeldHtlcResponseInstructionZ_get_a")] public static extern long C2Tuple_ReleaseHeldHtlcResponseInstructionZ_get_a(long _owner);
	// struct LDKResponseInstruction C2Tuple_ReleaseHeldHtlcResponseInstructionZ_get_b(LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ReleaseHeldHtlcResponseInstructionZ_get_b")] public static extern long C2Tuple_ReleaseHeldHtlcResponseInstructionZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsMessage_ty_from_ptr")] public static extern long LDKAsyncPaymentsMessage_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsMessage_HeldHtlcAvailable_get_held_htlc_available")] public static extern long LDKAsyncPaymentsMessage_HeldHtlcAvailable_get_held_htlc_available(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsMessage_ReleaseHeldHtlc_get_release_held_htlc")] public static extern long LDKAsyncPaymentsMessage_ReleaseHeldHtlc_get_release_held_htlc(long ptr);
	// struct LDKAsyncPaymentsMessage C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_get_a(LDKC2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_get_a")] public static extern long C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_get_a(long _owner);
	// struct LDKMessageSendInstructions C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_get_b(LDKC2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_get_b")] public static extern long C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_get_b(long _owner);
	// struct LDKPhantomRouteHints CResult_PhantomRouteHintsDecodeErrorZ_get_ok(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_get_ok")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PhantomRouteHintsDecodeErrorZ_get_err(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_get_err")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_get_err(long _owner);
	// struct LDKBlindedForward CResult_BlindedForwardDecodeErrorZ_get_ok(LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_get_ok")] public static extern long CResult_BlindedForwardDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedForwardDecodeErrorZ_get_err(LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_get_err")] public static extern long CResult_BlindedForwardDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ty_from_ptr")] public static extern long LDKPendingHTLCRouting_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Forward_get_onion_packet")] public static extern long LDKPendingHTLCRouting_Forward_get_onion_packet(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Forward_get_short_channel_id")] public static extern long LDKPendingHTLCRouting_Forward_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Forward_get_blinded")] public static extern long LDKPendingHTLCRouting_Forward_get_blinded(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Forward_get_incoming_cltv_expiry")] public static extern long LDKPendingHTLCRouting_Forward_get_incoming_cltv_expiry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_payment_data")] public static extern long LDKPendingHTLCRouting_Receive_get_payment_data(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_payment_metadata")] public static extern long LDKPendingHTLCRouting_Receive_get_payment_metadata(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_payment_context")] public static extern long LDKPendingHTLCRouting_Receive_get_payment_context(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_incoming_cltv_expiry")] public static extern int LDKPendingHTLCRouting_Receive_get_incoming_cltv_expiry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_phantom_shared_secret")] public static extern long LDKPendingHTLCRouting_Receive_get_phantom_shared_secret(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_custom_tlvs")] public static extern long LDKPendingHTLCRouting_Receive_get_custom_tlvs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_Receive_get_requires_blinded_error")] public static extern bool LDKPendingHTLCRouting_Receive_get_requires_blinded_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_payment_data")] public static extern long LDKPendingHTLCRouting_ReceiveKeysend_get_payment_data(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_payment_preimage")] public static extern long LDKPendingHTLCRouting_ReceiveKeysend_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_payment_metadata")] public static extern long LDKPendingHTLCRouting_ReceiveKeysend_get_payment_metadata(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_incoming_cltv_expiry")] public static extern int LDKPendingHTLCRouting_ReceiveKeysend_get_incoming_cltv_expiry(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_custom_tlvs")] public static extern long LDKPendingHTLCRouting_ReceiveKeysend_get_custom_tlvs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_requires_blinded_error")] public static extern bool LDKPendingHTLCRouting_ReceiveKeysend_get_requires_blinded_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPendingHTLCRouting_ReceiveKeysend_get_has_recipient_created_payment_secret")] public static extern bool LDKPendingHTLCRouting_ReceiveKeysend_get_has_recipient_created_payment_secret(long ptr);
	// struct LDKPendingHTLCRouting CResult_PendingHTLCRoutingDecodeErrorZ_get_ok(LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_get_ok")] public static extern long CResult_PendingHTLCRoutingDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PendingHTLCRoutingDecodeErrorZ_get_err(LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_get_err")] public static extern long CResult_PendingHTLCRoutingDecodeErrorZ_get_err(long _owner);
	// struct LDKPendingHTLCInfo CResult_PendingHTLCInfoDecodeErrorZ_get_ok(LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_get_ok")] public static extern long CResult_PendingHTLCInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PendingHTLCInfoDecodeErrorZ_get_err(LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_get_err")] public static extern long CResult_PendingHTLCInfoDecodeErrorZ_get_err(long _owner);
	// enum LDKBlindedFailure CResult_BlindedFailureDecodeErrorZ_get_ok(LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_get_ok")] public static extern BlindedFailure CResult_BlindedFailureDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedFailureDecodeErrorZ_get_err(LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_get_err")] public static extern long CResult_BlindedFailureDecodeErrorZ_get_err(long _owner);
	public interface LDKWatch {
		long watch_channel(long funding_txo, long monitor);
		ChannelMonitorUpdateStatus update_channel(long funding_txo, long update);
		long release_pending_monitor_events();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWatch_new")] public static extern long LDKWatch_new_native(long impl_idx);
	public static long[] LDKWatch_new(LDKWatch impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKWatch_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_ChannelMonitorUpdateStatusNoneZ Watch_watch_channel LDKWatch *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, struct LDKChannelMonitor monitor
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_watch_channel")] public static extern long Watch_watch_channel(long _this_arg, long _funding_txo, long _monitor);
	// LDKChannelMonitorUpdateStatus Watch_update_channel LDKWatch *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, const struct LDKChannelMonitorUpdate *NONNULL_PTR update
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_update_channel")] public static extern ChannelMonitorUpdateStatus Watch_update_channel(long _this_arg, long _funding_txo, long _update);
	// LDKCVec_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZZ Watch_release_pending_monitor_events LDKWatch *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_release_pending_monitor_events")] public static extern long Watch_release_pending_monitor_events(long _this_arg);
	public interface LDKBroadcasterInterface {
		void broadcast_transactions(long txs);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBroadcasterInterface_new")] public static extern long LDKBroadcasterInterface_new_native(long impl_idx);
	public static long[] LDKBroadcasterInterface_new(LDKBroadcasterInterface impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKBroadcasterInterface_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void BroadcasterInterface_broadcast_transactions LDKBroadcasterInterface *NONNULL_PTR this_arg, struct LDKCVec_TransactionZ txs
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BroadcasterInterface_broadcast_transactions")] public static extern void BroadcasterInterface_broadcast_transactions(long _this_arg, long _txs);
	public interface LDKEntropySource {
		long get_secure_random_bytes();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEntropySource_new")] public static extern long LDKEntropySource_new_native(long impl_idx);
	public static long[] LDKEntropySource_new(LDKEntropySource impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEntropySource_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKThirtyTwoBytes EntropySource_get_secure_random_bytes LDKEntropySource *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EntropySource_get_secure_random_bytes")] public static extern long EntropySource_get_secure_random_bytes(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_ty_from_ptr")] public static extern long LDKUnsignedGossipMessage_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_ChannelAnnouncement_get_channel_announcement")] public static extern long LDKUnsignedGossipMessage_ChannelAnnouncement_get_channel_announcement(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_ChannelUpdate_get_channel_update")] public static extern long LDKUnsignedGossipMessage_ChannelUpdate_get_channel_update(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKUnsignedGossipMessage_NodeAnnouncement_get_node_announcement")] public static extern long LDKUnsignedGossipMessage_NodeAnnouncement_get_node_announcement(long ptr);
	public interface LDKNodeSigner {
		long get_inbound_payment_key();
		long get_node_id(Recipient recipient);
		long ecdh(Recipient recipient, long other_key, long tweak);
		long sign_invoice(long invoice, Recipient recipient);
		long sign_bolt12_invoice(long invoice);
		long sign_gossip_message(long msg);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNodeSigner_new")] public static extern long LDKNodeSigner_new_native(long impl_idx);
	public static long[] LDKNodeSigner_new(LDKNodeSigner impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKNodeSigner_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKExpandedKey NodeSigner_get_inbound_payment_key LDKNodeSigner *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_get_inbound_payment_key")] public static extern long NodeSigner_get_inbound_payment_key(long _this_arg);
	// LDKCResult_PublicKeyNoneZ NodeSigner_get_node_id LDKNodeSigner *NONNULL_PTR this_arg, enum LDKRecipient recipient
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_get_node_id")] public static extern long NodeSigner_get_node_id(long _this_arg, Recipient _recipient);
	// LDKCResult_ThirtyTwoBytesNoneZ NodeSigner_ecdh LDKNodeSigner *NONNULL_PTR this_arg, enum LDKRecipient recipient, struct LDKPublicKey other_key, struct LDKCOption_BigEndianScalarZ tweak
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_ecdh")] public static extern long NodeSigner_ecdh(long _this_arg, Recipient _recipient, long _other_key, long _tweak);
	// LDKCResult_RecoverableSignatureNoneZ NodeSigner_sign_invoice LDKNodeSigner *NONNULL_PTR this_arg, const struct LDKRawBolt11Invoice *NONNULL_PTR invoice, enum LDKRecipient recipient
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_sign_invoice")] public static extern long NodeSigner_sign_invoice(long _this_arg, long _invoice, Recipient _recipient);
	// LDKCResult_SchnorrSignatureNoneZ NodeSigner_sign_bolt12_invoice LDKNodeSigner *NONNULL_PTR this_arg, const struct LDKUnsignedBolt12Invoice *NONNULL_PTR invoice
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_sign_bolt12_invoice")] public static extern long NodeSigner_sign_bolt12_invoice(long _this_arg, long _invoice);
	// LDKCResult_ECDSASignatureNoneZ NodeSigner_sign_gossip_message LDKNodeSigner *NONNULL_PTR this_arg, struct LDKUnsignedGossipMessage msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_sign_gossip_message")] public static extern long NodeSigner_sign_gossip_message(long _this_arg, long _msg);
	public interface LDKSignerProvider {
		long generate_channel_keys_id(bool inbound, long channel_value_satoshis, long user_channel_id);
		long derive_channel_signer(long channel_value_satoshis, long channel_keys_id);
		long read_chan_signer(long reader);
		long get_destination_script(long channel_keys_id);
		long get_shutdown_scriptpubkey();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignerProvider_new")] public static extern long LDKSignerProvider_new_native(long impl_idx);
	public static long[] LDKSignerProvider_new(LDKSignerProvider impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKSignerProvider_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKThirtyTwoBytes SignerProvider_generate_channel_keys_id LDKSignerProvider *NONNULL_PTR this_arg, bool inbound, uint64_t channel_value_satoshis, struct LDKU128 user_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_generate_channel_keys_id")] public static extern long SignerProvider_generate_channel_keys_id(long _this_arg, bool _inbound, long _channel_value_satoshis, long _user_channel_id);
	// LDKEcdsaChannelSigner SignerProvider_derive_channel_signer LDKSignerProvider *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, struct LDKThirtyTwoBytes channel_keys_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_derive_channel_signer")] public static extern long SignerProvider_derive_channel_signer(long _this_arg, long _channel_value_satoshis, long _channel_keys_id);
	// LDKCResult_EcdsaChannelSignerDecodeErrorZ SignerProvider_read_chan_signer LDKSignerProvider *NONNULL_PTR this_arg, struct LDKu8slice reader
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_read_chan_signer")] public static extern long SignerProvider_read_chan_signer(long _this_arg, long _reader);
	// LDKCResult_CVec_u8ZNoneZ SignerProvider_get_destination_script LDKSignerProvider *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes channel_keys_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_get_destination_script")] public static extern long SignerProvider_get_destination_script(long _this_arg, long _channel_keys_id);
	// LDKCResult_ShutdownScriptNoneZ SignerProvider_get_shutdown_scriptpubkey LDKSignerProvider *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_get_shutdown_scriptpubkey")] public static extern long SignerProvider_get_shutdown_scriptpubkey(long _this_arg);
	public interface LDKFeeEstimator {
		int get_est_sat_per_1000_weight(ConfirmationTarget confirmation_target);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFeeEstimator_new")] public static extern long LDKFeeEstimator_new_native(long impl_idx);
	public static long[] LDKFeeEstimator_new(LDKFeeEstimator impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKFeeEstimator_new_native(i);
		ret[1] = i;
		return ret;
	}
	// uint32_t FeeEstimator_get_est_sat_per_1000_weight LDKFeeEstimator *NONNULL_PTR this_arg, enum LDKConfirmationTarget confirmation_target
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FeeEstimator_get_est_sat_per_1000_weight")] public static extern int FeeEstimator_get_est_sat_per_1000_weight(long _this_arg, ConfirmationTarget _confirmation_target);
	public interface LDKRouter {
		long find_route(long payer, long route_params, long first_hops, long inflight_htlcs);
		long find_route_with_id(long payer, long route_params, long first_hops, long inflight_htlcs, long _payment_hash, long _payment_id);
		long create_blinded_payment_paths(long recipient, long first_hops, long tlvs, long amount_msats);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRouter_new")] public static extern long LDKRouter_new_native(long impl_idx);
	public static long[] LDKRouter_new(LDKRouter impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKRouter_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_RouteLightningErrorZ Router_find_route LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey payer, const struct LDKRouteParameters *NONNULL_PTR route_params, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKInFlightHtlcs inflight_htlcs
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_find_route")] public static extern long Router_find_route(long _this_arg, long _payer, long _route_params, long _first_hops, long _inflight_htlcs);
	// LDKCResult_RouteLightningErrorZ Router_find_route_with_id LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey payer, const struct LDKRouteParameters *NONNULL_PTR route_params, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKInFlightHtlcs inflight_htlcs, struct LDKThirtyTwoBytes _payment_hash, struct LDKThirtyTwoBytes _payment_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_find_route_with_id")] public static extern long Router_find_route_with_id(long _this_arg, long _payer, long _route_params, long _first_hops, long _inflight_htlcs, long __payment_hash, long __payment_id);
	// LDKCResult_CVec_BlindedPaymentPathZNoneZ Router_create_blinded_payment_paths LDKRouter *NONNULL_PTR this_arg, struct LDKPublicKey recipient, struct LDKCVec_ChannelDetailsZ first_hops, struct LDKReceiveTlvs tlvs, uint64_t amount_msats
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_create_blinded_payment_paths")] public static extern long Router_create_blinded_payment_paths(long _this_arg, long _recipient, long _first_hops, long _tlvs, long _amount_msats);
	// struct LDKOnionMessagePath CResult_OnionMessagePathNoneZ_get_ok(LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_get_ok")] public static extern long CResult_OnionMessagePathNoneZ_get_ok(long _owner);
	// void CResult_OnionMessagePathNoneZ_get_err(LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_get_err")] public static extern void CResult_OnionMessagePathNoneZ_get_err(long _owner);
	// struct LDKCVec_BlindedMessagePathZ CResult_CVec_BlindedMessagePathZNoneZ_get_ok(LDKCResult_CVec_BlindedMessagePathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_get_ok")] public static extern long CResult_CVec_BlindedMessagePathZNoneZ_get_ok(long _owner);
	// void CResult_CVec_BlindedMessagePathZNoneZ_get_err(LDKCResult_CVec_BlindedMessagePathZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_get_err")] public static extern void CResult_CVec_BlindedMessagePathZNoneZ_get_err(long _owner);
	public interface LDKMessageRouter {
		long find_path(long sender, long peers, long destination);
		long create_blinded_paths(long recipient, long context, long peers);
		long create_compact_blinded_paths(long recipient, long context, long peers);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageRouter_new")] public static extern long LDKMessageRouter_new_native(long impl_idx);
	public static long[] LDKMessageRouter_new(LDKMessageRouter impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKMessageRouter_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_OnionMessagePathNoneZ MessageRouter_find_path LDKMessageRouter *NONNULL_PTR this_arg, struct LDKPublicKey sender, struct LDKCVec_PublicKeyZ peers, struct LDKDestination destination
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageRouter_find_path")] public static extern long MessageRouter_find_path(long _this_arg, long _sender, long _peers, long _destination);
	// LDKCResult_CVec_BlindedMessagePathZNoneZ MessageRouter_create_blinded_paths LDKMessageRouter *NONNULL_PTR this_arg, struct LDKPublicKey recipient, struct LDKMessageContext context, struct LDKCVec_PublicKeyZ peers
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageRouter_create_blinded_paths")] public static extern long MessageRouter_create_blinded_paths(long _this_arg, long _recipient, long _context, long _peers);
	// LDKCResult_CVec_BlindedMessagePathZNoneZ MessageRouter_create_compact_blinded_paths LDKMessageRouter *NONNULL_PTR this_arg, struct LDKPublicKey recipient, struct LDKMessageContext context, struct LDKCVec_MessageForwardNodeZ peers
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageRouter_create_compact_blinded_paths")] public static extern long MessageRouter_create_compact_blinded_paths(long _this_arg, long _recipient, long _context, long _peers);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesChannelManagerZ_get_a(LDKC2Tuple_ThirtyTwoBytesChannelManagerZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_get_a")] public static extern long C2Tuple_ThirtyTwoBytesChannelManagerZ_get_a(long _owner);
	// struct LDKChannelManager C2Tuple_ThirtyTwoBytesChannelManagerZ_get_b(LDKC2Tuple_ThirtyTwoBytesChannelManagerZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_get_b")] public static extern long C2Tuple_ThirtyTwoBytesChannelManagerZ_get_b(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ *CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMaxDustHTLCExposure_ty_from_ptr")] public static extern long LDKMaxDustHTLCExposure_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMaxDustHTLCExposure_FixedLimitMsat_get_fixed_limit_msat")] public static extern long LDKMaxDustHTLCExposure_FixedLimitMsat_get_fixed_limit_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMaxDustHTLCExposure_FeeRateMultiplier_get_fee_rate_multiplier")] public static extern long LDKMaxDustHTLCExposure_FeeRateMultiplier_get_fee_rate_multiplier(long ptr);
	// struct LDKMaxDustHTLCExposure CResult_MaxDustHTLCExposureDecodeErrorZ_get_ok(LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_get_ok")] public static extern long CResult_MaxDustHTLCExposureDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_MaxDustHTLCExposureDecodeErrorZ_get_err(LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_get_err")] public static extern long CResult_MaxDustHTLCExposureDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelConfig CResult_ChannelConfigDecodeErrorZ_get_ok(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_get_ok")] public static extern long CResult_ChannelConfigDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelConfigDecodeErrorZ_get_err(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_get_err")] public static extern long CResult_ChannelConfigDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MaxDustHTLCExposureZ_ty_from_ptr")] public static extern long LDKCOption_MaxDustHTLCExposureZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MaxDustHTLCExposureZ_Some_get_some")] public static extern long LDKCOption_MaxDustHTLCExposureZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_APIErrorZ_ty_from_ptr")] public static extern long LDKCOption_APIErrorZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_APIErrorZ_Some_get_some")] public static extern long LDKCOption_APIErrorZ_Some_get_some(long ptr);
	// struct LDKCOption_APIErrorZ CResult_COption_APIErrorZDecodeErrorZ_get_ok(LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_get_ok")] public static extern long CResult_COption_APIErrorZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_APIErrorZDecodeErrorZ_get_err(LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_get_err")] public static extern long CResult_COption_APIErrorZDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelMonitorUpdate CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelMonitorUpdateDecodeErrorZ_get_err(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_get_err")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MonitorEventZ_ty_from_ptr")] public static extern long LDKCOption_MonitorEventZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MonitorEventZ_Some_get_some")] public static extern long LDKCOption_MonitorEventZ_Some_get_some(long ptr);
	// struct LDKCOption_MonitorEventZ CResult_COption_MonitorEventZDecodeErrorZ_get_ok(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_get_ok")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_MonitorEventZDecodeErrorZ_get_err(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_get_err")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_get_err(long _owner);
	// struct LDKHTLCUpdate CResult_HTLCUpdateDecodeErrorZ_get_ok(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_get_ok")] public static extern long CResult_HTLCUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HTLCUpdateDecodeErrorZ_get_err(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_get_err")] public static extern long CResult_HTLCUpdateDecodeErrorZ_get_err(long _owner);
	// struct LDKOutPoint C2Tuple_OutPointCVec_u8ZZ_get_a(LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_get_a")] public static extern long C2Tuple_OutPointCVec_u8ZZ_get_a(long _owner);
	// struct LDKCVec_u8Z C2Tuple_OutPointCVec_u8ZZ_get_b(LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_get_b")] public static extern long C2Tuple_OutPointCVec_u8ZZ_get_b(long _owner);
	// uint32_t C2Tuple_u32CVec_u8ZZ_get_a(LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_get_a")] public static extern int C2Tuple_u32CVec_u8ZZ_get_a(long _owner);
	// struct LDKCVec_u8Z C2Tuple_u32CVec_u8ZZ_get_b(LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_get_b")] public static extern long C2Tuple_u32CVec_u8ZZ_get_b(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_a(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_a")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_a(long _owner);
	// struct LDKCVec_C2Tuple_u32CVec_u8ZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_b(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_b")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_get_b(long _owner);
	// void CResult_NoneReplayEventZ_get_ok(LDKCResult_NoneReplayEventZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_get_ok")] public static extern void CResult_NoneReplayEventZ_get_ok(long _owner);
	// struct LDKReplayEvent CResult_NoneReplayEventZ_get_err(LDKCResult_NoneReplayEventZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_get_err")] public static extern long CResult_NoneReplayEventZ_get_err(long _owner);
	// uint32_t C2Tuple_u32TxOutZ_get_a(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_get_a")] public static extern int C2Tuple_u32TxOutZ_get_a(long _owner);
	// struct LDKTxOut C2Tuple_u32TxOutZ_get_b(LDKC2Tuple_u32TxOutZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_get_b")] public static extern long C2Tuple_u32TxOutZ_get_b(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_a(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_a")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_a(long _owner);
	// struct LDKCVec_C2Tuple_u32TxOutZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_b(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_b")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_get_b(long _owner);
	// bool C2Tuple_boolboolZ_get_a(LDKC2Tuple_boolboolZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_boolboolZ_get_a")] public static extern bool C2Tuple_boolboolZ_get_a(long _owner);
	// bool C2Tuple_boolboolZ_get_b(LDKC2Tuple_boolboolZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_boolboolZ_get_b")] public static extern bool C2Tuple_boolboolZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ty_from_ptr")] public static extern long LDKBalance_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_amount_satoshis")] public static extern long LDKBalance_ClaimableOnChannelClose_get_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_transaction_fee_satoshis")] public static extern long LDKBalance_ClaimableOnChannelClose_get_transaction_fee_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_outbound_payment_htlc_rounded_msat")] public static extern long LDKBalance_ClaimableOnChannelClose_get_outbound_payment_htlc_rounded_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_outbound_forwarded_htlc_rounded_msat")] public static extern long LDKBalance_ClaimableOnChannelClose_get_outbound_forwarded_htlc_rounded_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_inbound_claiming_htlc_rounded_msat")] public static extern long LDKBalance_ClaimableOnChannelClose_get_inbound_claiming_htlc_rounded_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableOnChannelClose_get_inbound_htlc_rounded_msat")] public static extern long LDKBalance_ClaimableOnChannelClose_get_inbound_htlc_rounded_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableAwaitingConfirmations_get_amount_satoshis")] public static extern long LDKBalance_ClaimableAwaitingConfirmations_get_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableAwaitingConfirmations_get_confirmation_height")] public static extern int LDKBalance_ClaimableAwaitingConfirmations_get_confirmation_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ClaimableAwaitingConfirmations_get_source")] public static extern BalanceSource LDKBalance_ClaimableAwaitingConfirmations_get_source(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_amount_satoshis")] public static extern long LDKBalance_ContentiousClaimable_get_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_timeout_height")] public static extern int LDKBalance_ContentiousClaimable_get_timeout_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_payment_hash")] public static extern long LDKBalance_ContentiousClaimable_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_ContentiousClaimable_get_payment_preimage")] public static extern long LDKBalance_ContentiousClaimable_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_amount_satoshis")] public static extern long LDKBalance_MaybeTimeoutClaimableHTLC_get_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_claimable_height")] public static extern int LDKBalance_MaybeTimeoutClaimableHTLC_get_claimable_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_payment_hash")] public static extern long LDKBalance_MaybeTimeoutClaimableHTLC_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybeTimeoutClaimableHTLC_get_outbound_payment")] public static extern bool LDKBalance_MaybeTimeoutClaimableHTLC_get_outbound_payment(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_amount_satoshis")] public static extern long LDKBalance_MaybePreimageClaimableHTLC_get_amount_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_expiry_height")] public static extern int LDKBalance_MaybePreimageClaimableHTLC_get_expiry_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_MaybePreimageClaimableHTLC_get_payment_hash")] public static extern long LDKBalance_MaybePreimageClaimableHTLC_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBalance_CounterpartyRevokedOutputClaimable_get_amount_satoshis")] public static extern long LDKBalance_CounterpartyRevokedOutputClaimable_get_amount_satoshis(long ptr);
	// struct LDKThirtyTwoBytes C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_a(LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_a")] public static extern long C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_a(long _owner);
	// struct LDKChannelMonitor C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_b(LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_b")] public static extern long C2Tuple_ThirtyTwoBytesChannelMonitorZ_get_b(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_get_err(long _owner);
	public interface LDKType {
		short type_id();
		long debug_str();
		long write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKType_new")] public static extern long LDKType_new_native(long impl_idx);
	public static long[] LDKType_new(LDKType impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKType_new_native(i);
		ret[1] = i;
		return ret;
	}
	// uint16_t Type_type_id LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_type_id")] public static extern short Type_type_id(long _this_arg);
	// LDKStr Type_debug_str LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_debug_str")] public static extern long Type_debug_str(long _this_arg);
	// LDKCVec_u8Z Type_write LDKType *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_write")] public static extern long Type_write(long _this_arg);
	// struct LDKPublicKey C2Tuple_PublicKeyTypeZ_get_a(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_get_a")] public static extern long C2Tuple_PublicKeyTypeZ_get_a(long _owner);
	// struct LDKType C2Tuple_PublicKeyTypeZ_get_b(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_get_b")] public static extern long C2Tuple_PublicKeyTypeZ_get_b(long _owner);
	public interface LDKOnionMessageContents {
		long tlv_type();
		long msg_type();
		long write();
		long debug_str();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageContents_new")] public static extern long LDKOnionMessageContents_new_native(long impl_idx);
	public static long[] LDKOnionMessageContents_new(LDKOnionMessageContents impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKOnionMessageContents_new_native(i);
		ret[1] = i;
		return ret;
	}
	// uint64_t OnionMessageContents_tlv_type LDKOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_tlv_type")] public static extern long OnionMessageContents_tlv_type(long _this_arg);
	// LDKStr OnionMessageContents_msg_type LDKOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_msg_type")] public static extern long OnionMessageContents_msg_type(long _this_arg);
	// LDKCVec_u8Z OnionMessageContents_write LDKOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_write")] public static extern long OnionMessageContents_write(long _this_arg);
	// LDKStr OnionMessageContents_debug_str LDKOnionMessageContents *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_debug_str")] public static extern long OnionMessageContents_debug_str(long _this_arg);
	// struct LDKOnionMessageContents C2Tuple_OnionMessageContentsResponseInstructionZ_get_a(LDKC2Tuple_OnionMessageContentsResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsResponseInstructionZ_get_a")] public static extern long C2Tuple_OnionMessageContentsResponseInstructionZ_get_a(long _owner);
	// struct LDKResponseInstruction C2Tuple_OnionMessageContentsResponseInstructionZ_get_b(LDKC2Tuple_OnionMessageContentsResponseInstructionZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsResponseInstructionZ_get_b")] public static extern long C2Tuple_OnionMessageContentsResponseInstructionZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ_ty_from_ptr")] public static extern long LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ_Some_get_some")] public static extern long LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OnionMessageContentsZ_ty_from_ptr")] public static extern long LDKCOption_OnionMessageContentsZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OnionMessageContentsZ_Some_get_some")] public static extern long LDKCOption_OnionMessageContentsZ_Some_get_some(long ptr);
	// struct LDKCOption_OnionMessageContentsZ CResult_COption_OnionMessageContentsZDecodeErrorZ_get_ok(LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_get_ok")] public static extern long CResult_COption_OnionMessageContentsZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_OnionMessageContentsZDecodeErrorZ_get_err(LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_get_err")] public static extern long CResult_COption_OnionMessageContentsZDecodeErrorZ_get_err(long _owner);
	// struct LDKOnionMessageContents C2Tuple_OnionMessageContentsMessageSendInstructionsZ_get_a(LDKC2Tuple_OnionMessageContentsMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsMessageSendInstructionsZ_get_a")] public static extern long C2Tuple_OnionMessageContentsMessageSendInstructionsZ_get_a(long _owner);
	// struct LDKMessageSendInstructions C2Tuple_OnionMessageContentsMessageSendInstructionsZ_get_b(LDKC2Tuple_OnionMessageContentsMessageSendInstructionsZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsMessageSendInstructionsZ_get_b")] public static extern long C2Tuple_OnionMessageContentsMessageSendInstructionsZ_get_b(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TypeZ_ty_from_ptr")] public static extern long LDKCOption_TypeZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_TypeZ_Some_get_some")] public static extern long LDKCOption_TypeZ_Some_get_some(long ptr);
	// struct LDKCOption_TypeZ CResult_COption_TypeZDecodeErrorZ_get_ok(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_get_ok")] public static extern long CResult_COption_TypeZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_TypeZDecodeErrorZ_get_err(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_get_err")] public static extern long CResult_COption_TypeZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_SocketAddressZ_ty_from_ptr")] public static extern long LDKCOption_SocketAddressZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_SocketAddressZ_Some_get_some")] public static extern long LDKCOption_SocketAddressZ_Some_get_some(long ptr);
	// struct LDKCVec_u8Z CResult_CVec_u8ZPeerHandleErrorZ_get_ok(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_get_ok")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_get_ok(long _owner);
	// struct LDKPeerHandleError CResult_CVec_u8ZPeerHandleErrorZ_get_err(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_get_err")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_get_err(long _owner);
	// void CResult_NonePeerHandleErrorZ_get_ok(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_get_ok")] public static extern void CResult_NonePeerHandleErrorZ_get_ok(long _owner);
	// struct LDKPeerHandleError CResult_NonePeerHandleErrorZ_get_err(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_get_err")] public static extern long CResult_NonePeerHandleErrorZ_get_err(long _owner);
	// bool CResult_boolPeerHandleErrorZ_get_ok(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_get_ok")] public static extern bool CResult_boolPeerHandleErrorZ_get_ok(long _owner);
	// struct LDKPeerHandleError CResult_boolPeerHandleErrorZ_get_err(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_get_err")] public static extern long CResult_boolPeerHandleErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_ty_from_ptr")] public static extern long LDKGraphSyncError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_DecodeError_get_decode_error")] public static extern long LDKGraphSyncError_DecodeError_get_decode_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGraphSyncError_LightningError_get_lightning_error")] public static extern long LDKGraphSyncError_LightningError_get_lightning_error(long ptr);
	// uint32_t CResult_u32GraphSyncErrorZ_get_ok(LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_get_ok")] public static extern int CResult_u32GraphSyncErrorZ_get_ok(long _owner);
	// struct LDKGraphSyncError CResult_u32GraphSyncErrorZ_get_err(LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_get_err")] public static extern long CResult_u32GraphSyncErrorZ_get_err(long _owner);
	// struct LDKCVec_u8Z CResult_CVec_u8ZIOErrorZ_get_ok(LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_get_ok")] public static extern long CResult_CVec_u8ZIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_CVec_u8ZIOErrorZ_get_err(LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_get_err")] public static extern IOError CResult_CVec_u8ZIOErrorZ_get_err(long _owner);
	// struct LDKCVec_StrZ CResult_CVec_StrZIOErrorZ_get_ok(LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_get_ok")] public static extern long CResult_CVec_StrZIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_CVec_StrZIOErrorZ_get_err(LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_get_err")] public static extern IOError CResult_CVec_StrZIOErrorZ_get_err(long _owner);
	// struct LDKStr C3Tuple_StrStrStrZ_get_a(LDKC3Tuple_StrStrStrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_StrStrStrZ_get_a")] public static extern long C3Tuple_StrStrStrZ_get_a(long _owner);
	// struct LDKStr C3Tuple_StrStrStrZ_get_b(LDKC3Tuple_StrStrStrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_StrStrStrZ_get_b")] public static extern long C3Tuple_StrStrStrZ_get_b(long _owner);
	// struct LDKStr C3Tuple_StrStrStrZ_get_c(LDKC3Tuple_StrStrStrZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_StrStrStrZ_get_c")] public static extern long C3Tuple_StrStrStrZ_get_c(long _owner);
	// struct LDKCVec_C3Tuple_StrStrStrZZ CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_get_ok(LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_get_ok")] public static extern long CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_get_err(LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_get_err")] public static extern IOError CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_get_err(long _owner);
	// struct LDKCVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_ok(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_ok")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_err(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_err")] public static extern IOError CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_get_err(long _owner);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_ok(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_err(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_err")] public static extern IOError CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_get_err(long _owner);
	// struct LDKMonitorName CResult_MonitorNameIOErrorZ_get_ok(LDKCResult_MonitorNameIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MonitorNameIOErrorZ_get_ok")] public static extern long CResult_MonitorNameIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_MonitorNameIOErrorZ_get_err(LDKCResult_MonitorNameIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MonitorNameIOErrorZ_get_err")] public static extern IOError CResult_MonitorNameIOErrorZ_get_err(long _owner);
	// struct LDKUpdateName CResult_UpdateNameIOErrorZ_get_ok(LDKCResult_UpdateNameIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateNameIOErrorZ_get_ok")] public static extern long CResult_UpdateNameIOErrorZ_get_ok(long _owner);
	// enum LDKIOError CResult_UpdateNameIOErrorZ_get_err(LDKCResult_UpdateNameIOErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateNameIOErrorZ_get_err")] public static extern IOError CResult_UpdateNameIOErrorZ_get_err(long _owner);
	// struct LDKInvoiceRequest CResult_InvoiceRequestBolt12SemanticErrorZ_get_ok(LDKCResult_InvoiceRequestBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_get_ok")] public static extern long CResult_InvoiceRequestBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_InvoiceRequestBolt12SemanticErrorZ_get_err(LDKCResult_InvoiceRequestBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_InvoiceRequestBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKInvoiceWithExplicitSigningPubkeyBuilder CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok(LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok")] public static extern long CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_get_err(LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKVerifiedInvoiceRequest CResult_VerifiedInvoiceRequestNoneZ_get_ok(LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_get_ok")] public static extern long CResult_VerifiedInvoiceRequestNoneZ_get_ok(long _owner);
	// void CResult_VerifiedInvoiceRequestNoneZ_get_err(LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_get_err")] public static extern void CResult_VerifiedInvoiceRequestNoneZ_get_err(long _owner);
	// struct LDKInvoiceWithDerivedSigningPubkeyBuilder CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok(LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok")] public static extern long CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt12SemanticError CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_get_err(LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_get_err")] public static extern Bolt12SemanticError CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_get_err(long _owner);
	// struct LDKInvoiceRequest CResult_InvoiceRequestDecodeErrorZ_get_ok(LDKCResult_InvoiceRequestDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_get_ok")] public static extern long CResult_InvoiceRequestDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InvoiceRequestDecodeErrorZ_get_err(LDKCResult_InvoiceRequestDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_get_err")] public static extern long CResult_InvoiceRequestDecodeErrorZ_get_err(long _owner);
	// struct LDKInvoiceRequestFields CResult_InvoiceRequestFieldsDecodeErrorZ_get_ok(LDKCResult_InvoiceRequestFieldsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_get_ok")] public static extern long CResult_InvoiceRequestFieldsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InvoiceRequestFieldsDecodeErrorZ_get_err(LDKCResult_InvoiceRequestFieldsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_get_err")] public static extern long CResult_InvoiceRequestFieldsDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ECDSASignatureZ_ty_from_ptr")] public static extern long LDKCOption_ECDSASignatureZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ECDSASignatureZ_Some_get_some")] public static extern long LDKCOption_ECDSASignatureZ_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_i64Z_ty_from_ptr")] public static extern long LDKCOption_i64Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_i64Z_Some_get_some")] public static extern long LDKCOption_i64Z_Some_get_some(long ptr);
	// struct LDKSocketAddress CResult_SocketAddressDecodeErrorZ_get_ok(LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_get_ok")] public static extern long CResult_SocketAddressDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_SocketAddressDecodeErrorZ_get_err(LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_get_err")] public static extern long CResult_SocketAddressDecodeErrorZ_get_err(long _owner);
	// struct LDKSocketAddress CResult_SocketAddressSocketAddressParseErrorZ_get_ok(LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_get_ok")] public static extern long CResult_SocketAddressSocketAddressParseErrorZ_get_ok(long _owner);
	// enum LDKSocketAddressParseError CResult_SocketAddressSocketAddressParseErrorZ_get_err(LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_get_err")] public static extern SocketAddressParseError CResult_SocketAddressSocketAddressParseErrorZ_get_err(long _owner);
	// struct LDKAcceptChannel CResult_AcceptChannelDecodeErrorZ_get_ok(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_get_ok")] public static extern long CResult_AcceptChannelDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_AcceptChannelDecodeErrorZ_get_err(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_get_err")] public static extern long CResult_AcceptChannelDecodeErrorZ_get_err(long _owner);
	// struct LDKAcceptChannelV2 CResult_AcceptChannelV2DecodeErrorZ_get_ok(LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_get_ok")] public static extern long CResult_AcceptChannelV2DecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_AcceptChannelV2DecodeErrorZ_get_err(LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_get_err")] public static extern long CResult_AcceptChannelV2DecodeErrorZ_get_err(long _owner);
	// struct LDKStfu CResult_StfuDecodeErrorZ_get_ok(LDKCResult_StfuDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_get_ok")] public static extern long CResult_StfuDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_StfuDecodeErrorZ_get_err(LDKCResult_StfuDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_get_err")] public static extern long CResult_StfuDecodeErrorZ_get_err(long _owner);
	// struct LDKSpliceInit CResult_SpliceInitDecodeErrorZ_get_ok(LDKCResult_SpliceInitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_get_ok")] public static extern long CResult_SpliceInitDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_SpliceInitDecodeErrorZ_get_err(LDKCResult_SpliceInitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_get_err")] public static extern long CResult_SpliceInitDecodeErrorZ_get_err(long _owner);
	// struct LDKSpliceAck CResult_SpliceAckDecodeErrorZ_get_ok(LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_get_ok")] public static extern long CResult_SpliceAckDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_SpliceAckDecodeErrorZ_get_err(LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_get_err")] public static extern long CResult_SpliceAckDecodeErrorZ_get_err(long _owner);
	// struct LDKSpliceLocked CResult_SpliceLockedDecodeErrorZ_get_ok(LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_get_ok")] public static extern long CResult_SpliceLockedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_SpliceLockedDecodeErrorZ_get_err(LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_get_err")] public static extern long CResult_SpliceLockedDecodeErrorZ_get_err(long _owner);
	// struct LDKTxAddInput CResult_TxAddInputDecodeErrorZ_get_ok(LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_get_ok")] public static extern long CResult_TxAddInputDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxAddInputDecodeErrorZ_get_err(LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_get_err")] public static extern long CResult_TxAddInputDecodeErrorZ_get_err(long _owner);
	// struct LDKTxAddOutput CResult_TxAddOutputDecodeErrorZ_get_ok(LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_get_ok")] public static extern long CResult_TxAddOutputDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxAddOutputDecodeErrorZ_get_err(LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_get_err")] public static extern long CResult_TxAddOutputDecodeErrorZ_get_err(long _owner);
	// struct LDKTxRemoveInput CResult_TxRemoveInputDecodeErrorZ_get_ok(LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_get_ok")] public static extern long CResult_TxRemoveInputDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxRemoveInputDecodeErrorZ_get_err(LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_get_err")] public static extern long CResult_TxRemoveInputDecodeErrorZ_get_err(long _owner);
	// struct LDKTxRemoveOutput CResult_TxRemoveOutputDecodeErrorZ_get_ok(LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_get_ok")] public static extern long CResult_TxRemoveOutputDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxRemoveOutputDecodeErrorZ_get_err(LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_get_err")] public static extern long CResult_TxRemoveOutputDecodeErrorZ_get_err(long _owner);
	// struct LDKTxComplete CResult_TxCompleteDecodeErrorZ_get_ok(LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_get_ok")] public static extern long CResult_TxCompleteDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxCompleteDecodeErrorZ_get_err(LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_get_err")] public static extern long CResult_TxCompleteDecodeErrorZ_get_err(long _owner);
	// struct LDKTxSignatures CResult_TxSignaturesDecodeErrorZ_get_ok(LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_get_ok")] public static extern long CResult_TxSignaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxSignaturesDecodeErrorZ_get_err(LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_get_err")] public static extern long CResult_TxSignaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKTxInitRbf CResult_TxInitRbfDecodeErrorZ_get_ok(LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_get_ok")] public static extern long CResult_TxInitRbfDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxInitRbfDecodeErrorZ_get_err(LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_get_err")] public static extern long CResult_TxInitRbfDecodeErrorZ_get_err(long _owner);
	// struct LDKTxAckRbf CResult_TxAckRbfDecodeErrorZ_get_ok(LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_get_ok")] public static extern long CResult_TxAckRbfDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxAckRbfDecodeErrorZ_get_err(LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_get_err")] public static extern long CResult_TxAckRbfDecodeErrorZ_get_err(long _owner);
	// struct LDKTxAbort CResult_TxAbortDecodeErrorZ_get_ok(LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_get_ok")] public static extern long CResult_TxAbortDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxAbortDecodeErrorZ_get_err(LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_get_err")] public static extern long CResult_TxAbortDecodeErrorZ_get_err(long _owner);
	// struct LDKAnnouncementSignatures CResult_AnnouncementSignaturesDecodeErrorZ_get_ok(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_get_ok")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_AnnouncementSignaturesDecodeErrorZ_get_err(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_get_err")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelReestablish CResult_ChannelReestablishDecodeErrorZ_get_ok(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_get_ok")] public static extern long CResult_ChannelReestablishDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelReestablishDecodeErrorZ_get_err(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_get_err")] public static extern long CResult_ChannelReestablishDecodeErrorZ_get_err(long _owner);
	// struct LDKClosingSigned CResult_ClosingSignedDecodeErrorZ_get_ok(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_get_ok")] public static extern long CResult_ClosingSignedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ClosingSignedDecodeErrorZ_get_err(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_get_err")] public static extern long CResult_ClosingSignedDecodeErrorZ_get_err(long _owner);
	// struct LDKClosingSignedFeeRange CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_get_err(long _owner);
	// struct LDKCommitmentSignedBatch CResult_CommitmentSignedBatchDecodeErrorZ_get_ok(LDKCResult_CommitmentSignedBatchDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_get_ok")] public static extern long CResult_CommitmentSignedBatchDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CommitmentSignedBatchDecodeErrorZ_get_err(LDKCResult_CommitmentSignedBatchDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_get_err")] public static extern long CResult_CommitmentSignedBatchDecodeErrorZ_get_err(long _owner);
	// struct LDKCommitmentSigned CResult_CommitmentSignedDecodeErrorZ_get_ok(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_get_ok")] public static extern long CResult_CommitmentSignedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CommitmentSignedDecodeErrorZ_get_err(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_get_err")] public static extern long CResult_CommitmentSignedDecodeErrorZ_get_err(long _owner);
	// struct LDKFundingCreated CResult_FundingCreatedDecodeErrorZ_get_ok(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_get_ok")] public static extern long CResult_FundingCreatedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FundingCreatedDecodeErrorZ_get_err(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_get_err")] public static extern long CResult_FundingCreatedDecodeErrorZ_get_err(long _owner);
	// struct LDKFundingSigned CResult_FundingSignedDecodeErrorZ_get_ok(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_get_ok")] public static extern long CResult_FundingSignedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FundingSignedDecodeErrorZ_get_err(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_get_err")] public static extern long CResult_FundingSignedDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelReady CResult_ChannelReadyDecodeErrorZ_get_ok(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_get_ok")] public static extern long CResult_ChannelReadyDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelReadyDecodeErrorZ_get_err(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_get_err")] public static extern long CResult_ChannelReadyDecodeErrorZ_get_err(long _owner);
	// struct LDKInit CResult_InitDecodeErrorZ_get_ok(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_get_ok")] public static extern long CResult_InitDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InitDecodeErrorZ_get_err(LDKCResult_InitDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_get_err")] public static extern long CResult_InitDecodeErrorZ_get_err(long _owner);
	// struct LDKOpenChannel CResult_OpenChannelDecodeErrorZ_get_ok(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_get_ok")] public static extern long CResult_OpenChannelDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OpenChannelDecodeErrorZ_get_err(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_get_err")] public static extern long CResult_OpenChannelDecodeErrorZ_get_err(long _owner);
	// struct LDKOpenChannelV2 CResult_OpenChannelV2DecodeErrorZ_get_ok(LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_get_ok")] public static extern long CResult_OpenChannelV2DecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OpenChannelV2DecodeErrorZ_get_err(LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_get_err")] public static extern long CResult_OpenChannelV2DecodeErrorZ_get_err(long _owner);
	// struct LDKRevokeAndACK CResult_RevokeAndACKDecodeErrorZ_get_ok(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_get_ok")] public static extern long CResult_RevokeAndACKDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RevokeAndACKDecodeErrorZ_get_err(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_get_err")] public static extern long CResult_RevokeAndACKDecodeErrorZ_get_err(long _owner);
	// struct LDKShutdown CResult_ShutdownDecodeErrorZ_get_ok(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_get_ok")] public static extern long CResult_ShutdownDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ShutdownDecodeErrorZ_get_err(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_get_err")] public static extern long CResult_ShutdownDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFailHTLC CResult_UpdateFailHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFailHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFailMalformedHTLC CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFee CResult_UpdateFeeDecodeErrorZ_get_ok(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFeeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFeeDecodeErrorZ_get_err(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_get_err")] public static extern long CResult_UpdateFeeDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateFulfillHTLC CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateFulfillHTLCDecodeErrorZ_get_err(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKOnionPacket CResult_OnionPacketDecodeErrorZ_get_ok(LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_get_ok")] public static extern long CResult_OnionPacketDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OnionPacketDecodeErrorZ_get_err(LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_get_err")] public static extern long CResult_OnionPacketDecodeErrorZ_get_err(long _owner);
	// struct LDKUpdateAddHTLC CResult_UpdateAddHTLCDecodeErrorZ_get_ok(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_get_ok")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UpdateAddHTLCDecodeErrorZ_get_err(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_get_err")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_get_err(long _owner);
	// struct LDKOnionMessage CResult_OnionMessageDecodeErrorZ_get_ok(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_get_ok")] public static extern long CResult_OnionMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OnionMessageDecodeErrorZ_get_err(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_get_err")] public static extern long CResult_OnionMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKFinalOnionHopData CResult_FinalOnionHopDataDecodeErrorZ_get_ok(LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_get_ok")] public static extern long CResult_FinalOnionHopDataDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FinalOnionHopDataDecodeErrorZ_get_err(LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_get_err")] public static extern long CResult_FinalOnionHopDataDecodeErrorZ_get_err(long _owner);
	// struct LDKPing CResult_PingDecodeErrorZ_get_ok(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_get_ok")] public static extern long CResult_PingDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PingDecodeErrorZ_get_err(LDKCResult_PingDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_get_err")] public static extern long CResult_PingDecodeErrorZ_get_err(long _owner);
	// struct LDKPong CResult_PongDecodeErrorZ_get_ok(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_get_ok")] public static extern long CResult_PongDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PongDecodeErrorZ_get_err(LDKCResult_PongDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_get_err")] public static extern long CResult_PongDecodeErrorZ_get_err(long _owner);
	// struct LDKUnsignedChannelAnnouncement CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelAnnouncement CResult_ChannelAnnouncementDecodeErrorZ_get_ok(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelAnnouncementDecodeErrorZ_get_err(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKUnsignedChannelUpdate CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UnsignedChannelUpdateDecodeErrorZ_get_err(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_get_err")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelUpdate CResult_ChannelUpdateDecodeErrorZ_get_ok(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_get_ok")] public static extern long CResult_ChannelUpdateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelUpdateDecodeErrorZ_get_err(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_get_err")] public static extern long CResult_ChannelUpdateDecodeErrorZ_get_err(long _owner);
	// struct LDKErrorMessage CResult_ErrorMessageDecodeErrorZ_get_ok(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_get_ok")] public static extern long CResult_ErrorMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ErrorMessageDecodeErrorZ_get_err(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_get_err")] public static extern long CResult_ErrorMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKWarningMessage CResult_WarningMessageDecodeErrorZ_get_ok(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_get_ok")] public static extern long CResult_WarningMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_WarningMessageDecodeErrorZ_get_err(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_get_err")] public static extern long CResult_WarningMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKUnsignedNodeAnnouncement CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeAnnouncement CResult_NodeAnnouncementDecodeErrorZ_get_ok(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_get_ok")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeAnnouncementDecodeErrorZ_get_err(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_get_err")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_get_err(long _owner);
	// struct LDKQueryShortChannelIds CResult_QueryShortChannelIdsDecodeErrorZ_get_ok(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_get_ok")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_QueryShortChannelIdsDecodeErrorZ_get_err(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_get_err")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_get_err(long _owner);
	// struct LDKReplyShortChannelIdsEnd CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_get_err(long _owner);
	// struct LDKQueryChannelRange CResult_QueryChannelRangeDecodeErrorZ_get_ok(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_get_ok")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_QueryChannelRangeDecodeErrorZ_get_err(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_get_err")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_get_err(long _owner);
	// struct LDKReplyChannelRange CResult_ReplyChannelRangeDecodeErrorZ_get_ok(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_get_ok")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ReplyChannelRangeDecodeErrorZ_get_err(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_get_err")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_get_err(long _owner);
	// struct LDKGossipTimestampFilter CResult_GossipTimestampFilterDecodeErrorZ_get_ok(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_get_ok")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_GossipTimestampFilterDecodeErrorZ_get_err(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_get_err")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_InboundHTLCStateDetailsZ_ty_from_ptr")] public static extern long LDKCOption_InboundHTLCStateDetailsZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_InboundHTLCStateDetailsZ_Some_get_some")] public static extern InboundHTLCStateDetails LDKCOption_InboundHTLCStateDetailsZ_Some_get_some(long ptr);
	// struct LDKCOption_InboundHTLCStateDetailsZ CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_get_ok(LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_get_ok")] public static extern long CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_get_err(LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_get_err")] public static extern long CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_get_err(long _owner);
	// struct LDKInboundHTLCDetails CResult_InboundHTLCDetailsDecodeErrorZ_get_ok(LDKCResult_InboundHTLCDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_get_ok")] public static extern long CResult_InboundHTLCDetailsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InboundHTLCDetailsDecodeErrorZ_get_err(LDKCResult_InboundHTLCDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_get_err")] public static extern long CResult_InboundHTLCDetailsDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OutboundHTLCStateDetailsZ_ty_from_ptr")] public static extern long LDKCOption_OutboundHTLCStateDetailsZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_OutboundHTLCStateDetailsZ_Some_get_some")] public static extern OutboundHTLCStateDetails LDKCOption_OutboundHTLCStateDetailsZ_Some_get_some(long ptr);
	// struct LDKCOption_OutboundHTLCStateDetailsZ CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_get_ok(LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_get_ok")] public static extern long CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_get_err(LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_get_err")] public static extern long CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_get_err(long _owner);
	// struct LDKOutboundHTLCDetails CResult_OutboundHTLCDetailsDecodeErrorZ_get_ok(LDKCResult_OutboundHTLCDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_get_ok")] public static extern long CResult_OutboundHTLCDetailsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OutboundHTLCDetailsDecodeErrorZ_get_err(LDKCResult_OutboundHTLCDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_get_err")] public static extern long CResult_OutboundHTLCDetailsDecodeErrorZ_get_err(long _owner);
	// struct LDKCounterpartyForwardingInfo CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelCounterparty CResult_ChannelCounterpartyDecodeErrorZ_get_ok(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_get_ok")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelCounterpartyDecodeErrorZ_get_err(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_get_err")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ChannelShutdownStateZ_ty_from_ptr")] public static extern long LDKCOption_ChannelShutdownStateZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ChannelShutdownStateZ_Some_get_some")] public static extern ChannelShutdownState LDKCOption_ChannelShutdownStateZ_Some_get_some(long ptr);
	// struct LDKChannelDetails CResult_ChannelDetailsDecodeErrorZ_get_ok(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_get_ok")] public static extern long CResult_ChannelDetailsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelDetailsDecodeErrorZ_get_err(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_get_err")] public static extern long CResult_ChannelDetailsDecodeErrorZ_get_err(long _owner);
	// enum LDKChannelShutdownState CResult_ChannelShutdownStateDecodeErrorZ_get_ok(LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_get_ok")] public static extern ChannelShutdownState CResult_ChannelShutdownStateDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelShutdownStateDecodeErrorZ_get_err(LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_get_err")] public static extern long CResult_ChannelShutdownStateDecodeErrorZ_get_err(long _owner);
	// struct LDKRawLSPSMessage CResult_RawLSPSMessageDecodeErrorZ_get_ok(LDKCResult_RawLSPSMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_get_ok")] public static extern long CResult_RawLSPSMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RawLSPSMessageDecodeErrorZ_get_err(LDKCResult_RawLSPSMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_get_err")] public static extern long CResult_RawLSPSMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKLSPSDateTime CResult_LSPSDateTimeNoneZ_get_ok(LDKCResult_LSPSDateTimeNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_get_ok")] public static extern long CResult_LSPSDateTimeNoneZ_get_ok(long _owner);
	// void CResult_LSPSDateTimeNoneZ_get_err(LDKCResult_LSPSDateTimeNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_get_err")] public static extern void CResult_LSPSDateTimeNoneZ_get_err(long _owner);
	// struct LDKHeldHtlcAvailable CResult_HeldHtlcAvailableDecodeErrorZ_get_ok(LDKCResult_HeldHtlcAvailableDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_get_ok")] public static extern long CResult_HeldHtlcAvailableDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HeldHtlcAvailableDecodeErrorZ_get_err(LDKCResult_HeldHtlcAvailableDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_get_err")] public static extern long CResult_HeldHtlcAvailableDecodeErrorZ_get_err(long _owner);
	// struct LDKReleaseHeldHtlc CResult_ReleaseHeldHtlcDecodeErrorZ_get_ok(LDKCResult_ReleaseHeldHtlcDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_get_ok")] public static extern long CResult_ReleaseHeldHtlcDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ReleaseHeldHtlcDecodeErrorZ_get_err(LDKCResult_ReleaseHeldHtlcDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_get_err")] public static extern long CResult_ReleaseHeldHtlcDecodeErrorZ_get_err(long _owner);
	// struct LDKAsyncPaymentsMessage CResult_AsyncPaymentsMessageDecodeErrorZ_get_ok(LDKCResult_AsyncPaymentsMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_get_ok")] public static extern long CResult_AsyncPaymentsMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_AsyncPaymentsMessageDecodeErrorZ_get_err(LDKCResult_AsyncPaymentsMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_get_err")] public static extern long CResult_AsyncPaymentsMessageDecodeErrorZ_get_err(long _owner);
	// struct LDKOffersMessage CResult_OffersMessageDecodeErrorZ_get_ok(LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_get_ok")] public static extern long CResult_OffersMessageDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OffersMessageDecodeErrorZ_get_err(LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_get_err")] public static extern long CResult_OffersMessageDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCClaimZ_ty_from_ptr")] public static extern long LDKCOption_HTLCClaimZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCClaimZ_Some_get_some")] public static extern HTLCClaim LDKCOption_HTLCClaimZ_Some_get_some(long ptr);
	// struct LDKCounterpartyCommitmentSecrets CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_get_err(long _owner);
	// struct LDKTxCreationKeys CResult_TxCreationKeysDecodeErrorZ_get_ok(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_get_ok")] public static extern long CResult_TxCreationKeysDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TxCreationKeysDecodeErrorZ_get_err(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_get_err")] public static extern long CResult_TxCreationKeysDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelPublicKeys CResult_ChannelPublicKeysDecodeErrorZ_get_ok(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_get_ok")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelPublicKeysDecodeErrorZ_get_err(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_get_err")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_get_err(long _owner);
	// struct LDKHTLCOutputInCommitment CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_get_err(long _owner);
	// struct LDKCounterpartyChannelTransactionParameters CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelTransactionParameters CResult_ChannelTransactionParametersDecodeErrorZ_get_ok(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_get_ok")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelTransactionParametersDecodeErrorZ_get_err(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_get_err")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_get_err(long _owner);
	// struct LDKHolderCommitmentTransaction CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HolderCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_get_err(long _owner);
	// struct LDKBuiltCommitmentTransaction CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_get_err(long _owner);
	// struct LDKTrustedClosingTransaction CResult_TrustedClosingTransactionNoneZ_get_ok(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_get_ok")] public static extern long CResult_TrustedClosingTransactionNoneZ_get_ok(long _owner);
	// void CResult_TrustedClosingTransactionNoneZ_get_err(LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_get_err")] public static extern void CResult_TrustedClosingTransactionNoneZ_get_err(long _owner);
	// struct LDKCommitmentTransaction CResult_CommitmentTransactionDecodeErrorZ_get_ok(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_get_ok")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_CommitmentTransactionDecodeErrorZ_get_err(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_get_err")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_get_err(long _owner);
	// struct LDKTrustedCommitmentTransaction CResult_TrustedCommitmentTransactionNoneZ_get_ok(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_get_ok")] public static extern long CResult_TrustedCommitmentTransactionNoneZ_get_ok(long _owner);
	// void CResult_TrustedCommitmentTransactionNoneZ_get_err(LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_get_err")] public static extern void CResult_TrustedCommitmentTransactionNoneZ_get_err(long _owner);
	// struct LDKCVec_ECDSASignatureZ CResult_CVec_ECDSASignatureZNoneZ_get_ok(LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_get_ok")] public static extern long CResult_CVec_ECDSASignatureZNoneZ_get_ok(long _owner);
	// void CResult_CVec_ECDSASignatureZNoneZ_get_err(LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_get_err")] public static extern void CResult_CVec_ECDSASignatureZNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_usizeZ_ty_from_ptr")] public static extern long LDKCOption_usizeZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_usizeZ_Some_get_some")] public static extern long LDKCOption_usizeZ_Some_get_some(long ptr);
	// struct LDKShutdownScript CResult_ShutdownScriptDecodeErrorZ_get_ok(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_get_ok")] public static extern long CResult_ShutdownScriptDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ShutdownScriptDecodeErrorZ_get_err(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_get_err")] public static extern long CResult_ShutdownScriptDecodeErrorZ_get_err(long _owner);
	// struct LDKShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_get_ok(long _owner);
	// struct LDKInvalidShutdownScript CResult_ShutdownScriptInvalidShutdownScriptZ_get_err(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_get_err")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_get_err(long _owner);
	// uint64_t CResult_u64NoneZ_get_ok(LDKCResult_u64NoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_get_ok")] public static extern long CResult_u64NoneZ_get_ok(long _owner);
	// void CResult_u64NoneZ_get_err(LDKCResult_u64NoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_get_err")] public static extern void CResult_u64NoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFundingInfo_ty_from_ptr")] public static extern long LDKFundingInfo_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFundingInfo_Tx_get_transaction")] public static extern long LDKFundingInfo_Tx_get_transaction(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFundingInfo_OutPoint_get_outpoint")] public static extern long LDKFundingInfo_OutPoint_get_outpoint(long ptr);
	// struct LDKFundingInfo CResult_FundingInfoDecodeErrorZ_get_ok(LDKCResult_FundingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_get_ok")] public static extern long CResult_FundingInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_FundingInfoDecodeErrorZ_get_err(LDKCResult_FundingInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_get_err")] public static extern long CResult_FundingInfoDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_ty_from_ptr")] public static extern long LDKPaymentPurpose_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt11InvoicePayment_get_payment_preimage")] public static extern long LDKPaymentPurpose_Bolt11InvoicePayment_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt11InvoicePayment_get_payment_secret")] public static extern long LDKPaymentPurpose_Bolt11InvoicePayment_get_payment_secret(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt12OfferPayment_get_payment_preimage")] public static extern long LDKPaymentPurpose_Bolt12OfferPayment_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt12OfferPayment_get_payment_secret")] public static extern long LDKPaymentPurpose_Bolt12OfferPayment_get_payment_secret(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt12OfferPayment_get_payment_context")] public static extern long LDKPaymentPurpose_Bolt12OfferPayment_get_payment_context(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt12RefundPayment_get_payment_preimage")] public static extern long LDKPaymentPurpose_Bolt12RefundPayment_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt12RefundPayment_get_payment_secret")] public static extern long LDKPaymentPurpose_Bolt12RefundPayment_get_payment_secret(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_Bolt12RefundPayment_get_payment_context")] public static extern long LDKPaymentPurpose_Bolt12RefundPayment_get_payment_context(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPaymentPurpose_SpontaneousPayment_get_spontaneous_payment")] public static extern long LDKPaymentPurpose_SpontaneousPayment_get_spontaneous_payment(long ptr);
	// struct LDKPaymentPurpose CResult_PaymentPurposeDecodeErrorZ_get_ok(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_get_ok")] public static extern long CResult_PaymentPurposeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PaymentPurposeDecodeErrorZ_get_err(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_get_err")] public static extern long CResult_PaymentPurposeDecodeErrorZ_get_err(long _owner);
	// struct LDKClaimedHTLC CResult_ClaimedHTLCDecodeErrorZ_get_ok(LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_get_ok")] public static extern long CResult_ClaimedHTLCDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ClaimedHTLCDecodeErrorZ_get_err(LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_get_err")] public static extern long CResult_ClaimedHTLCDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPathFailure_ty_from_ptr")] public static extern long LDKPathFailure_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPathFailure_InitialSend_get_err")] public static extern long LDKPathFailure_InitialSend_get_err(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPathFailure_OnPath_get_network_update")] public static extern long LDKPathFailure_OnPath_get_network_update(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PathFailureZ_ty_from_ptr")] public static extern long LDKCOption_PathFailureZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PathFailureZ_Some_get_some")] public static extern long LDKCOption_PathFailureZ_Some_get_some(long ptr);
	// struct LDKCOption_PathFailureZ CResult_COption_PathFailureZDecodeErrorZ_get_ok(LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_get_ok")] public static extern long CResult_COption_PathFailureZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_PathFailureZDecodeErrorZ_get_err(LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_get_err")] public static extern long CResult_COption_PathFailureZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ClosureReasonZ_ty_from_ptr")] public static extern long LDKCOption_ClosureReasonZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_ClosureReasonZ_Some_get_some")] public static extern long LDKCOption_ClosureReasonZ_Some_get_some(long ptr);
	// struct LDKCOption_ClosureReasonZ CResult_COption_ClosureReasonZDecodeErrorZ_get_ok(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_get_ok")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_ClosureReasonZDecodeErrorZ_get_err(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_get_err")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_ty_from_ptr")] public static extern long LDKHTLCDestination_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_NextHopChannel_get_node_id")] public static extern long LDKHTLCDestination_NextHopChannel_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_NextHopChannel_get_channel_id")] public static extern long LDKHTLCDestination_NextHopChannel_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_UnknownNextHop_get_requested_forward_scid")] public static extern long LDKHTLCDestination_UnknownNextHop_get_requested_forward_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_InvalidForward_get_requested_forward_scid")] public static extern long LDKHTLCDestination_InvalidForward_get_requested_forward_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKHTLCDestination_FailedPayment_get_payment_hash")] public static extern long LDKHTLCDestination_FailedPayment_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCDestinationZ_ty_from_ptr")] public static extern long LDKCOption_HTLCDestinationZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_HTLCDestinationZ_Some_get_some")] public static extern long LDKCOption_HTLCDestinationZ_Some_get_some(long ptr);
	// struct LDKCOption_HTLCDestinationZ CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_HTLCDestinationZDecodeErrorZ_get_err(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_get_err")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PaymentFailureReasonZ_ty_from_ptr")] public static extern long LDKCOption_PaymentFailureReasonZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_PaymentFailureReasonZ_Some_get_some")] public static extern PaymentFailureReason LDKCOption_PaymentFailureReasonZ_Some_get_some(long ptr);
	// struct LDKCOption_PaymentFailureReasonZ CResult_COption_PaymentFailureReasonZDecodeErrorZ_get_ok(LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_get_ok")] public static extern long CResult_COption_PaymentFailureReasonZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_PaymentFailureReasonZDecodeErrorZ_get_err(LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_get_err")] public static extern long CResult_COption_PaymentFailureReasonZDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_U128Z_ty_from_ptr")] public static extern long LDKCOption_U128Z_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_U128Z_Some_get_some")] public static extern long LDKCOption_U128Z_Some_get_some(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKInboundChannelFunds_ty_from_ptr")] public static extern long LDKInboundChannelFunds_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKInboundChannelFunds_PushMsat_get_push_msat")] public static extern long LDKInboundChannelFunds_PushMsat_get_push_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ty_from_ptr")] public static extern long LDKBumpTransactionEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_channel_id")] public static extern long LDKBumpTransactionEvent_ChannelClose_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_counterparty_node_id")] public static extern long LDKBumpTransactionEvent_ChannelClose_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_claim_id")] public static extern long LDKBumpTransactionEvent_ChannelClose_get_claim_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_package_target_feerate_sat_per_1000_weight")] public static extern int LDKBumpTransactionEvent_ChannelClose_get_package_target_feerate_sat_per_1000_weight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_commitment_tx")] public static extern long LDKBumpTransactionEvent_ChannelClose_get_commitment_tx(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_commitment_tx_fee_satoshis")] public static extern long LDKBumpTransactionEvent_ChannelClose_get_commitment_tx_fee_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_anchor_descriptor")] public static extern long LDKBumpTransactionEvent_ChannelClose_get_anchor_descriptor(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_ChannelClose_get_pending_htlcs")] public static extern long LDKBumpTransactionEvent_ChannelClose_get_pending_htlcs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_channel_id")] public static extern long LDKBumpTransactionEvent_HTLCResolution_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_counterparty_node_id")] public static extern long LDKBumpTransactionEvent_HTLCResolution_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_claim_id")] public static extern long LDKBumpTransactionEvent_HTLCResolution_get_claim_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_target_feerate_sat_per_1000_weight")] public static extern int LDKBumpTransactionEvent_HTLCResolution_get_target_feerate_sat_per_1000_weight(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_htlc_descriptors")] public static extern long LDKBumpTransactionEvent_HTLCResolution_get_htlc_descriptors(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBumpTransactionEvent_HTLCResolution_get_tx_lock_time")] public static extern int LDKBumpTransactionEvent_HTLCResolution_get_tx_lock_time(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ty_from_ptr")] public static extern long LDKEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_temporary_channel_id")] public static extern long LDKEvent_FundingGenerationReady_get_temporary_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_counterparty_node_id")] public static extern long LDKEvent_FundingGenerationReady_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_channel_value_satoshis")] public static extern long LDKEvent_FundingGenerationReady_get_channel_value_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_output_script")] public static extern long LDKEvent_FundingGenerationReady_get_output_script(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingGenerationReady_get_user_channel_id")] public static extern long LDKEvent_FundingGenerationReady_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingTxBroadcastSafe_get_channel_id")] public static extern long LDKEvent_FundingTxBroadcastSafe_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingTxBroadcastSafe_get_user_channel_id")] public static extern long LDKEvent_FundingTxBroadcastSafe_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingTxBroadcastSafe_get_funding_txo")] public static extern long LDKEvent_FundingTxBroadcastSafe_get_funding_txo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingTxBroadcastSafe_get_counterparty_node_id")] public static extern long LDKEvent_FundingTxBroadcastSafe_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_FundingTxBroadcastSafe_get_former_temporary_channel_id")] public static extern long LDKEvent_FundingTxBroadcastSafe_get_former_temporary_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_receiver_node_id")] public static extern long LDKEvent_PaymentClaimable_get_receiver_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_payment_hash")] public static extern long LDKEvent_PaymentClaimable_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_onion_fields")] public static extern long LDKEvent_PaymentClaimable_get_onion_fields(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_amount_msat")] public static extern long LDKEvent_PaymentClaimable_get_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_counterparty_skimmed_fee_msat")] public static extern long LDKEvent_PaymentClaimable_get_counterparty_skimmed_fee_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_purpose")] public static extern long LDKEvent_PaymentClaimable_get_purpose(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_via_channel_id")] public static extern long LDKEvent_PaymentClaimable_get_via_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_via_user_channel_id")] public static extern long LDKEvent_PaymentClaimable_get_via_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_claim_deadline")] public static extern long LDKEvent_PaymentClaimable_get_claim_deadline(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimable_get_payment_id")] public static extern long LDKEvent_PaymentClaimable_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_receiver_node_id")] public static extern long LDKEvent_PaymentClaimed_get_receiver_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_payment_hash")] public static extern long LDKEvent_PaymentClaimed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_amount_msat")] public static extern long LDKEvent_PaymentClaimed_get_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_purpose")] public static extern long LDKEvent_PaymentClaimed_get_purpose(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_htlcs")] public static extern long LDKEvent_PaymentClaimed_get_htlcs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_sender_intended_total_msat")] public static extern long LDKEvent_PaymentClaimed_get_sender_intended_total_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_onion_fields")] public static extern long LDKEvent_PaymentClaimed_get_onion_fields(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentClaimed_get_payment_id")] public static extern long LDKEvent_PaymentClaimed_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ConnectionNeeded_get_node_id")] public static extern long LDKEvent_ConnectionNeeded_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ConnectionNeeded_get_addresses")] public static extern long LDKEvent_ConnectionNeeded_get_addresses(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_InvoiceReceived_get_payment_id")] public static extern long LDKEvent_InvoiceReceived_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_InvoiceReceived_get_invoice")] public static extern long LDKEvent_InvoiceReceived_get_invoice(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_InvoiceReceived_get_context")] public static extern long LDKEvent_InvoiceReceived_get_context(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_InvoiceReceived_get_responder")] public static extern long LDKEvent_InvoiceReceived_get_responder(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_id")] public static extern long LDKEvent_PaymentSent_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_preimage")] public static extern long LDKEvent_PaymentSent_get_payment_preimage(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_payment_hash")] public static extern long LDKEvent_PaymentSent_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentSent_get_fee_paid_msat")] public static extern long LDKEvent_PaymentSent_get_fee_paid_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_payment_id")] public static extern long LDKEvent_PaymentFailed_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_payment_hash")] public static extern long LDKEvent_PaymentFailed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentFailed_get_reason")] public static extern long LDKEvent_PaymentFailed_get_reason(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_payment_id")] public static extern long LDKEvent_PaymentPathSuccessful_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_payment_hash")] public static extern long LDKEvent_PaymentPathSuccessful_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathSuccessful_get_path")] public static extern long LDKEvent_PaymentPathSuccessful_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_id")] public static extern long LDKEvent_PaymentPathFailed_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_hash")] public static extern long LDKEvent_PaymentPathFailed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_payment_failed_permanently")] public static extern bool LDKEvent_PaymentPathFailed_get_payment_failed_permanently(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_failure")] public static extern long LDKEvent_PaymentPathFailed_get_failure(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_path")] public static extern long LDKEvent_PaymentPathFailed_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentPathFailed_get_short_channel_id")] public static extern long LDKEvent_PaymentPathFailed_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_payment_id")] public static extern long LDKEvent_ProbeSuccessful_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_payment_hash")] public static extern long LDKEvent_ProbeSuccessful_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeSuccessful_get_path")] public static extern long LDKEvent_ProbeSuccessful_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_payment_id")] public static extern long LDKEvent_ProbeFailed_get_payment_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_payment_hash")] public static extern long LDKEvent_ProbeFailed_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_path")] public static extern long LDKEvent_ProbeFailed_get_path(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ProbeFailed_get_short_channel_id")] public static extern long LDKEvent_ProbeFailed_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PendingHTLCsForwardable_get_time_forwardable")] public static extern long LDKEvent_PendingHTLCsForwardable_get_time_forwardable(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_intercept_id")] public static extern long LDKEvent_HTLCIntercepted_get_intercept_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_requested_next_hop_scid")] public static extern long LDKEvent_HTLCIntercepted_get_requested_next_hop_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_payment_hash")] public static extern long LDKEvent_HTLCIntercepted_get_payment_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_inbound_amount_msat")] public static extern long LDKEvent_HTLCIntercepted_get_inbound_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCIntercepted_get_expected_outbound_amount_msat")] public static extern long LDKEvent_HTLCIntercepted_get_expected_outbound_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_SpendableOutputs_get_outputs")] public static extern long LDKEvent_SpendableOutputs_get_outputs(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_SpendableOutputs_get_channel_id")] public static extern long LDKEvent_SpendableOutputs_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_prev_channel_id")] public static extern long LDKEvent_PaymentForwarded_get_prev_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_next_channel_id")] public static extern long LDKEvent_PaymentForwarded_get_next_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_prev_user_channel_id")] public static extern long LDKEvent_PaymentForwarded_get_prev_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_next_user_channel_id")] public static extern long LDKEvent_PaymentForwarded_get_next_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_prev_node_id")] public static extern long LDKEvent_PaymentForwarded_get_prev_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_next_node_id")] public static extern long LDKEvent_PaymentForwarded_get_next_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_total_fee_earned_msat")] public static extern long LDKEvent_PaymentForwarded_get_total_fee_earned_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_skimmed_fee_msat")] public static extern long LDKEvent_PaymentForwarded_get_skimmed_fee_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_claim_from_onchain_tx")] public static extern bool LDKEvent_PaymentForwarded_get_claim_from_onchain_tx(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_PaymentForwarded_get_outbound_amount_forwarded_msat")] public static extern long LDKEvent_PaymentForwarded_get_outbound_amount_forwarded_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_channel_id")] public static extern long LDKEvent_ChannelPending_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_user_channel_id")] public static extern long LDKEvent_ChannelPending_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_former_temporary_channel_id")] public static extern long LDKEvent_ChannelPending_get_former_temporary_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_counterparty_node_id")] public static extern long LDKEvent_ChannelPending_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_funding_txo")] public static extern long LDKEvent_ChannelPending_get_funding_txo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelPending_get_channel_type")] public static extern long LDKEvent_ChannelPending_get_channel_type(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_channel_id")] public static extern long LDKEvent_ChannelReady_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_user_channel_id")] public static extern long LDKEvent_ChannelReady_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_counterparty_node_id")] public static extern long LDKEvent_ChannelReady_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelReady_get_channel_type")] public static extern long LDKEvent_ChannelReady_get_channel_type(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_channel_id")] public static extern long LDKEvent_ChannelClosed_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_user_channel_id")] public static extern long LDKEvent_ChannelClosed_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_reason")] public static extern long LDKEvent_ChannelClosed_get_reason(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_counterparty_node_id")] public static extern long LDKEvent_ChannelClosed_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_channel_capacity_sats")] public static extern long LDKEvent_ChannelClosed_get_channel_capacity_sats(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_channel_funding_txo")] public static extern long LDKEvent_ChannelClosed_get_channel_funding_txo(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_ChannelClosed_get_last_local_balance_msat")] public static extern long LDKEvent_ChannelClosed_get_last_local_balance_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_DiscardFunding_get_channel_id")] public static extern long LDKEvent_DiscardFunding_get_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_DiscardFunding_get_funding_info")] public static extern long LDKEvent_DiscardFunding_get_funding_info(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_temporary_channel_id")] public static extern long LDKEvent_OpenChannelRequest_get_temporary_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_counterparty_node_id")] public static extern long LDKEvent_OpenChannelRequest_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_funding_satoshis")] public static extern long LDKEvent_OpenChannelRequest_get_funding_satoshis(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_channel_negotiation_type")] public static extern long LDKEvent_OpenChannelRequest_get_channel_negotiation_type(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_channel_type")] public static extern long LDKEvent_OpenChannelRequest_get_channel_type(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_is_announced")] public static extern bool LDKEvent_OpenChannelRequest_get_is_announced(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OpenChannelRequest_get_params")] public static extern long LDKEvent_OpenChannelRequest_get_params(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCHandlingFailed_get_prev_channel_id")] public static extern long LDKEvent_HTLCHandlingFailed_get_prev_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_HTLCHandlingFailed_get_failed_next_destination")] public static extern long LDKEvent_HTLCHandlingFailed_get_failed_next_destination(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_BumpTransaction_get_bump_transaction")] public static extern long LDKEvent_BumpTransaction_get_bump_transaction(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OnionMessageIntercepted_get_peer_node_id")] public static extern long LDKEvent_OnionMessageIntercepted_get_peer_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OnionMessageIntercepted_get_message")] public static extern long LDKEvent_OnionMessageIntercepted_get_message(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEvent_OnionMessagePeerConnected_get_peer_node_id")] public static extern long LDKEvent_OnionMessagePeerConnected_get_peer_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_EventZ_ty_from_ptr")] public static extern long LDKCOption_EventZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_EventZ_Some_get_some")] public static extern long LDKCOption_EventZ_Some_get_some(long ptr);
	// struct LDKCOption_EventZ CResult_COption_EventZDecodeErrorZ_get_ok(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_get_ok")] public static extern long CResult_COption_EventZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_COption_EventZDecodeErrorZ_get_err(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_get_err")] public static extern long CResult_COption_EventZDecodeErrorZ_get_err(long _owner);
	// struct LDKNonce CResult_NonceDecodeErrorZ_get_ok(LDKCResult_NonceDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_get_ok")] public static extern long CResult_NonceDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NonceDecodeErrorZ_get_err(LDKCResult_NonceDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_get_err")] public static extern long CResult_NonceDecodeErrorZ_get_err(long _owner);
	// enum LDKSiPrefix CResult_SiPrefixBolt11ParseErrorZ_get_ok(LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_get_ok")] public static extern SiPrefix CResult_SiPrefixBolt11ParseErrorZ_get_ok(long _owner);
	// struct LDKBolt11ParseError CResult_SiPrefixBolt11ParseErrorZ_get_err(LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_get_err")] public static extern long CResult_SiPrefixBolt11ParseErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_ty_from_ptr")] public static extern long LDKParseOrSemanticError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_ParseError_get_parse_error")] public static extern long LDKParseOrSemanticError_ParseError_get_parse_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParseOrSemanticError_SemanticError_get_semantic_error")] public static extern Bolt11SemanticError LDKParseOrSemanticError_SemanticError_get_semantic_error(long ptr);
	// struct LDKBolt11Invoice CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_ok(LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_ok")] public static extern long CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_ok(long _owner);
	// struct LDKParseOrSemanticError CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_err(LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_err")] public static extern long CResult_Bolt11InvoiceParseOrSemanticErrorZ_get_err(long _owner);
	// struct LDKSignedRawBolt11Invoice CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_ok(LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_ok")] public static extern long CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_ok(long _owner);
	// struct LDKBolt11ParseError CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_err(LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_err")] public static extern long CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_get_err(long _owner);
	// struct LDKRawBolt11Invoice C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_a(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_a")] public static extern long C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_a(long _owner);
	// struct LDKThirtyTwoBytes C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_b(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_b")] public static extern long C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_b(long _owner);
	// struct LDKBolt11InvoiceSignature C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_c(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_c")] public static extern long C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_get_c(long _owner);
	// struct LDKPayeePubKey CResult_PayeePubKeySecp256k1ErrorZ_get_ok(LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_get_ok")] public static extern long CResult_PayeePubKeySecp256k1ErrorZ_get_ok(long _owner);
	// enum LDKSecp256k1Error CResult_PayeePubKeySecp256k1ErrorZ_get_err(LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_get_err")] public static extern Secp256k1Error CResult_PayeePubKeySecp256k1ErrorZ_get_err(long _owner);
	// struct LDKPositiveTimestamp CResult_PositiveTimestampCreationErrorZ_get_ok(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_get_ok")] public static extern long CResult_PositiveTimestampCreationErrorZ_get_ok(long _owner);
	// enum LDKCreationError CResult_PositiveTimestampCreationErrorZ_get_err(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_get_err")] public static extern CreationError CResult_PositiveTimestampCreationErrorZ_get_err(long _owner);
	// void CResult_NoneBolt11SemanticErrorZ_get_ok(LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_get_ok")] public static extern void CResult_NoneBolt11SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt11SemanticError CResult_NoneBolt11SemanticErrorZ_get_err(LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_get_err")] public static extern Bolt11SemanticError CResult_NoneBolt11SemanticErrorZ_get_err(long _owner);
	// struct LDKBolt11Invoice CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_ok(LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_ok")] public static extern long CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_ok(long _owner);
	// enum LDKBolt11SemanticError CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_err(LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_err")] public static extern Bolt11SemanticError CResult_Bolt11InvoiceBolt11SemanticErrorZ_get_err(long _owner);
	// struct LDKDescription CResult_DescriptionCreationErrorZ_get_ok(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_get_ok")] public static extern long CResult_DescriptionCreationErrorZ_get_ok(long _owner);
	// enum LDKCreationError CResult_DescriptionCreationErrorZ_get_err(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_get_err")] public static extern CreationError CResult_DescriptionCreationErrorZ_get_err(long _owner);
	// struct LDKPrivateRoute CResult_PrivateRouteCreationErrorZ_get_ok(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_get_ok")] public static extern long CResult_PrivateRouteCreationErrorZ_get_ok(long _owner);
	// enum LDKCreationError CResult_PrivateRouteCreationErrorZ_get_err(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_get_err")] public static extern CreationError CResult_PrivateRouteCreationErrorZ_get_err(long _owner);
	// struct LDKOutPoint CResult_OutPointDecodeErrorZ_get_ok(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_get_ok")] public static extern long CResult_OutPointDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OutPointDecodeErrorZ_get_err(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_get_err")] public static extern long CResult_OutPointDecodeErrorZ_get_err(long _owner);
	// struct LDKBigSize CResult_BigSizeDecodeErrorZ_get_ok(LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_get_ok")] public static extern long CResult_BigSizeDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BigSizeDecodeErrorZ_get_err(LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_get_err")] public static extern long CResult_BigSizeDecodeErrorZ_get_err(long _owner);
	// struct LDKUntrustedString CResult_UntrustedStringDecodeErrorZ_get_ok(LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_get_ok")] public static extern long CResult_UntrustedStringDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_UntrustedStringDecodeErrorZ_get_err(LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_get_err")] public static extern long CResult_UntrustedStringDecodeErrorZ_get_err(long _owner);
	// struct LDKHostname CResult_HostnameDecodeErrorZ_get_ok(LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_get_ok")] public static extern long CResult_HostnameDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HostnameDecodeErrorZ_get_err(LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_get_err")] public static extern long CResult_HostnameDecodeErrorZ_get_err(long _owner);
	// struct LDKTransactionU16LenLimited CResult_TransactionU16LenLimitedNoneZ_get_ok(LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_get_ok")] public static extern long CResult_TransactionU16LenLimitedNoneZ_get_ok(long _owner);
	// void CResult_TransactionU16LenLimitedNoneZ_get_err(LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_get_err")] public static extern void CResult_TransactionU16LenLimitedNoneZ_get_err(long _owner);
	// struct LDKTransactionU16LenLimited CResult_TransactionU16LenLimitedDecodeErrorZ_get_ok(LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_get_ok")] public static extern long CResult_TransactionU16LenLimitedDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TransactionU16LenLimitedDecodeErrorZ_get_err(LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_get_err")] public static extern long CResult_TransactionU16LenLimitedDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelId CResult_ChannelIdDecodeErrorZ_get_ok(LDKCResult_ChannelIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_get_ok")] public static extern long CResult_ChannelIdDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelIdDecodeErrorZ_get_err(LDKCResult_ChannelIdDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_get_err")] public static extern long CResult_ChannelIdDecodeErrorZ_get_err(long _owner);
	// struct LDKInitFeatures CResult_InitFeaturesDecodeErrorZ_get_ok(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_InitFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InitFeaturesDecodeErrorZ_get_err(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_get_err")] public static extern long CResult_InitFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelFeatures CResult_ChannelFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_get_err")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKNodeFeatures CResult_NodeFeaturesDecodeErrorZ_get_ok(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_NodeFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_NodeFeaturesDecodeErrorZ_get_err(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_get_err")] public static extern long CResult_NodeFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKBolt11InvoiceFeatures CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_ok(LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_err(LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_err")] public static extern long CResult_Bolt11InvoiceFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKBolt12InvoiceFeatures CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_ok(LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_err(LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_err")] public static extern long CResult_Bolt12InvoiceFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKBlindedHopFeatures CResult_BlindedHopFeaturesDecodeErrorZ_get_ok(LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_BlindedHopFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedHopFeaturesDecodeErrorZ_get_err(LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_get_err")] public static extern long CResult_BlindedHopFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKChannelTypeFeatures CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ChannelTypeFeaturesDecodeErrorZ_get_err(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_get_err")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_get_err(long _owner);
	// struct LDKThirtyTwoBytes C2Tuple__u832u16Z_get_a(LDKC2Tuple__u832u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_get_a")] public static extern long C2Tuple__u832u16Z_get_a(long _owner);
	// uint16_t C2Tuple__u832u16Z_get_b(LDKC2Tuple__u832u16Z *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_get_b")] public static extern short C2Tuple__u832u16Z_get_b(long _owner);
	// struct LDKBlindedPayInfo CResult_BlindedPayInfoDecodeErrorZ_get_ok(LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_get_ok")] public static extern long CResult_BlindedPayInfoDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedPayInfoDecodeErrorZ_get_err(LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_get_err")] public static extern long CResult_BlindedPayInfoDecodeErrorZ_get_err(long _owner);
	// struct LDKBlindedPaymentPath CResult_BlindedPaymentPathNoneZ_get_ok(LDKCResult_BlindedPaymentPathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_get_ok")] public static extern long CResult_BlindedPaymentPathNoneZ_get_ok(long _owner);
	// void CResult_BlindedPaymentPathNoneZ_get_err(LDKCResult_BlindedPaymentPathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_get_err")] public static extern void CResult_BlindedPaymentPathNoneZ_get_err(long _owner);
	// struct LDKPaymentRelay CResult_PaymentRelayDecodeErrorZ_get_ok(LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_get_ok")] public static extern long CResult_PaymentRelayDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PaymentRelayDecodeErrorZ_get_err(LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_get_err")] public static extern long CResult_PaymentRelayDecodeErrorZ_get_err(long _owner);
	// struct LDKPaymentConstraints CResult_PaymentConstraintsDecodeErrorZ_get_ok(LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_get_ok")] public static extern long CResult_PaymentConstraintsDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PaymentConstraintsDecodeErrorZ_get_err(LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_get_err")] public static extern long CResult_PaymentConstraintsDecodeErrorZ_get_err(long _owner);
	// struct LDKPaymentContext CResult_PaymentContextDecodeErrorZ_get_ok(LDKCResult_PaymentContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_get_ok")] public static extern long CResult_PaymentContextDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_PaymentContextDecodeErrorZ_get_err(LDKCResult_PaymentContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_get_err")] public static extern long CResult_PaymentContextDecodeErrorZ_get_err(long _owner);
	// struct LDKBolt12OfferContext CResult_Bolt12OfferContextDecodeErrorZ_get_ok(LDKCResult_Bolt12OfferContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_get_ok")] public static extern long CResult_Bolt12OfferContextDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_Bolt12OfferContextDecodeErrorZ_get_err(LDKCResult_Bolt12OfferContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_get_err")] public static extern long CResult_Bolt12OfferContextDecodeErrorZ_get_err(long _owner);
	// struct LDKBolt12RefundContext CResult_Bolt12RefundContextDecodeErrorZ_get_ok(LDKCResult_Bolt12RefundContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_get_ok")] public static extern long CResult_Bolt12RefundContextDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_Bolt12RefundContextDecodeErrorZ_get_err(LDKCResult_Bolt12RefundContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_get_err")] public static extern long CResult_Bolt12RefundContextDecodeErrorZ_get_err(long _owner);
	// struct LDKResponder CResult_ResponderDecodeErrorZ_get_ok(LDKCResult_ResponderDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_get_ok")] public static extern long CResult_ResponderDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_ResponderDecodeErrorZ_get_err(LDKCResult_ResponderDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_get_err")] public static extern long CResult_ResponderDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MessageContextZ_ty_from_ptr")] public static extern long LDKCOption_MessageContextZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_MessageContextZ_Some_get_some")] public static extern long LDKCOption_MessageContextZ_Some_get_some(long ptr);
	// struct LDKPublicKey C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_a(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_a")] public static extern long C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_a(long _owner);
	// struct LDKOnionMessage C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_b(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_b")] public static extern long C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_b(long _owner);
	// struct LDKCOption_CVec_SocketAddressZZ C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_c(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_c")] public static extern long C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_get_c(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_ty_from_ptr")] public static extern long LDKSendError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_Secp256k1_get_secp256k1")] public static extern Secp256k1Error LDKSendError_Secp256k1_get_secp256k1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendError_InvalidFirstHop_get_invalid_first_hop")] public static extern long LDKSendError_InvalidFirstHop_get_invalid_first_hop(long ptr);
	// struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_ok(LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_ok")] public static extern long CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_ok(long _owner);
	// struct LDKSendError CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_err(LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_err")] public static extern long CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNextMessageHop_ty_from_ptr")] public static extern long LDKNextMessageHop_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNextMessageHop_NodeId_get_node_id")] public static extern long LDKNextMessageHop_NodeId_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNextMessageHop_ShortChannelId_get_short_channel_id")] public static extern long LDKNextMessageHop_ShortChannelId_get_short_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParsedOnionMessageContents_ty_from_ptr")] public static extern long LDKParsedOnionMessageContents_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParsedOnionMessageContents_Offers_get_offers")] public static extern long LDKParsedOnionMessageContents_Offers_get_offers(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParsedOnionMessageContents_DNSResolver_get_dns_resolver")] public static extern long LDKParsedOnionMessageContents_DNSResolver_get_dns_resolver(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKParsedOnionMessageContents_Custom_get_custom")] public static extern long LDKParsedOnionMessageContents_Custom_get_custom(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_ty_from_ptr")] public static extern long LDKPeeledOnion_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Forward_get__0")] public static extern long LDKPeeledOnion_Forward_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Forward_get__1")] public static extern long LDKPeeledOnion_Forward_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Receive_get__0")] public static extern long LDKPeeledOnion_Receive_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Receive_get__1")] public static extern long LDKPeeledOnion_Receive_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPeeledOnion_Receive_get__2")] public static extern long LDKPeeledOnion_Receive_get__2(long ptr);
	// struct LDKPeeledOnion CResult_PeeledOnionNoneZ_get_ok(LDKCResult_PeeledOnionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_get_ok")] public static extern long CResult_PeeledOnionNoneZ_get_ok(long _owner);
	// void CResult_PeeledOnionNoneZ_get_err(LDKCResult_PeeledOnionNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_get_err")] public static extern void CResult_PeeledOnionNoneZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendSuccess_ty_from_ptr")] public static extern long LDKSendSuccess_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSendSuccess_BufferedAwaitingConnection_get_buffered_awaiting_connection")] public static extern long LDKSendSuccess_BufferedAwaitingConnection_get_buffered_awaiting_connection(long ptr);
	// struct LDKSendSuccess CResult_SendSuccessSendErrorZ_get_ok(LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_get_ok")] public static extern long CResult_SendSuccessSendErrorZ_get_ok(long _owner);
	// struct LDKSendError CResult_SendSuccessSendErrorZ_get_err(LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_get_err")] public static extern long CResult_SendSuccessSendErrorZ_get_err(long _owner);
	// void CResult_NoneSendErrorZ_get_ok(LDKCResult_NoneSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_get_ok")] public static extern void CResult_NoneSendErrorZ_get_ok(long _owner);
	// struct LDKSendError CResult_NoneSendErrorZ_get_err(LDKCResult_NoneSendErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_get_err")] public static extern long CResult_NoneSendErrorZ_get_err(long _owner);
	// struct LDKBlindedHop CResult_BlindedHopDecodeErrorZ_get_ok(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_get_ok")] public static extern long CResult_BlindedHopDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedHopDecodeErrorZ_get_err(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_get_err")] public static extern long CResult_BlindedHopDecodeErrorZ_get_err(long _owner);
	// struct LDKInvoiceError CResult_InvoiceErrorDecodeErrorZ_get_ok(LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_get_ok")] public static extern long CResult_InvoiceErrorDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_InvoiceErrorDecodeErrorZ_get_err(LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_get_err")] public static extern long CResult_InvoiceErrorDecodeErrorZ_get_err(long _owner);
	// struct LDKTrackedSpendableOutput CResult_TrackedSpendableOutputDecodeErrorZ_get_ok(LDKCResult_TrackedSpendableOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_get_ok")] public static extern long CResult_TrackedSpendableOutputDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_TrackedSpendableOutputDecodeErrorZ_get_err(LDKCResult_TrackedSpendableOutputDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_get_err")] public static extern long CResult_TrackedSpendableOutputDecodeErrorZ_get_err(long _owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_ty_from_ptr")] public static extern long LDKOutputSpendStatus_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingInitialBroadcast_get_delayed_until_height")] public static extern long LDKOutputSpendStatus_PendingInitialBroadcast_get_delayed_until_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingFirstConfirmation_get_first_broadcast_hash")] public static extern long LDKOutputSpendStatus_PendingFirstConfirmation_get_first_broadcast_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingFirstConfirmation_get_latest_broadcast_height")] public static extern int LDKOutputSpendStatus_PendingFirstConfirmation_get_latest_broadcast_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingFirstConfirmation_get_latest_spending_tx")] public static extern long LDKOutputSpendStatus_PendingFirstConfirmation_get_latest_spending_tx(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingThresholdConfirmations_get_first_broadcast_hash")] public static extern long LDKOutputSpendStatus_PendingThresholdConfirmations_get_first_broadcast_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingThresholdConfirmations_get_latest_broadcast_height")] public static extern int LDKOutputSpendStatus_PendingThresholdConfirmations_get_latest_broadcast_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingThresholdConfirmations_get_latest_spending_tx")] public static extern long LDKOutputSpendStatus_PendingThresholdConfirmations_get_latest_spending_tx(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingThresholdConfirmations_get_confirmation_height")] public static extern int LDKOutputSpendStatus_PendingThresholdConfirmations_get_confirmation_height(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpendStatus_PendingThresholdConfirmations_get_confirmation_hash")] public static extern long LDKOutputSpendStatus_PendingThresholdConfirmations_get_confirmation_hash(long ptr);
	// struct LDKOutputSpendStatus CResult_OutputSpendStatusDecodeErrorZ_get_ok(LDKCResult_OutputSpendStatusDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_get_ok")] public static extern long CResult_OutputSpendStatusDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OutputSpendStatusDecodeErrorZ_get_err(LDKCResult_OutputSpendStatusDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_get_err")] public static extern long CResult_OutputSpendStatusDecodeErrorZ_get_err(long _owner);
	public interface LDKFilter {
		void register_tx(long txid, long script_pubkey);
		void register_output(long output);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFilter_new")] public static extern long LDKFilter_new_native(long impl_idx);
	public static long[] LDKFilter_new(LDKFilter impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKFilter_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void Filter_register_tx LDKFilter *NONNULL_PTR this_arg, const uint8_t (*txid)[32], struct LDKu8slice script_pubkey
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_register_tx")] public static extern void Filter_register_tx(long _this_arg, long _txid, long _script_pubkey);
	// void Filter_register_output LDKFilter *NONNULL_PTR this_arg, struct LDKWatchedOutput output
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_register_output")] public static extern void Filter_register_output(long _this_arg, long _output);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_FilterZ_ty_from_ptr")] public static extern long LDKCOption_FilterZ_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCOption_FilterZ_Some_get_some")] public static extern long LDKCOption_FilterZ_Some_get_some(long ptr);
	public interface LDKChangeDestinationSource {
		long get_change_destination_script();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKChangeDestinationSource_new")] public static extern long LDKChangeDestinationSource_new_native(long impl_idx);
	public static long[] LDKChangeDestinationSource_new(LDKChangeDestinationSource impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKChangeDestinationSource_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CVec_u8ZNoneZ ChangeDestinationSource_get_change_destination_script LDKChangeDestinationSource *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChangeDestinationSource_get_change_destination_script")] public static extern long ChangeDestinationSource_get_change_destination_script(long _this_arg);
	public interface LDKKVStore {
		long read(long primary_namespace, long secondary_namespace, long key);
		long write(long primary_namespace, long secondary_namespace, long key, long buf);
		long remove(long primary_namespace, long secondary_namespace, long key, bool lazy);
		long list(long primary_namespace, long secondary_namespace);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKKVStore_new")] public static extern long LDKKVStore_new_native(long impl_idx);
	public static long[] LDKKVStore_new(LDKKVStore impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKKVStore_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CVec_u8ZIOErrorZ KVStore_read LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace, struct LDKStr key
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_read")] public static extern long KVStore_read(long _this_arg, long _primary_namespace, long _secondary_namespace, long _key);
	// LDKCResult_NoneIOErrorZ KVStore_write LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace, struct LDKStr key, struct LDKu8slice buf
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_write")] public static extern long KVStore_write(long _this_arg, long _primary_namespace, long _secondary_namespace, long _key, long _buf);
	// LDKCResult_NoneIOErrorZ KVStore_remove LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace, struct LDKStr key, bool lazy
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_remove")] public static extern long KVStore_remove(long _this_arg, long _primary_namespace, long _secondary_namespace, long _key, bool _lazy);
	// LDKCResult_CVec_StrZIOErrorZ KVStore_list LDKKVStore *NONNULL_PTR this_arg, struct LDKStr primary_namespace, struct LDKStr secondary_namespace
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_list")] public static extern long KVStore_list(long _this_arg, long _primary_namespace, long _secondary_namespace);
	public interface LDKOutputSpender {
		long spend_spendable_outputs(long descriptors, long outputs, long change_destination_script, int feerate_sat_per_1000_weight, long locktime);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOutputSpender_new")] public static extern long LDKOutputSpender_new_native(long impl_idx);
	public static long[] LDKOutputSpender_new(LDKOutputSpender impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKOutputSpender_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_TransactionNoneZ OutputSpender_spend_spendable_outputs LDKOutputSpender *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_TxOutZ outputs, struct LDKCVec_u8Z change_destination_script, uint32_t feerate_sat_per_1000_weight, struct LDKCOption_u32Z locktime
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpender_spend_spendable_outputs")] public static extern long OutputSpender_spend_spendable_outputs(long _this_arg, long _descriptors, long _outputs, long _change_destination_script, int _feerate_sat_per_1000_weight, long _locktime);
	// struct LDKOutputSweeper CResult_OutputSweeperDecodeErrorZ_get_ok(LDKCResult_OutputSweeperDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSweeperDecodeErrorZ_get_ok")] public static extern long CResult_OutputSweeperDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OutputSweeperDecodeErrorZ_get_err(LDKCResult_OutputSweeperDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSweeperDecodeErrorZ_get_err")] public static extern long CResult_OutputSweeperDecodeErrorZ_get_err(long _owner);
	// struct LDKBestBlock C2Tuple_BestBlockOutputSweeperZ_get_a(LDKC2Tuple_BestBlockOutputSweeperZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BestBlockOutputSweeperZ_get_a")] public static extern long C2Tuple_BestBlockOutputSweeperZ_get_a(long _owner);
	// struct LDKOutputSweeper C2Tuple_BestBlockOutputSweeperZ_get_b(LDKC2Tuple_BestBlockOutputSweeperZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BestBlockOutputSweeperZ_get_b")] public static extern long C2Tuple_BestBlockOutputSweeperZ_get_b(long _owner);
	// struct LDKC2Tuple_BestBlockOutputSweeperZ *CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_get_ok(LDKCResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_get_ok")] public static extern long CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_get_err(LDKCResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_get_err")] public static extern long CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_get_err(long _owner);
	// struct LDKDelayedPaymentBasepoint CResult_DelayedPaymentBasepointDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_get_ok")] public static extern long CResult_DelayedPaymentBasepointDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_DelayedPaymentBasepointDecodeErrorZ_get_err(LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_get_err")] public static extern long CResult_DelayedPaymentBasepointDecodeErrorZ_get_err(long _owner);
	// struct LDKDelayedPaymentKey CResult_DelayedPaymentKeyDecodeErrorZ_get_ok(LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_get_ok")] public static extern long CResult_DelayedPaymentKeyDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_DelayedPaymentKeyDecodeErrorZ_get_err(LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_get_err")] public static extern long CResult_DelayedPaymentKeyDecodeErrorZ_get_err(long _owner);
	// struct LDKHtlcBasepoint CResult_HtlcBasepointDecodeErrorZ_get_ok(LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_get_ok")] public static extern long CResult_HtlcBasepointDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HtlcBasepointDecodeErrorZ_get_err(LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_get_err")] public static extern long CResult_HtlcBasepointDecodeErrorZ_get_err(long _owner);
	// struct LDKHtlcKey CResult_HtlcKeyDecodeErrorZ_get_ok(LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_get_ok")] public static extern long CResult_HtlcKeyDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_HtlcKeyDecodeErrorZ_get_err(LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_get_err")] public static extern long CResult_HtlcKeyDecodeErrorZ_get_err(long _owner);
	// struct LDKRevocationBasepoint CResult_RevocationBasepointDecodeErrorZ_get_ok(LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_get_ok")] public static extern long CResult_RevocationBasepointDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RevocationBasepointDecodeErrorZ_get_err(LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_get_err")] public static extern long CResult_RevocationBasepointDecodeErrorZ_get_err(long _owner);
	// struct LDKRevocationKey CResult_RevocationKeyDecodeErrorZ_get_ok(LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_get_ok")] public static extern long CResult_RevocationKeyDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_RevocationKeyDecodeErrorZ_get_err(LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_get_err")] public static extern long CResult_RevocationKeyDecodeErrorZ_get_err(long _owner);
	// struct LDKLockedChannelMonitor CResult_LockedChannelMonitorNoneZ_get_ok(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_get_ok")] public static extern long CResult_LockedChannelMonitorNoneZ_get_ok(long _owner);
	// void CResult_LockedChannelMonitorNoneZ_get_err(LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_get_err")] public static extern void CResult_LockedChannelMonitorNoneZ_get_err(long _owner);
	// struct LDKOutPoint C2Tuple_OutPointChannelIdZ_get_a(LDKC2Tuple_OutPointChannelIdZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointChannelIdZ_get_a")] public static extern long C2Tuple_OutPointChannelIdZ_get_a(long _owner);
	// struct LDKChannelId C2Tuple_OutPointChannelIdZ_get_b(LDKC2Tuple_OutPointChannelIdZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointChannelIdZ_get_b")] public static extern long C2Tuple_OutPointChannelIdZ_get_b(long _owner);
	// struct LDKOutPoint C2Tuple_OutPointCVec_u64ZZ_get_a(LDKC2Tuple_OutPointCVec_u64ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u64ZZ_get_a")] public static extern long C2Tuple_OutPointCVec_u64ZZ_get_a(long _owner);
	// struct LDKCVec_u64Z C2Tuple_OutPointCVec_u64ZZ_get_b(LDKC2Tuple_OutPointCVec_u64ZZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u64ZZ_get_b")] public static extern long C2Tuple_OutPointCVec_u64ZZ_get_b(long _owner);
	// struct LDKBlindedMessagePath CResult_BlindedMessagePathDecodeErrorZ_get_ok(LDKCResult_BlindedMessagePathDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_get_ok")] public static extern long CResult_BlindedMessagePathDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_BlindedMessagePathDecodeErrorZ_get_err(LDKCResult_BlindedMessagePathDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_get_err")] public static extern long CResult_BlindedMessagePathDecodeErrorZ_get_err(long _owner);
	// struct LDKBlindedMessagePath CResult_BlindedMessagePathNoneZ_get_ok(LDKCResult_BlindedMessagePathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_get_ok")] public static extern long CResult_BlindedMessagePathNoneZ_get_ok(long _owner);
	// void CResult_BlindedMessagePathNoneZ_get_err(LDKCResult_BlindedMessagePathNoneZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_get_err")] public static extern void CResult_BlindedMessagePathNoneZ_get_err(long _owner);
	// struct LDKMessageContext CResult_MessageContextDecodeErrorZ_get_ok(LDKCResult_MessageContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_get_ok")] public static extern long CResult_MessageContextDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_MessageContextDecodeErrorZ_get_err(LDKCResult_MessageContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_get_err")] public static extern long CResult_MessageContextDecodeErrorZ_get_err(long _owner);
	// struct LDKOffersContext CResult_OffersContextDecodeErrorZ_get_ok(LDKCResult_OffersContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_get_ok")] public static extern long CResult_OffersContextDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_OffersContextDecodeErrorZ_get_err(LDKCResult_OffersContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_get_err")] public static extern long CResult_OffersContextDecodeErrorZ_get_err(long _owner);
	// struct LDKAsyncPaymentsContext CResult_AsyncPaymentsContextDecodeErrorZ_get_ok(LDKCResult_AsyncPaymentsContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_get_ok")] public static extern long CResult_AsyncPaymentsContextDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_AsyncPaymentsContextDecodeErrorZ_get_err(LDKCResult_AsyncPaymentsContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_get_err")] public static extern long CResult_AsyncPaymentsContextDecodeErrorZ_get_err(long _owner);
	// struct LDKDNSResolverContext CResult_DNSResolverContextDecodeErrorZ_get_ok(LDKCResult_DNSResolverContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_get_ok")] public static extern long CResult_DNSResolverContextDecodeErrorZ_get_ok(long _owner);
	// struct LDKDecodeError CResult_DNSResolverContextDecodeErrorZ_get_err(LDKCResult_DNSResolverContextDecodeErrorZ *NONNULL_PTR owner);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_get_err")] public static extern long CResult_DNSResolverContextDecodeErrorZ_get_err(long _owner);
	public interface LDKMigratableKVStore {
		long list_all_keys();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMigratableKVStore_new")] public static extern long LDKMigratableKVStore_new_native(long impl_idx, long KVStore);
	public static long[] LDKMigratableKVStore_new(LDKMigratableKVStore impl, long KVStore) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKMigratableKVStore_new_native(i, KVStore);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ MigratableKVStore_list_all_keys LDKMigratableKVStore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MigratableKVStore_list_all_keys")] public static extern long MigratableKVStore_list_all_keys(long _this_arg);
	public interface LDKPersister {
		long persist_manager(long channel_manager);
		long persist_graph(long network_graph);
		long persist_scorer(long scorer);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPersister_new")] public static extern long LDKPersister_new_native(long impl_idx);
	public static long[] LDKPersister_new(LDKPersister impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKPersister_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_NoneIOErrorZ Persister_persist_manager LDKPersister *NONNULL_PTR this_arg, const struct LDKChannelManager *NONNULL_PTR channel_manager
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_manager")] public static extern long Persister_persist_manager(long _this_arg, long _channel_manager);
	// LDKCResult_NoneIOErrorZ Persister_persist_graph LDKPersister *NONNULL_PTR this_arg, const struct LDKNetworkGraph *NONNULL_PTR network_graph
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_graph")] public static extern long Persister_persist_graph(long _this_arg, long _network_graph);
	// LDKCResult_NoneIOErrorZ Persister_persist_scorer LDKPersister *NONNULL_PTR this_arg, const struct LDKWriteableScore *NONNULL_PTR scorer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_persist_scorer")] public static extern long Persister_persist_scorer(long _this_arg, long _scorer);
	public interface LDKPersist {
		ChannelMonitorUpdateStatus persist_new_channel(long channel_funding_outpoint, long monitor);
		ChannelMonitorUpdateStatus update_persisted_channel(long channel_funding_outpoint, long monitor_update, long monitor);
		void archive_persisted_channel(long channel_funding_outpoint);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPersist_new")] public static extern long LDKPersist_new_native(long impl_idx);
	public static long[] LDKPersist_new(LDKPersist impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKPersist_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKChannelMonitorUpdateStatus Persist_persist_new_channel LDKPersist *NONNULL_PTR this_arg, struct LDKOutPoint channel_funding_outpoint, const struct LDKChannelMonitor *NONNULL_PTR monitor
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_persist_new_channel")] public static extern ChannelMonitorUpdateStatus Persist_persist_new_channel(long _this_arg, long _channel_funding_outpoint, long _monitor);
	// LDKChannelMonitorUpdateStatus Persist_update_persisted_channel LDKPersist *NONNULL_PTR this_arg, struct LDKOutPoint channel_funding_outpoint, struct LDKChannelMonitorUpdate monitor_update, const struct LDKChannelMonitor *NONNULL_PTR monitor
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_update_persisted_channel")] public static extern ChannelMonitorUpdateStatus Persist_update_persisted_channel(long _this_arg, long _channel_funding_outpoint, long _monitor_update, long _monitor);
	// void Persist_archive_persisted_channel LDKPersist *NONNULL_PTR this_arg, struct LDKOutPoint channel_funding_outpoint
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_archive_persisted_channel")] public static extern void Persist_archive_persisted_channel(long _this_arg, long _channel_funding_outpoint);
	public interface LDKListen {
		void filtered_block_connected(long header, long txdata, int height);
		void block_connected(long block, int height);
		void block_disconnected(long header, int height);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKListen_new")] public static extern long LDKListen_new_native(long impl_idx);
	public static long[] LDKListen_new(LDKListen impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKListen_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void Listen_filtered_block_connected LDKListen *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_filtered_block_connected")] public static extern void Listen_filtered_block_connected(long _this_arg, long _header, long _txdata, int _height);
	// void Listen_block_connected LDKListen *NONNULL_PTR this_arg, struct LDKu8slice block, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_block_connected")] public static extern void Listen_block_connected(long _this_arg, long _block, int _height);
	// void Listen_block_disconnected LDKListen *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_block_disconnected")] public static extern void Listen_block_disconnected(long _this_arg, long _header, int _height);
	public interface LDKConfirm {
		void transactions_confirmed(long header, long txdata, int height);
		void transaction_unconfirmed(long txid);
		void best_block_updated(long header, int height);
		long get_relevant_txids();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKConfirm_new")] public static extern long LDKConfirm_new_native(long impl_idx);
	public static long[] LDKConfirm_new(LDKConfirm impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKConfirm_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void Confirm_transactions_confirmed LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_transactions_confirmed")] public static extern void Confirm_transactions_confirmed(long _this_arg, long _header, long _txdata, int _height);
	// void Confirm_transaction_unconfirmed LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*txid)[32]
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_transaction_unconfirmed")] public static extern void Confirm_transaction_unconfirmed(long _this_arg, long _txid);
	// void Confirm_best_block_updated LDKConfirm *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_best_block_updated")] public static extern void Confirm_best_block_updated(long _this_arg, long _header, int _height);
	// LDKCVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ Confirm_get_relevant_txids LDKConfirm *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_get_relevant_txids")] public static extern long Confirm_get_relevant_txids(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendingDelay_ty_from_ptr")] public static extern long LDKSpendingDelay_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendingDelay_Relative_get_num_blocks")] public static extern int LDKSpendingDelay_Relative_get_num_blocks(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSpendingDelay_Absolute_get_height")] public static extern int LDKSpendingDelay_Absolute_get_height(long ptr);
	public interface LDKFutureCallback {
		void call();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFutureCallback_new")] public static extern long LDKFutureCallback_new_native(long impl_idx);
	public static long[] LDKFutureCallback_new(LDKFutureCallback impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKFutureCallback_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void FutureCallback_call LDKFutureCallback *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FutureCallback_call")] public static extern void FutureCallback_call(long _this_arg);
	public interface LDKEventHandler {
		long handle_event(long _event);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEventHandler_new")] public static extern long LDKEventHandler_new_native(long impl_idx);
	public static long[] LDKEventHandler_new(LDKEventHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEventHandler_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_NoneReplayEventZ EventHandler_handle_event LDKEventHandler *NONNULL_PTR this_arg, struct LDKEvent event
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventHandler_handle_event")] public static extern long EventHandler_handle_event(long _this_arg, long _event);
	public interface LDKEventsProvider {
		void process_pending_events(long handler);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEventsProvider_new")] public static extern long LDKEventsProvider_new_native(long impl_idx);
	public static long[] LDKEventsProvider_new(LDKEventsProvider impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKEventsProvider_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void EventsProvider_process_pending_events LDKEventsProvider *NONNULL_PTR this_arg, struct LDKEventHandler handler
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventsProvider_process_pending_events")] public static extern void EventsProvider_process_pending_events(long _this_arg, long _handler);
	public interface LDKVerification {
		long hmac_for_offer_payment(long nonce, long expanded_key);
		long verify_for_offer_payment(long hmac, long nonce, long expanded_key);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKVerification_new")] public static extern long LDKVerification_new_native(long impl_idx);
	public static long[] LDKVerification_new(LDKVerification impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKVerification_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKThirtyTwoBytes Verification_hmac_for_offer_payment LDKVerification *NONNULL_PTR this_arg, struct LDKNonce nonce, const struct LDKExpandedKey *NONNULL_PTR expanded_key
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Verification_hmac_for_offer_payment")] public static extern long Verification_hmac_for_offer_payment(long _this_arg, long _nonce, long _expanded_key);
	// LDKCResult_NoneNoneZ Verification_verify_for_offer_payment LDKVerification *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes hmac, struct LDKNonce nonce, const struct LDKExpandedKey *NONNULL_PTR expanded_key
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Verification_verify_for_offer_payment")] public static extern long Verification_verify_for_offer_payment(long _this_arg, long _hmac, long _nonce, long _expanded_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFailureCode_ty_from_ptr")] public static extern long LDKFailureCode_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFailureCode_InvalidOnionPayload_get_invalid_onion_payload")] public static extern long LDKFailureCode_InvalidOnionPayload_get_invalid_onion_payload(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11InvoiceDescription_ty_from_ptr")] public static extern long LDKBolt11InvoiceDescription_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11InvoiceDescription_Direct_get_direct")] public static extern long LDKBolt11InvoiceDescription_Direct_get_direct(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKBolt11InvoiceDescription_Hash_get_hash")] public static extern long LDKBolt11InvoiceDescription_Hash_get_hash(long ptr);
	public interface LDKMessageSendEventsProvider {
		long get_and_clear_pending_msg_events();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKMessageSendEventsProvider_new")] public static extern long LDKMessageSendEventsProvider_new_native(long impl_idx);
	public static long[] LDKMessageSendEventsProvider_new(LDKMessageSendEventsProvider impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKMessageSendEventsProvider_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_MessageSendEventZ MessageSendEventsProvider_get_and_clear_pending_msg_events LDKMessageSendEventsProvider *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEventsProvider_get_and_clear_pending_msg_events")] public static extern long MessageSendEventsProvider_get_and_clear_pending_msg_events(long _this_arg);
	public interface LDKChannelMessageHandler {
		void handle_open_channel(long their_node_id, long msg);
		void handle_open_channel_v2(long their_node_id, long msg);
		void handle_accept_channel(long their_node_id, long msg);
		void handle_accept_channel_v2(long their_node_id, long msg);
		void handle_funding_created(long their_node_id, long msg);
		void handle_funding_signed(long their_node_id, long msg);
		void handle_channel_ready(long their_node_id, long msg);
		void handle_shutdown(long their_node_id, long msg);
		void handle_closing_signed(long their_node_id, long msg);
		void handle_stfu(long their_node_id, long msg);
		void handle_tx_add_input(long their_node_id, long msg);
		void handle_tx_add_output(long their_node_id, long msg);
		void handle_tx_remove_input(long their_node_id, long msg);
		void handle_tx_remove_output(long their_node_id, long msg);
		void handle_tx_complete(long their_node_id, long msg);
		void handle_tx_signatures(long their_node_id, long msg);
		void handle_tx_init_rbf(long their_node_id, long msg);
		void handle_tx_ack_rbf(long their_node_id, long msg);
		void handle_tx_abort(long their_node_id, long msg);
		void handle_update_add_htlc(long their_node_id, long msg);
		void handle_update_fulfill_htlc(long their_node_id, long msg);
		void handle_update_fail_htlc(long their_node_id, long msg);
		void handle_update_fail_malformed_htlc(long their_node_id, long msg);
		void handle_commitment_signed(long their_node_id, long msg);
		void handle_revoke_and_ack(long their_node_id, long msg);
		void handle_update_fee(long their_node_id, long msg);
		void handle_announcement_signatures(long their_node_id, long msg);
		void peer_disconnected(long their_node_id);
		long peer_connected(long their_node_id, long msg, bool inbound);
		void handle_channel_reestablish(long their_node_id, long msg);
		void handle_channel_update(long their_node_id, long msg);
		void handle_error(long their_node_id, long msg);
		long provided_node_features();
		long provided_init_features(long their_node_id);
		long get_chain_hashes();
		void message_received();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKChannelMessageHandler_new")] public static extern long LDKChannelMessageHandler_new_native(long impl_idx, long MessageSendEventsProvider);
	public static long[] LDKChannelMessageHandler_new(LDKChannelMessageHandler impl, long MessageSendEventsProvider) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKChannelMessageHandler_new_native(i, MessageSendEventsProvider);
		ret[1] = i;
		return ret;
	}
	// void ChannelMessageHandler_handle_open_channel LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKOpenChannel *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_open_channel")] public static extern void ChannelMessageHandler_handle_open_channel(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_open_channel_v2 LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKOpenChannelV2 *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_open_channel_v2")] public static extern void ChannelMessageHandler_handle_open_channel_v2(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_accept_channel LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKAcceptChannel *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_accept_channel")] public static extern void ChannelMessageHandler_handle_accept_channel(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_accept_channel_v2 LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKAcceptChannelV2 *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_accept_channel_v2")] public static extern void ChannelMessageHandler_handle_accept_channel_v2(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_funding_created LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKFundingCreated *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_funding_created")] public static extern void ChannelMessageHandler_handle_funding_created(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_funding_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKFundingSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_funding_signed")] public static extern void ChannelMessageHandler_handle_funding_signed(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_channel_ready LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelReady *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_ready")] public static extern void ChannelMessageHandler_handle_channel_ready(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_shutdown LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKShutdown *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_shutdown")] public static extern void ChannelMessageHandler_handle_shutdown(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_closing_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKClosingSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_closing_signed")] public static extern void ChannelMessageHandler_handle_closing_signed(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_stfu LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKStfu *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_stfu")] public static extern void ChannelMessageHandler_handle_stfu(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_add_input LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAddInput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_add_input")] public static extern void ChannelMessageHandler_handle_tx_add_input(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_add_output LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAddOutput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_add_output")] public static extern void ChannelMessageHandler_handle_tx_add_output(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_remove_input LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxRemoveInput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_remove_input")] public static extern void ChannelMessageHandler_handle_tx_remove_input(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_remove_output LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxRemoveOutput *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_remove_output")] public static extern void ChannelMessageHandler_handle_tx_remove_output(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_complete LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxComplete *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_complete")] public static extern void ChannelMessageHandler_handle_tx_complete(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_signatures LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxSignatures *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_signatures")] public static extern void ChannelMessageHandler_handle_tx_signatures(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_init_rbf LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxInitRbf *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_init_rbf")] public static extern void ChannelMessageHandler_handle_tx_init_rbf(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_ack_rbf LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAckRbf *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_ack_rbf")] public static extern void ChannelMessageHandler_handle_tx_ack_rbf(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_tx_abort LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKTxAbort *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_tx_abort")] public static extern void ChannelMessageHandler_handle_tx_abort(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_add_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateAddHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_add_htlc")] public static extern void ChannelMessageHandler_handle_update_add_htlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fulfill_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFulfillHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fulfill_htlc")] public static extern void ChannelMessageHandler_handle_update_fulfill_htlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fail_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFailHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fail_htlc")] public static extern void ChannelMessageHandler_handle_update_fail_htlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fail_malformed_htlc LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fail_malformed_htlc")] public static extern void ChannelMessageHandler_handle_update_fail_malformed_htlc(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_commitment_signed LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKCommitmentSigned *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_commitment_signed")] public static extern void ChannelMessageHandler_handle_commitment_signed(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_revoke_and_ack LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKRevokeAndACK *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_revoke_and_ack")] public static extern void ChannelMessageHandler_handle_revoke_and_ack(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_update_fee LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKUpdateFee *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_update_fee")] public static extern void ChannelMessageHandler_handle_update_fee(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_announcement_signatures LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKAnnouncementSignatures *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_announcement_signatures")] public static extern void ChannelMessageHandler_handle_announcement_signatures(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_peer_disconnected LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_peer_disconnected")] public static extern void ChannelMessageHandler_peer_disconnected(long _this_arg, long _their_node_id);
	// LDKCResult_NoneNoneZ ChannelMessageHandler_peer_connected LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR msg, bool inbound
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_peer_connected")] public static extern long ChannelMessageHandler_peer_connected(long _this_arg, long _their_node_id, long _msg, bool _inbound);
	// void ChannelMessageHandler_handle_channel_reestablish LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelReestablish *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_reestablish")] public static extern void ChannelMessageHandler_handle_channel_reestablish(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_channel_update LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelUpdate *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_channel_update")] public static extern void ChannelMessageHandler_handle_channel_update(long _this_arg, long _their_node_id, long _msg);
	// void ChannelMessageHandler_handle_error LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKErrorMessage *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_handle_error")] public static extern void ChannelMessageHandler_handle_error(long _this_arg, long _their_node_id, long _msg);
	// LDKNodeFeatures ChannelMessageHandler_provided_node_features LDKChannelMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_provided_node_features")] public static extern long ChannelMessageHandler_provided_node_features(long _this_arg);
	// LDKInitFeatures ChannelMessageHandler_provided_init_features LDKChannelMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_provided_init_features")] public static extern long ChannelMessageHandler_provided_init_features(long _this_arg, long _their_node_id);
	// LDKCOption_CVec_ThirtyTwoBytesZZ ChannelMessageHandler_get_chain_hashes LDKChannelMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_get_chain_hashes")] public static extern long ChannelMessageHandler_get_chain_hashes(long _this_arg);
	// void ChannelMessageHandler_message_received LDKChannelMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_message_received")] public static extern void ChannelMessageHandler_message_received(long _this_arg);
	public interface LDKOffersMessageHandler {
		long handle_message(long message, long context, long responder);
		long release_pending_messages();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOffersMessageHandler_new")] public static extern long LDKOffersMessageHandler_new_native(long impl_idx);
	public static long[] LDKOffersMessageHandler_new(LDKOffersMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKOffersMessageHandler_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ OffersMessageHandler_handle_message LDKOffersMessageHandler *NONNULL_PTR this_arg, struct LDKOffersMessage message, struct LDKCOption_OffersContextZ context, struct LDKResponder responder
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessageHandler_handle_message")] public static extern long OffersMessageHandler_handle_message(long _this_arg, long _message, long _context, long _responder);
	// LDKCVec_C2Tuple_OffersMessageMessageSendInstructionsZZ OffersMessageHandler_release_pending_messages LDKOffersMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessageHandler_release_pending_messages")] public static extern long OffersMessageHandler_release_pending_messages(long _this_arg);
	public interface LDKAsyncPaymentsMessageHandler {
		long handle_held_htlc_available(long message, long responder);
		void handle_release_held_htlc(long message, long context);
		long release_pending_messages();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKAsyncPaymentsMessageHandler_new")] public static extern long LDKAsyncPaymentsMessageHandler_new_native(long impl_idx);
	public static long[] LDKAsyncPaymentsMessageHandler_new(LDKAsyncPaymentsMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKAsyncPaymentsMessageHandler_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ AsyncPaymentsMessageHandler_handle_held_htlc_available LDKAsyncPaymentsMessageHandler *NONNULL_PTR this_arg, struct LDKHeldHtlcAvailable message, struct LDKResponder responder
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessageHandler_handle_held_htlc_available")] public static extern long AsyncPaymentsMessageHandler_handle_held_htlc_available(long _this_arg, long _message, long _responder);
	// void AsyncPaymentsMessageHandler_handle_release_held_htlc LDKAsyncPaymentsMessageHandler *NONNULL_PTR this_arg, struct LDKReleaseHeldHtlc message, struct LDKAsyncPaymentsContext context
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessageHandler_handle_release_held_htlc")] public static extern void AsyncPaymentsMessageHandler_handle_release_held_htlc(long _this_arg, long _message, long _context);
	// LDKCVec_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZZ AsyncPaymentsMessageHandler_release_pending_messages LDKAsyncPaymentsMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessageHandler_release_pending_messages")] public static extern long AsyncPaymentsMessageHandler_release_pending_messages(long _this_arg);
	public interface LDKDNSResolverMessageHandler {
		long handle_dnssec_query(long message, long responder);
		void handle_dnssec_proof(long message, long context);
		long provided_node_features();
		long release_pending_messages();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKDNSResolverMessageHandler_new")] public static extern long LDKDNSResolverMessageHandler_new_native(long impl_idx);
	public static long[] LDKDNSResolverMessageHandler_new(LDKDNSResolverMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKDNSResolverMessageHandler_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ DNSResolverMessageHandler_handle_dnssec_query LDKDNSResolverMessageHandler *NONNULL_PTR this_arg, struct LDKDNSSECQuery message, struct LDKResponder responder
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessageHandler_handle_dnssec_query")] public static extern long DNSResolverMessageHandler_handle_dnssec_query(long _this_arg, long _message, long _responder);
	// void DNSResolverMessageHandler_handle_dnssec_proof LDKDNSResolverMessageHandler *NONNULL_PTR this_arg, struct LDKDNSSECProof message, struct LDKDNSResolverContext context
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessageHandler_handle_dnssec_proof")] public static extern void DNSResolverMessageHandler_handle_dnssec_proof(long _this_arg, long _message, long _context);
	// LDKNodeFeatures DNSResolverMessageHandler_provided_node_features LDKDNSResolverMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessageHandler_provided_node_features")] public static extern long DNSResolverMessageHandler_provided_node_features(long _this_arg);
	// LDKCVec_C2Tuple_DNSResolverMessageMessageSendInstructionsZZ DNSResolverMessageHandler_release_pending_messages LDKDNSResolverMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessageHandler_release_pending_messages")] public static extern long DNSResolverMessageHandler_release_pending_messages(long _this_arg);
	public interface LDKNodeIdLookUp {
		long next_node_id(long short_channel_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKNodeIdLookUp_new")] public static extern long LDKNodeIdLookUp_new_native(long impl_idx);
	public static long[] LDKNodeIdLookUp_new(LDKNodeIdLookUp impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKNodeIdLookUp_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKPublicKey NodeIdLookUp_next_node_id LDKNodeIdLookUp *NONNULL_PTR this_arg, uint64_t short_channel_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeIdLookUp_next_node_id")] public static extern long NodeIdLookUp_next_node_id(long _this_arg, long _short_channel_id);
	public interface LDKRoutingMessageHandler {
		long handle_node_announcement(long their_node_id, long msg);
		long handle_channel_announcement(long their_node_id, long msg);
		long handle_channel_update(long their_node_id, long msg);
		long get_next_channel_announcement(long starting_point);
		long get_next_node_announcement(long starting_point);
		long peer_connected(long their_node_id, long init, bool inbound);
		long handle_reply_channel_range(long their_node_id, long msg);
		long handle_reply_short_channel_ids_end(long their_node_id, long msg);
		long handle_query_channel_range(long their_node_id, long msg);
		long handle_query_short_channel_ids(long their_node_id, long msg);
		bool processing_queue_high();
		long provided_node_features();
		long provided_init_features(long their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKRoutingMessageHandler_new")] public static extern long LDKRoutingMessageHandler_new_native(long impl_idx, long MessageSendEventsProvider);
	public static long[] LDKRoutingMessageHandler_new(LDKRoutingMessageHandler impl, long MessageSendEventsProvider) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKRoutingMessageHandler_new_native(i, MessageSendEventsProvider);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_node_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKNodeAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_node_announcement")] public static extern long RoutingMessageHandler_handle_node_announcement(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_channel_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelAnnouncement *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_channel_announcement")] public static extern long RoutingMessageHandler_handle_channel_announcement(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_boolLightningErrorZ RoutingMessageHandler_handle_channel_update LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKChannelUpdate *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_channel_update")] public static extern long RoutingMessageHandler_handle_channel_update(long _this_arg, long _their_node_id, long _msg);
	// LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ RoutingMessageHandler_get_next_channel_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, uint64_t starting_point
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_get_next_channel_announcement")] public static extern long RoutingMessageHandler_get_next_channel_announcement(long _this_arg, long _starting_point);
	// LDKNodeAnnouncement RoutingMessageHandler_get_next_node_announcement LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKNodeId starting_point
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_get_next_node_announcement")] public static extern long RoutingMessageHandler_get_next_node_announcement(long _this_arg, long _starting_point);
	// LDKCResult_NoneNoneZ RoutingMessageHandler_peer_connected LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR init, bool inbound
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_peer_connected")] public static extern long RoutingMessageHandler_peer_connected(long _this_arg, long _their_node_id, long _init, bool _inbound);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_reply_channel_range LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKReplyChannelRange msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_reply_channel_range")] public static extern long RoutingMessageHandler_handle_reply_channel_range(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_reply_short_channel_ids_end LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKReplyShortChannelIdsEnd msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_reply_short_channel_ids_end")] public static extern long RoutingMessageHandler_handle_reply_short_channel_ids_end(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_query_channel_range LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKQueryChannelRange msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_query_channel_range")] public static extern long RoutingMessageHandler_handle_query_channel_range(long _this_arg, long _their_node_id, long _msg);
	// LDKCResult_NoneLightningErrorZ RoutingMessageHandler_handle_query_short_channel_ids LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKQueryShortChannelIds msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_handle_query_short_channel_ids")] public static extern long RoutingMessageHandler_handle_query_short_channel_ids(long _this_arg, long _their_node_id, long _msg);
	// bool RoutingMessageHandler_processing_queue_high LDKRoutingMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_processing_queue_high")] public static extern bool RoutingMessageHandler_processing_queue_high(long _this_arg);
	// LDKNodeFeatures RoutingMessageHandler_provided_node_features LDKRoutingMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_provided_node_features")] public static extern long RoutingMessageHandler_provided_node_features(long _this_arg);
	// LDKInitFeatures RoutingMessageHandler_provided_init_features LDKRoutingMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_provided_init_features")] public static extern long RoutingMessageHandler_provided_init_features(long _this_arg, long _their_node_id);
	public interface LDKOnionMessageHandler {
		void handle_onion_message(long peer_node_id, long msg);
		long next_onion_message_for_peer(long peer_node_id);
		long peer_connected(long their_node_id, long init, bool inbound);
		void peer_disconnected(long their_node_id);
		void timer_tick_occurred();
		long provided_node_features();
		long provided_init_features(long their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKOnionMessageHandler_new")] public static extern long LDKOnionMessageHandler_new_native(long impl_idx);
	public static long[] LDKOnionMessageHandler_new(LDKOnionMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKOnionMessageHandler_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void OnionMessageHandler_handle_onion_message LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey peer_node_id, const struct LDKOnionMessage *NONNULL_PTR msg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_handle_onion_message")] public static extern void OnionMessageHandler_handle_onion_message(long _this_arg, long _peer_node_id, long _msg);
	// LDKOnionMessage OnionMessageHandler_next_onion_message_for_peer LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey peer_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_next_onion_message_for_peer")] public static extern long OnionMessageHandler_next_onion_message_for_peer(long _this_arg, long _peer_node_id);
	// LDKCResult_NoneNoneZ OnionMessageHandler_peer_connected LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR init, bool inbound
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_peer_connected")] public static extern long OnionMessageHandler_peer_connected(long _this_arg, long _their_node_id, long _init, bool _inbound);
	// void OnionMessageHandler_peer_disconnected LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_peer_disconnected")] public static extern void OnionMessageHandler_peer_disconnected(long _this_arg, long _their_node_id);
	// void OnionMessageHandler_timer_tick_occurred LDKOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_timer_tick_occurred")] public static extern void OnionMessageHandler_timer_tick_occurred(long _this_arg);
	// LDKNodeFeatures OnionMessageHandler_provided_node_features LDKOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_provided_node_features")] public static extern long OnionMessageHandler_provided_node_features(long _this_arg);
	// LDKInitFeatures OnionMessageHandler_provided_init_features LDKOnionMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_provided_init_features")] public static extern long OnionMessageHandler_provided_init_features(long _this_arg, long _their_node_id);
	public interface LDKCustomMessageReader {
		long read(short message_type, long buffer);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomMessageReader_new")] public static extern long LDKCustomMessageReader_new_native(long impl_idx);
	public static long[] LDKCustomMessageReader_new(LDKCustomMessageReader impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCustomMessageReader_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_COption_TypeZDecodeErrorZ CustomMessageReader_read LDKCustomMessageReader *NONNULL_PTR this_arg, uint16_t message_type, struct LDKu8slice buffer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageReader_read")] public static extern long CustomMessageReader_read(long _this_arg, short _message_type, long _buffer);
	public interface LDKCustomMessageHandler {
		long handle_custom_message(long msg, long sender_node_id);
		long get_and_clear_pending_msg();
		void peer_disconnected(long their_node_id);
		long peer_connected(long their_node_id, long msg, bool inbound);
		long provided_node_features();
		long provided_init_features(long their_node_id);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomMessageHandler_new")] public static extern long LDKCustomMessageHandler_new_native(long impl_idx, long CustomMessageReader);
	public static long[] LDKCustomMessageHandler_new(LDKCustomMessageHandler impl, long CustomMessageReader) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCustomMessageHandler_new_native(i, CustomMessageReader);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_NoneLightningErrorZ CustomMessageHandler_handle_custom_message LDKCustomMessageHandler *NONNULL_PTR this_arg, struct LDKType msg, struct LDKPublicKey sender_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_handle_custom_message")] public static extern long CustomMessageHandler_handle_custom_message(long _this_arg, long _msg, long _sender_node_id);
	// LDKCVec_C2Tuple_PublicKeyTypeZZ CustomMessageHandler_get_and_clear_pending_msg LDKCustomMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_get_and_clear_pending_msg")] public static extern long CustomMessageHandler_get_and_clear_pending_msg(long _this_arg);
	// void CustomMessageHandler_peer_disconnected LDKCustomMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_peer_disconnected")] public static extern void CustomMessageHandler_peer_disconnected(long _this_arg, long _their_node_id);
	// LDKCResult_NoneNoneZ CustomMessageHandler_peer_connected LDKCustomMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, const struct LDKInit *NONNULL_PTR msg, bool inbound
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_peer_connected")] public static extern long CustomMessageHandler_peer_connected(long _this_arg, long _their_node_id, long _msg, bool _inbound);
	// LDKNodeFeatures CustomMessageHandler_provided_node_features LDKCustomMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_provided_node_features")] public static extern long CustomMessageHandler_provided_node_features(long _this_arg);
	// LDKInitFeatures CustomMessageHandler_provided_init_features LDKCustomMessageHandler *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_provided_init_features")] public static extern long CustomMessageHandler_provided_init_features(long _this_arg, long _their_node_id);
	public interface LDKCustomOnionMessageHandler {
		long handle_custom_message(long message, long context, long responder);
		long read_custom_message(long message_type, long buffer);
		long release_pending_custom_messages();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCustomOnionMessageHandler_new")] public static extern long LDKCustomOnionMessageHandler_new_native(long impl_idx);
	public static long[] LDKCustomOnionMessageHandler_new(LDKCustomOnionMessageHandler impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCustomOnionMessageHandler_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ CustomOnionMessageHandler_handle_custom_message LDKCustomOnionMessageHandler *NONNULL_PTR this_arg, struct LDKOnionMessageContents message, struct LDKCOption_CVec_u8ZZ context, struct LDKResponder responder
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_handle_custom_message")] public static extern long CustomOnionMessageHandler_handle_custom_message(long _this_arg, long _message, long _context, long _responder);
	// LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CustomOnionMessageHandler_read_custom_message LDKCustomOnionMessageHandler *NONNULL_PTR this_arg, uint64_t message_type, struct LDKu8slice buffer
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_read_custom_message")] public static extern long CustomOnionMessageHandler_read_custom_message(long _this_arg, long _message_type, long _buffer);
	// LDKCVec_C2Tuple_OnionMessageContentsMessageSendInstructionsZZ CustomOnionMessageHandler_release_pending_custom_messages LDKCustomOnionMessageHandler *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_release_pending_custom_messages")] public static extern long CustomOnionMessageHandler_release_pending_custom_messages(long _this_arg);
	public interface LDKSocketDescriptor {
		long send_data(long data, bool resume_read);
		void disconnect_socket();
		bool eq(long other_arg);
		long hash();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSocketDescriptor_new")] public static extern long LDKSocketDescriptor_new_native(long impl_idx);
	public static long[] LDKSocketDescriptor_new(LDKSocketDescriptor impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKSocketDescriptor_new_native(i);
		ret[1] = i;
		return ret;
	}
	// uintptr_t SocketDescriptor_send_data LDKSocketDescriptor *NONNULL_PTR this_arg, struct LDKu8slice data, bool resume_read
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_send_data")] public static extern long SocketDescriptor_send_data(long _this_arg, long _data, bool _resume_read);
	// void SocketDescriptor_disconnect_socket LDKSocketDescriptor *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_disconnect_socket")] public static extern void SocketDescriptor_disconnect_socket(long _this_arg);
	// uint64_t SocketDescriptor_hash LDKSocketDescriptor *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_hash")] public static extern long SocketDescriptor_hash(long _this_arg);
	public interface LDKSignBolt12InvoiceFn {
		long sign_invoice(long message);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignBolt12InvoiceFn_new")] public static extern long LDKSignBolt12InvoiceFn_new_native(long impl_idx);
	public static long[] LDKSignBolt12InvoiceFn_new(LDKSignBolt12InvoiceFn impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKSignBolt12InvoiceFn_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_SchnorrSignatureNoneZ SignBolt12InvoiceFn_sign_invoice LDKSignBolt12InvoiceFn *NONNULL_PTR this_arg, const struct LDKUnsignedBolt12Invoice *NONNULL_PTR message
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignBolt12InvoiceFn_sign_invoice")] public static extern long SignBolt12InvoiceFn_sign_invoice(long _this_arg, long _message);
	public interface LDKSignInvoiceRequestFn {
		long sign_invoice_request(long message);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignInvoiceRequestFn_new")] public static extern long LDKSignInvoiceRequestFn_new_native(long impl_idx);
	public static long[] LDKSignInvoiceRequestFn_new(LDKSignInvoiceRequestFn impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKSignInvoiceRequestFn_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_SchnorrSignatureNoneZ SignInvoiceRequestFn_sign_invoice_request LDKSignInvoiceRequestFn *NONNULL_PTR this_arg, const struct LDKUnsignedInvoiceRequest *NONNULL_PTR message
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignInvoiceRequestFn_sign_invoice_request")] public static extern long SignInvoiceRequestFn_sign_invoice_request(long _this_arg, long _message);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignError_ty_from_ptr")] public static extern long LDKSignError_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKSignError_Verification_get_verification")] public static extern Secp256k1Error LDKSignError_Verification_get_verification(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_ty_from_ptr")] public static extern long LDKEffectiveCapacity_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_ExactLiquidity_get_liquidity_msat")] public static extern long LDKEffectiveCapacity_ExactLiquidity_get_liquidity_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_AdvertisedMaxHTLC_get_amount_msat")] public static extern long LDKEffectiveCapacity_AdvertisedMaxHTLC_get_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_Total_get_capacity_msat")] public static extern long LDKEffectiveCapacity_Total_get_capacity_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_Total_get_htlc_maximum_msat")] public static extern long LDKEffectiveCapacity_Total_get_htlc_maximum_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKEffectiveCapacity_HintMaxHTLC_get_amount_msat")] public static extern long LDKEffectiveCapacity_HintMaxHTLC_get_amount_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_ty_from_ptr")] public static extern long LDKPayee_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Blinded_get_route_hints")] public static extern long LDKPayee_Blinded_get_route_hints(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Blinded_get_features")] public static extern long LDKPayee_Blinded_get_features(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_node_id")] public static extern long LDKPayee_Clear_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_route_hints")] public static extern long LDKPayee_Clear_get_route_hints(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_features")] public static extern long LDKPayee_Clear_get_features(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKPayee_Clear_get_final_cltv_expiry_delta")] public static extern int LDKPayee_Clear_get_final_cltv_expiry_delta(long ptr);
	public interface LDKScore {
		long write();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKScore_new")] public static extern long LDKScore_new_native(long impl_idx, long ScoreLookUp, long ScoreUpdate);
	public static long[] LDKScore_new(LDKScore impl, long ScoreLookUp, long ScoreUpdate) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKScore_new_native(i, ScoreLookUp, ScoreUpdate);
		ret[1] = i;
		return ret;
	}
	// LDKCVec_u8Z Score_write LDKScore *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_write")] public static extern long Score_write(long _this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKIntroductionNode_ty_from_ptr")] public static extern long LDKIntroductionNode_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKIntroductionNode_NodeId_get_node_id")] public static extern long LDKIntroductionNode_NodeId_get_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKIntroductionNode_DirectedShortChannelId_get__0")] public static extern Direction LDKIntroductionNode_DirectedShortChannelId_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKIntroductionNode_DirectedShortChannelId_get__1")] public static extern long LDKIntroductionNode_DirectedShortChannelId_get__1(long ptr);
	public interface LDKCoinSelectionSource {
		long select_confirmed_utxos(long claim_id, long must_spend, long must_pay_to, int target_feerate_sat_per_1000_weight);
		long sign_psbt(long psbt);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKCoinSelectionSource_new")] public static extern long LDKCoinSelectionSource_new_native(long impl_idx);
	public static long[] LDKCoinSelectionSource_new(LDKCoinSelectionSource impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKCoinSelectionSource_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CoinSelectionNoneZ CoinSelectionSource_select_confirmed_utxos LDKCoinSelectionSource *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes claim_id, struct LDKCVec_InputZ must_spend, struct LDKCVec_TxOutZ must_pay_to, uint32_t target_feerate_sat_per_1000_weight
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelectionSource_select_confirmed_utxos")] public static extern long CoinSelectionSource_select_confirmed_utxos(long _this_arg, long _claim_id, long _must_spend, long _must_pay_to, int _target_feerate_sat_per_1000_weight);
	// LDKCResult_TransactionNoneZ CoinSelectionSource_sign_psbt LDKCoinSelectionSource *NONNULL_PTR this_arg, struct LDKCVec_u8Z psbt
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelectionSource_sign_psbt")] public static extern long CoinSelectionSource_sign_psbt(long _this_arg, long _psbt);
	public interface LDKWalletSource {
		long list_confirmed_utxos();
		long get_change_script();
		long sign_psbt(long psbt);
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKWalletSource_new")] public static extern long LDKWalletSource_new_native(long impl_idx);
	public static long[] LDKWalletSource_new(LDKWalletSource impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKWalletSource_new_native(i);
		ret[1] = i;
		return ret;
	}
	// LDKCResult_CVec_UtxoZNoneZ WalletSource_list_confirmed_utxos LDKWalletSource *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_list_confirmed_utxos")] public static extern long WalletSource_list_confirmed_utxos(long _this_arg);
	// LDKCResult_CVec_u8ZNoneZ WalletSource_get_change_script LDKWalletSource *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_get_change_script")] public static extern long WalletSource_get_change_script(long _this_arg);
	// LDKCResult_TransactionNoneZ WalletSource_sign_psbt LDKWalletSource *NONNULL_PTR this_arg, struct LDKCVec_u8Z psbt
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_sign_psbt")] public static extern long WalletSource_sign_psbt(long _this_arg, long _psbt);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_ty_from_ptr")] public static extern long LDKGossipSync_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_P2P_get_p2p")] public static extern long LDKGossipSync_P2P_get_p2p(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKGossipSync_Rapid_get_rapid")] public static extern long LDKGossipSync_Rapid_get_rapid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_ty_from_ptr")] public static extern long LDKFallback_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_SegWitProgram_get_version")] public static extern byte LDKFallback_SegWitProgram_get_version(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_SegWitProgram_get_program")] public static extern long LDKFallback_SegWitProgram_get_program(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_PubKeyHash_get_pub_key_hash")] public static extern long LDKFallback_PubKeyHash_get_pub_key_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKFallback_ScriptHash_get_script_hash")] public static extern long LDKFallback_ScriptHash_get_script_hash(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0ClientEvent_ty_from_ptr")] public static extern long LDKLSPS0ClientEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0ClientEvent_ListProtocolsResponse_get_counterparty_node_id")] public static extern long LDKLSPS0ClientEvent_ListProtocolsResponse_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0ClientEvent_ListProtocolsResponse_get_protocols")] public static extern long LDKLSPS0ClientEvent_ListProtocolsResponse_get_protocols(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_ty_from_ptr")] public static extern long LDKLSPS1ClientEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_SupportedOptionsReady_get_request_id")] public static extern long LDKLSPS1ClientEvent_SupportedOptionsReady_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_SupportedOptionsReady_get_counterparty_node_id")] public static extern long LDKLSPS1ClientEvent_SupportedOptionsReady_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_SupportedOptionsReady_get_supported_options")] public static extern long LDKLSPS1ClientEvent_SupportedOptionsReady_get_supported_options(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_SupportedOptionsRequestFailed_get_request_id")] public static extern long LDKLSPS1ClientEvent_SupportedOptionsRequestFailed_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_SupportedOptionsRequestFailed_get_counterparty_node_id")] public static extern long LDKLSPS1ClientEvent_SupportedOptionsRequestFailed_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_SupportedOptionsRequestFailed_get_error")] public static extern long LDKLSPS1ClientEvent_SupportedOptionsRequestFailed_get_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderCreated_get_request_id")] public static extern long LDKLSPS1ClientEvent_OrderCreated_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderCreated_get_counterparty_node_id")] public static extern long LDKLSPS1ClientEvent_OrderCreated_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderCreated_get_order_id")] public static extern long LDKLSPS1ClientEvent_OrderCreated_get_order_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderCreated_get_order")] public static extern long LDKLSPS1ClientEvent_OrderCreated_get_order(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderCreated_get_payment")] public static extern long LDKLSPS1ClientEvent_OrderCreated_get_payment(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderCreated_get_channel")] public static extern long LDKLSPS1ClientEvent_OrderCreated_get_channel(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderStatus_get_request_id")] public static extern long LDKLSPS1ClientEvent_OrderStatus_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderStatus_get_counterparty_node_id")] public static extern long LDKLSPS1ClientEvent_OrderStatus_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderStatus_get_order_id")] public static extern long LDKLSPS1ClientEvent_OrderStatus_get_order_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderStatus_get_order")] public static extern long LDKLSPS1ClientEvent_OrderStatus_get_order(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderStatus_get_payment")] public static extern long LDKLSPS1ClientEvent_OrderStatus_get_payment(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderStatus_get_channel")] public static extern long LDKLSPS1ClientEvent_OrderStatus_get_channel(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderRequestFailed_get_request_id")] public static extern long LDKLSPS1ClientEvent_OrderRequestFailed_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderRequestFailed_get_counterparty_node_id")] public static extern long LDKLSPS1ClientEvent_OrderRequestFailed_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1ClientEvent_OrderRequestFailed_get_error")] public static extern long LDKLSPS1ClientEvent_OrderRequestFailed_get_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_ty_from_ptr")] public static extern long LDKLSPS2ClientEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_OpeningParametersReady_get_request_id")] public static extern long LDKLSPS2ClientEvent_OpeningParametersReady_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_OpeningParametersReady_get_counterparty_node_id")] public static extern long LDKLSPS2ClientEvent_OpeningParametersReady_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_OpeningParametersReady_get_opening_fee_params_menu")] public static extern long LDKLSPS2ClientEvent_OpeningParametersReady_get_opening_fee_params_menu(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_InvoiceParametersReady_get_request_id")] public static extern long LDKLSPS2ClientEvent_InvoiceParametersReady_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_InvoiceParametersReady_get_counterparty_node_id")] public static extern long LDKLSPS2ClientEvent_InvoiceParametersReady_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_InvoiceParametersReady_get_intercept_scid")] public static extern long LDKLSPS2ClientEvent_InvoiceParametersReady_get_intercept_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_InvoiceParametersReady_get_cltv_expiry_delta")] public static extern int LDKLSPS2ClientEvent_InvoiceParametersReady_get_cltv_expiry_delta(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ClientEvent_InvoiceParametersReady_get_payment_size_msat")] public static extern long LDKLSPS2ClientEvent_InvoiceParametersReady_get_payment_size_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_ty_from_ptr")] public static extern long LDKLSPS2ServiceEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_GetInfo_get_request_id")] public static extern long LDKLSPS2ServiceEvent_GetInfo_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_GetInfo_get_counterparty_node_id")] public static extern long LDKLSPS2ServiceEvent_GetInfo_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_GetInfo_get_token")] public static extern long LDKLSPS2ServiceEvent_GetInfo_get_token(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_BuyRequest_get_request_id")] public static extern long LDKLSPS2ServiceEvent_BuyRequest_get_request_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_BuyRequest_get_counterparty_node_id")] public static extern long LDKLSPS2ServiceEvent_BuyRequest_get_counterparty_node_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_BuyRequest_get_opening_fee_params")] public static extern long LDKLSPS2ServiceEvent_BuyRequest_get_opening_fee_params(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_BuyRequest_get_payment_size_msat")] public static extern long LDKLSPS2ServiceEvent_BuyRequest_get_payment_size_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_OpenChannel_get_their_network_key")] public static extern long LDKLSPS2ServiceEvent_OpenChannel_get_their_network_key(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_OpenChannel_get_amt_to_forward_msat")] public static extern long LDKLSPS2ServiceEvent_OpenChannel_get_amt_to_forward_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_OpenChannel_get_opening_fee_msat")] public static extern long LDKLSPS2ServiceEvent_OpenChannel_get_opening_fee_msat(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_OpenChannel_get_user_channel_id")] public static extern long LDKLSPS2ServiceEvent_OpenChannel_get_user_channel_id(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2ServiceEvent_OpenChannel_get_intercept_scid")] public static extern long LDKLSPS2ServiceEvent_OpenChannel_get_intercept_scid(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLiquidityEvent_ty_from_ptr")] public static extern long LDKLiquidityEvent_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Request_ty_from_ptr")] public static extern long LDKLSPS0Request_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Request_ListProtocols_get_list_protocols")] public static extern long LDKLSPS0Request_ListProtocols_get_list_protocols(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Response_ty_from_ptr")] public static extern long LDKLSPS0Response_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Response_ListProtocols_get_list_protocols")] public static extern long LDKLSPS0Response_ListProtocols_get_list_protocols(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Response_ListProtocolsError_get_list_protocols_error")] public static extern long LDKLSPS0Response_ListProtocolsError_get_list_protocols_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Message_ty_from_ptr")] public static extern long LDKLSPS0Message_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Message_Request_get__0")] public static extern long LDKLSPS0Message_Request_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Message_Request_get__1")] public static extern long LDKLSPS0Message_Request_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Message_Response_get__0")] public static extern long LDKLSPS0Message_Response_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS0Message_Response_get__1")] public static extern long LDKLSPS0Message_Response_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Request_ty_from_ptr")] public static extern long LDKLSPS1Request_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Request_GetInfo_get_get_info")] public static extern long LDKLSPS1Request_GetInfo_get_get_info(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Request_CreateOrder_get_create_order")] public static extern long LDKLSPS1Request_CreateOrder_get_create_order(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Request_GetOrder_get_get_order")] public static extern long LDKLSPS1Request_GetOrder_get_get_order(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Response_ty_from_ptr")] public static extern long LDKLSPS1Response_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Response_GetInfo_get_get_info")] public static extern long LDKLSPS1Response_GetInfo_get_get_info(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Response_GetInfoError_get_get_info_error")] public static extern long LDKLSPS1Response_GetInfoError_get_get_info_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Response_CreateOrder_get_create_order")] public static extern long LDKLSPS1Response_CreateOrder_get_create_order(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Response_CreateOrderError_get_create_order_error")] public static extern long LDKLSPS1Response_CreateOrderError_get_create_order_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Response_GetOrder_get_get_order")] public static extern long LDKLSPS1Response_GetOrder_get_get_order(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Response_GetOrderError_get_get_order_error")] public static extern long LDKLSPS1Response_GetOrderError_get_get_order_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Message_ty_from_ptr")] public static extern long LDKLSPS1Message_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Message_Request_get__0")] public static extern long LDKLSPS1Message_Request_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Message_Request_get__1")] public static extern long LDKLSPS1Message_Request_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Message_Response_get__0")] public static extern long LDKLSPS1Message_Response_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS1Message_Response_get__1")] public static extern long LDKLSPS1Message_Response_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Request_ty_from_ptr")] public static extern long LDKLSPS2Request_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Request_GetInfo_get_get_info")] public static extern long LDKLSPS2Request_GetInfo_get_get_info(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Request_Buy_get_buy")] public static extern long LDKLSPS2Request_Buy_get_buy(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Response_ty_from_ptr")] public static extern long LDKLSPS2Response_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Response_GetInfo_get_get_info")] public static extern long LDKLSPS2Response_GetInfo_get_get_info(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Response_GetInfoError_get_get_info_error")] public static extern long LDKLSPS2Response_GetInfoError_get_get_info_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Response_Buy_get_buy")] public static extern long LDKLSPS2Response_Buy_get_buy(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Response_BuyError_get_buy_error")] public static extern long LDKLSPS2Response_BuyError_get_buy_error(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Message_ty_from_ptr")] public static extern long LDKLSPS2Message_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Message_Request_get__0")] public static extern long LDKLSPS2Message_Request_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Message_Request_get__1")] public static extern long LDKLSPS2Message_Request_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Message_Response_get__0")] public static extern long LDKLSPS2Message_Response_get__0(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPS2Message_Response_get__1")] public static extern long LDKLSPS2Message_Response_get__1(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPSMessage_ty_from_ptr")] public static extern long LDKLSPSMessage_ty_from_ptr(long ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKLSPSMessage_Invalid_get_invalid")] public static extern long LDKLSPSMessage_Invalid_get_invalid(long ptr);
	public interface LDKProcessMessagesCallback {
		void call();
	}
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LDKProcessMessagesCallback_new")] public static extern long LDKProcessMessagesCallback_new_native(long impl_idx);
	public static long[] LDKProcessMessagesCallback_new(LDKProcessMessagesCallback impl) {
		long new_obj_idx = js_objs.Count;
		int i = 0;
		for (; i < js_objs.Count; i++) {
			if (js_objs[i] == null || !js_objs[i].IsAlive) { new_obj_idx = i; break; }
		}
		if (i == js_objs.Count) {
			js_objs.Add(new WeakReference(impl));
		} else {
			js_objs[i] = new WeakReference(impl);
		}
		long[] ret = new long[2];
		ret[0] = LDKProcessMessagesCallback_new_native(i);
		ret[1] = i;
		return ret;
	}
	// void ProcessMessagesCallback_call LDKProcessMessagesCallback *NONNULL_PTR this_arg
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProcessMessagesCallback_call")] public static extern void ProcessMessagesCallback_call(long _this_arg);
	// struct LDKStr _ldk_get_compiled_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK__ldk_get_compiled_version")] public static extern long _ldk_get_compiled_version();
	// struct LDKStr _ldk_c_bindings_get_compiled_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK__ldk_c_bindings_get_compiled_version")] public static extern long _ldk_c_bindings_get_compiled_version();
	// struct LDKSixteenBytes U128_le_bytes(struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_U128_le_bytes")] public static extern long U128_le_bytes(long _val);
	// struct LDKU128 U128_new(struct LDKSixteenBytes le_bytes);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_U128_new")] public static extern long U128_new(long _le_bytes);
	// struct LDKWitnessProgram WitnessProgram_new(struct LDKWitnessVersion version, struct LDKCVec_u8Z program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_new")] public static extern long WitnessProgram_new(byte _version, long _program);
	// struct LDKWitnessVersion WitnessProgram_get_version(const struct LDKWitnessProgram *NONNULL_PTR prog);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_get_version")] public static extern byte WitnessProgram_get_version(long _prog);
	// struct LDKu8slice WitnessProgram_get_program(const struct LDKWitnessProgram *NONNULL_PTR prog);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_get_program")] public static extern long WitnessProgram_get_program(long _prog);
	// uint64_t WitnessProgram_clone_ptr(LDKWitnessProgram *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_clone_ptr")] public static extern long WitnessProgram_clone_ptr(long _arg);
	// struct LDKWitnessProgram WitnessProgram_clone(const struct LDKWitnessProgram *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_clone")] public static extern long WitnessProgram_clone(long _orig);
	// void WitnessProgram_free(struct LDKWitnessProgram o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WitnessProgram_free")] public static extern void WitnessProgram_free(long _o);
	// struct LDKStr Address_to_string(const struct LDKAddress *NONNULL_PTR addr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Address_to_string")] public static extern long Address_to_string(long _addr);
	// struct LDKCOption_AddressZ Address_new(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Address_new")] public static extern long Address_new(long _s);
	// void Address_free(struct LDKAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Address_free")] public static extern void Address_free(long _o);
	// uint64_t Address_clone_ptr(LDKAddress *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Address_clone_ptr")] public static extern long Address_clone_ptr(long _arg);
	// struct LDKAddress Address_clone(const struct LDKAddress *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Address_clone")] public static extern long Address_clone(long _orig);
	// struct LDKBigEndianScalar BigEndianScalar_new(struct LDKThirtyTwoBytes big_endian_bytes);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_new")] public static extern long BigEndianScalar_new(long _big_endian_bytes);
	// uint64_t BigEndianScalar_clone_ptr(LDKBigEndianScalar *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_clone_ptr")] public static extern long BigEndianScalar_clone_ptr(long _arg);
	// struct LDKBigEndianScalar BigEndianScalar_clone(const struct LDKBigEndianScalar *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigEndianScalar_clone")] public static extern long BigEndianScalar_clone(long _orig);
	// uint64_t Bech32Error_clone_ptr(LDKBech32Error *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_clone_ptr")] public static extern long Bech32Error_clone_ptr(long _arg);
	// struct LDKBech32Error Bech32Error_clone(const struct LDKBech32Error *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_clone")] public static extern long Bech32Error_clone(long _orig);
	// void Bech32Error_free(struct LDKBech32Error o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bech32Error_free")] public static extern void Bech32Error_free(long _o);
	// void Transaction_free(struct LDKTransaction _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Transaction_free")] public static extern void Transaction_free(long __res);
	// void Witness_free(struct LDKWitness _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Witness_free")] public static extern void Witness_free(long __res);
	// struct LDKTxIn TxIn_new(struct LDKWitness witness, struct LDKCVec_u8Z script_sig, uint32_t sequence, struct LDKThirtyTwoBytes previous_txid, uint32_t previous_vout);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_new")] public static extern long TxIn_new(long _witness, long _script_sig, int _sequence, long _previous_txid, int _previous_vout);
	// struct LDKWitness TxIn_get_witness(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_witness")] public static extern long TxIn_get_witness(long _txin);
	// struct LDKu8slice TxIn_get_script_sig(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_script_sig")] public static extern long TxIn_get_script_sig(long _txin);
	// uint32_t TxIn_get_sequence(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_sequence")] public static extern int TxIn_get_sequence(long _txin);
	// struct LDKThirtyTwoBytes TxIn_get_previous_txid(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_previous_txid")] public static extern long TxIn_get_previous_txid(long _txin);
	// uint32_t TxIn_get_previous_vout(const struct LDKTxIn *NONNULL_PTR txin);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_get_previous_vout")] public static extern int TxIn_get_previous_vout(long _txin);
	// void TxIn_free(struct LDKTxIn _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxIn_free")] public static extern void TxIn_free(long __res);
	// struct LDKTxOut TxOut_new(struct LDKCVec_u8Z script_pubkey, uint64_t value);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_new")] public static extern long TxOut_new(long _script_pubkey, long _value);
	// struct LDKu8slice TxOut_get_script_pubkey(const struct LDKTxOut *NONNULL_PTR txout);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_get_script_pubkey")] public static extern long TxOut_get_script_pubkey(long _txout);
	// uint64_t TxOut_get_value(const struct LDKTxOut *NONNULL_PTR txout);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_get_value")] public static extern long TxOut_get_value(long _txout);
	// void TxOut_free(struct LDKTxOut _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_free")] public static extern void TxOut_free(long __res);
	// uint64_t TxOut_clone_ptr(LDKTxOut *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_clone_ptr")] public static extern long TxOut_clone_ptr(long _arg);
	// struct LDKTxOut TxOut_clone(const struct LDKTxOut *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxOut_clone")] public static extern long TxOut_clone(long _orig);
	// void Str_free(struct LDKStr _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Str_free")] public static extern void Str_free(long __res);
	// void CVec_u8Z_free(struct LDKCVec_u8Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_u8Z_free")] public static extern void CVec_u8Z_free(long __res);
	// struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_ok(struct LDKRefundMaybeWithDerivedMetadataBuilder o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_ok")] public static extern long CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_err")] public static extern long CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_is_ok(const struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_free(struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_free")] public static extern void CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone_ptr(LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone(const struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone")] public static extern long CResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_RefundBolt12SemanticErrorZ CResult_RefundBolt12SemanticErrorZ_ok(struct LDKRefund o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_ok")] public static extern long CResult_RefundBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_RefundBolt12SemanticErrorZ CResult_RefundBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_err")] public static extern long CResult_RefundBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_RefundBolt12SemanticErrorZ_is_ok(const struct LDKCResult_RefundBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_RefundBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_RefundBolt12SemanticErrorZ_free(struct LDKCResult_RefundBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_free")] public static extern void CResult_RefundBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_RefundBolt12SemanticErrorZ_clone_ptr(LDKCResult_RefundBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_RefundBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RefundBolt12SemanticErrorZ CResult_RefundBolt12SemanticErrorZ_clone(const struct LDKCResult_RefundBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12SemanticErrorZ_clone")] public static extern long CResult_RefundBolt12SemanticErrorZ_clone(long _orig);
	// struct LDKCOption_u64Z COption_u64Z_some(uint64_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_some")] public static extern long COption_u64Z_some(long _o);
	// struct LDKCOption_u64Z COption_u64Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_none")] public static extern long COption_u64Z_none();
	// void COption_u64Z_free(struct LDKCOption_u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_free")] public static extern void COption_u64Z_free(long __res);
	// uint64_t COption_u64Z_clone_ptr(LDKCOption_u64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_clone_ptr")] public static extern long COption_u64Z_clone_ptr(long _arg);
	// struct LDKCOption_u64Z COption_u64Z_clone(const struct LDKCOption_u64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u64Z_clone")] public static extern long COption_u64Z_clone(long _orig);
	// void CVec_BlindedMessagePathZ_free(struct LDKCVec_BlindedMessagePathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BlindedMessagePathZ_free")] public static extern void CVec_BlindedMessagePathZ_free(long __res);
	// struct LDKCResult_RefundDecodeErrorZ CResult_RefundDecodeErrorZ_ok(struct LDKRefund o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_ok")] public static extern long CResult_RefundDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RefundDecodeErrorZ CResult_RefundDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_err")] public static extern long CResult_RefundDecodeErrorZ_err(long _e);
	// bool CResult_RefundDecodeErrorZ_is_ok(const struct LDKCResult_RefundDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_is_ok")] public static extern bool CResult_RefundDecodeErrorZ_is_ok(long _o);
	// void CResult_RefundDecodeErrorZ_free(struct LDKCResult_RefundDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_free")] public static extern void CResult_RefundDecodeErrorZ_free(long __res);
	// uint64_t CResult_RefundDecodeErrorZ_clone_ptr(LDKCResult_RefundDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_clone_ptr")] public static extern long CResult_RefundDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RefundDecodeErrorZ CResult_RefundDecodeErrorZ_clone(const struct LDKCResult_RefundDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundDecodeErrorZ_clone")] public static extern long CResult_RefundDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RefundBolt12ParseErrorZ CResult_RefundBolt12ParseErrorZ_ok(struct LDKRefund o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_ok")] public static extern long CResult_RefundBolt12ParseErrorZ_ok(long _o);
	// struct LDKCResult_RefundBolt12ParseErrorZ CResult_RefundBolt12ParseErrorZ_err(struct LDKBolt12ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_err")] public static extern long CResult_RefundBolt12ParseErrorZ_err(long _e);
	// bool CResult_RefundBolt12ParseErrorZ_is_ok(const struct LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_is_ok")] public static extern bool CResult_RefundBolt12ParseErrorZ_is_ok(long _o);
	// void CResult_RefundBolt12ParseErrorZ_free(struct LDKCResult_RefundBolt12ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_free")] public static extern void CResult_RefundBolt12ParseErrorZ_free(long __res);
	// uint64_t CResult_RefundBolt12ParseErrorZ_clone_ptr(LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_clone_ptr")] public static extern long CResult_RefundBolt12ParseErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RefundBolt12ParseErrorZ CResult_RefundBolt12ParseErrorZ_clone(const struct LDKCResult_RefundBolt12ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RefundBolt12ParseErrorZ_clone")] public static extern long CResult_RefundBolt12ParseErrorZ_clone(long _orig);
	// struct LDKCResult_RetryDecodeErrorZ CResult_RetryDecodeErrorZ_ok(struct LDKRetry o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_ok")] public static extern long CResult_RetryDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RetryDecodeErrorZ CResult_RetryDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_err")] public static extern long CResult_RetryDecodeErrorZ_err(long _e);
	// bool CResult_RetryDecodeErrorZ_is_ok(const struct LDKCResult_RetryDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_is_ok")] public static extern bool CResult_RetryDecodeErrorZ_is_ok(long _o);
	// void CResult_RetryDecodeErrorZ_free(struct LDKCResult_RetryDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_free")] public static extern void CResult_RetryDecodeErrorZ_free(long __res);
	// uint64_t CResult_RetryDecodeErrorZ_clone_ptr(LDKCResult_RetryDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_clone_ptr")] public static extern long CResult_RetryDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RetryDecodeErrorZ CResult_RetryDecodeErrorZ_clone(const struct LDKCResult_RetryDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RetryDecodeErrorZ_clone")] public static extern long CResult_RetryDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_ThirtyTwoBytesZ COption_ThirtyTwoBytesZ_some(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_some")] public static extern long COption_ThirtyTwoBytesZ_some(long _o);
	// struct LDKCOption_ThirtyTwoBytesZ COption_ThirtyTwoBytesZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_none")] public static extern long COption_ThirtyTwoBytesZ_none();
	// void COption_ThirtyTwoBytesZ_free(struct LDKCOption_ThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_free")] public static extern void COption_ThirtyTwoBytesZ_free(long __res);
	// uint64_t COption_ThirtyTwoBytesZ_clone_ptr(LDKCOption_ThirtyTwoBytesZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_clone_ptr")] public static extern long COption_ThirtyTwoBytesZ_clone_ptr(long _arg);
	// struct LDKCOption_ThirtyTwoBytesZ COption_ThirtyTwoBytesZ_clone(const struct LDKCOption_ThirtyTwoBytesZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ThirtyTwoBytesZ_clone")] public static extern long COption_ThirtyTwoBytesZ_clone(long _orig);
	// struct LDKCOption_CVec_u8ZZ COption_CVec_u8ZZ_some(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_some")] public static extern long COption_CVec_u8ZZ_some(long _o);
	// struct LDKCOption_CVec_u8ZZ COption_CVec_u8ZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_none")] public static extern long COption_CVec_u8ZZ_none();
	// void COption_CVec_u8ZZ_free(struct LDKCOption_CVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_free")] public static extern void COption_CVec_u8ZZ_free(long __res);
	// uint64_t COption_CVec_u8ZZ_clone_ptr(LDKCOption_CVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_clone_ptr")] public static extern long COption_CVec_u8ZZ_clone_ptr(long _arg);
	// struct LDKCOption_CVec_u8ZZ COption_CVec_u8ZZ_clone(const struct LDKCOption_CVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_u8ZZ_clone")] public static extern long COption_CVec_u8ZZ_clone(long _orig);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ CResult_RecipientOnionFieldsDecodeErrorZ_ok(struct LDKRecipientOnionFields o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_ok")] public static extern long CResult_RecipientOnionFieldsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ CResult_RecipientOnionFieldsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_err")] public static extern long CResult_RecipientOnionFieldsDecodeErrorZ_err(long _e);
	// bool CResult_RecipientOnionFieldsDecodeErrorZ_is_ok(const struct LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_is_ok")] public static extern bool CResult_RecipientOnionFieldsDecodeErrorZ_is_ok(long _o);
	// void CResult_RecipientOnionFieldsDecodeErrorZ_free(struct LDKCResult_RecipientOnionFieldsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_free")] public static extern void CResult_RecipientOnionFieldsDecodeErrorZ_free(long __res);
	// uint64_t CResult_RecipientOnionFieldsDecodeErrorZ_clone_ptr(LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_clone_ptr")] public static extern long CResult_RecipientOnionFieldsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ CResult_RecipientOnionFieldsDecodeErrorZ_clone(const struct LDKCResult_RecipientOnionFieldsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsDecodeErrorZ_clone")] public static extern long CResult_RecipientOnionFieldsDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_u64CVec_u8ZZ_clone_ptr(LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_clone_ptr")] public static extern long C2Tuple_u64CVec_u8ZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_u64CVec_u8ZZ C2Tuple_u64CVec_u8ZZ_clone(const struct LDKC2Tuple_u64CVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_clone")] public static extern long C2Tuple_u64CVec_u8ZZ_clone(long _orig);
	// struct LDKC2Tuple_u64CVec_u8ZZ C2Tuple_u64CVec_u8ZZ_new(uint64_t a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_new")] public static extern long C2Tuple_u64CVec_u8ZZ_new(long _a, long _b);
	// void C2Tuple_u64CVec_u8ZZ_free(struct LDKC2Tuple_u64CVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64CVec_u8ZZ_free")] public static extern void C2Tuple_u64CVec_u8ZZ_free(long __res);
	// void CVec_C2Tuple_u64CVec_u8ZZZ_free(struct LDKCVec_C2Tuple_u64CVec_u8ZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u64CVec_u8ZZZ_free")] public static extern void CVec_C2Tuple_u64CVec_u8ZZZ_free(long __res);
	// struct LDKCResult_RecipientOnionFieldsNoneZ CResult_RecipientOnionFieldsNoneZ_ok(struct LDKRecipientOnionFields o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_ok")] public static extern long CResult_RecipientOnionFieldsNoneZ_ok(long _o);
	// struct LDKCResult_RecipientOnionFieldsNoneZ CResult_RecipientOnionFieldsNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_err")] public static extern long CResult_RecipientOnionFieldsNoneZ_err();
	// bool CResult_RecipientOnionFieldsNoneZ_is_ok(const struct LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_is_ok")] public static extern bool CResult_RecipientOnionFieldsNoneZ_is_ok(long _o);
	// void CResult_RecipientOnionFieldsNoneZ_free(struct LDKCResult_RecipientOnionFieldsNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_free")] public static extern void CResult_RecipientOnionFieldsNoneZ_free(long __res);
	// uint64_t CResult_RecipientOnionFieldsNoneZ_clone_ptr(LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_clone_ptr")] public static extern long CResult_RecipientOnionFieldsNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_RecipientOnionFieldsNoneZ CResult_RecipientOnionFieldsNoneZ_clone(const struct LDKCResult_RecipientOnionFieldsNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecipientOnionFieldsNoneZ_clone")] public static extern long CResult_RecipientOnionFieldsNoneZ_clone(long _orig);
	// uint64_t C2Tuple_DNSResolverMessageResponseInstructionZ_clone_ptr(LDKC2Tuple_DNSResolverMessageResponseInstructionZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageResponseInstructionZ_clone_ptr")] public static extern long C2Tuple_DNSResolverMessageResponseInstructionZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_DNSResolverMessageResponseInstructionZ C2Tuple_DNSResolverMessageResponseInstructionZ_clone(const struct LDKC2Tuple_DNSResolverMessageResponseInstructionZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageResponseInstructionZ_clone")] public static extern long C2Tuple_DNSResolverMessageResponseInstructionZ_clone(long _orig);
	// struct LDKC2Tuple_DNSResolverMessageResponseInstructionZ C2Tuple_DNSResolverMessageResponseInstructionZ_new(struct LDKDNSResolverMessage a, struct LDKResponseInstruction b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageResponseInstructionZ_new")] public static extern long C2Tuple_DNSResolverMessageResponseInstructionZ_new(long _a, long _b);
	// void C2Tuple_DNSResolverMessageResponseInstructionZ_free(struct LDKC2Tuple_DNSResolverMessageResponseInstructionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageResponseInstructionZ_free")] public static extern void C2Tuple_DNSResolverMessageResponseInstructionZ_free(long __res);
	// struct LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_some(struct LDKC2Tuple_DNSResolverMessageResponseInstructionZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_some")] public static extern long COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_some(long _o);
	// struct LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_none")] public static extern long COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_none();
	// void COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_free(struct LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_free")] public static extern void COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_free(long __res);
	// uint64_t COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_clone_ptr(LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_clone_ptr")] public static extern long COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_clone(const struct LDKCOption_C2Tuple_DNSResolverMessageResponseInstructionZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_clone")] public static extern long COption_C2Tuple_DNSResolverMessageResponseInstructionZZ_clone(long _orig);
	// uint64_t C2Tuple_DNSResolverMessageMessageSendInstructionsZ_clone_ptr(LDKC2Tuple_DNSResolverMessageMessageSendInstructionsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageMessageSendInstructionsZ_clone_ptr")] public static extern long C2Tuple_DNSResolverMessageMessageSendInstructionsZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_DNSResolverMessageMessageSendInstructionsZ C2Tuple_DNSResolverMessageMessageSendInstructionsZ_clone(const struct LDKC2Tuple_DNSResolverMessageMessageSendInstructionsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageMessageSendInstructionsZ_clone")] public static extern long C2Tuple_DNSResolverMessageMessageSendInstructionsZ_clone(long _orig);
	// struct LDKC2Tuple_DNSResolverMessageMessageSendInstructionsZ C2Tuple_DNSResolverMessageMessageSendInstructionsZ_new(struct LDKDNSResolverMessage a, struct LDKMessageSendInstructions b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageMessageSendInstructionsZ_new")] public static extern long C2Tuple_DNSResolverMessageMessageSendInstructionsZ_new(long _a, long _b);
	// void C2Tuple_DNSResolverMessageMessageSendInstructionsZ_free(struct LDKC2Tuple_DNSResolverMessageMessageSendInstructionsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSResolverMessageMessageSendInstructionsZ_free")] public static extern void C2Tuple_DNSResolverMessageMessageSendInstructionsZ_free(long __res);
	// void CVec_C2Tuple_DNSResolverMessageMessageSendInstructionsZZ_free(struct LDKCVec_C2Tuple_DNSResolverMessageMessageSendInstructionsZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_DNSResolverMessageMessageSendInstructionsZZ_free")] public static extern void CVec_C2Tuple_DNSResolverMessageMessageSendInstructionsZZ_free(long __res);
	// struct LDKCResult_DNSResolverMessageDecodeErrorZ CResult_DNSResolverMessageDecodeErrorZ_ok(struct LDKDNSResolverMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_ok")] public static extern long CResult_DNSResolverMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_DNSResolverMessageDecodeErrorZ CResult_DNSResolverMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_err")] public static extern long CResult_DNSResolverMessageDecodeErrorZ_err(long _e);
	// bool CResult_DNSResolverMessageDecodeErrorZ_is_ok(const struct LDKCResult_DNSResolverMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_is_ok")] public static extern bool CResult_DNSResolverMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_DNSResolverMessageDecodeErrorZ_free(struct LDKCResult_DNSResolverMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_free")] public static extern void CResult_DNSResolverMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_DNSResolverMessageDecodeErrorZ_clone_ptr(LDKCResult_DNSResolverMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_DNSResolverMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DNSResolverMessageDecodeErrorZ CResult_DNSResolverMessageDecodeErrorZ_clone(const struct LDKCResult_DNSResolverMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverMessageDecodeErrorZ_clone")] public static extern long CResult_DNSResolverMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HumanReadableNameNoneZ CResult_HumanReadableNameNoneZ_ok(struct LDKHumanReadableName o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_ok")] public static extern long CResult_HumanReadableNameNoneZ_ok(long _o);
	// struct LDKCResult_HumanReadableNameNoneZ CResult_HumanReadableNameNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_err")] public static extern long CResult_HumanReadableNameNoneZ_err();
	// bool CResult_HumanReadableNameNoneZ_is_ok(const struct LDKCResult_HumanReadableNameNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_is_ok")] public static extern bool CResult_HumanReadableNameNoneZ_is_ok(long _o);
	// void CResult_HumanReadableNameNoneZ_free(struct LDKCResult_HumanReadableNameNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_free")] public static extern void CResult_HumanReadableNameNoneZ_free(long __res);
	// uint64_t CResult_HumanReadableNameNoneZ_clone_ptr(LDKCResult_HumanReadableNameNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_clone_ptr")] public static extern long CResult_HumanReadableNameNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_HumanReadableNameNoneZ CResult_HumanReadableNameNoneZ_clone(const struct LDKCResult_HumanReadableNameNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameNoneZ_clone")] public static extern long CResult_HumanReadableNameNoneZ_clone(long _orig);
	// struct LDKCResult_HumanReadableNameDecodeErrorZ CResult_HumanReadableNameDecodeErrorZ_ok(struct LDKHumanReadableName o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_ok")] public static extern long CResult_HumanReadableNameDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HumanReadableNameDecodeErrorZ CResult_HumanReadableNameDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_err")] public static extern long CResult_HumanReadableNameDecodeErrorZ_err(long _e);
	// bool CResult_HumanReadableNameDecodeErrorZ_is_ok(const struct LDKCResult_HumanReadableNameDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_is_ok")] public static extern bool CResult_HumanReadableNameDecodeErrorZ_is_ok(long _o);
	// void CResult_HumanReadableNameDecodeErrorZ_free(struct LDKCResult_HumanReadableNameDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_free")] public static extern void CResult_HumanReadableNameDecodeErrorZ_free(long __res);
	// uint64_t CResult_HumanReadableNameDecodeErrorZ_clone_ptr(LDKCResult_HumanReadableNameDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_clone_ptr")] public static extern long CResult_HumanReadableNameDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HumanReadableNameDecodeErrorZ CResult_HumanReadableNameDecodeErrorZ_clone(const struct LDKCResult_HumanReadableNameDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HumanReadableNameDecodeErrorZ_clone")] public static extern long CResult_HumanReadableNameDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_DNSSECQueryDNSResolverContextZ_clone_ptr(LDKC2Tuple_DNSSECQueryDNSResolverContextZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSSECQueryDNSResolverContextZ_clone_ptr")] public static extern long C2Tuple_DNSSECQueryDNSResolverContextZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_DNSSECQueryDNSResolverContextZ C2Tuple_DNSSECQueryDNSResolverContextZ_clone(const struct LDKC2Tuple_DNSSECQueryDNSResolverContextZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSSECQueryDNSResolverContextZ_clone")] public static extern long C2Tuple_DNSSECQueryDNSResolverContextZ_clone(long _orig);
	// struct LDKC2Tuple_DNSSECQueryDNSResolverContextZ C2Tuple_DNSSECQueryDNSResolverContextZ_new(struct LDKDNSSECQuery a, struct LDKDNSResolverContext b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSSECQueryDNSResolverContextZ_new")] public static extern long C2Tuple_DNSSECQueryDNSResolverContextZ_new(long _a, long _b);
	// void C2Tuple_DNSSECQueryDNSResolverContextZ_free(struct LDKC2Tuple_DNSSECQueryDNSResolverContextZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_DNSSECQueryDNSResolverContextZ_free")] public static extern void C2Tuple_DNSSECQueryDNSResolverContextZ_free(long __res);
	// struct LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_ok(struct LDKC2Tuple_DNSSECQueryDNSResolverContextZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_ok")] public static extern long CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_ok(long _o);
	// struct LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_err")] public static extern long CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_err();
	// bool CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_is_ok(const struct LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_is_ok")] public static extern bool CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_is_ok(long _o);
	// void CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_free(struct LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_free")] public static extern void CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_free(long __res);
	// uint64_t CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_clone_ptr(LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_clone_ptr")] public static extern long CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_clone(const struct LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_clone")] public static extern long CResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ_clone(long _orig);
	// uint64_t C2Tuple_HumanReadableNameThirtyTwoBytesZ_clone_ptr(LDKC2Tuple_HumanReadableNameThirtyTwoBytesZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_HumanReadableNameThirtyTwoBytesZ_clone_ptr")] public static extern long C2Tuple_HumanReadableNameThirtyTwoBytesZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_HumanReadableNameThirtyTwoBytesZ C2Tuple_HumanReadableNameThirtyTwoBytesZ_clone(const struct LDKC2Tuple_HumanReadableNameThirtyTwoBytesZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_HumanReadableNameThirtyTwoBytesZ_clone")] public static extern long C2Tuple_HumanReadableNameThirtyTwoBytesZ_clone(long _orig);
	// struct LDKC2Tuple_HumanReadableNameThirtyTwoBytesZ C2Tuple_HumanReadableNameThirtyTwoBytesZ_new(struct LDKHumanReadableName a, struct LDKThirtyTwoBytes b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_HumanReadableNameThirtyTwoBytesZ_new")] public static extern long C2Tuple_HumanReadableNameThirtyTwoBytesZ_new(long _a, long _b);
	// void C2Tuple_HumanReadableNameThirtyTwoBytesZ_free(struct LDKC2Tuple_HumanReadableNameThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_HumanReadableNameThirtyTwoBytesZ_free")] public static extern void C2Tuple_HumanReadableNameThirtyTwoBytesZ_free(long __res);
	// void CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ_free(struct LDKCVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ_free")] public static extern void CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ_free(long __res);
	// uint64_t C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_clone_ptr(LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_clone_ptr")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_clone(const struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_clone")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_clone(long _orig);
	// struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_new(struct LDKCVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ a, struct LDKOffer b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_new")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_new(long _a, long _b);
	// void C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_free(struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_free")] public static extern void C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ_free(long __res);
	// struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_some(struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_some")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_some(long _o);
	// struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_none")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_none();
	// void COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_free(struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_free")] public static extern void COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_free(long __res);
	// uint64_t COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_clone_ptr(LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_clone_ptr")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_clone(const struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_clone")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ_clone(long _orig);
	// uint64_t C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_clone_ptr(LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_clone_ptr")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_clone(const struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_clone")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_clone(long _orig);
	// struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_new(struct LDKCVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZ a, struct LDKStr b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_new")] public static extern long C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_new(long _a, long _b);
	// void C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_free(struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_free")] public static extern void C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ_free(long __res);
	// struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_some(struct LDKC2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_some")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_some(long _o);
	// struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_none")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_none();
	// void COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_free(struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_free")] public static extern void COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_free(long __res);
	// uint64_t COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_clone_ptr(LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_clone_ptr")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_clone(const struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_clone")] public static extern long COption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ_clone(long _orig);
	// struct LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_ok(struct LDKUnsignedBolt12Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_ok")] public static extern long CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_err")] public static extern long CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_is_ok(const struct LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_free(struct LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_free")] public static extern void CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_clone_ptr(LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_clone(const struct LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_clone")] public static extern long CResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ CResult_Bolt12InvoiceBolt12SemanticErrorZ_ok(struct LDKBolt12Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_ok")] public static extern long CResult_Bolt12InvoiceBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ CResult_Bolt12InvoiceBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_err")] public static extern long CResult_Bolt12InvoiceBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_Bolt12InvoiceBolt12SemanticErrorZ_is_ok(const struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_Bolt12InvoiceBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_Bolt12InvoiceBolt12SemanticErrorZ_free(struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_free")] public static extern void CResult_Bolt12InvoiceBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_Bolt12InvoiceBolt12SemanticErrorZ_clone_ptr(LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_Bolt12InvoiceBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ CResult_Bolt12InvoiceBolt12SemanticErrorZ_clone(const struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceBolt12SemanticErrorZ_clone")] public static extern long CResult_Bolt12InvoiceBolt12SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_SchnorrSignatureNoneZ CResult_SchnorrSignatureNoneZ_ok(struct LDKSchnorrSignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_ok")] public static extern long CResult_SchnorrSignatureNoneZ_ok(long _o);
	// struct LDKCResult_SchnorrSignatureNoneZ CResult_SchnorrSignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_err")] public static extern long CResult_SchnorrSignatureNoneZ_err();
	// bool CResult_SchnorrSignatureNoneZ_is_ok(const struct LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_is_ok")] public static extern bool CResult_SchnorrSignatureNoneZ_is_ok(long _o);
	// void CResult_SchnorrSignatureNoneZ_free(struct LDKCResult_SchnorrSignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_free")] public static extern void CResult_SchnorrSignatureNoneZ_free(long __res);
	// uint64_t CResult_SchnorrSignatureNoneZ_clone_ptr(LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_clone_ptr")] public static extern long CResult_SchnorrSignatureNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_SchnorrSignatureNoneZ CResult_SchnorrSignatureNoneZ_clone(const struct LDKCResult_SchnorrSignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SchnorrSignatureNoneZ_clone")] public static extern long CResult_SchnorrSignatureNoneZ_clone(long _orig);
	// void CVec_BlindedPaymentPathZ_free(struct LDKCVec_BlindedPaymentPathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BlindedPaymentPathZ_free")] public static extern void CVec_BlindedPaymentPathZ_free(long __res);
	// void CVec_AddressZ_free(struct LDKCVec_AddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_AddressZ_free")] public static extern void CVec_AddressZ_free(long __res);
	// void CVec_ThirtyTwoBytesZ_free(struct LDKCVec_ThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ThirtyTwoBytesZ_free")] public static extern void CVec_ThirtyTwoBytesZ_free(long __res);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ COption_CVec_ThirtyTwoBytesZZ_some(struct LDKCVec_ThirtyTwoBytesZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_some")] public static extern long COption_CVec_ThirtyTwoBytesZZ_some(long _o);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ COption_CVec_ThirtyTwoBytesZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_none")] public static extern long COption_CVec_ThirtyTwoBytesZZ_none();
	// void COption_CVec_ThirtyTwoBytesZZ_free(struct LDKCOption_CVec_ThirtyTwoBytesZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_free")] public static extern void COption_CVec_ThirtyTwoBytesZZ_free(long __res);
	// uint64_t COption_CVec_ThirtyTwoBytesZZ_clone_ptr(LDKCOption_CVec_ThirtyTwoBytesZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_clone_ptr")] public static extern long COption_CVec_ThirtyTwoBytesZZ_clone_ptr(long _arg);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ COption_CVec_ThirtyTwoBytesZZ_clone(const struct LDKCOption_CVec_ThirtyTwoBytesZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_ThirtyTwoBytesZZ_clone")] public static extern long COption_CVec_ThirtyTwoBytesZZ_clone(long _orig);
	// struct LDKCOption_AmountZ COption_AmountZ_some(struct LDKAmount o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AmountZ_some")] public static extern long COption_AmountZ_some(long _o);
	// struct LDKCOption_AmountZ COption_AmountZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AmountZ_none")] public static extern long COption_AmountZ_none();
	// void COption_AmountZ_free(struct LDKCOption_AmountZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AmountZ_free")] public static extern void COption_AmountZ_free(long __res);
	// uint64_t COption_AmountZ_clone_ptr(LDKCOption_AmountZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AmountZ_clone_ptr")] public static extern long COption_AmountZ_clone_ptr(long _arg);
	// struct LDKCOption_AmountZ COption_AmountZ_clone(const struct LDKCOption_AmountZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AmountZ_clone")] public static extern long COption_AmountZ_clone(long _orig);
	// struct LDKCOption_QuantityZ COption_QuantityZ_some(struct LDKQuantity o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_QuantityZ_some")] public static extern long COption_QuantityZ_some(long _o);
	// struct LDKCOption_QuantityZ COption_QuantityZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_QuantityZ_none")] public static extern long COption_QuantityZ_none();
	// void COption_QuantityZ_free(struct LDKCOption_QuantityZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_QuantityZ_free")] public static extern void COption_QuantityZ_free(long __res);
	// uint64_t COption_QuantityZ_clone_ptr(LDKCOption_QuantityZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_QuantityZ_clone_ptr")] public static extern long COption_QuantityZ_clone_ptr(long _arg);
	// struct LDKCOption_QuantityZ COption_QuantityZ_clone(const struct LDKCOption_QuantityZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_QuantityZ_clone")] public static extern long COption_QuantityZ_clone(long _orig);
	// struct LDKCResult_ThirtyTwoBytesNoneZ CResult_ThirtyTwoBytesNoneZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_ok")] public static extern long CResult_ThirtyTwoBytesNoneZ_ok(long _o);
	// struct LDKCResult_ThirtyTwoBytesNoneZ CResult_ThirtyTwoBytesNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_err")] public static extern long CResult_ThirtyTwoBytesNoneZ_err();
	// bool CResult_ThirtyTwoBytesNoneZ_is_ok(const struct LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_is_ok")] public static extern bool CResult_ThirtyTwoBytesNoneZ_is_ok(long _o);
	// void CResult_ThirtyTwoBytesNoneZ_free(struct LDKCResult_ThirtyTwoBytesNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_free")] public static extern void CResult_ThirtyTwoBytesNoneZ_free(long __res);
	// uint64_t CResult_ThirtyTwoBytesNoneZ_clone_ptr(LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_clone_ptr")] public static extern long CResult_ThirtyTwoBytesNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_ThirtyTwoBytesNoneZ CResult_ThirtyTwoBytesNoneZ_clone(const struct LDKCResult_ThirtyTwoBytesNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesNoneZ_clone")] public static extern long CResult_ThirtyTwoBytesNoneZ_clone(long _orig);
	// struct LDKCResult_Bolt12InvoiceDecodeErrorZ CResult_Bolt12InvoiceDecodeErrorZ_ok(struct LDKBolt12Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_ok")] public static extern long CResult_Bolt12InvoiceDecodeErrorZ_ok(long _o);
	// struct LDKCResult_Bolt12InvoiceDecodeErrorZ CResult_Bolt12InvoiceDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_err")] public static extern long CResult_Bolt12InvoiceDecodeErrorZ_err(long _e);
	// bool CResult_Bolt12InvoiceDecodeErrorZ_is_ok(const struct LDKCResult_Bolt12InvoiceDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_is_ok")] public static extern bool CResult_Bolt12InvoiceDecodeErrorZ_is_ok(long _o);
	// void CResult_Bolt12InvoiceDecodeErrorZ_free(struct LDKCResult_Bolt12InvoiceDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_free")] public static extern void CResult_Bolt12InvoiceDecodeErrorZ_free(long __res);
	// uint64_t CResult_Bolt12InvoiceDecodeErrorZ_clone_ptr(LDKCResult_Bolt12InvoiceDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_clone_ptr")] public static extern long CResult_Bolt12InvoiceDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt12InvoiceDecodeErrorZ CResult_Bolt12InvoiceDecodeErrorZ_clone(const struct LDKCResult_Bolt12InvoiceDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceDecodeErrorZ_clone")] public static extern long CResult_Bolt12InvoiceDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok(struct LDKDelayedPaymentOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_err(long _e);
	// bool CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_is_ok(long _o);
	// void CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free(struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free")] public static extern void CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_free(long __res);
	// uint64_t CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone")] public static extern long CResult_DelayedPaymentOutputDescriptorDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok(struct LDKStaticPaymentOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_err(long _e);
	// bool CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResult_StaticPaymentOutputDescriptorDecodeErrorZ_is_ok(long _o);
	// void CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free(struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free")] public static extern void CResult_StaticPaymentOutputDescriptorDecodeErrorZ_free(long __res);
	// uint64_t CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone")] public static extern long CResult_StaticPaymentOutputDescriptorDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_ok(struct LDKSpendableOutputDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_ok")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_err")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_err(long _e);
	// bool CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok")] public static extern bool CResult_SpendableOutputDescriptorDecodeErrorZ_is_ok(long _o);
	// void CResult_SpendableOutputDescriptorDecodeErrorZ_free(struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_free")] public static extern void CResult_SpendableOutputDescriptorDecodeErrorZ_free(long __res);
	// uint64_t CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr(LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ CResult_SpendableOutputDescriptorDecodeErrorZ_clone(const struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpendableOutputDescriptorDecodeErrorZ_clone")] public static extern long CResult_SpendableOutputDescriptorDecodeErrorZ_clone(long _orig);
	// void CVec_SpendableOutputDescriptorZ_free(struct LDKCVec_SpendableOutputDescriptorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_SpendableOutputDescriptorZ_free")] public static extern void CVec_SpendableOutputDescriptorZ_free(long __res);
	// void CVec_TxOutZ_free(struct LDKCVec_TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_TxOutZ_free")] public static extern void CVec_TxOutZ_free(long __res);
	// struct LDKCOption_u32Z COption_u32Z_some(uint32_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_some")] public static extern long COption_u32Z_some(int _o);
	// struct LDKCOption_u32Z COption_u32Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_none")] public static extern long COption_u32Z_none();
	// void COption_u32Z_free(struct LDKCOption_u32Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_free")] public static extern void COption_u32Z_free(long __res);
	// uint64_t COption_u32Z_clone_ptr(LDKCOption_u32Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_clone_ptr")] public static extern long COption_u32Z_clone_ptr(long _arg);
	// struct LDKCOption_u32Z COption_u32Z_clone(const struct LDKCOption_u32Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u32Z_clone")] public static extern long COption_u32Z_clone(long _orig);
	// uint64_t C2Tuple_CVec_u8Zu64Z_clone_ptr(LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_clone_ptr")] public static extern long C2Tuple_CVec_u8Zu64Z_clone_ptr(long _arg);
	// struct LDKC2Tuple_CVec_u8Zu64Z C2Tuple_CVec_u8Zu64Z_clone(const struct LDKC2Tuple_CVec_u8Zu64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_clone")] public static extern long C2Tuple_CVec_u8Zu64Z_clone(long _orig);
	// struct LDKC2Tuple_CVec_u8Zu64Z C2Tuple_CVec_u8Zu64Z_new(struct LDKCVec_u8Z a, uint64_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_new")] public static extern long C2Tuple_CVec_u8Zu64Z_new(long _a, long _b);
	// void C2Tuple_CVec_u8Zu64Z_free(struct LDKC2Tuple_CVec_u8Zu64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_CVec_u8Zu64Z_free")] public static extern void C2Tuple_CVec_u8Zu64Z_free(long __res);
	// struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ CResult_C2Tuple_CVec_u8Zu64ZNoneZ_ok(struct LDKC2Tuple_CVec_u8Zu64Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_ok")] public static extern long CResult_C2Tuple_CVec_u8Zu64ZNoneZ_ok(long _o);
	// struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ CResult_C2Tuple_CVec_u8Zu64ZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_err")] public static extern long CResult_C2Tuple_CVec_u8Zu64ZNoneZ_err();
	// bool CResult_C2Tuple_CVec_u8Zu64ZNoneZ_is_ok(const struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_is_ok")] public static extern bool CResult_C2Tuple_CVec_u8Zu64ZNoneZ_is_ok(long _o);
	// void CResult_C2Tuple_CVec_u8Zu64ZNoneZ_free(struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_free")] public static extern void CResult_C2Tuple_CVec_u8Zu64ZNoneZ_free(long __res);
	// uint64_t CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone_ptr(LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone_ptr")] public static extern long CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone(const struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone")] public static extern long CResult_C2Tuple_CVec_u8Zu64ZNoneZ_clone(long _orig);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ CResult_ChannelDerivationParametersDecodeErrorZ_ok(struct LDKChannelDerivationParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_ok")] public static extern long CResult_ChannelDerivationParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ CResult_ChannelDerivationParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_err")] public static extern long CResult_ChannelDerivationParametersDecodeErrorZ_err(long _e);
	// bool CResult_ChannelDerivationParametersDecodeErrorZ_is_ok(const struct LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelDerivationParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelDerivationParametersDecodeErrorZ_free(struct LDKCResult_ChannelDerivationParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_free")] public static extern void CResult_ChannelDerivationParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelDerivationParametersDecodeErrorZ_clone_ptr(LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelDerivationParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ CResult_ChannelDerivationParametersDecodeErrorZ_clone(const struct LDKCResult_ChannelDerivationParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDerivationParametersDecodeErrorZ_clone")] public static extern long CResult_ChannelDerivationParametersDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ CResult_HTLCDescriptorDecodeErrorZ_ok(struct LDKHTLCDescriptor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_ok")] public static extern long CResult_HTLCDescriptorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ CResult_HTLCDescriptorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_err")] public static extern long CResult_HTLCDescriptorDecodeErrorZ_err(long _e);
	// bool CResult_HTLCDescriptorDecodeErrorZ_is_ok(const struct LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_is_ok")] public static extern bool CResult_HTLCDescriptorDecodeErrorZ_is_ok(long _o);
	// void CResult_HTLCDescriptorDecodeErrorZ_free(struct LDKCResult_HTLCDescriptorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_free")] public static extern void CResult_HTLCDescriptorDecodeErrorZ_free(long __res);
	// uint64_t CResult_HTLCDescriptorDecodeErrorZ_clone_ptr(LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_clone_ptr")] public static extern long CResult_HTLCDescriptorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ CResult_HTLCDescriptorDecodeErrorZ_clone(const struct LDKCResult_HTLCDescriptorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCDescriptorDecodeErrorZ_clone")] public static extern long CResult_HTLCDescriptorDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_ok(struct LDKPublicKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_ok")] public static extern long CResult_PublicKeyNoneZ_ok(long _o);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_err")] public static extern long CResult_PublicKeyNoneZ_err();
	// bool CResult_PublicKeyNoneZ_is_ok(const struct LDKCResult_PublicKeyNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_is_ok")] public static extern bool CResult_PublicKeyNoneZ_is_ok(long _o);
	// void CResult_PublicKeyNoneZ_free(struct LDKCResult_PublicKeyNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_free")] public static extern void CResult_PublicKeyNoneZ_free(long __res);
	// uint64_t CResult_PublicKeyNoneZ_clone_ptr(LDKCResult_PublicKeyNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_clone_ptr")] public static extern long CResult_PublicKeyNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_PublicKeyNoneZ CResult_PublicKeyNoneZ_clone(const struct LDKCResult_PublicKeyNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeyNoneZ_clone")] public static extern long CResult_PublicKeyNoneZ_clone(long _orig);
	// struct LDKCResult__u832NoneZ CResult__u832NoneZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_ok")] public static extern long CResult__u832NoneZ_ok(long _o);
	// struct LDKCResult__u832NoneZ CResult__u832NoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_err")] public static extern long CResult__u832NoneZ_err();
	// bool CResult__u832NoneZ_is_ok(const struct LDKCResult__u832NoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_is_ok")] public static extern bool CResult__u832NoneZ_is_ok(long _o);
	// void CResult__u832NoneZ_free(struct LDKCResult__u832NoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_free")] public static extern void CResult__u832NoneZ_free(long __res);
	// uint64_t CResult__u832NoneZ_clone_ptr(LDKCResult__u832NoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_clone_ptr")] public static extern long CResult__u832NoneZ_clone_ptr(long _arg);
	// struct LDKCResult__u832NoneZ CResult__u832NoneZ_clone(const struct LDKCResult__u832NoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult__u832NoneZ_clone")] public static extern long CResult__u832NoneZ_clone(long _orig);
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_ok")] public static extern long CResult_NoneNoneZ_ok();
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_err")] public static extern long CResult_NoneNoneZ_err();
	// bool CResult_NoneNoneZ_is_ok(const struct LDKCResult_NoneNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_is_ok")] public static extern bool CResult_NoneNoneZ_is_ok(long _o);
	// void CResult_NoneNoneZ_free(struct LDKCResult_NoneNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_free")] public static extern void CResult_NoneNoneZ_free(long __res);
	// uint64_t CResult_NoneNoneZ_clone_ptr(LDKCResult_NoneNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_clone_ptr")] public static extern long CResult_NoneNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneNoneZ CResult_NoneNoneZ_clone(const struct LDKCResult_NoneNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneNoneZ_clone")] public static extern long CResult_NoneNoneZ_clone(long _orig);
	// struct LDKCOption_BigEndianScalarZ COption_BigEndianScalarZ_some(struct LDKBigEndianScalar o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_some")] public static extern long COption_BigEndianScalarZ_some(long _o);
	// struct LDKCOption_BigEndianScalarZ COption_BigEndianScalarZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_none")] public static extern long COption_BigEndianScalarZ_none();
	// void COption_BigEndianScalarZ_free(struct LDKCOption_BigEndianScalarZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_free")] public static extern void COption_BigEndianScalarZ_free(long __res);
	// uint64_t COption_BigEndianScalarZ_clone_ptr(LDKCOption_BigEndianScalarZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_clone_ptr")] public static extern long COption_BigEndianScalarZ_clone_ptr(long _arg);
	// struct LDKCOption_BigEndianScalarZ COption_BigEndianScalarZ_clone(const struct LDKCOption_BigEndianScalarZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_BigEndianScalarZ_clone")] public static extern long COption_BigEndianScalarZ_clone(long _orig);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_ok(struct LDKRecoverableSignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_ok")] public static extern long CResult_RecoverableSignatureNoneZ_ok(long _o);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_err")] public static extern long CResult_RecoverableSignatureNoneZ_err();
	// bool CResult_RecoverableSignatureNoneZ_is_ok(const struct LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_is_ok")] public static extern bool CResult_RecoverableSignatureNoneZ_is_ok(long _o);
	// void CResult_RecoverableSignatureNoneZ_free(struct LDKCResult_RecoverableSignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_free")] public static extern void CResult_RecoverableSignatureNoneZ_free(long __res);
	// uint64_t CResult_RecoverableSignatureNoneZ_clone_ptr(LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_clone_ptr")] public static extern long CResult_RecoverableSignatureNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_RecoverableSignatureNoneZ CResult_RecoverableSignatureNoneZ_clone(const struct LDKCResult_RecoverableSignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RecoverableSignatureNoneZ_clone")] public static extern long CResult_RecoverableSignatureNoneZ_clone(long _orig);
	// struct LDKCResult_ECDSASignatureNoneZ CResult_ECDSASignatureNoneZ_ok(struct LDKECDSASignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_ok")] public static extern long CResult_ECDSASignatureNoneZ_ok(long _o);
	// struct LDKCResult_ECDSASignatureNoneZ CResult_ECDSASignatureNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_err")] public static extern long CResult_ECDSASignatureNoneZ_err();
	// bool CResult_ECDSASignatureNoneZ_is_ok(const struct LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_is_ok")] public static extern bool CResult_ECDSASignatureNoneZ_is_ok(long _o);
	// void CResult_ECDSASignatureNoneZ_free(struct LDKCResult_ECDSASignatureNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_free")] public static extern void CResult_ECDSASignatureNoneZ_free(long __res);
	// uint64_t CResult_ECDSASignatureNoneZ_clone_ptr(LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_clone_ptr")] public static extern long CResult_ECDSASignatureNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_ECDSASignatureNoneZ CResult_ECDSASignatureNoneZ_clone(const struct LDKCResult_ECDSASignatureNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ECDSASignatureNoneZ_clone")] public static extern long CResult_ECDSASignatureNoneZ_clone(long _orig);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_ok(struct LDKTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_ok")] public static extern long CResult_TransactionNoneZ_ok(long _o);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_err")] public static extern long CResult_TransactionNoneZ_err();
	// bool CResult_TransactionNoneZ_is_ok(const struct LDKCResult_TransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_is_ok")] public static extern bool CResult_TransactionNoneZ_is_ok(long _o);
	// void CResult_TransactionNoneZ_free(struct LDKCResult_TransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_free")] public static extern void CResult_TransactionNoneZ_free(long __res);
	// uint64_t CResult_TransactionNoneZ_clone_ptr(LDKCResult_TransactionNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_clone_ptr")] public static extern long CResult_TransactionNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_TransactionNoneZ CResult_TransactionNoneZ_clone(const struct LDKCResult_TransactionNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionNoneZ_clone")] public static extern long CResult_TransactionNoneZ_clone(long _orig);
	// struct LDKCResult_EcdsaChannelSignerDecodeErrorZ CResult_EcdsaChannelSignerDecodeErrorZ_ok(struct LDKEcdsaChannelSigner o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_ok")] public static extern long CResult_EcdsaChannelSignerDecodeErrorZ_ok(long _o);
	// struct LDKCResult_EcdsaChannelSignerDecodeErrorZ CResult_EcdsaChannelSignerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_err")] public static extern long CResult_EcdsaChannelSignerDecodeErrorZ_err(long _e);
	// bool CResult_EcdsaChannelSignerDecodeErrorZ_is_ok(const struct LDKCResult_EcdsaChannelSignerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_is_ok")] public static extern bool CResult_EcdsaChannelSignerDecodeErrorZ_is_ok(long _o);
	// void CResult_EcdsaChannelSignerDecodeErrorZ_free(struct LDKCResult_EcdsaChannelSignerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_free")] public static extern void CResult_EcdsaChannelSignerDecodeErrorZ_free(long __res);
	// uint64_t CResult_EcdsaChannelSignerDecodeErrorZ_clone_ptr(LDKCResult_EcdsaChannelSignerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_clone_ptr")] public static extern long CResult_EcdsaChannelSignerDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_EcdsaChannelSignerDecodeErrorZ CResult_EcdsaChannelSignerDecodeErrorZ_clone(const struct LDKCResult_EcdsaChannelSignerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_EcdsaChannelSignerDecodeErrorZ_clone")] public static extern long CResult_EcdsaChannelSignerDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_CVec_u8ZNoneZ CResult_CVec_u8ZNoneZ_ok(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_ok")] public static extern long CResult_CVec_u8ZNoneZ_ok(long _o);
	// struct LDKCResult_CVec_u8ZNoneZ CResult_CVec_u8ZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_err")] public static extern long CResult_CVec_u8ZNoneZ_err();
	// bool CResult_CVec_u8ZNoneZ_is_ok(const struct LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_is_ok")] public static extern bool CResult_CVec_u8ZNoneZ_is_ok(long _o);
	// void CResult_CVec_u8ZNoneZ_free(struct LDKCResult_CVec_u8ZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_free")] public static extern void CResult_CVec_u8ZNoneZ_free(long __res);
	// uint64_t CResult_CVec_u8ZNoneZ_clone_ptr(LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_clone_ptr")] public static extern long CResult_CVec_u8ZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_u8ZNoneZ CResult_CVec_u8ZNoneZ_clone(const struct LDKCResult_CVec_u8ZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZNoneZ_clone")] public static extern long CResult_CVec_u8ZNoneZ_clone(long _orig);
	// struct LDKCResult_ShutdownScriptNoneZ CResult_ShutdownScriptNoneZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_ok")] public static extern long CResult_ShutdownScriptNoneZ_ok(long _o);
	// struct LDKCResult_ShutdownScriptNoneZ CResult_ShutdownScriptNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_err")] public static extern long CResult_ShutdownScriptNoneZ_err();
	// bool CResult_ShutdownScriptNoneZ_is_ok(const struct LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_is_ok")] public static extern bool CResult_ShutdownScriptNoneZ_is_ok(long _o);
	// void CResult_ShutdownScriptNoneZ_free(struct LDKCResult_ShutdownScriptNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_free")] public static extern void CResult_ShutdownScriptNoneZ_free(long __res);
	// uint64_t CResult_ShutdownScriptNoneZ_clone_ptr(LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_clone_ptr")] public static extern long CResult_ShutdownScriptNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_ShutdownScriptNoneZ CResult_ShutdownScriptNoneZ_clone(const struct LDKCResult_ShutdownScriptNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptNoneZ_clone")] public static extern long CResult_ShutdownScriptNoneZ_clone(long _orig);
	// struct LDKCOption_u16Z COption_u16Z_some(uint16_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_some")] public static extern long COption_u16Z_some(short _o);
	// struct LDKCOption_u16Z COption_u16Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_none")] public static extern long COption_u16Z_none();
	// void COption_u16Z_free(struct LDKCOption_u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_free")] public static extern void COption_u16Z_free(long __res);
	// uint64_t COption_u16Z_clone_ptr(LDKCOption_u16Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_clone_ptr")] public static extern long COption_u16Z_clone_ptr(long _arg);
	// struct LDKCOption_u16Z COption_u16Z_clone(const struct LDKCOption_u16Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_u16Z_clone")] public static extern long COption_u16Z_clone(long _orig);
	// struct LDKCOption_boolZ COption_boolZ_some(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_some")] public static extern long COption_boolZ_some(bool _o);
	// struct LDKCOption_boolZ COption_boolZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_none")] public static extern long COption_boolZ_none();
	// void COption_boolZ_free(struct LDKCOption_boolZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_free")] public static extern void COption_boolZ_free(long __res);
	// uint64_t COption_boolZ_clone_ptr(LDKCOption_boolZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_clone_ptr")] public static extern long COption_boolZ_clone_ptr(long _arg);
	// struct LDKCOption_boolZ COption_boolZ_clone(const struct LDKCOption_boolZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_boolZ_clone")] public static extern long COption_boolZ_clone(long _orig);
	// struct LDKCResult_WitnessNoneZ CResult_WitnessNoneZ_ok(struct LDKWitness o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_ok")] public static extern long CResult_WitnessNoneZ_ok(long _o);
	// struct LDKCResult_WitnessNoneZ CResult_WitnessNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_err")] public static extern long CResult_WitnessNoneZ_err();
	// bool CResult_WitnessNoneZ_is_ok(const struct LDKCResult_WitnessNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_is_ok")] public static extern bool CResult_WitnessNoneZ_is_ok(long _o);
	// void CResult_WitnessNoneZ_free(struct LDKCResult_WitnessNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_free")] public static extern void CResult_WitnessNoneZ_free(long __res);
	// uint64_t CResult_WitnessNoneZ_clone_ptr(LDKCResult_WitnessNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_clone_ptr")] public static extern long CResult_WitnessNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_WitnessNoneZ CResult_WitnessNoneZ_clone(const struct LDKCResult_WitnessNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WitnessNoneZ_clone")] public static extern long CResult_WitnessNoneZ_clone(long _orig);
	// void CVec_ECDSASignatureZ_free(struct LDKCVec_ECDSASignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ECDSASignatureZ_free")] public static extern void CVec_ECDSASignatureZ_free(long __res);
	// uint64_t C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone_ptr(LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone_ptr")] public static extern long C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone(const struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone")] public static extern long C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_clone(long _orig);
	// struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_new(struct LDKECDSASignature a, struct LDKCVec_ECDSASignatureZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_new")] public static extern long C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_new(long _a, long _b);
	// void C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_free(struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_free")] public static extern void C2Tuple_ECDSASignatureCVec_ECDSASignatureZZ_free(long __res);
	// struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_ok(struct LDKC2Tuple_ECDSASignatureCVec_ECDSASignatureZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_ok")] public static extern long CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_ok(long _o);
	// struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_err")] public static extern long CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_err();
	// bool CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_is_ok(const struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_is_ok")] public static extern bool CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_is_ok(long _o);
	// void CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_free(struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_free")] public static extern void CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_free(long __res);
	// uint64_t CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone_ptr(LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone_ptr")] public static extern long CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone(const struct LDKCResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone")] public static extern long CResult_C2Tuple_ECDSASignatureCVec_ECDSASignatureZZNoneZ_clone(long _orig);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_ok(struct LDKInMemorySigner o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_ok")] public static extern long CResult_InMemorySignerDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_err")] public static extern long CResult_InMemorySignerDecodeErrorZ_err(long _e);
	// bool CResult_InMemorySignerDecodeErrorZ_is_ok(const struct LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_is_ok")] public static extern bool CResult_InMemorySignerDecodeErrorZ_is_ok(long _o);
	// void CResult_InMemorySignerDecodeErrorZ_free(struct LDKCResult_InMemorySignerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_free")] public static extern void CResult_InMemorySignerDecodeErrorZ_free(long __res);
	// uint64_t CResult_InMemorySignerDecodeErrorZ_clone_ptr(LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_clone_ptr")] public static extern long CResult_InMemorySignerDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InMemorySignerDecodeErrorZ CResult_InMemorySignerDecodeErrorZ_clone(const struct LDKCResult_InMemorySignerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InMemorySignerDecodeErrorZ_clone")] public static extern long CResult_InMemorySignerDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_WriteableScoreZ COption_WriteableScoreZ_some(struct LDKWriteableScore o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_some")] public static extern long COption_WriteableScoreZ_some(long _o);
	// struct LDKCOption_WriteableScoreZ COption_WriteableScoreZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_none")] public static extern long COption_WriteableScoreZ_none();
	// void COption_WriteableScoreZ_free(struct LDKCOption_WriteableScoreZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_WriteableScoreZ_free")] public static extern void COption_WriteableScoreZ_free(long __res);
	// struct LDKCResult_NoneIOErrorZ CResult_NoneIOErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_ok")] public static extern long CResult_NoneIOErrorZ_ok();
	// struct LDKCResult_NoneIOErrorZ CResult_NoneIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_err")] public static extern long CResult_NoneIOErrorZ_err(IOError _e);
	// bool CResult_NoneIOErrorZ_is_ok(const struct LDKCResult_NoneIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_is_ok")] public static extern bool CResult_NoneIOErrorZ_is_ok(long _o);
	// void CResult_NoneIOErrorZ_free(struct LDKCResult_NoneIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_free")] public static extern void CResult_NoneIOErrorZ_free(long __res);
	// uint64_t CResult_NoneIOErrorZ_clone_ptr(LDKCResult_NoneIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_clone_ptr")] public static extern long CResult_NoneIOErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneIOErrorZ CResult_NoneIOErrorZ_clone(const struct LDKCResult_NoneIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneIOErrorZ_clone")] public static extern long CResult_NoneIOErrorZ_clone(long _orig);
	// uint64_t C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone_ptr(LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone_ptr")] public static extern long C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone(const struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone")] public static extern long C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_clone(long _orig);
	// struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_new(struct LDKThirtyTwoBytes a, struct LDKRecipientOnionFields b, struct LDKRouteParameters c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_new")] public static extern long C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_new(long _a, long _b, long _c);
	// void C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_free(struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_free")] public static extern void C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ_free(long __res);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_ok(struct LDKC3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_ok")] public static extern long CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_ok(long _o);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_err")] public static extern long CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_err();
	// bool CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_is_ok(const struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_is_ok")] public static extern bool CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_is_ok(long _o);
	// void CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_free(struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_free")] public static extern void CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_free(long __res);
	// uint64_t CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone_ptr(LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone_ptr")] public static extern long CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone(const struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone")] public static extern long CResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ_clone(long _orig);
	// void CVec_ChannelDetailsZ_free(struct LDKCVec_ChannelDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ChannelDetailsZ_free")] public static extern void CVec_ChannelDetailsZ_free(long __res);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_ok(struct LDKRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_ok")] public static extern long CResult_RouteLightningErrorZ_ok(long _o);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_err")] public static extern long CResult_RouteLightningErrorZ_err(long _e);
	// bool CResult_RouteLightningErrorZ_is_ok(const struct LDKCResult_RouteLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_is_ok")] public static extern bool CResult_RouteLightningErrorZ_is_ok(long _o);
	// void CResult_RouteLightningErrorZ_free(struct LDKCResult_RouteLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_free")] public static extern void CResult_RouteLightningErrorZ_free(long __res);
	// uint64_t CResult_RouteLightningErrorZ_clone_ptr(LDKCResult_RouteLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_clone_ptr")] public static extern long CResult_RouteLightningErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteLightningErrorZ CResult_RouteLightningErrorZ_clone(const struct LDKCResult_RouteLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteLightningErrorZ_clone")] public static extern long CResult_RouteLightningErrorZ_clone(long _orig);
	// struct LDKCResult_CVec_BlindedPaymentPathZNoneZ CResult_CVec_BlindedPaymentPathZNoneZ_ok(struct LDKCVec_BlindedPaymentPathZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_ok")] public static extern long CResult_CVec_BlindedPaymentPathZNoneZ_ok(long _o);
	// struct LDKCResult_CVec_BlindedPaymentPathZNoneZ CResult_CVec_BlindedPaymentPathZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_err")] public static extern long CResult_CVec_BlindedPaymentPathZNoneZ_err();
	// bool CResult_CVec_BlindedPaymentPathZNoneZ_is_ok(const struct LDKCResult_CVec_BlindedPaymentPathZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_is_ok")] public static extern bool CResult_CVec_BlindedPaymentPathZNoneZ_is_ok(long _o);
	// void CResult_CVec_BlindedPaymentPathZNoneZ_free(struct LDKCResult_CVec_BlindedPaymentPathZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_free")] public static extern void CResult_CVec_BlindedPaymentPathZNoneZ_free(long __res);
	// uint64_t CResult_CVec_BlindedPaymentPathZNoneZ_clone_ptr(LDKCResult_CVec_BlindedPaymentPathZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_clone_ptr")] public static extern long CResult_CVec_BlindedPaymentPathZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_BlindedPaymentPathZNoneZ CResult_CVec_BlindedPaymentPathZNoneZ_clone(const struct LDKCResult_CVec_BlindedPaymentPathZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedPaymentPathZNoneZ_clone")] public static extern long CResult_CVec_BlindedPaymentPathZNoneZ_clone(long _orig);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_ok(struct LDKInFlightHtlcs o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_ok")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_err")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_err(long _e);
	// bool CResult_InFlightHtlcsDecodeErrorZ_is_ok(const struct LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_is_ok")] public static extern bool CResult_InFlightHtlcsDecodeErrorZ_is_ok(long _o);
	// void CResult_InFlightHtlcsDecodeErrorZ_free(struct LDKCResult_InFlightHtlcsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_free")] public static extern void CResult_InFlightHtlcsDecodeErrorZ_free(long __res);
	// uint64_t CResult_InFlightHtlcsDecodeErrorZ_clone_ptr(LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_clone_ptr")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ CResult_InFlightHtlcsDecodeErrorZ_clone(const struct LDKCResult_InFlightHtlcsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InFlightHtlcsDecodeErrorZ_clone")] public static extern long CResult_InFlightHtlcsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_ok(struct LDKRouteHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_ok")] public static extern long CResult_RouteHopDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_err")] public static extern long CResult_RouteHopDecodeErrorZ_err(long _e);
	// bool CResult_RouteHopDecodeErrorZ_is_ok(const struct LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_is_ok")] public static extern bool CResult_RouteHopDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteHopDecodeErrorZ_free(struct LDKCResult_RouteHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_free")] public static extern void CResult_RouteHopDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteHopDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteHopDecodeErrorZ CResult_RouteHopDecodeErrorZ_clone(const struct LDKCResult_RouteHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHopDecodeErrorZ_clone")] public static extern long CResult_RouteHopDecodeErrorZ_clone(long _orig);
	// void CVec_BlindedHopZ_free(struct LDKCVec_BlindedHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BlindedHopZ_free")] public static extern void CVec_BlindedHopZ_free(long __res);
	// struct LDKCResult_BlindedTailDecodeErrorZ CResult_BlindedTailDecodeErrorZ_ok(struct LDKBlindedTail o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_ok")] public static extern long CResult_BlindedTailDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedTailDecodeErrorZ CResult_BlindedTailDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_err")] public static extern long CResult_BlindedTailDecodeErrorZ_err(long _e);
	// bool CResult_BlindedTailDecodeErrorZ_is_ok(const struct LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedTailDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedTailDecodeErrorZ_free(struct LDKCResult_BlindedTailDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_free")] public static extern void CResult_BlindedTailDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedTailDecodeErrorZ_clone_ptr(LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedTailDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedTailDecodeErrorZ CResult_BlindedTailDecodeErrorZ_clone(const struct LDKCResult_BlindedTailDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedTailDecodeErrorZ_clone")] public static extern long CResult_BlindedTailDecodeErrorZ_clone(long _orig);
	// void CVec_RouteHopZ_free(struct LDKCVec_RouteHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHopZ_free")] public static extern void CVec_RouteHopZ_free(long __res);
	// void CVec_PathZ_free(struct LDKCVec_PathZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PathZ_free")] public static extern void CVec_PathZ_free(long __res);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_ok(struct LDKRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_ok")] public static extern long CResult_RouteDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_err")] public static extern long CResult_RouteDecodeErrorZ_err(long _e);
	// bool CResult_RouteDecodeErrorZ_is_ok(const struct LDKCResult_RouteDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_is_ok")] public static extern bool CResult_RouteDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteDecodeErrorZ_free(struct LDKCResult_RouteDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_free")] public static extern void CResult_RouteDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteDecodeErrorZ_clone_ptr(LDKCResult_RouteDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteDecodeErrorZ CResult_RouteDecodeErrorZ_clone(const struct LDKCResult_RouteDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteDecodeErrorZ_clone")] public static extern long CResult_RouteDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_ok(struct LDKRouteParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_ok")] public static extern long CResult_RouteParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_err")] public static extern long CResult_RouteParametersDecodeErrorZ_err(long _e);
	// bool CResult_RouteParametersDecodeErrorZ_is_ok(const struct LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_is_ok")] public static extern bool CResult_RouteParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteParametersDecodeErrorZ_free(struct LDKCResult_RouteParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_free")] public static extern void CResult_RouteParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteParametersDecodeErrorZ_clone_ptr(LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteParametersDecodeErrorZ CResult_RouteParametersDecodeErrorZ_clone(const struct LDKCResult_RouteParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteParametersDecodeErrorZ_clone")] public static extern long CResult_RouteParametersDecodeErrorZ_clone(long _orig);
	// void CVec_u64Z_free(struct LDKCVec_u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_u64Z_free")] public static extern void CVec_u64Z_free(long __res);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_ok(struct LDKPaymentParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_ok")] public static extern long CResult_PaymentParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_err")] public static extern long CResult_PaymentParametersDecodeErrorZ_err(long _e);
	// bool CResult_PaymentParametersDecodeErrorZ_is_ok(const struct LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_is_ok")] public static extern bool CResult_PaymentParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_PaymentParametersDecodeErrorZ_free(struct LDKCResult_PaymentParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_free")] public static extern void CResult_PaymentParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_PaymentParametersDecodeErrorZ_clone_ptr(LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_PaymentParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentParametersDecodeErrorZ CResult_PaymentParametersDecodeErrorZ_clone(const struct LDKCResult_PaymentParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentParametersDecodeErrorZ_clone")] public static extern long CResult_PaymentParametersDecodeErrorZ_clone(long _orig);
	// void CVec_RouteHintZ_free(struct LDKCVec_RouteHintZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHintZ_free")] public static extern void CVec_RouteHintZ_free(long __res);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_ok(struct LDKRouteHint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_ok")] public static extern long CResult_RouteHintDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_err")] public static extern long CResult_RouteHintDecodeErrorZ_err(long _e);
	// bool CResult_RouteHintDecodeErrorZ_is_ok(const struct LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_is_ok")] public static extern bool CResult_RouteHintDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteHintDecodeErrorZ_free(struct LDKCResult_RouteHintDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_free")] public static extern void CResult_RouteHintDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteHintDecodeErrorZ_clone_ptr(LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteHintDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteHintDecodeErrorZ CResult_RouteHintDecodeErrorZ_clone(const struct LDKCResult_RouteHintDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintDecodeErrorZ_clone")] public static extern long CResult_RouteHintDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_ok(struct LDKRouteHintHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_ok")] public static extern long CResult_RouteHintHopDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_err")] public static extern long CResult_RouteHintHopDecodeErrorZ_err(long _e);
	// bool CResult_RouteHintHopDecodeErrorZ_is_ok(const struct LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_is_ok")] public static extern bool CResult_RouteHintHopDecodeErrorZ_is_ok(long _o);
	// void CResult_RouteHintHopDecodeErrorZ_free(struct LDKCResult_RouteHintHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_free")] public static extern void CResult_RouteHintHopDecodeErrorZ_free(long __res);
	// uint64_t CResult_RouteHintHopDecodeErrorZ_clone_ptr(LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_clone_ptr")] public static extern long CResult_RouteHintHopDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RouteHintHopDecodeErrorZ CResult_RouteHintHopDecodeErrorZ_clone(const struct LDKCResult_RouteHintHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RouteHintHopDecodeErrorZ_clone")] public static extern long CResult_RouteHintHopDecodeErrorZ_clone(long _orig);
	// void CVec_PublicKeyZ_free(struct LDKCVec_PublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PublicKeyZ_free")] public static extern void CVec_PublicKeyZ_free(long __res);
	// void CVec_u16Z_free(struct LDKCVec_u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_u16Z_free")] public static extern void CVec_u16Z_free(long __res);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_ok(struct LDKFixedPenaltyScorer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_ok")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_err")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_err(long _e);
	// bool CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(const struct LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_is_ok")] public static extern bool CResult_FixedPenaltyScorerDecodeErrorZ_is_ok(long _o);
	// void CResult_FixedPenaltyScorerDecodeErrorZ_free(struct LDKCResult_FixedPenaltyScorerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_free")] public static extern void CResult_FixedPenaltyScorerDecodeErrorZ_free(long __res);
	// uint64_t CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr(LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ CResult_FixedPenaltyScorerDecodeErrorZ_clone(const struct LDKCResult_FixedPenaltyScorerDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FixedPenaltyScorerDecodeErrorZ_clone")] public static extern long CResult_FixedPenaltyScorerDecodeErrorZ_clone(long _orig);
	// void CVec_NodeIdZ_free(struct LDKCVec_NodeIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_NodeIdZ_free")] public static extern void CVec_NodeIdZ_free(long __res);
	// uint64_t C2Tuple_u64u64Z_clone_ptr(LDKC2Tuple_u64u64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_clone_ptr")] public static extern long C2Tuple_u64u64Z_clone_ptr(long _arg);
	// struct LDKC2Tuple_u64u64Z C2Tuple_u64u64Z_clone(const struct LDKC2Tuple_u64u64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_clone")] public static extern long C2Tuple_u64u64Z_clone(long _orig);
	// struct LDKC2Tuple_u64u64Z C2Tuple_u64u64Z_new(uint64_t a, uint64_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_new")] public static extern long C2Tuple_u64u64Z_new(long _a, long _b);
	// void C2Tuple_u64u64Z_free(struct LDKC2Tuple_u64u64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u64Z_free")] public static extern void C2Tuple_u64u64Z_free(long __res);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_some(struct LDKC2Tuple_u64u64Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_some")] public static extern long COption_C2Tuple_u64u64ZZ_some(long _o);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_none")] public static extern long COption_C2Tuple_u64u64ZZ_none();
	// void COption_C2Tuple_u64u64ZZ_free(struct LDKCOption_C2Tuple_u64u64ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_free")] public static extern void COption_C2Tuple_u64u64ZZ_free(long __res);
	// uint64_t COption_C2Tuple_u64u64ZZ_clone_ptr(LDKCOption_C2Tuple_u64u64ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_clone_ptr")] public static extern long COption_C2Tuple_u64u64ZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_u64u64ZZ COption_C2Tuple_u64u64ZZ_clone(const struct LDKCOption_C2Tuple_u64u64ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u64ZZ_clone")] public static extern long COption_C2Tuple_u64u64ZZ_clone(long _orig);
	// struct LDKC2Tuple_Z C2Tuple_Z_new(struct LDKThirtyTwoU16s a, struct LDKThirtyTwoU16s b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_new")] public static extern long C2Tuple_Z_new(long _a, long _b);
	// void C2Tuple_Z_free(struct LDKC2Tuple_Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_Z_free")] public static extern void C2Tuple_Z_free(long __res);
	// struct LDKC2Tuple__u1632_u1632Z C2Tuple__u1632_u1632Z_new(struct LDKThirtyTwoU16s a, struct LDKThirtyTwoU16s b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_new")] public static extern long C2Tuple__u1632_u1632Z_new(long _a, long _b);
	// void C2Tuple__u1632_u1632Z_free(struct LDKC2Tuple__u1632_u1632Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u1632_u1632Z_free")] public static extern void C2Tuple__u1632_u1632Z_free(long __res);
	// struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_some(struct LDKC2Tuple__u1632_u1632Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_some")] public static extern long COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_some(long _o);
	// struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_none")] public static extern long COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_none();
	// void COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_free(struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_free")] public static extern void COption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ_free(long __res);
	// struct LDKCOption_f64Z COption_f64Z_some(double o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_some")] public static extern long COption_f64Z_some(double _o);
	// struct LDKCOption_f64Z COption_f64Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_none")] public static extern long COption_f64Z_none();
	// void COption_f64Z_free(struct LDKCOption_f64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_free")] public static extern void COption_f64Z_free(long __res);
	// uint64_t COption_f64Z_clone_ptr(LDKCOption_f64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_clone_ptr")] public static extern long COption_f64Z_clone_ptr(long _arg);
	// struct LDKCOption_f64Z COption_f64Z_clone(const struct LDKCOption_f64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_f64Z_clone")] public static extern long COption_f64Z_clone(long _orig);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ CResult_ProbabilisticScorerDecodeErrorZ_ok(struct LDKProbabilisticScorer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_ok")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ CResult_ProbabilisticScorerDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_err")] public static extern long CResult_ProbabilisticScorerDecodeErrorZ_err(long _e);
	// bool CResult_ProbabilisticScorerDecodeErrorZ_is_ok(const struct LDKCResult_ProbabilisticScorerDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_is_ok")] public static extern bool CResult_ProbabilisticScorerDecodeErrorZ_is_ok(long _o);
	// void CResult_ProbabilisticScorerDecodeErrorZ_free(struct LDKCResult_ProbabilisticScorerDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ProbabilisticScorerDecodeErrorZ_free")] public static extern void CResult_ProbabilisticScorerDecodeErrorZ_free(long __res);
	// struct LDKCResult_BestBlockDecodeErrorZ CResult_BestBlockDecodeErrorZ_ok(struct LDKBestBlock o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_ok")] public static extern long CResult_BestBlockDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BestBlockDecodeErrorZ CResult_BestBlockDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_err")] public static extern long CResult_BestBlockDecodeErrorZ_err(long _e);
	// bool CResult_BestBlockDecodeErrorZ_is_ok(const struct LDKCResult_BestBlockDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_is_ok")] public static extern bool CResult_BestBlockDecodeErrorZ_is_ok(long _o);
	// void CResult_BestBlockDecodeErrorZ_free(struct LDKCResult_BestBlockDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_free")] public static extern void CResult_BestBlockDecodeErrorZ_free(long __res);
	// uint64_t CResult_BestBlockDecodeErrorZ_clone_ptr(LDKCResult_BestBlockDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_clone_ptr")] public static extern long CResult_BestBlockDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BestBlockDecodeErrorZ CResult_BestBlockDecodeErrorZ_clone(const struct LDKCResult_BestBlockDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BestBlockDecodeErrorZ_clone")] public static extern long CResult_BestBlockDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_usizeTransactionZ_clone_ptr(LDKC2Tuple_usizeTransactionZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_clone_ptr")] public static extern long C2Tuple_usizeTransactionZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_usizeTransactionZ C2Tuple_usizeTransactionZ_clone(const struct LDKC2Tuple_usizeTransactionZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_clone")] public static extern long C2Tuple_usizeTransactionZ_clone(long _orig);
	// struct LDKC2Tuple_usizeTransactionZ C2Tuple_usizeTransactionZ_new(uintptr_t a, struct LDKTransaction b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_new")] public static extern long C2Tuple_usizeTransactionZ_new(long _a, long _b);
	// void C2Tuple_usizeTransactionZ_free(struct LDKC2Tuple_usizeTransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_usizeTransactionZ_free")] public static extern void C2Tuple_usizeTransactionZ_free(long __res);
	// void CVec_C2Tuple_usizeTransactionZZ_free(struct LDKCVec_C2Tuple_usizeTransactionZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_usizeTransactionZZ_free")] public static extern void CVec_C2Tuple_usizeTransactionZZ_free(long __res);
	// uint64_t C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone_ptr(LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone_ptr")] public static extern long C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone(const struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone")] public static extern long C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_clone(long _orig);
	// struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_new(struct LDKThirtyTwoBytes a, uint32_t b, struct LDKCOption_ThirtyTwoBytesZ c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_new")] public static extern long C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_new(long _a, int _b, long _c);
	// void C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_free(struct LDKC3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_free")] public static extern void C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZ_free(long __res);
	// void CVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ_free(struct LDKCVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ_free")] public static extern void CVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ_free(long __res);
	// struct LDKCResult_ChannelMonitorUpdateStatusNoneZ CResult_ChannelMonitorUpdateStatusNoneZ_ok(enum LDKChannelMonitorUpdateStatus o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_ok")] public static extern long CResult_ChannelMonitorUpdateStatusNoneZ_ok(ChannelMonitorUpdateStatus _o);
	// struct LDKCResult_ChannelMonitorUpdateStatusNoneZ CResult_ChannelMonitorUpdateStatusNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_err")] public static extern long CResult_ChannelMonitorUpdateStatusNoneZ_err();
	// bool CResult_ChannelMonitorUpdateStatusNoneZ_is_ok(const struct LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_is_ok")] public static extern bool CResult_ChannelMonitorUpdateStatusNoneZ_is_ok(long _o);
	// void CResult_ChannelMonitorUpdateStatusNoneZ_free(struct LDKCResult_ChannelMonitorUpdateStatusNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_free")] public static extern void CResult_ChannelMonitorUpdateStatusNoneZ_free(long __res);
	// uint64_t CResult_ChannelMonitorUpdateStatusNoneZ_clone_ptr(LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_clone_ptr")] public static extern long CResult_ChannelMonitorUpdateStatusNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelMonitorUpdateStatusNoneZ CResult_ChannelMonitorUpdateStatusNoneZ_clone(const struct LDKCResult_ChannelMonitorUpdateStatusNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateStatusNoneZ_clone")] public static extern long CResult_ChannelMonitorUpdateStatusNoneZ_clone(long _orig);
	// void CVec_MonitorEventZ_free(struct LDKCVec_MonitorEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MonitorEventZ_free")] public static extern void CVec_MonitorEventZ_free(long __res);
	// uint64_t C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_clone_ptr(LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_clone_ptr")] public static extern long C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_clone_ptr(long _arg);
	// struct LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_clone(const struct LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_clone")] public static extern long C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_clone(long _orig);
	// struct LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_new(struct LDKOutPoint a, struct LDKChannelId b, struct LDKCVec_MonitorEventZ c, struct LDKPublicKey d);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_new")] public static extern long C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_new(long _a, long _b, long _c, long _d);
	// void C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_free(struct LDKC4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_free")] public static extern void C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZ_free(long __res);
	// void CVec_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZZ_free(struct LDKCVec_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZZ_free")] public static extern void CVec_C4Tuple_OutPointChannelIdCVec_MonitorEventZPublicKeyZZ_free(long __res);
	// struct LDKCOption_AddressZ COption_AddressZ_some(struct LDKAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AddressZ_some")] public static extern long COption_AddressZ_some(long _o);
	// struct LDKCOption_AddressZ COption_AddressZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AddressZ_none")] public static extern long COption_AddressZ_none();
	// void COption_AddressZ_free(struct LDKCOption_AddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_AddressZ_free")] public static extern void COption_AddressZ_free(long __res);
	// struct LDKCOption_StrZ COption_StrZ_some(struct LDKStr o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_some")] public static extern long COption_StrZ_some(long _o);
	// struct LDKCOption_StrZ COption_StrZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_none")] public static extern long COption_StrZ_none();
	// void COption_StrZ_free(struct LDKCOption_StrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_free")] public static extern void COption_StrZ_free(long __res);
	// uint64_t COption_StrZ_clone_ptr(LDKCOption_StrZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_clone_ptr")] public static extern long COption_StrZ_clone_ptr(long _arg);
	// struct LDKCOption_StrZ COption_StrZ_clone(const struct LDKCOption_StrZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_StrZ_clone")] public static extern long COption_StrZ_clone(long _orig);
	// struct LDKCResult_LSPSRequestIdAPIErrorZ CResult_LSPSRequestIdAPIErrorZ_ok(struct LDKLSPSRequestId o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_ok")] public static extern long CResult_LSPSRequestIdAPIErrorZ_ok(long _o);
	// struct LDKCResult_LSPSRequestIdAPIErrorZ CResult_LSPSRequestIdAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_err")] public static extern long CResult_LSPSRequestIdAPIErrorZ_err(long _e);
	// bool CResult_LSPSRequestIdAPIErrorZ_is_ok(const struct LDKCResult_LSPSRequestIdAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_is_ok")] public static extern bool CResult_LSPSRequestIdAPIErrorZ_is_ok(long _o);
	// void CResult_LSPSRequestIdAPIErrorZ_free(struct LDKCResult_LSPSRequestIdAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_free")] public static extern void CResult_LSPSRequestIdAPIErrorZ_free(long __res);
	// uint64_t CResult_LSPSRequestIdAPIErrorZ_clone_ptr(LDKCResult_LSPSRequestIdAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_clone_ptr")] public static extern long CResult_LSPSRequestIdAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_LSPSRequestIdAPIErrorZ CResult_LSPSRequestIdAPIErrorZ_clone(const struct LDKCResult_LSPSRequestIdAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSRequestIdAPIErrorZ_clone")] public static extern long CResult_LSPSRequestIdAPIErrorZ_clone(long _orig);
	// void CVec_LSPS2OpeningFeeParamsZ_free(struct LDKCVec_LSPS2OpeningFeeParamsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_LSPS2OpeningFeeParamsZ_free")] public static extern void CVec_LSPS2OpeningFeeParamsZ_free(long __res);
	// struct LDKCResult_OfferIdDecodeErrorZ CResult_OfferIdDecodeErrorZ_ok(struct LDKOfferId o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_ok")] public static extern long CResult_OfferIdDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OfferIdDecodeErrorZ CResult_OfferIdDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_err")] public static extern long CResult_OfferIdDecodeErrorZ_err(long _e);
	// bool CResult_OfferIdDecodeErrorZ_is_ok(const struct LDKCResult_OfferIdDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_is_ok")] public static extern bool CResult_OfferIdDecodeErrorZ_is_ok(long _o);
	// void CResult_OfferIdDecodeErrorZ_free(struct LDKCResult_OfferIdDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_free")] public static extern void CResult_OfferIdDecodeErrorZ_free(long __res);
	// uint64_t CResult_OfferIdDecodeErrorZ_clone_ptr(LDKCResult_OfferIdDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_clone_ptr")] public static extern long CResult_OfferIdDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OfferIdDecodeErrorZ CResult_OfferIdDecodeErrorZ_clone(const struct LDKCResult_OfferIdDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferIdDecodeErrorZ_clone")] public static extern long CResult_OfferIdDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NoneBolt12SemanticErrorZ CResult_NoneBolt12SemanticErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_ok")] public static extern long CResult_NoneBolt12SemanticErrorZ_ok();
	// struct LDKCResult_NoneBolt12SemanticErrorZ CResult_NoneBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_err")] public static extern long CResult_NoneBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_NoneBolt12SemanticErrorZ_is_ok(const struct LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_NoneBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_NoneBolt12SemanticErrorZ_free(struct LDKCResult_NoneBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_free")] public static extern void CResult_NoneBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_NoneBolt12SemanticErrorZ_clone_ptr(LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_NoneBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneBolt12SemanticErrorZ CResult_NoneBolt12SemanticErrorZ_clone(const struct LDKCResult_NoneBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12SemanticErrorZ_clone")] public static extern long CResult_NoneBolt12SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_OfferBolt12SemanticErrorZ CResult_OfferBolt12SemanticErrorZ_ok(struct LDKOffer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_ok")] public static extern long CResult_OfferBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_OfferBolt12SemanticErrorZ CResult_OfferBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_err")] public static extern long CResult_OfferBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_OfferBolt12SemanticErrorZ_is_ok(const struct LDKCResult_OfferBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_OfferBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_OfferBolt12SemanticErrorZ_free(struct LDKCResult_OfferBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_free")] public static extern void CResult_OfferBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_OfferBolt12SemanticErrorZ_clone_ptr(LDKCResult_OfferBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_OfferBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OfferBolt12SemanticErrorZ CResult_OfferBolt12SemanticErrorZ_clone(const struct LDKCResult_OfferBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12SemanticErrorZ_clone")] public static extern long CResult_OfferBolt12SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_ok(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_ok")] public static extern long CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_err")] public static extern long CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok(const struct LDKCResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_free(struct LDKCResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_free")] public static extern void CResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ_free(long __res);
	// struct LDKCResult_OfferDecodeErrorZ CResult_OfferDecodeErrorZ_ok(struct LDKOffer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_ok")] public static extern long CResult_OfferDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OfferDecodeErrorZ CResult_OfferDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_err")] public static extern long CResult_OfferDecodeErrorZ_err(long _e);
	// bool CResult_OfferDecodeErrorZ_is_ok(const struct LDKCResult_OfferDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_is_ok")] public static extern bool CResult_OfferDecodeErrorZ_is_ok(long _o);
	// void CResult_OfferDecodeErrorZ_free(struct LDKCResult_OfferDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_free")] public static extern void CResult_OfferDecodeErrorZ_free(long __res);
	// uint64_t CResult_OfferDecodeErrorZ_clone_ptr(LDKCResult_OfferDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_clone_ptr")] public static extern long CResult_OfferDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OfferDecodeErrorZ CResult_OfferDecodeErrorZ_clone(const struct LDKCResult_OfferDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferDecodeErrorZ_clone")] public static extern long CResult_OfferDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OfferBolt12ParseErrorZ CResult_OfferBolt12ParseErrorZ_ok(struct LDKOffer o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_ok")] public static extern long CResult_OfferBolt12ParseErrorZ_ok(long _o);
	// struct LDKCResult_OfferBolt12ParseErrorZ CResult_OfferBolt12ParseErrorZ_err(struct LDKBolt12ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_err")] public static extern long CResult_OfferBolt12ParseErrorZ_err(long _e);
	// bool CResult_OfferBolt12ParseErrorZ_is_ok(const struct LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_is_ok")] public static extern bool CResult_OfferBolt12ParseErrorZ_is_ok(long _o);
	// void CResult_OfferBolt12ParseErrorZ_free(struct LDKCResult_OfferBolt12ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_free")] public static extern void CResult_OfferBolt12ParseErrorZ_free(long __res);
	// uint64_t CResult_OfferBolt12ParseErrorZ_clone_ptr(LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_clone_ptr")] public static extern long CResult_OfferBolt12ParseErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OfferBolt12ParseErrorZ CResult_OfferBolt12ParseErrorZ_clone(const struct LDKCResult_OfferBolt12ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferBolt12ParseErrorZ_clone")] public static extern long CResult_OfferBolt12ParseErrorZ_clone(long _orig);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_ok(struct LDKNodeId o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_ok")] public static extern long CResult_NodeIdDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_err")] public static extern long CResult_NodeIdDecodeErrorZ_err(long _e);
	// bool CResult_NodeIdDecodeErrorZ_is_ok(const struct LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_is_ok")] public static extern bool CResult_NodeIdDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeIdDecodeErrorZ_free(struct LDKCResult_NodeIdDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_free")] public static extern void CResult_NodeIdDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeIdDecodeErrorZ_clone_ptr(LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeIdDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeIdDecodeErrorZ CResult_NodeIdDecodeErrorZ_clone(const struct LDKCResult_NodeIdDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeIdDecodeErrorZ_clone")] public static extern long CResult_NodeIdDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ CResult_PublicKeySecp256k1ErrorZ_ok(struct LDKPublicKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_ok")] public static extern long CResult_PublicKeySecp256k1ErrorZ_ok(long _o);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ CResult_PublicKeySecp256k1ErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_err")] public static extern long CResult_PublicKeySecp256k1ErrorZ_err(Secp256k1Error _e);
	// bool CResult_PublicKeySecp256k1ErrorZ_is_ok(const struct LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_is_ok")] public static extern bool CResult_PublicKeySecp256k1ErrorZ_is_ok(long _o);
	// void CResult_PublicKeySecp256k1ErrorZ_free(struct LDKCResult_PublicKeySecp256k1ErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_free")] public static extern void CResult_PublicKeySecp256k1ErrorZ_free(long __res);
	// uint64_t CResult_PublicKeySecp256k1ErrorZ_clone_ptr(LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_clone_ptr")] public static extern long CResult_PublicKeySecp256k1ErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ CResult_PublicKeySecp256k1ErrorZ_clone(const struct LDKCResult_PublicKeySecp256k1ErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PublicKeySecp256k1ErrorZ_clone")] public static extern long CResult_PublicKeySecp256k1ErrorZ_clone(long _orig);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_some(struct LDKNetworkUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_some")] public static extern long COption_NetworkUpdateZ_some(long _o);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_none")] public static extern long COption_NetworkUpdateZ_none();
	// void COption_NetworkUpdateZ_free(struct LDKCOption_NetworkUpdateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_free")] public static extern void COption_NetworkUpdateZ_free(long __res);
	// uint64_t COption_NetworkUpdateZ_clone_ptr(LDKCOption_NetworkUpdateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_clone_ptr")] public static extern long COption_NetworkUpdateZ_clone_ptr(long _arg);
	// struct LDKCOption_NetworkUpdateZ COption_NetworkUpdateZ_clone(const struct LDKCOption_NetworkUpdateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NetworkUpdateZ_clone")] public static extern long COption_NetworkUpdateZ_clone(long _orig);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_ok(struct LDKCOption_NetworkUpdateZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_ok")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_err")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_err(long _e);
	// bool CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(const struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_NetworkUpdateZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_NetworkUpdateZDecodeErrorZ_free(struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_free")] public static extern void CResult_COption_NetworkUpdateZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr(LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ CResult_COption_NetworkUpdateZDecodeErrorZ_clone(const struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_NetworkUpdateZDecodeErrorZ_clone")] public static extern long CResult_COption_NetworkUpdateZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_UtxoLookupZ COption_UtxoLookupZ_some(struct LDKUtxoLookup o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_UtxoLookupZ_some")] public static extern long COption_UtxoLookupZ_some(long _o);
	// struct LDKCOption_UtxoLookupZ COption_UtxoLookupZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_UtxoLookupZ_none")] public static extern long COption_UtxoLookupZ_none();
	// void COption_UtxoLookupZ_free(struct LDKCOption_UtxoLookupZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_UtxoLookupZ_free")] public static extern void COption_UtxoLookupZ_free(long __res);
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_ok")] public static extern long CResult_NoneLightningErrorZ_ok();
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_err")] public static extern long CResult_NoneLightningErrorZ_err(long _e);
	// bool CResult_NoneLightningErrorZ_is_ok(const struct LDKCResult_NoneLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_is_ok")] public static extern bool CResult_NoneLightningErrorZ_is_ok(long _o);
	// void CResult_NoneLightningErrorZ_free(struct LDKCResult_NoneLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_free")] public static extern void CResult_NoneLightningErrorZ_free(long __res);
	// uint64_t CResult_NoneLightningErrorZ_clone_ptr(LDKCResult_NoneLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_clone_ptr")] public static extern long CResult_NoneLightningErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneLightningErrorZ CResult_NoneLightningErrorZ_clone(const struct LDKCResult_NoneLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneLightningErrorZ_clone")] public static extern long CResult_NoneLightningErrorZ_clone(long _orig);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_ok(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_ok")] public static extern long CResult_boolLightningErrorZ_ok(bool _o);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_err(struct LDKLightningError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_err")] public static extern long CResult_boolLightningErrorZ_err(long _e);
	// bool CResult_boolLightningErrorZ_is_ok(const struct LDKCResult_boolLightningErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_is_ok")] public static extern bool CResult_boolLightningErrorZ_is_ok(long _o);
	// void CResult_boolLightningErrorZ_free(struct LDKCResult_boolLightningErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_free")] public static extern void CResult_boolLightningErrorZ_free(long __res);
	// uint64_t CResult_boolLightningErrorZ_clone_ptr(LDKCResult_boolLightningErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_clone_ptr")] public static extern long CResult_boolLightningErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_boolLightningErrorZ CResult_boolLightningErrorZ_clone(const struct LDKCResult_boolLightningErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolLightningErrorZ_clone")] public static extern long CResult_boolLightningErrorZ_clone(long _orig);
	// uint64_t C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr(LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(const struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_clone(long _orig);
	// struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new(struct LDKChannelAnnouncement a, struct LDKChannelUpdate b, struct LDKChannelUpdate c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new")] public static extern long C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_new(long _a, long _b, long _c);
	// void C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free(struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free")] public static extern void C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ_free(long __res);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some(struct LDKC3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_some(long _o);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_none();
	// void COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free(struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free")] public static extern void COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_free(long __res);
	// uint64_t COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr(LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone_ptr(long _arg);
	// struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone(const struct LDKCOption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone")] public static extern long COption_C3Tuple_ChannelAnnouncementChannelUpdateChannelUpdateZZ_clone(long _orig);
	// void CVec_MessageSendEventZ_free(struct LDKCVec_MessageSendEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MessageSendEventZ_free")] public static extern void CVec_MessageSendEventZ_free(long __res);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_ok(struct LDKChannelUpdateInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_ok")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_err")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_err(long _e);
	// bool CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(const struct LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelUpdateInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelUpdateInfoDecodeErrorZ_free(struct LDKCResult_ChannelUpdateInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_free")] public static extern void CResult_ChannelUpdateInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ CResult_ChannelUpdateInfoDecodeErrorZ_clone(const struct LDKCResult_ChannelUpdateInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateInfoDecodeErrorZ_clone")] public static extern long CResult_ChannelUpdateInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_ok(struct LDKChannelInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_ok")] public static extern long CResult_ChannelInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_err")] public static extern long CResult_ChannelInfoDecodeErrorZ_err(long _e);
	// bool CResult_ChannelInfoDecodeErrorZ_is_ok(const struct LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelInfoDecodeErrorZ_free(struct LDKCResult_ChannelInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_free")] public static extern void CResult_ChannelInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelInfoDecodeErrorZ_clone_ptr(LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelInfoDecodeErrorZ CResult_ChannelInfoDecodeErrorZ_clone(const struct LDKCResult_ChannelInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelInfoDecodeErrorZ_clone")] public static extern long CResult_ChannelInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_ok(struct LDKRoutingFees o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_ok")] public static extern long CResult_RoutingFeesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_err")] public static extern long CResult_RoutingFeesDecodeErrorZ_err(long _e);
	// bool CResult_RoutingFeesDecodeErrorZ_is_ok(const struct LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_is_ok")] public static extern bool CResult_RoutingFeesDecodeErrorZ_is_ok(long _o);
	// void CResult_RoutingFeesDecodeErrorZ_free(struct LDKCResult_RoutingFeesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_free")] public static extern void CResult_RoutingFeesDecodeErrorZ_free(long __res);
	// uint64_t CResult_RoutingFeesDecodeErrorZ_clone_ptr(LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_clone_ptr")] public static extern long CResult_RoutingFeesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RoutingFeesDecodeErrorZ CResult_RoutingFeesDecodeErrorZ_clone(const struct LDKCResult_RoutingFeesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RoutingFeesDecodeErrorZ_clone")] public static extern long CResult_RoutingFeesDecodeErrorZ_clone(long _orig);
	// void CVec_SocketAddressZ_free(struct LDKCVec_SocketAddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_SocketAddressZ_free")] public static extern void CVec_SocketAddressZ_free(long __res);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_ok(struct LDKNodeAnnouncementInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_ok")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_err")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_err(long _e);
	// bool CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(const struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok")] public static extern bool CResult_NodeAnnouncementInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeAnnouncementInfoDecodeErrorZ_free(struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_free")] public static extern void CResult_NodeAnnouncementInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ CResult_NodeAnnouncementInfoDecodeErrorZ_clone(const struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementInfoDecodeErrorZ_clone")] public static extern long CResult_NodeAnnouncementInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_ok(struct LDKNodeAlias o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_ok")] public static extern long CResult_NodeAliasDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_err")] public static extern long CResult_NodeAliasDecodeErrorZ_err(long _e);
	// bool CResult_NodeAliasDecodeErrorZ_is_ok(const struct LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_is_ok")] public static extern bool CResult_NodeAliasDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeAliasDecodeErrorZ_free(struct LDKCResult_NodeAliasDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_free")] public static extern void CResult_NodeAliasDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeAliasDecodeErrorZ_clone_ptr(LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeAliasDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeAliasDecodeErrorZ CResult_NodeAliasDecodeErrorZ_clone(const struct LDKCResult_NodeAliasDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAliasDecodeErrorZ_clone")] public static extern long CResult_NodeAliasDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_NodeAnnouncementInfoZ COption_NodeAnnouncementInfoZ_some(struct LDKNodeAnnouncementInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NodeAnnouncementInfoZ_some")] public static extern long COption_NodeAnnouncementInfoZ_some(long _o);
	// struct LDKCOption_NodeAnnouncementInfoZ COption_NodeAnnouncementInfoZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NodeAnnouncementInfoZ_none")] public static extern long COption_NodeAnnouncementInfoZ_none();
	// void COption_NodeAnnouncementInfoZ_free(struct LDKCOption_NodeAnnouncementInfoZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NodeAnnouncementInfoZ_free")] public static extern void COption_NodeAnnouncementInfoZ_free(long __res);
	// uint64_t COption_NodeAnnouncementInfoZ_clone_ptr(LDKCOption_NodeAnnouncementInfoZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NodeAnnouncementInfoZ_clone_ptr")] public static extern long COption_NodeAnnouncementInfoZ_clone_ptr(long _arg);
	// struct LDKCOption_NodeAnnouncementInfoZ COption_NodeAnnouncementInfoZ_clone(const struct LDKCOption_NodeAnnouncementInfoZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NodeAnnouncementInfoZ_clone")] public static extern long COption_NodeAnnouncementInfoZ_clone(long _orig);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_ok(struct LDKNodeInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_ok")] public static extern long CResult_NodeInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_err")] public static extern long CResult_NodeInfoDecodeErrorZ_err(long _e);
	// bool CResult_NodeInfoDecodeErrorZ_is_ok(const struct LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_is_ok")] public static extern bool CResult_NodeInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeInfoDecodeErrorZ_free(struct LDKCResult_NodeInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_free")] public static extern void CResult_NodeInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeInfoDecodeErrorZ_clone_ptr(LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeInfoDecodeErrorZ CResult_NodeInfoDecodeErrorZ_clone(const struct LDKCResult_NodeInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeInfoDecodeErrorZ_clone")] public static extern long CResult_NodeInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NetworkGraphDecodeErrorZ CResult_NetworkGraphDecodeErrorZ_ok(struct LDKNetworkGraph o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_ok")] public static extern long CResult_NetworkGraphDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NetworkGraphDecodeErrorZ CResult_NetworkGraphDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_err")] public static extern long CResult_NetworkGraphDecodeErrorZ_err(long _e);
	// bool CResult_NetworkGraphDecodeErrorZ_is_ok(const struct LDKCResult_NetworkGraphDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_is_ok")] public static extern bool CResult_NetworkGraphDecodeErrorZ_is_ok(long _o);
	// void CResult_NetworkGraphDecodeErrorZ_free(struct LDKCResult_NetworkGraphDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NetworkGraphDecodeErrorZ_free")] public static extern void CResult_NetworkGraphDecodeErrorZ_free(long __res);
	// struct LDKCOption_CVec_SocketAddressZZ COption_CVec_SocketAddressZZ_some(struct LDKCVec_SocketAddressZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_some")] public static extern long COption_CVec_SocketAddressZZ_some(long _o);
	// struct LDKCOption_CVec_SocketAddressZZ COption_CVec_SocketAddressZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_none")] public static extern long COption_CVec_SocketAddressZZ_none();
	// void COption_CVec_SocketAddressZZ_free(struct LDKCOption_CVec_SocketAddressZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_free")] public static extern void COption_CVec_SocketAddressZZ_free(long __res);
	// uint64_t COption_CVec_SocketAddressZZ_clone_ptr(LDKCOption_CVec_SocketAddressZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_clone_ptr")] public static extern long COption_CVec_SocketAddressZZ_clone_ptr(long _arg);
	// struct LDKCOption_CVec_SocketAddressZZ COption_CVec_SocketAddressZZ_clone(const struct LDKCOption_CVec_SocketAddressZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_CVec_SocketAddressZZ_clone")] public static extern long COption_CVec_SocketAddressZZ_clone(long _orig);
	// struct LDKCResult_u64ShortChannelIdErrorZ CResult_u64ShortChannelIdErrorZ_ok(uint64_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64ShortChannelIdErrorZ_ok")] public static extern long CResult_u64ShortChannelIdErrorZ_ok(long _o);
	// struct LDKCResult_u64ShortChannelIdErrorZ CResult_u64ShortChannelIdErrorZ_err(enum LDKShortChannelIdError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64ShortChannelIdErrorZ_err")] public static extern long CResult_u64ShortChannelIdErrorZ_err(ShortChannelIdError _e);
	// bool CResult_u64ShortChannelIdErrorZ_is_ok(const struct LDKCResult_u64ShortChannelIdErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64ShortChannelIdErrorZ_is_ok")] public static extern bool CResult_u64ShortChannelIdErrorZ_is_ok(long _o);
	// void CResult_u64ShortChannelIdErrorZ_free(struct LDKCResult_u64ShortChannelIdErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64ShortChannelIdErrorZ_free")] public static extern void CResult_u64ShortChannelIdErrorZ_free(long __res);
	// struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ CResult_PendingHTLCInfoInboundHTLCErrZ_ok(struct LDKPendingHTLCInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_ok")] public static extern long CResult_PendingHTLCInfoInboundHTLCErrZ_ok(long _o);
	// struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ CResult_PendingHTLCInfoInboundHTLCErrZ_err(struct LDKInboundHTLCErr e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_err")] public static extern long CResult_PendingHTLCInfoInboundHTLCErrZ_err(long _e);
	// bool CResult_PendingHTLCInfoInboundHTLCErrZ_is_ok(const struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_is_ok")] public static extern bool CResult_PendingHTLCInfoInboundHTLCErrZ_is_ok(long _o);
	// void CResult_PendingHTLCInfoInboundHTLCErrZ_free(struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_free")] public static extern void CResult_PendingHTLCInfoInboundHTLCErrZ_free(long __res);
	// uint64_t CResult_PendingHTLCInfoInboundHTLCErrZ_clone_ptr(LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_clone_ptr")] public static extern long CResult_PendingHTLCInfoInboundHTLCErrZ_clone_ptr(long _arg);
	// struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ CResult_PendingHTLCInfoInboundHTLCErrZ_clone(const struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoInboundHTLCErrZ_clone")] public static extern long CResult_PendingHTLCInfoInboundHTLCErrZ_clone(long _orig);
	// void CVec_HTLCOutputInCommitmentZ_free(struct LDKCVec_HTLCOutputInCommitmentZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_HTLCOutputInCommitmentZ_free")] public static extern void CVec_HTLCOutputInCommitmentZ_free(long __res);
	// void CVec_HTLCDescriptorZ_free(struct LDKCVec_HTLCDescriptorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_HTLCDescriptorZ_free")] public static extern void CVec_HTLCDescriptorZ_free(long __res);
	// void CVec_UtxoZ_free(struct LDKCVec_UtxoZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UtxoZ_free")] public static extern void CVec_UtxoZ_free(long __res);
	// struct LDKCOption_TxOutZ COption_TxOutZ_some(struct LDKTxOut o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_some")] public static extern long COption_TxOutZ_some(long _o);
	// struct LDKCOption_TxOutZ COption_TxOutZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_none")] public static extern long COption_TxOutZ_none();
	// void COption_TxOutZ_free(struct LDKCOption_TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_free")] public static extern void COption_TxOutZ_free(long __res);
	// uint64_t COption_TxOutZ_clone_ptr(LDKCOption_TxOutZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_clone_ptr")] public static extern long COption_TxOutZ_clone_ptr(long _arg);
	// struct LDKCOption_TxOutZ COption_TxOutZ_clone(const struct LDKCOption_TxOutZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TxOutZ_clone")] public static extern long COption_TxOutZ_clone(long _orig);
	// void CVec_InputZ_free(struct LDKCVec_InputZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_InputZ_free")] public static extern void CVec_InputZ_free(long __res);
	// struct LDKCResult_CoinSelectionNoneZ CResult_CoinSelectionNoneZ_ok(struct LDKCoinSelection o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_ok")] public static extern long CResult_CoinSelectionNoneZ_ok(long _o);
	// struct LDKCResult_CoinSelectionNoneZ CResult_CoinSelectionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_err")] public static extern long CResult_CoinSelectionNoneZ_err();
	// bool CResult_CoinSelectionNoneZ_is_ok(const struct LDKCResult_CoinSelectionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_is_ok")] public static extern bool CResult_CoinSelectionNoneZ_is_ok(long _o);
	// void CResult_CoinSelectionNoneZ_free(struct LDKCResult_CoinSelectionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_free")] public static extern void CResult_CoinSelectionNoneZ_free(long __res);
	// uint64_t CResult_CoinSelectionNoneZ_clone_ptr(LDKCResult_CoinSelectionNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_clone_ptr")] public static extern long CResult_CoinSelectionNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CoinSelectionNoneZ CResult_CoinSelectionNoneZ_clone(const struct LDKCResult_CoinSelectionNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CoinSelectionNoneZ_clone")] public static extern long CResult_CoinSelectionNoneZ_clone(long _orig);
	// struct LDKCResult_CVec_UtxoZNoneZ CResult_CVec_UtxoZNoneZ_ok(struct LDKCVec_UtxoZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_ok")] public static extern long CResult_CVec_UtxoZNoneZ_ok(long _o);
	// struct LDKCResult_CVec_UtxoZNoneZ CResult_CVec_UtxoZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_err")] public static extern long CResult_CVec_UtxoZNoneZ_err();
	// bool CResult_CVec_UtxoZNoneZ_is_ok(const struct LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_is_ok")] public static extern bool CResult_CVec_UtxoZNoneZ_is_ok(long _o);
	// void CResult_CVec_UtxoZNoneZ_free(struct LDKCResult_CVec_UtxoZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_free")] public static extern void CResult_CVec_UtxoZNoneZ_free(long __res);
	// uint64_t CResult_CVec_UtxoZNoneZ_clone_ptr(LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_clone_ptr")] public static extern long CResult_CVec_UtxoZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_UtxoZNoneZ CResult_CVec_UtxoZNoneZ_clone(const struct LDKCResult_CVec_UtxoZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_UtxoZNoneZ_clone")] public static extern long CResult_CVec_UtxoZNoneZ_clone(long _orig);
	// struct LDKCOption_PaymentContextZ COption_PaymentContextZ_some(struct LDKPaymentContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentContextZ_some")] public static extern long COption_PaymentContextZ_some(long _o);
	// struct LDKCOption_PaymentContextZ COption_PaymentContextZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentContextZ_none")] public static extern long COption_PaymentContextZ_none();
	// void COption_PaymentContextZ_free(struct LDKCOption_PaymentContextZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentContextZ_free")] public static extern void COption_PaymentContextZ_free(long __res);
	// uint64_t COption_PaymentContextZ_clone_ptr(LDKCOption_PaymentContextZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentContextZ_clone_ptr")] public static extern long COption_PaymentContextZ_clone_ptr(long _arg);
	// struct LDKCOption_PaymentContextZ COption_PaymentContextZ_clone(const struct LDKCOption_PaymentContextZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentContextZ_clone")] public static extern long COption_PaymentContextZ_clone(long _orig);
	// uint64_t C2Tuple_u64u16Z_clone_ptr(LDKC2Tuple_u64u16Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_clone_ptr")] public static extern long C2Tuple_u64u16Z_clone_ptr(long _arg);
	// struct LDKC2Tuple_u64u16Z C2Tuple_u64u16Z_clone(const struct LDKC2Tuple_u64u16Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_clone")] public static extern long C2Tuple_u64u16Z_clone(long _orig);
	// struct LDKC2Tuple_u64u16Z C2Tuple_u64u16Z_new(uint64_t a, uint16_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_new")] public static extern long C2Tuple_u64u16Z_new(long _a, short _b);
	// void C2Tuple_u64u16Z_free(struct LDKC2Tuple_u64u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u64u16Z_free")] public static extern void C2Tuple_u64u16Z_free(long __res);
	// struct LDKCOption_C2Tuple_u64u16ZZ COption_C2Tuple_u64u16ZZ_some(struct LDKC2Tuple_u64u16Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_some")] public static extern long COption_C2Tuple_u64u16ZZ_some(long _o);
	// struct LDKCOption_C2Tuple_u64u16ZZ COption_C2Tuple_u64u16ZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_none")] public static extern long COption_C2Tuple_u64u16ZZ_none();
	// void COption_C2Tuple_u64u16ZZ_free(struct LDKCOption_C2Tuple_u64u16ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_free")] public static extern void COption_C2Tuple_u64u16ZZ_free(long __res);
	// uint64_t COption_C2Tuple_u64u16ZZ_clone_ptr(LDKCOption_C2Tuple_u64u16ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_clone_ptr")] public static extern long COption_C2Tuple_u64u16ZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_u64u16ZZ COption_C2Tuple_u64u16ZZ_clone(const struct LDKCOption_C2Tuple_u64u16ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_u64u16ZZ_clone")] public static extern long COption_C2Tuple_u64u16ZZ_clone(long _orig);
	// struct LDKCResult_ChannelIdAPIErrorZ CResult_ChannelIdAPIErrorZ_ok(struct LDKChannelId o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_ok")] public static extern long CResult_ChannelIdAPIErrorZ_ok(long _o);
	// struct LDKCResult_ChannelIdAPIErrorZ CResult_ChannelIdAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_err")] public static extern long CResult_ChannelIdAPIErrorZ_err(long _e);
	// bool CResult_ChannelIdAPIErrorZ_is_ok(const struct LDKCResult_ChannelIdAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_is_ok")] public static extern bool CResult_ChannelIdAPIErrorZ_is_ok(long _o);
	// void CResult_ChannelIdAPIErrorZ_free(struct LDKCResult_ChannelIdAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_free")] public static extern void CResult_ChannelIdAPIErrorZ_free(long __res);
	// uint64_t CResult_ChannelIdAPIErrorZ_clone_ptr(LDKCResult_ChannelIdAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_clone_ptr")] public static extern long CResult_ChannelIdAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelIdAPIErrorZ CResult_ChannelIdAPIErrorZ_clone(const struct LDKCResult_ChannelIdAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdAPIErrorZ_clone")] public static extern long CResult_ChannelIdAPIErrorZ_clone(long _orig);
	// void CVec_RecentPaymentDetailsZ_free(struct LDKCVec_RecentPaymentDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RecentPaymentDetailsZ_free")] public static extern void CVec_RecentPaymentDetailsZ_free(long __res);
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_ok")] public static extern long CResult_NoneAPIErrorZ_ok();
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_err")] public static extern long CResult_NoneAPIErrorZ_err(long _e);
	// bool CResult_NoneAPIErrorZ_is_ok(const struct LDKCResult_NoneAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_is_ok")] public static extern bool CResult_NoneAPIErrorZ_is_ok(long _o);
	// void CResult_NoneAPIErrorZ_free(struct LDKCResult_NoneAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_free")] public static extern void CResult_NoneAPIErrorZ_free(long __res);
	// uint64_t CResult_NoneAPIErrorZ_clone_ptr(LDKCResult_NoneAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_clone_ptr")] public static extern long CResult_NoneAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneAPIErrorZ CResult_NoneAPIErrorZ_clone(const struct LDKCResult_NoneAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneAPIErrorZ_clone")] public static extern long CResult_NoneAPIErrorZ_clone(long _orig);
	// struct LDKCResult_NoneRetryableSendFailureZ CResult_NoneRetryableSendFailureZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_ok")] public static extern long CResult_NoneRetryableSendFailureZ_ok();
	// struct LDKCResult_NoneRetryableSendFailureZ CResult_NoneRetryableSendFailureZ_err(enum LDKRetryableSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_err")] public static extern long CResult_NoneRetryableSendFailureZ_err(RetryableSendFailure _e);
	// bool CResult_NoneRetryableSendFailureZ_is_ok(const struct LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_is_ok")] public static extern bool CResult_NoneRetryableSendFailureZ_is_ok(long _o);
	// void CResult_NoneRetryableSendFailureZ_free(struct LDKCResult_NoneRetryableSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_free")] public static extern void CResult_NoneRetryableSendFailureZ_free(long __res);
	// uint64_t CResult_NoneRetryableSendFailureZ_clone_ptr(LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_clone_ptr")] public static extern long CResult_NoneRetryableSendFailureZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneRetryableSendFailureZ CResult_NoneRetryableSendFailureZ_clone(const struct LDKCResult_NoneRetryableSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneRetryableSendFailureZ_clone")] public static extern long CResult_NoneRetryableSendFailureZ_clone(long _orig);
	// struct LDKCOption_OffersContextZ COption_OffersContextZ_some(struct LDKOffersContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersContextZ_some")] public static extern long COption_OffersContextZ_some(long _o);
	// struct LDKCOption_OffersContextZ COption_OffersContextZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersContextZ_none")] public static extern long COption_OffersContextZ_none();
	// void COption_OffersContextZ_free(struct LDKCOption_OffersContextZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersContextZ_free")] public static extern void COption_OffersContextZ_free(long __res);
	// uint64_t COption_OffersContextZ_clone_ptr(LDKCOption_OffersContextZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersContextZ_clone_ptr")] public static extern long COption_OffersContextZ_clone_ptr(long _arg);
	// struct LDKCOption_OffersContextZ COption_OffersContextZ_clone(const struct LDKCOption_OffersContextZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OffersContextZ_clone")] public static extern long COption_OffersContextZ_clone(long _orig);
	// struct LDKCResult_NoneBolt12PaymentErrorZ CResult_NoneBolt12PaymentErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_ok")] public static extern long CResult_NoneBolt12PaymentErrorZ_ok();
	// struct LDKCResult_NoneBolt12PaymentErrorZ CResult_NoneBolt12PaymentErrorZ_err(struct LDKBolt12PaymentError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_err")] public static extern long CResult_NoneBolt12PaymentErrorZ_err(long _e);
	// bool CResult_NoneBolt12PaymentErrorZ_is_ok(const struct LDKCResult_NoneBolt12PaymentErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_is_ok")] public static extern bool CResult_NoneBolt12PaymentErrorZ_is_ok(long _o);
	// void CResult_NoneBolt12PaymentErrorZ_free(struct LDKCResult_NoneBolt12PaymentErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_free")] public static extern void CResult_NoneBolt12PaymentErrorZ_free(long __res);
	// uint64_t CResult_NoneBolt12PaymentErrorZ_clone_ptr(LDKCResult_NoneBolt12PaymentErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_clone_ptr")] public static extern long CResult_NoneBolt12PaymentErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneBolt12PaymentErrorZ CResult_NoneBolt12PaymentErrorZ_clone(const struct LDKCResult_NoneBolt12PaymentErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt12PaymentErrorZ_clone")] public static extern long CResult_NoneBolt12PaymentErrorZ_clone(long _orig);
	// struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ CResult_ThirtyTwoBytesRetryableSendFailureZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_ok")] public static extern long CResult_ThirtyTwoBytesRetryableSendFailureZ_ok(long _o);
	// struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ CResult_ThirtyTwoBytesRetryableSendFailureZ_err(enum LDKRetryableSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_err")] public static extern long CResult_ThirtyTwoBytesRetryableSendFailureZ_err(RetryableSendFailure _e);
	// bool CResult_ThirtyTwoBytesRetryableSendFailureZ_is_ok(const struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_is_ok")] public static extern bool CResult_ThirtyTwoBytesRetryableSendFailureZ_is_ok(long _o);
	// void CResult_ThirtyTwoBytesRetryableSendFailureZ_free(struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_free")] public static extern void CResult_ThirtyTwoBytesRetryableSendFailureZ_free(long __res);
	// uint64_t CResult_ThirtyTwoBytesRetryableSendFailureZ_clone_ptr(LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_clone_ptr")] public static extern long CResult_ThirtyTwoBytesRetryableSendFailureZ_clone_ptr(long _arg);
	// struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ CResult_ThirtyTwoBytesRetryableSendFailureZ_clone(const struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesRetryableSendFailureZ_clone")] public static extern long CResult_ThirtyTwoBytesRetryableSendFailureZ_clone(long _orig);
	// uint64_t C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone_ptr")] public static extern long C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone")] public static extern long C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_clone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_new(struct LDKThirtyTwoBytes a, struct LDKThirtyTwoBytes b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_new")] public static extern long C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_new(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_free(struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_free")] public static extern void C2Tuple_ThirtyTwoBytesThirtyTwoBytesZ_free(long __res);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_ok(struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_ok(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_err(struct LDKProbeSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_err(long _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_is_ok")] public static extern bool CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_is_ok(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_free")] public static extern void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_free(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_clone_ptr")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_clone")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ_clone(long _orig);
	// void CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ_free")] public static extern void CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ_free(long __res);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_ok(struct LDKCVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_ok")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_ok(long _o);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_err(struct LDKProbeSendFailure e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_err")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_err(long _e);
	// bool CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_is_ok(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_is_ok")] public static extern bool CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_is_ok(long _o);
	// void CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_free(struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_free")] public static extern void CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_free(long __res);
	// uint64_t CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone_ptr(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone_ptr")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ_clone(long _orig);
	// uint64_t C2Tuple_ChannelIdPublicKeyZ_clone_ptr(LDKC2Tuple_ChannelIdPublicKeyZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ChannelIdPublicKeyZ_clone_ptr")] public static extern long C2Tuple_ChannelIdPublicKeyZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_ChannelIdPublicKeyZ C2Tuple_ChannelIdPublicKeyZ_clone(const struct LDKC2Tuple_ChannelIdPublicKeyZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ChannelIdPublicKeyZ_clone")] public static extern long C2Tuple_ChannelIdPublicKeyZ_clone(long _orig);
	// struct LDKC2Tuple_ChannelIdPublicKeyZ C2Tuple_ChannelIdPublicKeyZ_new(struct LDKChannelId a, struct LDKPublicKey b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ChannelIdPublicKeyZ_new")] public static extern long C2Tuple_ChannelIdPublicKeyZ_new(long _a, long _b);
	// void C2Tuple_ChannelIdPublicKeyZ_free(struct LDKC2Tuple_ChannelIdPublicKeyZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ChannelIdPublicKeyZ_free")] public static extern void C2Tuple_ChannelIdPublicKeyZ_free(long __res);
	// void CVec_C2Tuple_ChannelIdPublicKeyZZ_free(struct LDKCVec_C2Tuple_ChannelIdPublicKeyZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ChannelIdPublicKeyZZ_free")] public static extern void CVec_C2Tuple_ChannelIdPublicKeyZZ_free(long __res);
	// void CVec_ChannelIdZ_free(struct LDKCVec_ChannelIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ChannelIdZ_free")] public static extern void CVec_ChannelIdZ_free(long __res);
	// uint64_t C2Tuple_PublicKeyChannelIdZ_clone_ptr(LDKC2Tuple_PublicKeyChannelIdZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyChannelIdZ_clone_ptr")] public static extern long C2Tuple_PublicKeyChannelIdZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_PublicKeyChannelIdZ C2Tuple_PublicKeyChannelIdZ_clone(const struct LDKC2Tuple_PublicKeyChannelIdZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyChannelIdZ_clone")] public static extern long C2Tuple_PublicKeyChannelIdZ_clone(long _orig);
	// struct LDKC2Tuple_PublicKeyChannelIdZ C2Tuple_PublicKeyChannelIdZ_new(struct LDKPublicKey a, struct LDKChannelId b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyChannelIdZ_new")] public static extern long C2Tuple_PublicKeyChannelIdZ_new(long _a, long _b);
	// void C2Tuple_PublicKeyChannelIdZ_free(struct LDKC2Tuple_PublicKeyChannelIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyChannelIdZ_free")] public static extern void C2Tuple_PublicKeyChannelIdZ_free(long __res);
	// struct LDKCOption_C2Tuple_PublicKeyChannelIdZZ COption_C2Tuple_PublicKeyChannelIdZZ_some(struct LDKC2Tuple_PublicKeyChannelIdZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_PublicKeyChannelIdZZ_some")] public static extern long COption_C2Tuple_PublicKeyChannelIdZZ_some(long _o);
	// struct LDKCOption_C2Tuple_PublicKeyChannelIdZZ COption_C2Tuple_PublicKeyChannelIdZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_PublicKeyChannelIdZZ_none")] public static extern long COption_C2Tuple_PublicKeyChannelIdZZ_none();
	// void COption_C2Tuple_PublicKeyChannelIdZZ_free(struct LDKCOption_C2Tuple_PublicKeyChannelIdZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_PublicKeyChannelIdZZ_free")] public static extern void COption_C2Tuple_PublicKeyChannelIdZZ_free(long __res);
	// uint64_t COption_C2Tuple_PublicKeyChannelIdZZ_clone_ptr(LDKCOption_C2Tuple_PublicKeyChannelIdZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_PublicKeyChannelIdZZ_clone_ptr")] public static extern long COption_C2Tuple_PublicKeyChannelIdZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_PublicKeyChannelIdZZ COption_C2Tuple_PublicKeyChannelIdZZ_clone(const struct LDKCOption_C2Tuple_PublicKeyChannelIdZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_PublicKeyChannelIdZZ_clone")] public static extern long COption_C2Tuple_PublicKeyChannelIdZZ_clone(long _orig);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ CResult_Bolt11InvoiceSignOrCreationErrorZ_ok(struct LDKBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_ok")] public static extern long CResult_Bolt11InvoiceSignOrCreationErrorZ_ok(long _o);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ CResult_Bolt11InvoiceSignOrCreationErrorZ_err(struct LDKSignOrCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_err")] public static extern long CResult_Bolt11InvoiceSignOrCreationErrorZ_err(long _e);
	// bool CResult_Bolt11InvoiceSignOrCreationErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_is_ok")] public static extern bool CResult_Bolt11InvoiceSignOrCreationErrorZ_is_ok(long _o);
	// void CResult_Bolt11InvoiceSignOrCreationErrorZ_free(struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_free")] public static extern void CResult_Bolt11InvoiceSignOrCreationErrorZ_free(long __res);
	// uint64_t CResult_Bolt11InvoiceSignOrCreationErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_clone_ptr")] public static extern long CResult_Bolt11InvoiceSignOrCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ CResult_Bolt11InvoiceSignOrCreationErrorZ_clone(const struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceSignOrCreationErrorZ_clone")] public static extern long CResult_Bolt11InvoiceSignOrCreationErrorZ_clone(long _orig);
	// struct LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_ok(struct LDKOfferWithDerivedMetadataBuilder o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_ok")] public static extern long CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_err")] public static extern long CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_is_ok(const struct LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_free(struct LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_free")] public static extern void CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone_ptr(LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone(const struct LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone")] public static extern long CResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ_clone(long _orig);
	// void CVec_DestinationZ_free(struct LDKCVec_DestinationZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_DestinationZ_free")] public static extern void CVec_DestinationZ_free(long __res);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_ok(struct LDKC2Tuple_ThirtyTwoBytesThirtyTwoBytesZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_ok(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_err();
	// bool CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_is_ok")] public static extern bool CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_is_ok(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_free")] public static extern void CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_free(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone_ptr")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone")] public static extern long CResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ_clone(long _orig);
	// struct LDKCResult_ThirtyTwoBytesAPIErrorZ CResult_ThirtyTwoBytesAPIErrorZ_ok(struct LDKThirtyTwoBytes o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_ok")] public static extern long CResult_ThirtyTwoBytesAPIErrorZ_ok(long _o);
	// struct LDKCResult_ThirtyTwoBytesAPIErrorZ CResult_ThirtyTwoBytesAPIErrorZ_err(struct LDKAPIError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_err")] public static extern long CResult_ThirtyTwoBytesAPIErrorZ_err(long _e);
	// bool CResult_ThirtyTwoBytesAPIErrorZ_is_ok(const struct LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_is_ok")] public static extern bool CResult_ThirtyTwoBytesAPIErrorZ_is_ok(long _o);
	// void CResult_ThirtyTwoBytesAPIErrorZ_free(struct LDKCResult_ThirtyTwoBytesAPIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_free")] public static extern void CResult_ThirtyTwoBytesAPIErrorZ_free(long __res);
	// uint64_t CResult_ThirtyTwoBytesAPIErrorZ_clone_ptr(LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_clone_ptr")] public static extern long CResult_ThirtyTwoBytesAPIErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ThirtyTwoBytesAPIErrorZ CResult_ThirtyTwoBytesAPIErrorZ_clone(const struct LDKCResult_ThirtyTwoBytesAPIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ThirtyTwoBytesAPIErrorZ_clone")] public static extern long CResult_ThirtyTwoBytesAPIErrorZ_clone(long _orig);
	// uint64_t C2Tuple_OffersMessageResponseInstructionZ_clone_ptr(LDKC2Tuple_OffersMessageResponseInstructionZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageResponseInstructionZ_clone_ptr")] public static extern long C2Tuple_OffersMessageResponseInstructionZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OffersMessageResponseInstructionZ C2Tuple_OffersMessageResponseInstructionZ_clone(const struct LDKC2Tuple_OffersMessageResponseInstructionZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageResponseInstructionZ_clone")] public static extern long C2Tuple_OffersMessageResponseInstructionZ_clone(long _orig);
	// struct LDKC2Tuple_OffersMessageResponseInstructionZ C2Tuple_OffersMessageResponseInstructionZ_new(struct LDKOffersMessage a, struct LDKResponseInstruction b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageResponseInstructionZ_new")] public static extern long C2Tuple_OffersMessageResponseInstructionZ_new(long _a, long _b);
	// void C2Tuple_OffersMessageResponseInstructionZ_free(struct LDKC2Tuple_OffersMessageResponseInstructionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageResponseInstructionZ_free")] public static extern void C2Tuple_OffersMessageResponseInstructionZ_free(long __res);
	// struct LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ COption_C2Tuple_OffersMessageResponseInstructionZZ_some(struct LDKC2Tuple_OffersMessageResponseInstructionZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OffersMessageResponseInstructionZZ_some")] public static extern long COption_C2Tuple_OffersMessageResponseInstructionZZ_some(long _o);
	// struct LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ COption_C2Tuple_OffersMessageResponseInstructionZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OffersMessageResponseInstructionZZ_none")] public static extern long COption_C2Tuple_OffersMessageResponseInstructionZZ_none();
	// void COption_C2Tuple_OffersMessageResponseInstructionZZ_free(struct LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OffersMessageResponseInstructionZZ_free")] public static extern void COption_C2Tuple_OffersMessageResponseInstructionZZ_free(long __res);
	// uint64_t COption_C2Tuple_OffersMessageResponseInstructionZZ_clone_ptr(LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OffersMessageResponseInstructionZZ_clone_ptr")] public static extern long COption_C2Tuple_OffersMessageResponseInstructionZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ COption_C2Tuple_OffersMessageResponseInstructionZZ_clone(const struct LDKCOption_C2Tuple_OffersMessageResponseInstructionZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OffersMessageResponseInstructionZZ_clone")] public static extern long COption_C2Tuple_OffersMessageResponseInstructionZZ_clone(long _orig);
	// uint64_t C2Tuple_OffersMessageMessageSendInstructionsZ_clone_ptr(LDKC2Tuple_OffersMessageMessageSendInstructionsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageMessageSendInstructionsZ_clone_ptr")] public static extern long C2Tuple_OffersMessageMessageSendInstructionsZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OffersMessageMessageSendInstructionsZ C2Tuple_OffersMessageMessageSendInstructionsZ_clone(const struct LDKC2Tuple_OffersMessageMessageSendInstructionsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageMessageSendInstructionsZ_clone")] public static extern long C2Tuple_OffersMessageMessageSendInstructionsZ_clone(long _orig);
	// struct LDKC2Tuple_OffersMessageMessageSendInstructionsZ C2Tuple_OffersMessageMessageSendInstructionsZ_new(struct LDKOffersMessage a, struct LDKMessageSendInstructions b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageMessageSendInstructionsZ_new")] public static extern long C2Tuple_OffersMessageMessageSendInstructionsZ_new(long _a, long _b);
	// void C2Tuple_OffersMessageMessageSendInstructionsZ_free(struct LDKC2Tuple_OffersMessageMessageSendInstructionsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OffersMessageMessageSendInstructionsZ_free")] public static extern void C2Tuple_OffersMessageMessageSendInstructionsZ_free(long __res);
	// void CVec_C2Tuple_OffersMessageMessageSendInstructionsZZ_free(struct LDKCVec_C2Tuple_OffersMessageMessageSendInstructionsZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_OffersMessageMessageSendInstructionsZZ_free")] public static extern void CVec_C2Tuple_OffersMessageMessageSendInstructionsZZ_free(long __res);
	// uint64_t C2Tuple_ReleaseHeldHtlcResponseInstructionZ_clone_ptr(LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ReleaseHeldHtlcResponseInstructionZ_clone_ptr")] public static extern long C2Tuple_ReleaseHeldHtlcResponseInstructionZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ C2Tuple_ReleaseHeldHtlcResponseInstructionZ_clone(const struct LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ReleaseHeldHtlcResponseInstructionZ_clone")] public static extern long C2Tuple_ReleaseHeldHtlcResponseInstructionZ_clone(long _orig);
	// struct LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ C2Tuple_ReleaseHeldHtlcResponseInstructionZ_new(struct LDKReleaseHeldHtlc a, struct LDKResponseInstruction b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ReleaseHeldHtlcResponseInstructionZ_new")] public static extern long C2Tuple_ReleaseHeldHtlcResponseInstructionZ_new(long _a, long _b);
	// void C2Tuple_ReleaseHeldHtlcResponseInstructionZ_free(struct LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ReleaseHeldHtlcResponseInstructionZ_free")] public static extern void C2Tuple_ReleaseHeldHtlcResponseInstructionZ_free(long __res);
	// struct LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_some(struct LDKC2Tuple_ReleaseHeldHtlcResponseInstructionZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_some")] public static extern long COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_some(long _o);
	// struct LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_none")] public static extern long COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_none();
	// void COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_free(struct LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_free")] public static extern void COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_free(long __res);
	// uint64_t COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_clone_ptr(LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_clone_ptr")] public static extern long COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_clone(const struct LDKCOption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_clone")] public static extern long COption_C2Tuple_ReleaseHeldHtlcResponseInstructionZZ_clone(long _orig);
	// uint64_t C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_clone_ptr(LDKC2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_clone_ptr")] public static extern long C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_clone(const struct LDKC2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_clone")] public static extern long C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_clone(long _orig);
	// struct LDKC2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_new(struct LDKAsyncPaymentsMessage a, struct LDKMessageSendInstructions b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_new")] public static extern long C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_new(long _a, long _b);
	// void C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_free(struct LDKC2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_free")] public static extern void C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZ_free(long __res);
	// void CVec_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZZ_free(struct LDKCVec_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZZ_free")] public static extern void CVec_C2Tuple_AsyncPaymentsMessageMessageSendInstructionsZZ_free(long __res);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_ok(struct LDKPhantomRouteHints o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_ok")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_err")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_err(long _e);
	// bool CResult_PhantomRouteHintsDecodeErrorZ_is_ok(const struct LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_is_ok")] public static extern bool CResult_PhantomRouteHintsDecodeErrorZ_is_ok(long _o);
	// void CResult_PhantomRouteHintsDecodeErrorZ_free(struct LDKCResult_PhantomRouteHintsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_free")] public static extern void CResult_PhantomRouteHintsDecodeErrorZ_free(long __res);
	// uint64_t CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr(LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ CResult_PhantomRouteHintsDecodeErrorZ_clone(const struct LDKCResult_PhantomRouteHintsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PhantomRouteHintsDecodeErrorZ_clone")] public static extern long CResult_PhantomRouteHintsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BlindedForwardDecodeErrorZ CResult_BlindedForwardDecodeErrorZ_ok(struct LDKBlindedForward o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_ok")] public static extern long CResult_BlindedForwardDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedForwardDecodeErrorZ CResult_BlindedForwardDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_err")] public static extern long CResult_BlindedForwardDecodeErrorZ_err(long _e);
	// bool CResult_BlindedForwardDecodeErrorZ_is_ok(const struct LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedForwardDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedForwardDecodeErrorZ_free(struct LDKCResult_BlindedForwardDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_free")] public static extern void CResult_BlindedForwardDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedForwardDecodeErrorZ_clone_ptr(LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedForwardDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedForwardDecodeErrorZ CResult_BlindedForwardDecodeErrorZ_clone(const struct LDKCResult_BlindedForwardDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedForwardDecodeErrorZ_clone")] public static extern long CResult_BlindedForwardDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ CResult_PendingHTLCRoutingDecodeErrorZ_ok(struct LDKPendingHTLCRouting o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_ok")] public static extern long CResult_PendingHTLCRoutingDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ CResult_PendingHTLCRoutingDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_err")] public static extern long CResult_PendingHTLCRoutingDecodeErrorZ_err(long _e);
	// bool CResult_PendingHTLCRoutingDecodeErrorZ_is_ok(const struct LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_is_ok")] public static extern bool CResult_PendingHTLCRoutingDecodeErrorZ_is_ok(long _o);
	// void CResult_PendingHTLCRoutingDecodeErrorZ_free(struct LDKCResult_PendingHTLCRoutingDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_free")] public static extern void CResult_PendingHTLCRoutingDecodeErrorZ_free(long __res);
	// uint64_t CResult_PendingHTLCRoutingDecodeErrorZ_clone_ptr(LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_clone_ptr")] public static extern long CResult_PendingHTLCRoutingDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ CResult_PendingHTLCRoutingDecodeErrorZ_clone(const struct LDKCResult_PendingHTLCRoutingDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCRoutingDecodeErrorZ_clone")] public static extern long CResult_PendingHTLCRoutingDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ CResult_PendingHTLCInfoDecodeErrorZ_ok(struct LDKPendingHTLCInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_ok")] public static extern long CResult_PendingHTLCInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ CResult_PendingHTLCInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_err")] public static extern long CResult_PendingHTLCInfoDecodeErrorZ_err(long _e);
	// bool CResult_PendingHTLCInfoDecodeErrorZ_is_ok(const struct LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_is_ok")] public static extern bool CResult_PendingHTLCInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_PendingHTLCInfoDecodeErrorZ_free(struct LDKCResult_PendingHTLCInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_free")] public static extern void CResult_PendingHTLCInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_PendingHTLCInfoDecodeErrorZ_clone_ptr(LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_PendingHTLCInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ CResult_PendingHTLCInfoDecodeErrorZ_clone(const struct LDKCResult_PendingHTLCInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PendingHTLCInfoDecodeErrorZ_clone")] public static extern long CResult_PendingHTLCInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BlindedFailureDecodeErrorZ CResult_BlindedFailureDecodeErrorZ_ok(enum LDKBlindedFailure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_ok")] public static extern long CResult_BlindedFailureDecodeErrorZ_ok(BlindedFailure _o);
	// struct LDKCResult_BlindedFailureDecodeErrorZ CResult_BlindedFailureDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_err")] public static extern long CResult_BlindedFailureDecodeErrorZ_err(long _e);
	// bool CResult_BlindedFailureDecodeErrorZ_is_ok(const struct LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedFailureDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedFailureDecodeErrorZ_free(struct LDKCResult_BlindedFailureDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_free")] public static extern void CResult_BlindedFailureDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedFailureDecodeErrorZ_clone_ptr(LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedFailureDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedFailureDecodeErrorZ CResult_BlindedFailureDecodeErrorZ_clone(const struct LDKCResult_BlindedFailureDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedFailureDecodeErrorZ_clone")] public static extern long CResult_BlindedFailureDecodeErrorZ_clone(long _orig);
	// void CVec_ChannelMonitorZ_free(struct LDKCVec_ChannelMonitorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ChannelMonitorZ_free")] public static extern void CVec_ChannelMonitorZ_free(long __res);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ C2Tuple_ThirtyTwoBytesChannelManagerZ_new(struct LDKThirtyTwoBytes a, struct LDKChannelManager b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_new")] public static extern long C2Tuple_ThirtyTwoBytesChannelManagerZ_new(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesChannelManagerZ_free(struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_free")] public static extern void C2Tuple_ThirtyTwoBytesChannelManagerZ_free(long __res);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_ok(struct LDKC2Tuple_ThirtyTwoBytesChannelManagerZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_err(long _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_is_ok")] public static extern bool CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_is_ok(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_free")] public static extern void CResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ_free(long __res);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ CResult_MaxDustHTLCExposureDecodeErrorZ_ok(struct LDKMaxDustHTLCExposure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_ok")] public static extern long CResult_MaxDustHTLCExposureDecodeErrorZ_ok(long _o);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ CResult_MaxDustHTLCExposureDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_err")] public static extern long CResult_MaxDustHTLCExposureDecodeErrorZ_err(long _e);
	// bool CResult_MaxDustHTLCExposureDecodeErrorZ_is_ok(const struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_is_ok")] public static extern bool CResult_MaxDustHTLCExposureDecodeErrorZ_is_ok(long _o);
	// void CResult_MaxDustHTLCExposureDecodeErrorZ_free(struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_free")] public static extern void CResult_MaxDustHTLCExposureDecodeErrorZ_free(long __res);
	// uint64_t CResult_MaxDustHTLCExposureDecodeErrorZ_clone_ptr(LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_clone_ptr")] public static extern long CResult_MaxDustHTLCExposureDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ CResult_MaxDustHTLCExposureDecodeErrorZ_clone(const struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MaxDustHTLCExposureDecodeErrorZ_clone")] public static extern long CResult_MaxDustHTLCExposureDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_ok(struct LDKChannelConfig o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_ok")] public static extern long CResult_ChannelConfigDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_err")] public static extern long CResult_ChannelConfigDecodeErrorZ_err(long _e);
	// bool CResult_ChannelConfigDecodeErrorZ_is_ok(const struct LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelConfigDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelConfigDecodeErrorZ_free(struct LDKCResult_ChannelConfigDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_free")] public static extern void CResult_ChannelConfigDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelConfigDecodeErrorZ_clone_ptr(LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelConfigDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelConfigDecodeErrorZ CResult_ChannelConfigDecodeErrorZ_clone(const struct LDKCResult_ChannelConfigDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelConfigDecodeErrorZ_clone")] public static extern long CResult_ChannelConfigDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_MaxDustHTLCExposureZ COption_MaxDustHTLCExposureZ_some(struct LDKMaxDustHTLCExposure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_some")] public static extern long COption_MaxDustHTLCExposureZ_some(long _o);
	// struct LDKCOption_MaxDustHTLCExposureZ COption_MaxDustHTLCExposureZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_none")] public static extern long COption_MaxDustHTLCExposureZ_none();
	// void COption_MaxDustHTLCExposureZ_free(struct LDKCOption_MaxDustHTLCExposureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_free")] public static extern void COption_MaxDustHTLCExposureZ_free(long __res);
	// uint64_t COption_MaxDustHTLCExposureZ_clone_ptr(LDKCOption_MaxDustHTLCExposureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_clone_ptr")] public static extern long COption_MaxDustHTLCExposureZ_clone_ptr(long _arg);
	// struct LDKCOption_MaxDustHTLCExposureZ COption_MaxDustHTLCExposureZ_clone(const struct LDKCOption_MaxDustHTLCExposureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MaxDustHTLCExposureZ_clone")] public static extern long COption_MaxDustHTLCExposureZ_clone(long _orig);
	// struct LDKCOption_APIErrorZ COption_APIErrorZ_some(struct LDKAPIError o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_some")] public static extern long COption_APIErrorZ_some(long _o);
	// struct LDKCOption_APIErrorZ COption_APIErrorZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_none")] public static extern long COption_APIErrorZ_none();
	// void COption_APIErrorZ_free(struct LDKCOption_APIErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_free")] public static extern void COption_APIErrorZ_free(long __res);
	// uint64_t COption_APIErrorZ_clone_ptr(LDKCOption_APIErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_clone_ptr")] public static extern long COption_APIErrorZ_clone_ptr(long _arg);
	// struct LDKCOption_APIErrorZ COption_APIErrorZ_clone(const struct LDKCOption_APIErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_APIErrorZ_clone")] public static extern long COption_APIErrorZ_clone(long _orig);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ CResult_COption_APIErrorZDecodeErrorZ_ok(struct LDKCOption_APIErrorZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_ok")] public static extern long CResult_COption_APIErrorZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ CResult_COption_APIErrorZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_err")] public static extern long CResult_COption_APIErrorZDecodeErrorZ_err(long _e);
	// bool CResult_COption_APIErrorZDecodeErrorZ_is_ok(const struct LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_APIErrorZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_APIErrorZDecodeErrorZ_free(struct LDKCResult_COption_APIErrorZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_free")] public static extern void CResult_COption_APIErrorZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_APIErrorZDecodeErrorZ_clone_ptr(LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_APIErrorZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ CResult_COption_APIErrorZDecodeErrorZ_clone(const struct LDKCResult_COption_APIErrorZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_APIErrorZDecodeErrorZ_clone")] public static extern long CResult_COption_APIErrorZDecodeErrorZ_clone(long _orig);
	// void CVec_LSPS2RawOpeningFeeParamsZ_free(struct LDKCVec_LSPS2RawOpeningFeeParamsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_LSPS2RawOpeningFeeParamsZ_free")] public static extern void CVec_LSPS2RawOpeningFeeParamsZ_free(long __res);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_ok(struct LDKChannelMonitorUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_ok")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_err")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_err(long _e);
	// bool CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelMonitorUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelMonitorUpdateDecodeErrorZ_free(struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_free")] public static extern void CResult_ChannelMonitorUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ CResult_ChannelMonitorUpdateDecodeErrorZ_clone(const struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelMonitorUpdateDecodeErrorZ_clone")] public static extern long CResult_ChannelMonitorUpdateDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_some(struct LDKMonitorEvent o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_some")] public static extern long COption_MonitorEventZ_some(long _o);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_none")] public static extern long COption_MonitorEventZ_none();
	// void COption_MonitorEventZ_free(struct LDKCOption_MonitorEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_free")] public static extern void COption_MonitorEventZ_free(long __res);
	// uint64_t COption_MonitorEventZ_clone_ptr(LDKCOption_MonitorEventZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_clone_ptr")] public static extern long COption_MonitorEventZ_clone_ptr(long _arg);
	// struct LDKCOption_MonitorEventZ COption_MonitorEventZ_clone(const struct LDKCOption_MonitorEventZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MonitorEventZ_clone")] public static extern long COption_MonitorEventZ_clone(long _orig);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_ok(struct LDKCOption_MonitorEventZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_ok")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_err")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_err(long _e);
	// bool CResult_COption_MonitorEventZDecodeErrorZ_is_ok(const struct LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_MonitorEventZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_MonitorEventZDecodeErrorZ_free(struct LDKCResult_COption_MonitorEventZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_free")] public static extern void CResult_COption_MonitorEventZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr(LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ CResult_COption_MonitorEventZDecodeErrorZ_clone(const struct LDKCResult_COption_MonitorEventZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_MonitorEventZDecodeErrorZ_clone")] public static extern long CResult_COption_MonitorEventZDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_ok(struct LDKHTLCUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_ok")] public static extern long CResult_HTLCUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_err")] public static extern long CResult_HTLCUpdateDecodeErrorZ_err(long _e);
	// bool CResult_HTLCUpdateDecodeErrorZ_is_ok(const struct LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_HTLCUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_HTLCUpdateDecodeErrorZ_free(struct LDKCResult_HTLCUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_free")] public static extern void CResult_HTLCUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_HTLCUpdateDecodeErrorZ_clone_ptr(LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_HTLCUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ CResult_HTLCUpdateDecodeErrorZ_clone(const struct LDKCResult_HTLCUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCUpdateDecodeErrorZ_clone")] public static extern long CResult_HTLCUpdateDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_OutPointCVec_u8ZZ_clone_ptr(LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_clone_ptr")] public static extern long C2Tuple_OutPointCVec_u8ZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OutPointCVec_u8ZZ C2Tuple_OutPointCVec_u8ZZ_clone(const struct LDKC2Tuple_OutPointCVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_clone")] public static extern long C2Tuple_OutPointCVec_u8ZZ_clone(long _orig);
	// struct LDKC2Tuple_OutPointCVec_u8ZZ C2Tuple_OutPointCVec_u8ZZ_new(struct LDKOutPoint a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_new")] public static extern long C2Tuple_OutPointCVec_u8ZZ_new(long _a, long _b);
	// void C2Tuple_OutPointCVec_u8ZZ_free(struct LDKC2Tuple_OutPointCVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u8ZZ_free")] public static extern void C2Tuple_OutPointCVec_u8ZZ_free(long __res);
	// uint64_t C2Tuple_u32CVec_u8ZZ_clone_ptr(LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_clone_ptr")] public static extern long C2Tuple_u32CVec_u8ZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_u32CVec_u8ZZ C2Tuple_u32CVec_u8ZZ_clone(const struct LDKC2Tuple_u32CVec_u8ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_clone")] public static extern long C2Tuple_u32CVec_u8ZZ_clone(long _orig);
	// struct LDKC2Tuple_u32CVec_u8ZZ C2Tuple_u32CVec_u8ZZ_new(uint32_t a, struct LDKCVec_u8Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_new")] public static extern long C2Tuple_u32CVec_u8ZZ_new(int _a, long _b);
	// void C2Tuple_u32CVec_u8ZZ_free(struct LDKC2Tuple_u32CVec_u8ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32CVec_u8ZZ_free")] public static extern void C2Tuple_u32CVec_u8ZZ_free(long __res);
	// void CVec_C2Tuple_u32CVec_u8ZZZ_free(struct LDKCVec_C2Tuple_u32CVec_u8ZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u32CVec_u8ZZZ_free")] public static extern void CVec_C2Tuple_u32CVec_u8ZZZ_free(long __res);
	// uint64_t C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone_ptr")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_clone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_new(struct LDKThirtyTwoBytes a, struct LDKCVec_C2Tuple_u32CVec_u8ZZZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_new")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_new(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_free(struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_free")] public static extern void C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZ_free(long __res);
	// void CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ_free")] public static extern void CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ_free(long __res);
	// struct LDKCResult_NoneReplayEventZ CResult_NoneReplayEventZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_ok")] public static extern long CResult_NoneReplayEventZ_ok();
	// struct LDKCResult_NoneReplayEventZ CResult_NoneReplayEventZ_err(struct LDKReplayEvent e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_err")] public static extern long CResult_NoneReplayEventZ_err(long _e);
	// bool CResult_NoneReplayEventZ_is_ok(const struct LDKCResult_NoneReplayEventZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_is_ok")] public static extern bool CResult_NoneReplayEventZ_is_ok(long _o);
	// void CResult_NoneReplayEventZ_free(struct LDKCResult_NoneReplayEventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_free")] public static extern void CResult_NoneReplayEventZ_free(long __res);
	// uint64_t CResult_NoneReplayEventZ_clone_ptr(LDKCResult_NoneReplayEventZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_clone_ptr")] public static extern long CResult_NoneReplayEventZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneReplayEventZ CResult_NoneReplayEventZ_clone(const struct LDKCResult_NoneReplayEventZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneReplayEventZ_clone")] public static extern long CResult_NoneReplayEventZ_clone(long _orig);
	// void CVec_CommitmentTransactionZ_free(struct LDKCVec_CommitmentTransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_CommitmentTransactionZ_free")] public static extern void CVec_CommitmentTransactionZ_free(long __res);
	// uint64_t C2Tuple_u32TxOutZ_clone_ptr(LDKC2Tuple_u32TxOutZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_clone_ptr")] public static extern long C2Tuple_u32TxOutZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_u32TxOutZ C2Tuple_u32TxOutZ_clone(const struct LDKC2Tuple_u32TxOutZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_clone")] public static extern long C2Tuple_u32TxOutZ_clone(long _orig);
	// struct LDKC2Tuple_u32TxOutZ C2Tuple_u32TxOutZ_new(uint32_t a, struct LDKTxOut b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_new")] public static extern long C2Tuple_u32TxOutZ_new(int _a, long _b);
	// void C2Tuple_u32TxOutZ_free(struct LDKC2Tuple_u32TxOutZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_u32TxOutZ_free")] public static extern void C2Tuple_u32TxOutZ_free(long __res);
	// void CVec_C2Tuple_u32TxOutZZ_free(struct LDKCVec_C2Tuple_u32TxOutZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_u32TxOutZZ_free")] public static extern void CVec_C2Tuple_u32TxOutZZ_free(long __res);
	// uint64_t C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone_ptr")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_clone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_new(struct LDKThirtyTwoBytes a, struct LDKCVec_C2Tuple_u32TxOutZZ b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_new")] public static extern long C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_new(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_free(struct LDKC2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_free")] public static extern void C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZ_free(long __res);
	// void CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ_free")] public static extern void CVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ_free(long __res);
	// uint64_t C2Tuple_boolboolZ_clone_ptr(LDKC2Tuple_boolboolZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_boolboolZ_clone_ptr")] public static extern long C2Tuple_boolboolZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_boolboolZ C2Tuple_boolboolZ_clone(const struct LDKC2Tuple_boolboolZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_boolboolZ_clone")] public static extern long C2Tuple_boolboolZ_clone(long _orig);
	// struct LDKC2Tuple_boolboolZ C2Tuple_boolboolZ_new(bool a, bool b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_boolboolZ_new")] public static extern long C2Tuple_boolboolZ_new(bool _a, bool _b);
	// void C2Tuple_boolboolZ_free(struct LDKC2Tuple_boolboolZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_boolboolZ_free")] public static extern void C2Tuple_boolboolZ_free(long __res);
	// void CVec_BalanceZ_free(struct LDKCVec_BalanceZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_BalanceZ_free")] public static extern void CVec_BalanceZ_free(long __res);
	// uint64_t C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone_ptr(LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone_ptr")] public static extern long C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone(const struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone")] public static extern long C2Tuple_ThirtyTwoBytesChannelMonitorZ_clone(long _orig);
	// struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ C2Tuple_ThirtyTwoBytesChannelMonitorZ_new(struct LDKThirtyTwoBytes a, struct LDKChannelMonitor b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_new")] public static extern long C2Tuple_ThirtyTwoBytesChannelMonitorZ_new(long _a, long _b);
	// void C2Tuple_ThirtyTwoBytesChannelMonitorZ_free(struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_free")] public static extern void C2Tuple_ThirtyTwoBytesChannelMonitorZ_free(long __res);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_ok(struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_err(long _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_is_ok")] public static extern bool CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_is_ok(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_free")] public static extern void CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_free(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone_ptr")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_PublicKeyTypeZ_clone_ptr(LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_clone_ptr")] public static extern long C2Tuple_PublicKeyTypeZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_PublicKeyTypeZ C2Tuple_PublicKeyTypeZ_clone(const struct LDKC2Tuple_PublicKeyTypeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_clone")] public static extern long C2Tuple_PublicKeyTypeZ_clone(long _orig);
	// struct LDKC2Tuple_PublicKeyTypeZ C2Tuple_PublicKeyTypeZ_new(struct LDKPublicKey a, struct LDKType b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_new")] public static extern long C2Tuple_PublicKeyTypeZ_new(long _a, long _b);
	// void C2Tuple_PublicKeyTypeZ_free(struct LDKC2Tuple_PublicKeyTypeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_PublicKeyTypeZ_free")] public static extern void C2Tuple_PublicKeyTypeZ_free(long __res);
	// void CVec_C2Tuple_PublicKeyTypeZZ_free(struct LDKCVec_C2Tuple_PublicKeyTypeZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_PublicKeyTypeZZ_free")] public static extern void CVec_C2Tuple_PublicKeyTypeZZ_free(long __res);
	// uint64_t C2Tuple_OnionMessageContentsResponseInstructionZ_clone_ptr(LDKC2Tuple_OnionMessageContentsResponseInstructionZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsResponseInstructionZ_clone_ptr")] public static extern long C2Tuple_OnionMessageContentsResponseInstructionZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OnionMessageContentsResponseInstructionZ C2Tuple_OnionMessageContentsResponseInstructionZ_clone(const struct LDKC2Tuple_OnionMessageContentsResponseInstructionZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsResponseInstructionZ_clone")] public static extern long C2Tuple_OnionMessageContentsResponseInstructionZ_clone(long _orig);
	// struct LDKC2Tuple_OnionMessageContentsResponseInstructionZ C2Tuple_OnionMessageContentsResponseInstructionZ_new(struct LDKOnionMessageContents a, struct LDKResponseInstruction b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsResponseInstructionZ_new")] public static extern long C2Tuple_OnionMessageContentsResponseInstructionZ_new(long _a, long _b);
	// void C2Tuple_OnionMessageContentsResponseInstructionZ_free(struct LDKC2Tuple_OnionMessageContentsResponseInstructionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsResponseInstructionZ_free")] public static extern void C2Tuple_OnionMessageContentsResponseInstructionZ_free(long __res);
	// struct LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_some(struct LDKC2Tuple_OnionMessageContentsResponseInstructionZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_some")] public static extern long COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_some(long _o);
	// struct LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_none")] public static extern long COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_none();
	// void COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_free(struct LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_free")] public static extern void COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_free(long __res);
	// uint64_t COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_clone_ptr(LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_clone_ptr")] public static extern long COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_clone_ptr(long _arg);
	// struct LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_clone(const struct LDKCOption_C2Tuple_OnionMessageContentsResponseInstructionZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_clone")] public static extern long COption_C2Tuple_OnionMessageContentsResponseInstructionZZ_clone(long _orig);
	// struct LDKCOption_OnionMessageContentsZ COption_OnionMessageContentsZ_some(struct LDKOnionMessageContents o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_some")] public static extern long COption_OnionMessageContentsZ_some(long _o);
	// struct LDKCOption_OnionMessageContentsZ COption_OnionMessageContentsZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_none")] public static extern long COption_OnionMessageContentsZ_none();
	// void COption_OnionMessageContentsZ_free(struct LDKCOption_OnionMessageContentsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_free")] public static extern void COption_OnionMessageContentsZ_free(long __res);
	// uint64_t COption_OnionMessageContentsZ_clone_ptr(LDKCOption_OnionMessageContentsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_clone_ptr")] public static extern long COption_OnionMessageContentsZ_clone_ptr(long _arg);
	// struct LDKCOption_OnionMessageContentsZ COption_OnionMessageContentsZ_clone(const struct LDKCOption_OnionMessageContentsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OnionMessageContentsZ_clone")] public static extern long COption_OnionMessageContentsZ_clone(long _orig);
	// struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CResult_COption_OnionMessageContentsZDecodeErrorZ_ok(struct LDKCOption_OnionMessageContentsZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_ok")] public static extern long CResult_COption_OnionMessageContentsZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CResult_COption_OnionMessageContentsZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_err")] public static extern long CResult_COption_OnionMessageContentsZDecodeErrorZ_err(long _e);
	// bool CResult_COption_OnionMessageContentsZDecodeErrorZ_is_ok(const struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_OnionMessageContentsZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_OnionMessageContentsZDecodeErrorZ_free(struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_free")] public static extern void CResult_COption_OnionMessageContentsZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_OnionMessageContentsZDecodeErrorZ_clone_ptr(LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_OnionMessageContentsZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ CResult_COption_OnionMessageContentsZDecodeErrorZ_clone(const struct LDKCResult_COption_OnionMessageContentsZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OnionMessageContentsZDecodeErrorZ_clone")] public static extern long CResult_COption_OnionMessageContentsZDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple_OnionMessageContentsMessageSendInstructionsZ_clone_ptr(LDKC2Tuple_OnionMessageContentsMessageSendInstructionsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsMessageSendInstructionsZ_clone_ptr")] public static extern long C2Tuple_OnionMessageContentsMessageSendInstructionsZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OnionMessageContentsMessageSendInstructionsZ C2Tuple_OnionMessageContentsMessageSendInstructionsZ_clone(const struct LDKC2Tuple_OnionMessageContentsMessageSendInstructionsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsMessageSendInstructionsZ_clone")] public static extern long C2Tuple_OnionMessageContentsMessageSendInstructionsZ_clone(long _orig);
	// struct LDKC2Tuple_OnionMessageContentsMessageSendInstructionsZ C2Tuple_OnionMessageContentsMessageSendInstructionsZ_new(struct LDKOnionMessageContents a, struct LDKMessageSendInstructions b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsMessageSendInstructionsZ_new")] public static extern long C2Tuple_OnionMessageContentsMessageSendInstructionsZ_new(long _a, long _b);
	// void C2Tuple_OnionMessageContentsMessageSendInstructionsZ_free(struct LDKC2Tuple_OnionMessageContentsMessageSendInstructionsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OnionMessageContentsMessageSendInstructionsZ_free")] public static extern void C2Tuple_OnionMessageContentsMessageSendInstructionsZ_free(long __res);
	// void CVec_C2Tuple_OnionMessageContentsMessageSendInstructionsZZ_free(struct LDKCVec_C2Tuple_OnionMessageContentsMessageSendInstructionsZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_OnionMessageContentsMessageSendInstructionsZZ_free")] public static extern void CVec_C2Tuple_OnionMessageContentsMessageSendInstructionsZZ_free(long __res);
	// struct LDKCOption_TypeZ COption_TypeZ_some(struct LDKType o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_some")] public static extern long COption_TypeZ_some(long _o);
	// struct LDKCOption_TypeZ COption_TypeZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_none")] public static extern long COption_TypeZ_none();
	// void COption_TypeZ_free(struct LDKCOption_TypeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_free")] public static extern void COption_TypeZ_free(long __res);
	// uint64_t COption_TypeZ_clone_ptr(LDKCOption_TypeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_clone_ptr")] public static extern long COption_TypeZ_clone_ptr(long _arg);
	// struct LDKCOption_TypeZ COption_TypeZ_clone(const struct LDKCOption_TypeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_TypeZ_clone")] public static extern long COption_TypeZ_clone(long _orig);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_ok(struct LDKCOption_TypeZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_ok")] public static extern long CResult_COption_TypeZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_err")] public static extern long CResult_COption_TypeZDecodeErrorZ_err(long _e);
	// bool CResult_COption_TypeZDecodeErrorZ_is_ok(const struct LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_TypeZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_TypeZDecodeErrorZ_free(struct LDKCResult_COption_TypeZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_free")] public static extern void CResult_COption_TypeZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_TypeZDecodeErrorZ_clone_ptr(LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_TypeZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_TypeZDecodeErrorZ CResult_COption_TypeZDecodeErrorZ_clone(const struct LDKCResult_COption_TypeZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_TypeZDecodeErrorZ_clone")] public static extern long CResult_COption_TypeZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_SocketAddressZ COption_SocketAddressZ_some(struct LDKSocketAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_some")] public static extern long COption_SocketAddressZ_some(long _o);
	// struct LDKCOption_SocketAddressZ COption_SocketAddressZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_none")] public static extern long COption_SocketAddressZ_none();
	// void COption_SocketAddressZ_free(struct LDKCOption_SocketAddressZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_free")] public static extern void COption_SocketAddressZ_free(long __res);
	// uint64_t COption_SocketAddressZ_clone_ptr(LDKCOption_SocketAddressZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_clone_ptr")] public static extern long COption_SocketAddressZ_clone_ptr(long _arg);
	// struct LDKCOption_SocketAddressZ COption_SocketAddressZ_clone(const struct LDKCOption_SocketAddressZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_SocketAddressZ_clone")] public static extern long COption_SocketAddressZ_clone(long _orig);
	// void CVec_PeerDetailsZ_free(struct LDKCVec_PeerDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PeerDetailsZ_free")] public static extern void CVec_PeerDetailsZ_free(long __res);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_ok(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_ok")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_ok(long _o);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_err")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_err(long _e);
	// bool CResult_CVec_u8ZPeerHandleErrorZ_is_ok(const struct LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_is_ok")] public static extern bool CResult_CVec_u8ZPeerHandleErrorZ_is_ok(long _o);
	// void CResult_CVec_u8ZPeerHandleErrorZ_free(struct LDKCResult_CVec_u8ZPeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_free")] public static extern void CResult_CVec_u8ZPeerHandleErrorZ_free(long __res);
	// uint64_t CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr(LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_u8ZPeerHandleErrorZ CResult_CVec_u8ZPeerHandleErrorZ_clone(const struct LDKCResult_CVec_u8ZPeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZPeerHandleErrorZ_clone")] public static extern long CResult_CVec_u8ZPeerHandleErrorZ_clone(long _orig);
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_ok")] public static extern long CResult_NonePeerHandleErrorZ_ok();
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_err")] public static extern long CResult_NonePeerHandleErrorZ_err(long _e);
	// bool CResult_NonePeerHandleErrorZ_is_ok(const struct LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_is_ok")] public static extern bool CResult_NonePeerHandleErrorZ_is_ok(long _o);
	// void CResult_NonePeerHandleErrorZ_free(struct LDKCResult_NonePeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_free")] public static extern void CResult_NonePeerHandleErrorZ_free(long __res);
	// uint64_t CResult_NonePeerHandleErrorZ_clone_ptr(LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_clone_ptr")] public static extern long CResult_NonePeerHandleErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NonePeerHandleErrorZ CResult_NonePeerHandleErrorZ_clone(const struct LDKCResult_NonePeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonePeerHandleErrorZ_clone")] public static extern long CResult_NonePeerHandleErrorZ_clone(long _orig);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_ok(bool o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_ok")] public static extern long CResult_boolPeerHandleErrorZ_ok(bool _o);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_err(struct LDKPeerHandleError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_err")] public static extern long CResult_boolPeerHandleErrorZ_err(long _e);
	// bool CResult_boolPeerHandleErrorZ_is_ok(const struct LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_is_ok")] public static extern bool CResult_boolPeerHandleErrorZ_is_ok(long _o);
	// void CResult_boolPeerHandleErrorZ_free(struct LDKCResult_boolPeerHandleErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_free")] public static extern void CResult_boolPeerHandleErrorZ_free(long __res);
	// uint64_t CResult_boolPeerHandleErrorZ_clone_ptr(LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_clone_ptr")] public static extern long CResult_boolPeerHandleErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_boolPeerHandleErrorZ CResult_boolPeerHandleErrorZ_clone(const struct LDKCResult_boolPeerHandleErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_boolPeerHandleErrorZ_clone")] public static extern long CResult_boolPeerHandleErrorZ_clone(long _orig);
	// struct LDKCResult_u32GraphSyncErrorZ CResult_u32GraphSyncErrorZ_ok(uint32_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_ok")] public static extern long CResult_u32GraphSyncErrorZ_ok(int _o);
	// struct LDKCResult_u32GraphSyncErrorZ CResult_u32GraphSyncErrorZ_err(struct LDKGraphSyncError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_err")] public static extern long CResult_u32GraphSyncErrorZ_err(long _e);
	// bool CResult_u32GraphSyncErrorZ_is_ok(const struct LDKCResult_u32GraphSyncErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_is_ok")] public static extern bool CResult_u32GraphSyncErrorZ_is_ok(long _o);
	// void CResult_u32GraphSyncErrorZ_free(struct LDKCResult_u32GraphSyncErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u32GraphSyncErrorZ_free")] public static extern void CResult_u32GraphSyncErrorZ_free(long __res);
	// struct LDKCResult_CVec_u8ZIOErrorZ CResult_CVec_u8ZIOErrorZ_ok(struct LDKCVec_u8Z o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_ok")] public static extern long CResult_CVec_u8ZIOErrorZ_ok(long _o);
	// struct LDKCResult_CVec_u8ZIOErrorZ CResult_CVec_u8ZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_err")] public static extern long CResult_CVec_u8ZIOErrorZ_err(IOError _e);
	// bool CResult_CVec_u8ZIOErrorZ_is_ok(const struct LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_is_ok")] public static extern bool CResult_CVec_u8ZIOErrorZ_is_ok(long _o);
	// void CResult_CVec_u8ZIOErrorZ_free(struct LDKCResult_CVec_u8ZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_free")] public static extern void CResult_CVec_u8ZIOErrorZ_free(long __res);
	// uint64_t CResult_CVec_u8ZIOErrorZ_clone_ptr(LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_clone_ptr")] public static extern long CResult_CVec_u8ZIOErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_u8ZIOErrorZ CResult_CVec_u8ZIOErrorZ_clone(const struct LDKCResult_CVec_u8ZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_u8ZIOErrorZ_clone")] public static extern long CResult_CVec_u8ZIOErrorZ_clone(long _orig);
	// void CVec_StrZ_free(struct LDKCVec_StrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_StrZ_free")] public static extern void CVec_StrZ_free(long __res);
	// struct LDKCResult_CVec_StrZIOErrorZ CResult_CVec_StrZIOErrorZ_ok(struct LDKCVec_StrZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_ok")] public static extern long CResult_CVec_StrZIOErrorZ_ok(long _o);
	// struct LDKCResult_CVec_StrZIOErrorZ CResult_CVec_StrZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_err")] public static extern long CResult_CVec_StrZIOErrorZ_err(IOError _e);
	// bool CResult_CVec_StrZIOErrorZ_is_ok(const struct LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_is_ok")] public static extern bool CResult_CVec_StrZIOErrorZ_is_ok(long _o);
	// void CResult_CVec_StrZIOErrorZ_free(struct LDKCResult_CVec_StrZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_free")] public static extern void CResult_CVec_StrZIOErrorZ_free(long __res);
	// uint64_t CResult_CVec_StrZIOErrorZ_clone_ptr(LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_clone_ptr")] public static extern long CResult_CVec_StrZIOErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_StrZIOErrorZ CResult_CVec_StrZIOErrorZ_clone(const struct LDKCResult_CVec_StrZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_StrZIOErrorZ_clone")] public static extern long CResult_CVec_StrZIOErrorZ_clone(long _orig);
	// uint64_t C3Tuple_StrStrStrZ_clone_ptr(LDKC3Tuple_StrStrStrZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_StrStrStrZ_clone_ptr")] public static extern long C3Tuple_StrStrStrZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_StrStrStrZ C3Tuple_StrStrStrZ_clone(const struct LDKC3Tuple_StrStrStrZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_StrStrStrZ_clone")] public static extern long C3Tuple_StrStrStrZ_clone(long _orig);
	// struct LDKC3Tuple_StrStrStrZ C3Tuple_StrStrStrZ_new(struct LDKStr a, struct LDKStr b, struct LDKStr c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_StrStrStrZ_new")] public static extern long C3Tuple_StrStrStrZ_new(long _a, long _b, long _c);
	// void C3Tuple_StrStrStrZ_free(struct LDKC3Tuple_StrStrStrZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_StrStrStrZ_free")] public static extern void C3Tuple_StrStrStrZ_free(long __res);
	// void CVec_C3Tuple_StrStrStrZZ_free(struct LDKCVec_C3Tuple_StrStrStrZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C3Tuple_StrStrStrZZ_free")] public static extern void CVec_C3Tuple_StrStrStrZZ_free(long __res);
	// struct LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_ok(struct LDKCVec_C3Tuple_StrStrStrZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_ok")] public static extern long CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_ok(long _o);
	// struct LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_err")] public static extern long CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_err(IOError _e);
	// bool CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_is_ok(const struct LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_is_ok")] public static extern bool CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_is_ok(long _o);
	// void CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_free(struct LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_free")] public static extern void CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_free(long __res);
	// uint64_t CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_clone_ptr(LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_clone_ptr")] public static extern long CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_clone(const struct LDKCResult_CVec_C3Tuple_StrStrStrZZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_clone")] public static extern long CResult_CVec_C3Tuple_StrStrStrZZIOErrorZ_clone(long _orig);
	// void CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ_free(struct LDKCVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ_free")] public static extern void CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ_free(long __res);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_ok(struct LDKCVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_ok")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_ok(long _o);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_err")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_err(IOError _e);
	// bool CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_is_ok(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_is_ok")] public static extern bool CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_is_ok(long _o);
	// void CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_free(struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_free")] public static extern void CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_free(long __res);
	// uint64_t CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone_ptr(LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone_ptr")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone(const struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone")] public static extern long CResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ_clone(long _orig);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_ok(struct LDKC2Tuple_ThirtyTwoBytesChannelMonitorZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_ok")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_ok(long _o);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_err")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_err(IOError _e);
	// bool CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_is_ok(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_is_ok")] public static extern bool CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_is_ok(long _o);
	// void CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_free(struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_free")] public static extern void CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_free(long __res);
	// uint64_t CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone_ptr(LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone_ptr")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone(const struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone")] public static extern long CResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ_clone(long _orig);
	// struct LDKCResult_MonitorNameIOErrorZ CResult_MonitorNameIOErrorZ_ok(struct LDKMonitorName o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MonitorNameIOErrorZ_ok")] public static extern long CResult_MonitorNameIOErrorZ_ok(long _o);
	// struct LDKCResult_MonitorNameIOErrorZ CResult_MonitorNameIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MonitorNameIOErrorZ_err")] public static extern long CResult_MonitorNameIOErrorZ_err(IOError _e);
	// bool CResult_MonitorNameIOErrorZ_is_ok(const struct LDKCResult_MonitorNameIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MonitorNameIOErrorZ_is_ok")] public static extern bool CResult_MonitorNameIOErrorZ_is_ok(long _o);
	// void CResult_MonitorNameIOErrorZ_free(struct LDKCResult_MonitorNameIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MonitorNameIOErrorZ_free")] public static extern void CResult_MonitorNameIOErrorZ_free(long __res);
	// struct LDKCResult_UpdateNameIOErrorZ CResult_UpdateNameIOErrorZ_ok(struct LDKUpdateName o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateNameIOErrorZ_ok")] public static extern long CResult_UpdateNameIOErrorZ_ok(long _o);
	// struct LDKCResult_UpdateNameIOErrorZ CResult_UpdateNameIOErrorZ_err(enum LDKIOError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateNameIOErrorZ_err")] public static extern long CResult_UpdateNameIOErrorZ_err(IOError _e);
	// bool CResult_UpdateNameIOErrorZ_is_ok(const struct LDKCResult_UpdateNameIOErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateNameIOErrorZ_is_ok")] public static extern bool CResult_UpdateNameIOErrorZ_is_ok(long _o);
	// void CResult_UpdateNameIOErrorZ_free(struct LDKCResult_UpdateNameIOErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateNameIOErrorZ_free")] public static extern void CResult_UpdateNameIOErrorZ_free(long __res);
	// struct LDKCResult_InvoiceRequestBolt12SemanticErrorZ CResult_InvoiceRequestBolt12SemanticErrorZ_ok(struct LDKInvoiceRequest o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_ok")] public static extern long CResult_InvoiceRequestBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceRequestBolt12SemanticErrorZ CResult_InvoiceRequestBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_err")] public static extern long CResult_InvoiceRequestBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_InvoiceRequestBolt12SemanticErrorZ_is_ok(const struct LDKCResult_InvoiceRequestBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_InvoiceRequestBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_InvoiceRequestBolt12SemanticErrorZ_free(struct LDKCResult_InvoiceRequestBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_free")] public static extern void CResult_InvoiceRequestBolt12SemanticErrorZ_free(long __res);
	// uint64_t CResult_InvoiceRequestBolt12SemanticErrorZ_clone_ptr(LDKCResult_InvoiceRequestBolt12SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_clone_ptr")] public static extern long CResult_InvoiceRequestBolt12SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceRequestBolt12SemanticErrorZ CResult_InvoiceRequestBolt12SemanticErrorZ_clone(const struct LDKCResult_InvoiceRequestBolt12SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestBolt12SemanticErrorZ_clone")] public static extern long CResult_InvoiceRequestBolt12SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_ok(struct LDKInvoiceWithExplicitSigningPubkeyBuilder o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_ok")] public static extern long CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_err")] public static extern long CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok(const struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_free(struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_free")] public static extern void CResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ_free(long __res);
	// struct LDKCResult_VerifiedInvoiceRequestNoneZ CResult_VerifiedInvoiceRequestNoneZ_ok(struct LDKVerifiedInvoiceRequest o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_ok")] public static extern long CResult_VerifiedInvoiceRequestNoneZ_ok(long _o);
	// struct LDKCResult_VerifiedInvoiceRequestNoneZ CResult_VerifiedInvoiceRequestNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_err")] public static extern long CResult_VerifiedInvoiceRequestNoneZ_err();
	// bool CResult_VerifiedInvoiceRequestNoneZ_is_ok(const struct LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_is_ok")] public static extern bool CResult_VerifiedInvoiceRequestNoneZ_is_ok(long _o);
	// void CResult_VerifiedInvoiceRequestNoneZ_free(struct LDKCResult_VerifiedInvoiceRequestNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_free")] public static extern void CResult_VerifiedInvoiceRequestNoneZ_free(long __res);
	// uint64_t CResult_VerifiedInvoiceRequestNoneZ_clone_ptr(LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_clone_ptr")] public static extern long CResult_VerifiedInvoiceRequestNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_VerifiedInvoiceRequestNoneZ CResult_VerifiedInvoiceRequestNoneZ_clone(const struct LDKCResult_VerifiedInvoiceRequestNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_VerifiedInvoiceRequestNoneZ_clone")] public static extern long CResult_VerifiedInvoiceRequestNoneZ_clone(long _orig);
	// struct LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_ok(struct LDKInvoiceWithDerivedSigningPubkeyBuilder o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_ok")] public static extern long CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_err(enum LDKBolt12SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_err")] public static extern long CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_err(Bolt12SemanticError _e);
	// bool CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok(const struct LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok")] public static extern bool CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_is_ok(long _o);
	// void CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_free(struct LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_free")] public static extern void CResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ_free(long __res);
	// struct LDKCResult_InvoiceRequestDecodeErrorZ CResult_InvoiceRequestDecodeErrorZ_ok(struct LDKInvoiceRequest o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_ok")] public static extern long CResult_InvoiceRequestDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceRequestDecodeErrorZ CResult_InvoiceRequestDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_err")] public static extern long CResult_InvoiceRequestDecodeErrorZ_err(long _e);
	// bool CResult_InvoiceRequestDecodeErrorZ_is_ok(const struct LDKCResult_InvoiceRequestDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_is_ok")] public static extern bool CResult_InvoiceRequestDecodeErrorZ_is_ok(long _o);
	// void CResult_InvoiceRequestDecodeErrorZ_free(struct LDKCResult_InvoiceRequestDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_free")] public static extern void CResult_InvoiceRequestDecodeErrorZ_free(long __res);
	// uint64_t CResult_InvoiceRequestDecodeErrorZ_clone_ptr(LDKCResult_InvoiceRequestDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_clone_ptr")] public static extern long CResult_InvoiceRequestDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceRequestDecodeErrorZ CResult_InvoiceRequestDecodeErrorZ_clone(const struct LDKCResult_InvoiceRequestDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestDecodeErrorZ_clone")] public static extern long CResult_InvoiceRequestDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_InvoiceRequestFieldsDecodeErrorZ CResult_InvoiceRequestFieldsDecodeErrorZ_ok(struct LDKInvoiceRequestFields o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_ok")] public static extern long CResult_InvoiceRequestFieldsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceRequestFieldsDecodeErrorZ CResult_InvoiceRequestFieldsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_err")] public static extern long CResult_InvoiceRequestFieldsDecodeErrorZ_err(long _e);
	// bool CResult_InvoiceRequestFieldsDecodeErrorZ_is_ok(const struct LDKCResult_InvoiceRequestFieldsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_is_ok")] public static extern bool CResult_InvoiceRequestFieldsDecodeErrorZ_is_ok(long _o);
	// void CResult_InvoiceRequestFieldsDecodeErrorZ_free(struct LDKCResult_InvoiceRequestFieldsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_free")] public static extern void CResult_InvoiceRequestFieldsDecodeErrorZ_free(long __res);
	// uint64_t CResult_InvoiceRequestFieldsDecodeErrorZ_clone_ptr(LDKCResult_InvoiceRequestFieldsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_clone_ptr")] public static extern long CResult_InvoiceRequestFieldsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceRequestFieldsDecodeErrorZ CResult_InvoiceRequestFieldsDecodeErrorZ_clone(const struct LDKCResult_InvoiceRequestFieldsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceRequestFieldsDecodeErrorZ_clone")] public static extern long CResult_InvoiceRequestFieldsDecodeErrorZ_clone(long _orig);
	// enum LDKCOption_NoneZ COption_NoneZ_some(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_some")] public static extern COption_NoneZ COption_NoneZ_some();
	// enum LDKCOption_NoneZ COption_NoneZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_none")] public static extern COption_NoneZ COption_NoneZ_none();
	// void COption_NoneZ_free(enum LDKCOption_NoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_NoneZ_free")] public static extern void COption_NoneZ_free(COption_NoneZ __res);
	// void CVec_WitnessZ_free(struct LDKCVec_WitnessZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_WitnessZ_free")] public static extern void CVec_WitnessZ_free(long __res);
	// struct LDKCOption_ECDSASignatureZ COption_ECDSASignatureZ_some(struct LDKECDSASignature o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ECDSASignatureZ_some")] public static extern long COption_ECDSASignatureZ_some(long _o);
	// struct LDKCOption_ECDSASignatureZ COption_ECDSASignatureZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ECDSASignatureZ_none")] public static extern long COption_ECDSASignatureZ_none();
	// void COption_ECDSASignatureZ_free(struct LDKCOption_ECDSASignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ECDSASignatureZ_free")] public static extern void COption_ECDSASignatureZ_free(long __res);
	// uint64_t COption_ECDSASignatureZ_clone_ptr(LDKCOption_ECDSASignatureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ECDSASignatureZ_clone_ptr")] public static extern long COption_ECDSASignatureZ_clone_ptr(long _arg);
	// struct LDKCOption_ECDSASignatureZ COption_ECDSASignatureZ_clone(const struct LDKCOption_ECDSASignatureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ECDSASignatureZ_clone")] public static extern long COption_ECDSASignatureZ_clone(long _orig);
	// struct LDKCOption_i64Z COption_i64Z_some(int64_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_some")] public static extern long COption_i64Z_some(long _o);
	// struct LDKCOption_i64Z COption_i64Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_none")] public static extern long COption_i64Z_none();
	// void COption_i64Z_free(struct LDKCOption_i64Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_free")] public static extern void COption_i64Z_free(long __res);
	// uint64_t COption_i64Z_clone_ptr(LDKCOption_i64Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_clone_ptr")] public static extern long COption_i64Z_clone_ptr(long _arg);
	// struct LDKCOption_i64Z COption_i64Z_clone(const struct LDKCOption_i64Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_i64Z_clone")] public static extern long COption_i64Z_clone(long _orig);
	// struct LDKCResult_SocketAddressDecodeErrorZ CResult_SocketAddressDecodeErrorZ_ok(struct LDKSocketAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_ok")] public static extern long CResult_SocketAddressDecodeErrorZ_ok(long _o);
	// struct LDKCResult_SocketAddressDecodeErrorZ CResult_SocketAddressDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_err")] public static extern long CResult_SocketAddressDecodeErrorZ_err(long _e);
	// bool CResult_SocketAddressDecodeErrorZ_is_ok(const struct LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_is_ok")] public static extern bool CResult_SocketAddressDecodeErrorZ_is_ok(long _o);
	// void CResult_SocketAddressDecodeErrorZ_free(struct LDKCResult_SocketAddressDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_free")] public static extern void CResult_SocketAddressDecodeErrorZ_free(long __res);
	// uint64_t CResult_SocketAddressDecodeErrorZ_clone_ptr(LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_clone_ptr")] public static extern long CResult_SocketAddressDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SocketAddressDecodeErrorZ CResult_SocketAddressDecodeErrorZ_clone(const struct LDKCResult_SocketAddressDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressDecodeErrorZ_clone")] public static extern long CResult_SocketAddressDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ CResult_SocketAddressSocketAddressParseErrorZ_ok(struct LDKSocketAddress o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_ok")] public static extern long CResult_SocketAddressSocketAddressParseErrorZ_ok(long _o);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ CResult_SocketAddressSocketAddressParseErrorZ_err(enum LDKSocketAddressParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_err")] public static extern long CResult_SocketAddressSocketAddressParseErrorZ_err(SocketAddressParseError _e);
	// bool CResult_SocketAddressSocketAddressParseErrorZ_is_ok(const struct LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_is_ok")] public static extern bool CResult_SocketAddressSocketAddressParseErrorZ_is_ok(long _o);
	// void CResult_SocketAddressSocketAddressParseErrorZ_free(struct LDKCResult_SocketAddressSocketAddressParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_free")] public static extern void CResult_SocketAddressSocketAddressParseErrorZ_free(long __res);
	// uint64_t CResult_SocketAddressSocketAddressParseErrorZ_clone_ptr(LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_clone_ptr")] public static extern long CResult_SocketAddressSocketAddressParseErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ CResult_SocketAddressSocketAddressParseErrorZ_clone(const struct LDKCResult_SocketAddressSocketAddressParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SocketAddressSocketAddressParseErrorZ_clone")] public static extern long CResult_SocketAddressSocketAddressParseErrorZ_clone(long _orig);
	// void CVec_UpdateAddHTLCZ_free(struct LDKCVec_UpdateAddHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateAddHTLCZ_free")] public static extern void CVec_UpdateAddHTLCZ_free(long __res);
	// void CVec_UpdateFulfillHTLCZ_free(struct LDKCVec_UpdateFulfillHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFulfillHTLCZ_free")] public static extern void CVec_UpdateFulfillHTLCZ_free(long __res);
	// void CVec_UpdateFailHTLCZ_free(struct LDKCVec_UpdateFailHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFailHTLCZ_free")] public static extern void CVec_UpdateFailHTLCZ_free(long __res);
	// void CVec_UpdateFailMalformedHTLCZ_free(struct LDKCVec_UpdateFailMalformedHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_UpdateFailMalformedHTLCZ_free")] public static extern void CVec_UpdateFailMalformedHTLCZ_free(long __res);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_ok(struct LDKAcceptChannel o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_ok")] public static extern long CResult_AcceptChannelDecodeErrorZ_ok(long _o);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_err")] public static extern long CResult_AcceptChannelDecodeErrorZ_err(long _e);
	// bool CResult_AcceptChannelDecodeErrorZ_is_ok(const struct LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_is_ok")] public static extern bool CResult_AcceptChannelDecodeErrorZ_is_ok(long _o);
	// void CResult_AcceptChannelDecodeErrorZ_free(struct LDKCResult_AcceptChannelDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_free")] public static extern void CResult_AcceptChannelDecodeErrorZ_free(long __res);
	// uint64_t CResult_AcceptChannelDecodeErrorZ_clone_ptr(LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_clone_ptr")] public static extern long CResult_AcceptChannelDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_AcceptChannelDecodeErrorZ CResult_AcceptChannelDecodeErrorZ_clone(const struct LDKCResult_AcceptChannelDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelDecodeErrorZ_clone")] public static extern long CResult_AcceptChannelDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ CResult_AcceptChannelV2DecodeErrorZ_ok(struct LDKAcceptChannelV2 o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_ok")] public static extern long CResult_AcceptChannelV2DecodeErrorZ_ok(long _o);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ CResult_AcceptChannelV2DecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_err")] public static extern long CResult_AcceptChannelV2DecodeErrorZ_err(long _e);
	// bool CResult_AcceptChannelV2DecodeErrorZ_is_ok(const struct LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_is_ok")] public static extern bool CResult_AcceptChannelV2DecodeErrorZ_is_ok(long _o);
	// void CResult_AcceptChannelV2DecodeErrorZ_free(struct LDKCResult_AcceptChannelV2DecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_free")] public static extern void CResult_AcceptChannelV2DecodeErrorZ_free(long __res);
	// uint64_t CResult_AcceptChannelV2DecodeErrorZ_clone_ptr(LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_clone_ptr")] public static extern long CResult_AcceptChannelV2DecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ CResult_AcceptChannelV2DecodeErrorZ_clone(const struct LDKCResult_AcceptChannelV2DecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AcceptChannelV2DecodeErrorZ_clone")] public static extern long CResult_AcceptChannelV2DecodeErrorZ_clone(long _orig);
	// struct LDKCResult_StfuDecodeErrorZ CResult_StfuDecodeErrorZ_ok(struct LDKStfu o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_ok")] public static extern long CResult_StfuDecodeErrorZ_ok(long _o);
	// struct LDKCResult_StfuDecodeErrorZ CResult_StfuDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_err")] public static extern long CResult_StfuDecodeErrorZ_err(long _e);
	// bool CResult_StfuDecodeErrorZ_is_ok(const struct LDKCResult_StfuDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_is_ok")] public static extern bool CResult_StfuDecodeErrorZ_is_ok(long _o);
	// void CResult_StfuDecodeErrorZ_free(struct LDKCResult_StfuDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_free")] public static extern void CResult_StfuDecodeErrorZ_free(long __res);
	// uint64_t CResult_StfuDecodeErrorZ_clone_ptr(LDKCResult_StfuDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_clone_ptr")] public static extern long CResult_StfuDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_StfuDecodeErrorZ CResult_StfuDecodeErrorZ_clone(const struct LDKCResult_StfuDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_StfuDecodeErrorZ_clone")] public static extern long CResult_StfuDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_SpliceInitDecodeErrorZ CResult_SpliceInitDecodeErrorZ_ok(struct LDKSpliceInit o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_ok")] public static extern long CResult_SpliceInitDecodeErrorZ_ok(long _o);
	// struct LDKCResult_SpliceInitDecodeErrorZ CResult_SpliceInitDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_err")] public static extern long CResult_SpliceInitDecodeErrorZ_err(long _e);
	// bool CResult_SpliceInitDecodeErrorZ_is_ok(const struct LDKCResult_SpliceInitDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_is_ok")] public static extern bool CResult_SpliceInitDecodeErrorZ_is_ok(long _o);
	// void CResult_SpliceInitDecodeErrorZ_free(struct LDKCResult_SpliceInitDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_free")] public static extern void CResult_SpliceInitDecodeErrorZ_free(long __res);
	// uint64_t CResult_SpliceInitDecodeErrorZ_clone_ptr(LDKCResult_SpliceInitDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_clone_ptr")] public static extern long CResult_SpliceInitDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SpliceInitDecodeErrorZ CResult_SpliceInitDecodeErrorZ_clone(const struct LDKCResult_SpliceInitDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceInitDecodeErrorZ_clone")] public static extern long CResult_SpliceInitDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_SpliceAckDecodeErrorZ CResult_SpliceAckDecodeErrorZ_ok(struct LDKSpliceAck o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_ok")] public static extern long CResult_SpliceAckDecodeErrorZ_ok(long _o);
	// struct LDKCResult_SpliceAckDecodeErrorZ CResult_SpliceAckDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_err")] public static extern long CResult_SpliceAckDecodeErrorZ_err(long _e);
	// bool CResult_SpliceAckDecodeErrorZ_is_ok(const struct LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_is_ok")] public static extern bool CResult_SpliceAckDecodeErrorZ_is_ok(long _o);
	// void CResult_SpliceAckDecodeErrorZ_free(struct LDKCResult_SpliceAckDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_free")] public static extern void CResult_SpliceAckDecodeErrorZ_free(long __res);
	// uint64_t CResult_SpliceAckDecodeErrorZ_clone_ptr(LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_clone_ptr")] public static extern long CResult_SpliceAckDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SpliceAckDecodeErrorZ CResult_SpliceAckDecodeErrorZ_clone(const struct LDKCResult_SpliceAckDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceAckDecodeErrorZ_clone")] public static extern long CResult_SpliceAckDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_SpliceLockedDecodeErrorZ CResult_SpliceLockedDecodeErrorZ_ok(struct LDKSpliceLocked o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_ok")] public static extern long CResult_SpliceLockedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_SpliceLockedDecodeErrorZ CResult_SpliceLockedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_err")] public static extern long CResult_SpliceLockedDecodeErrorZ_err(long _e);
	// bool CResult_SpliceLockedDecodeErrorZ_is_ok(const struct LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_is_ok")] public static extern bool CResult_SpliceLockedDecodeErrorZ_is_ok(long _o);
	// void CResult_SpliceLockedDecodeErrorZ_free(struct LDKCResult_SpliceLockedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_free")] public static extern void CResult_SpliceLockedDecodeErrorZ_free(long __res);
	// uint64_t CResult_SpliceLockedDecodeErrorZ_clone_ptr(LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_clone_ptr")] public static extern long CResult_SpliceLockedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SpliceLockedDecodeErrorZ CResult_SpliceLockedDecodeErrorZ_clone(const struct LDKCResult_SpliceLockedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SpliceLockedDecodeErrorZ_clone")] public static extern long CResult_SpliceLockedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxAddInputDecodeErrorZ CResult_TxAddInputDecodeErrorZ_ok(struct LDKTxAddInput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_ok")] public static extern long CResult_TxAddInputDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxAddInputDecodeErrorZ CResult_TxAddInputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_err")] public static extern long CResult_TxAddInputDecodeErrorZ_err(long _e);
	// bool CResult_TxAddInputDecodeErrorZ_is_ok(const struct LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_is_ok")] public static extern bool CResult_TxAddInputDecodeErrorZ_is_ok(long _o);
	// void CResult_TxAddInputDecodeErrorZ_free(struct LDKCResult_TxAddInputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_free")] public static extern void CResult_TxAddInputDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxAddInputDecodeErrorZ_clone_ptr(LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_clone_ptr")] public static extern long CResult_TxAddInputDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxAddInputDecodeErrorZ CResult_TxAddInputDecodeErrorZ_clone(const struct LDKCResult_TxAddInputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddInputDecodeErrorZ_clone")] public static extern long CResult_TxAddInputDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxAddOutputDecodeErrorZ CResult_TxAddOutputDecodeErrorZ_ok(struct LDKTxAddOutput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_ok")] public static extern long CResult_TxAddOutputDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxAddOutputDecodeErrorZ CResult_TxAddOutputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_err")] public static extern long CResult_TxAddOutputDecodeErrorZ_err(long _e);
	// bool CResult_TxAddOutputDecodeErrorZ_is_ok(const struct LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_is_ok")] public static extern bool CResult_TxAddOutputDecodeErrorZ_is_ok(long _o);
	// void CResult_TxAddOutputDecodeErrorZ_free(struct LDKCResult_TxAddOutputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_free")] public static extern void CResult_TxAddOutputDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxAddOutputDecodeErrorZ_clone_ptr(LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_clone_ptr")] public static extern long CResult_TxAddOutputDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxAddOutputDecodeErrorZ CResult_TxAddOutputDecodeErrorZ_clone(const struct LDKCResult_TxAddOutputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAddOutputDecodeErrorZ_clone")] public static extern long CResult_TxAddOutputDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ CResult_TxRemoveInputDecodeErrorZ_ok(struct LDKTxRemoveInput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_ok")] public static extern long CResult_TxRemoveInputDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ CResult_TxRemoveInputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_err")] public static extern long CResult_TxRemoveInputDecodeErrorZ_err(long _e);
	// bool CResult_TxRemoveInputDecodeErrorZ_is_ok(const struct LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_is_ok")] public static extern bool CResult_TxRemoveInputDecodeErrorZ_is_ok(long _o);
	// void CResult_TxRemoveInputDecodeErrorZ_free(struct LDKCResult_TxRemoveInputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_free")] public static extern void CResult_TxRemoveInputDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxRemoveInputDecodeErrorZ_clone_ptr(LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_clone_ptr")] public static extern long CResult_TxRemoveInputDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ CResult_TxRemoveInputDecodeErrorZ_clone(const struct LDKCResult_TxRemoveInputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveInputDecodeErrorZ_clone")] public static extern long CResult_TxRemoveInputDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ CResult_TxRemoveOutputDecodeErrorZ_ok(struct LDKTxRemoveOutput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_ok")] public static extern long CResult_TxRemoveOutputDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ CResult_TxRemoveOutputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_err")] public static extern long CResult_TxRemoveOutputDecodeErrorZ_err(long _e);
	// bool CResult_TxRemoveOutputDecodeErrorZ_is_ok(const struct LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_is_ok")] public static extern bool CResult_TxRemoveOutputDecodeErrorZ_is_ok(long _o);
	// void CResult_TxRemoveOutputDecodeErrorZ_free(struct LDKCResult_TxRemoveOutputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_free")] public static extern void CResult_TxRemoveOutputDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxRemoveOutputDecodeErrorZ_clone_ptr(LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_clone_ptr")] public static extern long CResult_TxRemoveOutputDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ CResult_TxRemoveOutputDecodeErrorZ_clone(const struct LDKCResult_TxRemoveOutputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxRemoveOutputDecodeErrorZ_clone")] public static extern long CResult_TxRemoveOutputDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxCompleteDecodeErrorZ CResult_TxCompleteDecodeErrorZ_ok(struct LDKTxComplete o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_ok")] public static extern long CResult_TxCompleteDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxCompleteDecodeErrorZ CResult_TxCompleteDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_err")] public static extern long CResult_TxCompleteDecodeErrorZ_err(long _e);
	// bool CResult_TxCompleteDecodeErrorZ_is_ok(const struct LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_is_ok")] public static extern bool CResult_TxCompleteDecodeErrorZ_is_ok(long _o);
	// void CResult_TxCompleteDecodeErrorZ_free(struct LDKCResult_TxCompleteDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_free")] public static extern void CResult_TxCompleteDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxCompleteDecodeErrorZ_clone_ptr(LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_clone_ptr")] public static extern long CResult_TxCompleteDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxCompleteDecodeErrorZ CResult_TxCompleteDecodeErrorZ_clone(const struct LDKCResult_TxCompleteDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCompleteDecodeErrorZ_clone")] public static extern long CResult_TxCompleteDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxSignaturesDecodeErrorZ CResult_TxSignaturesDecodeErrorZ_ok(struct LDKTxSignatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_ok")] public static extern long CResult_TxSignaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxSignaturesDecodeErrorZ CResult_TxSignaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_err")] public static extern long CResult_TxSignaturesDecodeErrorZ_err(long _e);
	// bool CResult_TxSignaturesDecodeErrorZ_is_ok(const struct LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_is_ok")] public static extern bool CResult_TxSignaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_TxSignaturesDecodeErrorZ_free(struct LDKCResult_TxSignaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_free")] public static extern void CResult_TxSignaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxSignaturesDecodeErrorZ_clone_ptr(LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_TxSignaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxSignaturesDecodeErrorZ CResult_TxSignaturesDecodeErrorZ_clone(const struct LDKCResult_TxSignaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxSignaturesDecodeErrorZ_clone")] public static extern long CResult_TxSignaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxInitRbfDecodeErrorZ CResult_TxInitRbfDecodeErrorZ_ok(struct LDKTxInitRbf o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_ok")] public static extern long CResult_TxInitRbfDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxInitRbfDecodeErrorZ CResult_TxInitRbfDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_err")] public static extern long CResult_TxInitRbfDecodeErrorZ_err(long _e);
	// bool CResult_TxInitRbfDecodeErrorZ_is_ok(const struct LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_is_ok")] public static extern bool CResult_TxInitRbfDecodeErrorZ_is_ok(long _o);
	// void CResult_TxInitRbfDecodeErrorZ_free(struct LDKCResult_TxInitRbfDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_free")] public static extern void CResult_TxInitRbfDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxInitRbfDecodeErrorZ_clone_ptr(LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_clone_ptr")] public static extern long CResult_TxInitRbfDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxInitRbfDecodeErrorZ CResult_TxInitRbfDecodeErrorZ_clone(const struct LDKCResult_TxInitRbfDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxInitRbfDecodeErrorZ_clone")] public static extern long CResult_TxInitRbfDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxAckRbfDecodeErrorZ CResult_TxAckRbfDecodeErrorZ_ok(struct LDKTxAckRbf o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_ok")] public static extern long CResult_TxAckRbfDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxAckRbfDecodeErrorZ CResult_TxAckRbfDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_err")] public static extern long CResult_TxAckRbfDecodeErrorZ_err(long _e);
	// bool CResult_TxAckRbfDecodeErrorZ_is_ok(const struct LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_is_ok")] public static extern bool CResult_TxAckRbfDecodeErrorZ_is_ok(long _o);
	// void CResult_TxAckRbfDecodeErrorZ_free(struct LDKCResult_TxAckRbfDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_free")] public static extern void CResult_TxAckRbfDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxAckRbfDecodeErrorZ_clone_ptr(LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_clone_ptr")] public static extern long CResult_TxAckRbfDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxAckRbfDecodeErrorZ CResult_TxAckRbfDecodeErrorZ_clone(const struct LDKCResult_TxAckRbfDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAckRbfDecodeErrorZ_clone")] public static extern long CResult_TxAckRbfDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxAbortDecodeErrorZ CResult_TxAbortDecodeErrorZ_ok(struct LDKTxAbort o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_ok")] public static extern long CResult_TxAbortDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxAbortDecodeErrorZ CResult_TxAbortDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_err")] public static extern long CResult_TxAbortDecodeErrorZ_err(long _e);
	// bool CResult_TxAbortDecodeErrorZ_is_ok(const struct LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_is_ok")] public static extern bool CResult_TxAbortDecodeErrorZ_is_ok(long _o);
	// void CResult_TxAbortDecodeErrorZ_free(struct LDKCResult_TxAbortDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_free")] public static extern void CResult_TxAbortDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxAbortDecodeErrorZ_clone_ptr(LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_clone_ptr")] public static extern long CResult_TxAbortDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxAbortDecodeErrorZ CResult_TxAbortDecodeErrorZ_clone(const struct LDKCResult_TxAbortDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxAbortDecodeErrorZ_clone")] public static extern long CResult_TxAbortDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_ok(struct LDKAnnouncementSignatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_ok")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_err")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_err(long _e);
	// bool CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(const struct LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_is_ok")] public static extern bool CResult_AnnouncementSignaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_AnnouncementSignaturesDecodeErrorZ_free(struct LDKCResult_AnnouncementSignaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_free")] public static extern void CResult_AnnouncementSignaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr(LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ CResult_AnnouncementSignaturesDecodeErrorZ_clone(const struct LDKCResult_AnnouncementSignaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AnnouncementSignaturesDecodeErrorZ_clone")] public static extern long CResult_AnnouncementSignaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_ok(struct LDKChannelReestablish o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_ok")] public static extern long CResult_ChannelReestablishDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_err")] public static extern long CResult_ChannelReestablishDecodeErrorZ_err(long _e);
	// bool CResult_ChannelReestablishDecodeErrorZ_is_ok(const struct LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelReestablishDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelReestablishDecodeErrorZ_free(struct LDKCResult_ChannelReestablishDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_free")] public static extern void CResult_ChannelReestablishDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelReestablishDecodeErrorZ_clone_ptr(LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelReestablishDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ CResult_ChannelReestablishDecodeErrorZ_clone(const struct LDKCResult_ChannelReestablishDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReestablishDecodeErrorZ_clone")] public static extern long CResult_ChannelReestablishDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_ok(struct LDKClosingSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_ok")] public static extern long CResult_ClosingSignedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_err")] public static extern long CResult_ClosingSignedDecodeErrorZ_err(long _e);
	// bool CResult_ClosingSignedDecodeErrorZ_is_ok(const struct LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_is_ok")] public static extern bool CResult_ClosingSignedDecodeErrorZ_is_ok(long _o);
	// void CResult_ClosingSignedDecodeErrorZ_free(struct LDKCResult_ClosingSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_free")] public static extern void CResult_ClosingSignedDecodeErrorZ_free(long __res);
	// uint64_t CResult_ClosingSignedDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_clone_ptr")] public static extern long CResult_ClosingSignedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ClosingSignedDecodeErrorZ CResult_ClosingSignedDecodeErrorZ_clone(const struct LDKCResult_ClosingSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedDecodeErrorZ_clone")] public static extern long CResult_ClosingSignedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_ok(struct LDKClosingSignedFeeRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_ok")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_err")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_err(long _e);
	// bool CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(const struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok")] public static extern bool CResult_ClosingSignedFeeRangeDecodeErrorZ_is_ok(long _o);
	// void CResult_ClosingSignedFeeRangeDecodeErrorZ_free(struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_free")] public static extern void CResult_ClosingSignedFeeRangeDecodeErrorZ_free(long __res);
	// uint64_t CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr(LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ CResult_ClosingSignedFeeRangeDecodeErrorZ_clone(const struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClosingSignedFeeRangeDecodeErrorZ_clone")] public static extern long CResult_ClosingSignedFeeRangeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_CommitmentSignedBatchDecodeErrorZ CResult_CommitmentSignedBatchDecodeErrorZ_ok(struct LDKCommitmentSignedBatch o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_ok")] public static extern long CResult_CommitmentSignedBatchDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CommitmentSignedBatchDecodeErrorZ CResult_CommitmentSignedBatchDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_err")] public static extern long CResult_CommitmentSignedBatchDecodeErrorZ_err(long _e);
	// bool CResult_CommitmentSignedBatchDecodeErrorZ_is_ok(const struct LDKCResult_CommitmentSignedBatchDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_is_ok")] public static extern bool CResult_CommitmentSignedBatchDecodeErrorZ_is_ok(long _o);
	// void CResult_CommitmentSignedBatchDecodeErrorZ_free(struct LDKCResult_CommitmentSignedBatchDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_free")] public static extern void CResult_CommitmentSignedBatchDecodeErrorZ_free(long __res);
	// uint64_t CResult_CommitmentSignedBatchDecodeErrorZ_clone_ptr(LDKCResult_CommitmentSignedBatchDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_clone_ptr")] public static extern long CResult_CommitmentSignedBatchDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CommitmentSignedBatchDecodeErrorZ CResult_CommitmentSignedBatchDecodeErrorZ_clone(const struct LDKCResult_CommitmentSignedBatchDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedBatchDecodeErrorZ_clone")] public static extern long CResult_CommitmentSignedBatchDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_ok(struct LDKCommitmentSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_ok")] public static extern long CResult_CommitmentSignedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_err")] public static extern long CResult_CommitmentSignedDecodeErrorZ_err(long _e);
	// bool CResult_CommitmentSignedDecodeErrorZ_is_ok(const struct LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_is_ok")] public static extern bool CResult_CommitmentSignedDecodeErrorZ_is_ok(long _o);
	// void CResult_CommitmentSignedDecodeErrorZ_free(struct LDKCResult_CommitmentSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_free")] public static extern void CResult_CommitmentSignedDecodeErrorZ_free(long __res);
	// uint64_t CResult_CommitmentSignedDecodeErrorZ_clone_ptr(LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_clone_ptr")] public static extern long CResult_CommitmentSignedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CResult_CommitmentSignedDecodeErrorZ_clone(const struct LDKCResult_CommitmentSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentSignedDecodeErrorZ_clone")] public static extern long CResult_CommitmentSignedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_ok(struct LDKFundingCreated o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_ok")] public static extern long CResult_FundingCreatedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_err")] public static extern long CResult_FundingCreatedDecodeErrorZ_err(long _e);
	// bool CResult_FundingCreatedDecodeErrorZ_is_ok(const struct LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_is_ok")] public static extern bool CResult_FundingCreatedDecodeErrorZ_is_ok(long _o);
	// void CResult_FundingCreatedDecodeErrorZ_free(struct LDKCResult_FundingCreatedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_free")] public static extern void CResult_FundingCreatedDecodeErrorZ_free(long __res);
	// uint64_t CResult_FundingCreatedDecodeErrorZ_clone_ptr(LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_clone_ptr")] public static extern long CResult_FundingCreatedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FundingCreatedDecodeErrorZ CResult_FundingCreatedDecodeErrorZ_clone(const struct LDKCResult_FundingCreatedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingCreatedDecodeErrorZ_clone")] public static extern long CResult_FundingCreatedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_ok(struct LDKFundingSigned o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_ok")] public static extern long CResult_FundingSignedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_err")] public static extern long CResult_FundingSignedDecodeErrorZ_err(long _e);
	// bool CResult_FundingSignedDecodeErrorZ_is_ok(const struct LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_is_ok")] public static extern bool CResult_FundingSignedDecodeErrorZ_is_ok(long _o);
	// void CResult_FundingSignedDecodeErrorZ_free(struct LDKCResult_FundingSignedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_free")] public static extern void CResult_FundingSignedDecodeErrorZ_free(long __res);
	// uint64_t CResult_FundingSignedDecodeErrorZ_clone_ptr(LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_clone_ptr")] public static extern long CResult_FundingSignedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FundingSignedDecodeErrorZ CResult_FundingSignedDecodeErrorZ_clone(const struct LDKCResult_FundingSignedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingSignedDecodeErrorZ_clone")] public static extern long CResult_FundingSignedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_ok(struct LDKChannelReady o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_ok")] public static extern long CResult_ChannelReadyDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_err")] public static extern long CResult_ChannelReadyDecodeErrorZ_err(long _e);
	// bool CResult_ChannelReadyDecodeErrorZ_is_ok(const struct LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelReadyDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelReadyDecodeErrorZ_free(struct LDKCResult_ChannelReadyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_free")] public static extern void CResult_ChannelReadyDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelReadyDecodeErrorZ_clone_ptr(LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelReadyDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelReadyDecodeErrorZ CResult_ChannelReadyDecodeErrorZ_clone(const struct LDKCResult_ChannelReadyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelReadyDecodeErrorZ_clone")] public static extern long CResult_ChannelReadyDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_ok(struct LDKInit o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_ok")] public static extern long CResult_InitDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_err")] public static extern long CResult_InitDecodeErrorZ_err(long _e);
	// bool CResult_InitDecodeErrorZ_is_ok(const struct LDKCResult_InitDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_is_ok")] public static extern bool CResult_InitDecodeErrorZ_is_ok(long _o);
	// void CResult_InitDecodeErrorZ_free(struct LDKCResult_InitDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_free")] public static extern void CResult_InitDecodeErrorZ_free(long __res);
	// uint64_t CResult_InitDecodeErrorZ_clone_ptr(LDKCResult_InitDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_clone_ptr")] public static extern long CResult_InitDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InitDecodeErrorZ CResult_InitDecodeErrorZ_clone(const struct LDKCResult_InitDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitDecodeErrorZ_clone")] public static extern long CResult_InitDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_ok(struct LDKOpenChannel o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_ok")] public static extern long CResult_OpenChannelDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_err")] public static extern long CResult_OpenChannelDecodeErrorZ_err(long _e);
	// bool CResult_OpenChannelDecodeErrorZ_is_ok(const struct LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_is_ok")] public static extern bool CResult_OpenChannelDecodeErrorZ_is_ok(long _o);
	// void CResult_OpenChannelDecodeErrorZ_free(struct LDKCResult_OpenChannelDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_free")] public static extern void CResult_OpenChannelDecodeErrorZ_free(long __res);
	// uint64_t CResult_OpenChannelDecodeErrorZ_clone_ptr(LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_clone_ptr")] public static extern long CResult_OpenChannelDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OpenChannelDecodeErrorZ CResult_OpenChannelDecodeErrorZ_clone(const struct LDKCResult_OpenChannelDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelDecodeErrorZ_clone")] public static extern long CResult_OpenChannelDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ CResult_OpenChannelV2DecodeErrorZ_ok(struct LDKOpenChannelV2 o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_ok")] public static extern long CResult_OpenChannelV2DecodeErrorZ_ok(long _o);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ CResult_OpenChannelV2DecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_err")] public static extern long CResult_OpenChannelV2DecodeErrorZ_err(long _e);
	// bool CResult_OpenChannelV2DecodeErrorZ_is_ok(const struct LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_is_ok")] public static extern bool CResult_OpenChannelV2DecodeErrorZ_is_ok(long _o);
	// void CResult_OpenChannelV2DecodeErrorZ_free(struct LDKCResult_OpenChannelV2DecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_free")] public static extern void CResult_OpenChannelV2DecodeErrorZ_free(long __res);
	// uint64_t CResult_OpenChannelV2DecodeErrorZ_clone_ptr(LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_clone_ptr")] public static extern long CResult_OpenChannelV2DecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ CResult_OpenChannelV2DecodeErrorZ_clone(const struct LDKCResult_OpenChannelV2DecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OpenChannelV2DecodeErrorZ_clone")] public static extern long CResult_OpenChannelV2DecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_ok(struct LDKRevokeAndACK o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_ok")] public static extern long CResult_RevokeAndACKDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_err")] public static extern long CResult_RevokeAndACKDecodeErrorZ_err(long _e);
	// bool CResult_RevokeAndACKDecodeErrorZ_is_ok(const struct LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_is_ok")] public static extern bool CResult_RevokeAndACKDecodeErrorZ_is_ok(long _o);
	// void CResult_RevokeAndACKDecodeErrorZ_free(struct LDKCResult_RevokeAndACKDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_free")] public static extern void CResult_RevokeAndACKDecodeErrorZ_free(long __res);
	// uint64_t CResult_RevokeAndACKDecodeErrorZ_clone_ptr(LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_clone_ptr")] public static extern long CResult_RevokeAndACKDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ CResult_RevokeAndACKDecodeErrorZ_clone(const struct LDKCResult_RevokeAndACKDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevokeAndACKDecodeErrorZ_clone")] public static extern long CResult_RevokeAndACKDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_ok(struct LDKShutdown o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_ok")] public static extern long CResult_ShutdownDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_err")] public static extern long CResult_ShutdownDecodeErrorZ_err(long _e);
	// bool CResult_ShutdownDecodeErrorZ_is_ok(const struct LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_is_ok")] public static extern bool CResult_ShutdownDecodeErrorZ_is_ok(long _o);
	// void CResult_ShutdownDecodeErrorZ_free(struct LDKCResult_ShutdownDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_free")] public static extern void CResult_ShutdownDecodeErrorZ_free(long __res);
	// uint64_t CResult_ShutdownDecodeErrorZ_clone_ptr(LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_clone_ptr")] public static extern long CResult_ShutdownDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ShutdownDecodeErrorZ CResult_ShutdownDecodeErrorZ_clone(const struct LDKCResult_ShutdownDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownDecodeErrorZ_clone")] public static extern long CResult_ShutdownDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_ok(struct LDKUpdateFailHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFailHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFailHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFailHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFailHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateFailHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ CResult_UpdateFailHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFailHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateFailHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok(struct LDKUpdateFailMalformedHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFailMalformedHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFailMalformedHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateFailMalformedHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateFailMalformedHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_ok(struct LDKUpdateFee o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_ok")] public static extern long CResult_UpdateFeeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_err")] public static extern long CResult_UpdateFeeDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFeeDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFeeDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFeeDecodeErrorZ_free(struct LDKCResult_UpdateFeeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_free")] public static extern void CResult_UpdateFeeDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFeeDecodeErrorZ_clone_ptr(LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFeeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFeeDecodeErrorZ CResult_UpdateFeeDecodeErrorZ_clone(const struct LDKCResult_UpdateFeeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFeeDecodeErrorZ_clone")] public static extern long CResult_UpdateFeeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_ok(struct LDKUpdateFulfillHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateFulfillHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateFulfillHTLCDecodeErrorZ_free(struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateFulfillHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ CResult_UpdateFulfillHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateFulfillHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateFulfillHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OnionPacketDecodeErrorZ CResult_OnionPacketDecodeErrorZ_ok(struct LDKOnionPacket o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_ok")] public static extern long CResult_OnionPacketDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OnionPacketDecodeErrorZ CResult_OnionPacketDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_err")] public static extern long CResult_OnionPacketDecodeErrorZ_err(long _e);
	// bool CResult_OnionPacketDecodeErrorZ_is_ok(const struct LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_is_ok")] public static extern bool CResult_OnionPacketDecodeErrorZ_is_ok(long _o);
	// void CResult_OnionPacketDecodeErrorZ_free(struct LDKCResult_OnionPacketDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_free")] public static extern void CResult_OnionPacketDecodeErrorZ_free(long __res);
	// uint64_t CResult_OnionPacketDecodeErrorZ_clone_ptr(LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_clone_ptr")] public static extern long CResult_OnionPacketDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OnionPacketDecodeErrorZ CResult_OnionPacketDecodeErrorZ_clone(const struct LDKCResult_OnionPacketDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionPacketDecodeErrorZ_clone")] public static extern long CResult_OnionPacketDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_ok(struct LDKUpdateAddHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_ok")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_err")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_err(long _e);
	// bool CResult_UpdateAddHTLCDecodeErrorZ_is_ok(const struct LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_UpdateAddHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_UpdateAddHTLCDecodeErrorZ_free(struct LDKCResult_UpdateAddHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_free")] public static extern void CResult_UpdateAddHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr(LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ CResult_UpdateAddHTLCDecodeErrorZ_clone(const struct LDKCResult_UpdateAddHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UpdateAddHTLCDecodeErrorZ_clone")] public static extern long CResult_UpdateAddHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_ok(struct LDKOnionMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_ok")] public static extern long CResult_OnionMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_err")] public static extern long CResult_OnionMessageDecodeErrorZ_err(long _e);
	// bool CResult_OnionMessageDecodeErrorZ_is_ok(const struct LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_is_ok")] public static extern bool CResult_OnionMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_OnionMessageDecodeErrorZ_free(struct LDKCResult_OnionMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_free")] public static extern void CResult_OnionMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_OnionMessageDecodeErrorZ_clone_ptr(LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_OnionMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OnionMessageDecodeErrorZ CResult_OnionMessageDecodeErrorZ_clone(const struct LDKCResult_OnionMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessageDecodeErrorZ_clone")] public static extern long CResult_OnionMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ CResult_FinalOnionHopDataDecodeErrorZ_ok(struct LDKFinalOnionHopData o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_ok")] public static extern long CResult_FinalOnionHopDataDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ CResult_FinalOnionHopDataDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_err")] public static extern long CResult_FinalOnionHopDataDecodeErrorZ_err(long _e);
	// bool CResult_FinalOnionHopDataDecodeErrorZ_is_ok(const struct LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_is_ok")] public static extern bool CResult_FinalOnionHopDataDecodeErrorZ_is_ok(long _o);
	// void CResult_FinalOnionHopDataDecodeErrorZ_free(struct LDKCResult_FinalOnionHopDataDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_free")] public static extern void CResult_FinalOnionHopDataDecodeErrorZ_free(long __res);
	// uint64_t CResult_FinalOnionHopDataDecodeErrorZ_clone_ptr(LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_clone_ptr")] public static extern long CResult_FinalOnionHopDataDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ CResult_FinalOnionHopDataDecodeErrorZ_clone(const struct LDKCResult_FinalOnionHopDataDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FinalOnionHopDataDecodeErrorZ_clone")] public static extern long CResult_FinalOnionHopDataDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_ok(struct LDKPing o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_ok")] public static extern long CResult_PingDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_err")] public static extern long CResult_PingDecodeErrorZ_err(long _e);
	// bool CResult_PingDecodeErrorZ_is_ok(const struct LDKCResult_PingDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_is_ok")] public static extern bool CResult_PingDecodeErrorZ_is_ok(long _o);
	// void CResult_PingDecodeErrorZ_free(struct LDKCResult_PingDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_free")] public static extern void CResult_PingDecodeErrorZ_free(long __res);
	// uint64_t CResult_PingDecodeErrorZ_clone_ptr(LDKCResult_PingDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_clone_ptr")] public static extern long CResult_PingDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PingDecodeErrorZ CResult_PingDecodeErrorZ_clone(const struct LDKCResult_PingDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PingDecodeErrorZ_clone")] public static extern long CResult_PingDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_ok(struct LDKPong o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_ok")] public static extern long CResult_PongDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_err")] public static extern long CResult_PongDecodeErrorZ_err(long _e);
	// bool CResult_PongDecodeErrorZ_is_ok(const struct LDKCResult_PongDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_is_ok")] public static extern bool CResult_PongDecodeErrorZ_is_ok(long _o);
	// void CResult_PongDecodeErrorZ_free(struct LDKCResult_PongDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_free")] public static extern void CResult_PongDecodeErrorZ_free(long __res);
	// uint64_t CResult_PongDecodeErrorZ_clone_ptr(LDKCResult_PongDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_clone_ptr")] public static extern long CResult_PongDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PongDecodeErrorZ CResult_PongDecodeErrorZ_clone(const struct LDKCResult_PongDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PongDecodeErrorZ_clone")] public static extern long CResult_PongDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok(struct LDKUnsignedChannelAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_err")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_UnsignedChannelAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_UnsignedChannelAnnouncementDecodeErrorZ_free(struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_free")] public static extern void CResult_UnsignedChannelAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone(const struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone")] public static extern long CResult_UnsignedChannelAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_ok(struct LDKChannelAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_ok")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_err")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_ChannelAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelAnnouncementDecodeErrorZ_free(struct LDKCResult_ChannelAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_free")] public static extern void CResult_ChannelAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ CResult_ChannelAnnouncementDecodeErrorZ_clone(const struct LDKCResult_ChannelAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelAnnouncementDecodeErrorZ_clone")] public static extern long CResult_ChannelAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_ok(struct LDKUnsignedChannelUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_ok")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_err")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_err(long _e);
	// bool CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_UnsignedChannelUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_UnsignedChannelUpdateDecodeErrorZ_free(struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_free")] public static extern void CResult_UnsignedChannelUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ CResult_UnsignedChannelUpdateDecodeErrorZ_clone(const struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedChannelUpdateDecodeErrorZ_clone")] public static extern long CResult_UnsignedChannelUpdateDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_ok(struct LDKChannelUpdate o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_ok")] public static extern long CResult_ChannelUpdateDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_err")] public static extern long CResult_ChannelUpdateDecodeErrorZ_err(long _e);
	// bool CResult_ChannelUpdateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelUpdateDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelUpdateDecodeErrorZ_free(struct LDKCResult_ChannelUpdateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_free")] public static extern void CResult_ChannelUpdateDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelUpdateDecodeErrorZ_clone_ptr(LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelUpdateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ CResult_ChannelUpdateDecodeErrorZ_clone(const struct LDKCResult_ChannelUpdateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelUpdateDecodeErrorZ_clone")] public static extern long CResult_ChannelUpdateDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_ok(struct LDKErrorMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_ok")] public static extern long CResult_ErrorMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_err")] public static extern long CResult_ErrorMessageDecodeErrorZ_err(long _e);
	// bool CResult_ErrorMessageDecodeErrorZ_is_ok(const struct LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_is_ok")] public static extern bool CResult_ErrorMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_ErrorMessageDecodeErrorZ_free(struct LDKCResult_ErrorMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_free")] public static extern void CResult_ErrorMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_ErrorMessageDecodeErrorZ_clone_ptr(LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_ErrorMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ErrorMessageDecodeErrorZ CResult_ErrorMessageDecodeErrorZ_clone(const struct LDKCResult_ErrorMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ErrorMessageDecodeErrorZ_clone")] public static extern long CResult_ErrorMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_ok(struct LDKWarningMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_ok")] public static extern long CResult_WarningMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_err")] public static extern long CResult_WarningMessageDecodeErrorZ_err(long _e);
	// bool CResult_WarningMessageDecodeErrorZ_is_ok(const struct LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_is_ok")] public static extern bool CResult_WarningMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_WarningMessageDecodeErrorZ_free(struct LDKCResult_WarningMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_free")] public static extern void CResult_WarningMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_WarningMessageDecodeErrorZ_clone_ptr(LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_WarningMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_WarningMessageDecodeErrorZ CResult_WarningMessageDecodeErrorZ_clone(const struct LDKCResult_WarningMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_WarningMessageDecodeErrorZ_clone")] public static extern long CResult_WarningMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok(struct LDKUnsignedNodeAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_err")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_UnsignedNodeAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_UnsignedNodeAnnouncementDecodeErrorZ_free(struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_free")] public static extern void CResult_UnsignedNodeAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone(const struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone")] public static extern long CResult_UnsignedNodeAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_ok(struct LDKNodeAnnouncement o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_ok")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_err")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_err(long _e);
	// bool CResult_NodeAnnouncementDecodeErrorZ_is_ok(const struct LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_is_ok")] public static extern bool CResult_NodeAnnouncementDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeAnnouncementDecodeErrorZ_free(struct LDKCResult_NodeAnnouncementDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_free")] public static extern void CResult_NodeAnnouncementDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeAnnouncementDecodeErrorZ_clone_ptr(LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ CResult_NodeAnnouncementDecodeErrorZ_clone(const struct LDKCResult_NodeAnnouncementDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeAnnouncementDecodeErrorZ_clone")] public static extern long CResult_NodeAnnouncementDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_ok(struct LDKQueryShortChannelIds o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_ok")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_err")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_err(long _e);
	// bool CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(const struct LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_is_ok")] public static extern bool CResult_QueryShortChannelIdsDecodeErrorZ_is_ok(long _o);
	// void CResult_QueryShortChannelIdsDecodeErrorZ_free(struct LDKCResult_QueryShortChannelIdsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_free")] public static extern void CResult_QueryShortChannelIdsDecodeErrorZ_free(long __res);
	// uint64_t CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr(LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ CResult_QueryShortChannelIdsDecodeErrorZ_clone(const struct LDKCResult_QueryShortChannelIdsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryShortChannelIdsDecodeErrorZ_clone")] public static extern long CResult_QueryShortChannelIdsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok(struct LDKReplyShortChannelIdsEnd o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_err")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_err(long _e);
	// bool CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(const struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok")] public static extern bool CResult_ReplyShortChannelIdsEndDecodeErrorZ_is_ok(long _o);
	// void CResult_ReplyShortChannelIdsEndDecodeErrorZ_free(struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_free")] public static extern void CResult_ReplyShortChannelIdsEndDecodeErrorZ_free(long __res);
	// uint64_t CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr(LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone(const struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone")] public static extern long CResult_ReplyShortChannelIdsEndDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_ok(struct LDKQueryChannelRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_ok")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_err")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_err(long _e);
	// bool CResult_QueryChannelRangeDecodeErrorZ_is_ok(const struct LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_is_ok")] public static extern bool CResult_QueryChannelRangeDecodeErrorZ_is_ok(long _o);
	// void CResult_QueryChannelRangeDecodeErrorZ_free(struct LDKCResult_QueryChannelRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_free")] public static extern void CResult_QueryChannelRangeDecodeErrorZ_free(long __res);
	// uint64_t CResult_QueryChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_clone_ptr")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ CResult_QueryChannelRangeDecodeErrorZ_clone(const struct LDKCResult_QueryChannelRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_QueryChannelRangeDecodeErrorZ_clone")] public static extern long CResult_QueryChannelRangeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_ok(struct LDKReplyChannelRange o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_ok")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_err")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_err(long _e);
	// bool CResult_ReplyChannelRangeDecodeErrorZ_is_ok(const struct LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_is_ok")] public static extern bool CResult_ReplyChannelRangeDecodeErrorZ_is_ok(long _o);
	// void CResult_ReplyChannelRangeDecodeErrorZ_free(struct LDKCResult_ReplyChannelRangeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_free")] public static extern void CResult_ReplyChannelRangeDecodeErrorZ_free(long __res);
	// uint64_t CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr(LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ CResult_ReplyChannelRangeDecodeErrorZ_clone(const struct LDKCResult_ReplyChannelRangeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReplyChannelRangeDecodeErrorZ_clone")] public static extern long CResult_ReplyChannelRangeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_ok(struct LDKGossipTimestampFilter o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_ok")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_ok(long _o);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_err")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_err(long _e);
	// bool CResult_GossipTimestampFilterDecodeErrorZ_is_ok(const struct LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_is_ok")] public static extern bool CResult_GossipTimestampFilterDecodeErrorZ_is_ok(long _o);
	// void CResult_GossipTimestampFilterDecodeErrorZ_free(struct LDKCResult_GossipTimestampFilterDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_free")] public static extern void CResult_GossipTimestampFilterDecodeErrorZ_free(long __res);
	// uint64_t CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr(LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ CResult_GossipTimestampFilterDecodeErrorZ_clone(const struct LDKCResult_GossipTimestampFilterDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_GossipTimestampFilterDecodeErrorZ_clone")] public static extern long CResult_GossipTimestampFilterDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_InboundHTLCStateDetailsZ COption_InboundHTLCStateDetailsZ_some(enum LDKInboundHTLCStateDetails o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_InboundHTLCStateDetailsZ_some")] public static extern long COption_InboundHTLCStateDetailsZ_some(InboundHTLCStateDetails _o);
	// struct LDKCOption_InboundHTLCStateDetailsZ COption_InboundHTLCStateDetailsZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_InboundHTLCStateDetailsZ_none")] public static extern long COption_InboundHTLCStateDetailsZ_none();
	// void COption_InboundHTLCStateDetailsZ_free(struct LDKCOption_InboundHTLCStateDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_InboundHTLCStateDetailsZ_free")] public static extern void COption_InboundHTLCStateDetailsZ_free(long __res);
	// uint64_t COption_InboundHTLCStateDetailsZ_clone_ptr(LDKCOption_InboundHTLCStateDetailsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_InboundHTLCStateDetailsZ_clone_ptr")] public static extern long COption_InboundHTLCStateDetailsZ_clone_ptr(long _arg);
	// struct LDKCOption_InboundHTLCStateDetailsZ COption_InboundHTLCStateDetailsZ_clone(const struct LDKCOption_InboundHTLCStateDetailsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_InboundHTLCStateDetailsZ_clone")] public static extern long COption_InboundHTLCStateDetailsZ_clone(long _orig);
	// struct LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_ok(struct LDKCOption_InboundHTLCStateDetailsZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_ok")] public static extern long CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_err")] public static extern long CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_err(long _e);
	// bool CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_is_ok(const struct LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_free(struct LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_free")] public static extern void CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_clone_ptr(LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_clone(const struct LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_clone")] public static extern long CResult_COption_InboundHTLCStateDetailsZDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_InboundHTLCDetailsDecodeErrorZ CResult_InboundHTLCDetailsDecodeErrorZ_ok(struct LDKInboundHTLCDetails o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_ok")] public static extern long CResult_InboundHTLCDetailsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InboundHTLCDetailsDecodeErrorZ CResult_InboundHTLCDetailsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_err")] public static extern long CResult_InboundHTLCDetailsDecodeErrorZ_err(long _e);
	// bool CResult_InboundHTLCDetailsDecodeErrorZ_is_ok(const struct LDKCResult_InboundHTLCDetailsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_is_ok")] public static extern bool CResult_InboundHTLCDetailsDecodeErrorZ_is_ok(long _o);
	// void CResult_InboundHTLCDetailsDecodeErrorZ_free(struct LDKCResult_InboundHTLCDetailsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_free")] public static extern void CResult_InboundHTLCDetailsDecodeErrorZ_free(long __res);
	// uint64_t CResult_InboundHTLCDetailsDecodeErrorZ_clone_ptr(LDKCResult_InboundHTLCDetailsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_clone_ptr")] public static extern long CResult_InboundHTLCDetailsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InboundHTLCDetailsDecodeErrorZ CResult_InboundHTLCDetailsDecodeErrorZ_clone(const struct LDKCResult_InboundHTLCDetailsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InboundHTLCDetailsDecodeErrorZ_clone")] public static extern long CResult_InboundHTLCDetailsDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_OutboundHTLCStateDetailsZ COption_OutboundHTLCStateDetailsZ_some(enum LDKOutboundHTLCStateDetails o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OutboundHTLCStateDetailsZ_some")] public static extern long COption_OutboundHTLCStateDetailsZ_some(OutboundHTLCStateDetails _o);
	// struct LDKCOption_OutboundHTLCStateDetailsZ COption_OutboundHTLCStateDetailsZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OutboundHTLCStateDetailsZ_none")] public static extern long COption_OutboundHTLCStateDetailsZ_none();
	// void COption_OutboundHTLCStateDetailsZ_free(struct LDKCOption_OutboundHTLCStateDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OutboundHTLCStateDetailsZ_free")] public static extern void COption_OutboundHTLCStateDetailsZ_free(long __res);
	// uint64_t COption_OutboundHTLCStateDetailsZ_clone_ptr(LDKCOption_OutboundHTLCStateDetailsZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OutboundHTLCStateDetailsZ_clone_ptr")] public static extern long COption_OutboundHTLCStateDetailsZ_clone_ptr(long _arg);
	// struct LDKCOption_OutboundHTLCStateDetailsZ COption_OutboundHTLCStateDetailsZ_clone(const struct LDKCOption_OutboundHTLCStateDetailsZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_OutboundHTLCStateDetailsZ_clone")] public static extern long COption_OutboundHTLCStateDetailsZ_clone(long _orig);
	// struct LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_ok(struct LDKCOption_OutboundHTLCStateDetailsZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_ok")] public static extern long CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_err")] public static extern long CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_err(long _e);
	// bool CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_is_ok(const struct LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_free(struct LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_free")] public static extern void CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_clone_ptr(LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_clone(const struct LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_clone")] public static extern long CResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OutboundHTLCDetailsDecodeErrorZ CResult_OutboundHTLCDetailsDecodeErrorZ_ok(struct LDKOutboundHTLCDetails o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_ok")] public static extern long CResult_OutboundHTLCDetailsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OutboundHTLCDetailsDecodeErrorZ CResult_OutboundHTLCDetailsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_err")] public static extern long CResult_OutboundHTLCDetailsDecodeErrorZ_err(long _e);
	// bool CResult_OutboundHTLCDetailsDecodeErrorZ_is_ok(const struct LDKCResult_OutboundHTLCDetailsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_is_ok")] public static extern bool CResult_OutboundHTLCDetailsDecodeErrorZ_is_ok(long _o);
	// void CResult_OutboundHTLCDetailsDecodeErrorZ_free(struct LDKCResult_OutboundHTLCDetailsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_free")] public static extern void CResult_OutboundHTLCDetailsDecodeErrorZ_free(long __res);
	// uint64_t CResult_OutboundHTLCDetailsDecodeErrorZ_clone_ptr(LDKCResult_OutboundHTLCDetailsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_clone_ptr")] public static extern long CResult_OutboundHTLCDetailsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OutboundHTLCDetailsDecodeErrorZ CResult_OutboundHTLCDetailsDecodeErrorZ_clone(const struct LDKCResult_OutboundHTLCDetailsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutboundHTLCDetailsDecodeErrorZ_clone")] public static extern long CResult_OutboundHTLCDetailsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_ok(struct LDKCounterpartyForwardingInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_ok")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_err")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_err(long _e);
	// bool CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok")] public static extern bool CResult_CounterpartyForwardingInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_CounterpartyForwardingInfoDecodeErrorZ_free(struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_free")] public static extern void CResult_CounterpartyForwardingInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CResult_CounterpartyForwardingInfoDecodeErrorZ_clone(const struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyForwardingInfoDecodeErrorZ_clone")] public static extern long CResult_CounterpartyForwardingInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_ok(struct LDKChannelCounterparty o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_ok")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_err")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_err(long _e);
	// bool CResult_ChannelCounterpartyDecodeErrorZ_is_ok(const struct LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelCounterpartyDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelCounterpartyDecodeErrorZ_free(struct LDKCResult_ChannelCounterpartyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_free")] public static extern void CResult_ChannelCounterpartyDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr(LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ CResult_ChannelCounterpartyDecodeErrorZ_clone(const struct LDKCResult_ChannelCounterpartyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelCounterpartyDecodeErrorZ_clone")] public static extern long CResult_ChannelCounterpartyDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_ChannelShutdownStateZ COption_ChannelShutdownStateZ_some(enum LDKChannelShutdownState o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_some")] public static extern long COption_ChannelShutdownStateZ_some(ChannelShutdownState _o);
	// struct LDKCOption_ChannelShutdownStateZ COption_ChannelShutdownStateZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_none")] public static extern long COption_ChannelShutdownStateZ_none();
	// void COption_ChannelShutdownStateZ_free(struct LDKCOption_ChannelShutdownStateZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_free")] public static extern void COption_ChannelShutdownStateZ_free(long __res);
	// uint64_t COption_ChannelShutdownStateZ_clone_ptr(LDKCOption_ChannelShutdownStateZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_clone_ptr")] public static extern long COption_ChannelShutdownStateZ_clone_ptr(long _arg);
	// struct LDKCOption_ChannelShutdownStateZ COption_ChannelShutdownStateZ_clone(const struct LDKCOption_ChannelShutdownStateZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ChannelShutdownStateZ_clone")] public static extern long COption_ChannelShutdownStateZ_clone(long _orig);
	// void CVec_InboundHTLCDetailsZ_free(struct LDKCVec_InboundHTLCDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_InboundHTLCDetailsZ_free")] public static extern void CVec_InboundHTLCDetailsZ_free(long __res);
	// void CVec_OutboundHTLCDetailsZ_free(struct LDKCVec_OutboundHTLCDetailsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_OutboundHTLCDetailsZ_free")] public static extern void CVec_OutboundHTLCDetailsZ_free(long __res);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_ok(struct LDKChannelDetails o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_ok")] public static extern long CResult_ChannelDetailsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_err")] public static extern long CResult_ChannelDetailsDecodeErrorZ_err(long _e);
	// bool CResult_ChannelDetailsDecodeErrorZ_is_ok(const struct LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelDetailsDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelDetailsDecodeErrorZ_free(struct LDKCResult_ChannelDetailsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_free")] public static extern void CResult_ChannelDetailsDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelDetailsDecodeErrorZ_clone_ptr(LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelDetailsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ CResult_ChannelDetailsDecodeErrorZ_clone(const struct LDKCResult_ChannelDetailsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelDetailsDecodeErrorZ_clone")] public static extern long CResult_ChannelDetailsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ CResult_ChannelShutdownStateDecodeErrorZ_ok(enum LDKChannelShutdownState o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_ok")] public static extern long CResult_ChannelShutdownStateDecodeErrorZ_ok(ChannelShutdownState _o);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ CResult_ChannelShutdownStateDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_err")] public static extern long CResult_ChannelShutdownStateDecodeErrorZ_err(long _e);
	// bool CResult_ChannelShutdownStateDecodeErrorZ_is_ok(const struct LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelShutdownStateDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelShutdownStateDecodeErrorZ_free(struct LDKCResult_ChannelShutdownStateDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_free")] public static extern void CResult_ChannelShutdownStateDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelShutdownStateDecodeErrorZ_clone_ptr(LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelShutdownStateDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ CResult_ChannelShutdownStateDecodeErrorZ_clone(const struct LDKCResult_ChannelShutdownStateDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelShutdownStateDecodeErrorZ_clone")] public static extern long CResult_ChannelShutdownStateDecodeErrorZ_clone(long _orig);
	// void CVec_FutureZ_free(struct LDKCVec_FutureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_FutureZ_free")] public static extern void CVec_FutureZ_free(long __res);
	// struct LDKCResult_RawLSPSMessageDecodeErrorZ CResult_RawLSPSMessageDecodeErrorZ_ok(struct LDKRawLSPSMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_ok")] public static extern long CResult_RawLSPSMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RawLSPSMessageDecodeErrorZ CResult_RawLSPSMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_err")] public static extern long CResult_RawLSPSMessageDecodeErrorZ_err(long _e);
	// bool CResult_RawLSPSMessageDecodeErrorZ_is_ok(const struct LDKCResult_RawLSPSMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_is_ok")] public static extern bool CResult_RawLSPSMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_RawLSPSMessageDecodeErrorZ_free(struct LDKCResult_RawLSPSMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_free")] public static extern void CResult_RawLSPSMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_RawLSPSMessageDecodeErrorZ_clone_ptr(LDKCResult_RawLSPSMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_RawLSPSMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RawLSPSMessageDecodeErrorZ CResult_RawLSPSMessageDecodeErrorZ_clone(const struct LDKCResult_RawLSPSMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RawLSPSMessageDecodeErrorZ_clone")] public static extern long CResult_RawLSPSMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_LSPSDateTimeNoneZ CResult_LSPSDateTimeNoneZ_ok(struct LDKLSPSDateTime o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_ok")] public static extern long CResult_LSPSDateTimeNoneZ_ok(long _o);
	// struct LDKCResult_LSPSDateTimeNoneZ CResult_LSPSDateTimeNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_err")] public static extern long CResult_LSPSDateTimeNoneZ_err();
	// bool CResult_LSPSDateTimeNoneZ_is_ok(const struct LDKCResult_LSPSDateTimeNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_is_ok")] public static extern bool CResult_LSPSDateTimeNoneZ_is_ok(long _o);
	// void CResult_LSPSDateTimeNoneZ_free(struct LDKCResult_LSPSDateTimeNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_free")] public static extern void CResult_LSPSDateTimeNoneZ_free(long __res);
	// uint64_t CResult_LSPSDateTimeNoneZ_clone_ptr(LDKCResult_LSPSDateTimeNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_clone_ptr")] public static extern long CResult_LSPSDateTimeNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_LSPSDateTimeNoneZ CResult_LSPSDateTimeNoneZ_clone(const struct LDKCResult_LSPSDateTimeNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LSPSDateTimeNoneZ_clone")] public static extern long CResult_LSPSDateTimeNoneZ_clone(long _orig);
	// struct LDKCResult_HeldHtlcAvailableDecodeErrorZ CResult_HeldHtlcAvailableDecodeErrorZ_ok(struct LDKHeldHtlcAvailable o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_ok")] public static extern long CResult_HeldHtlcAvailableDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HeldHtlcAvailableDecodeErrorZ CResult_HeldHtlcAvailableDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_err")] public static extern long CResult_HeldHtlcAvailableDecodeErrorZ_err(long _e);
	// bool CResult_HeldHtlcAvailableDecodeErrorZ_is_ok(const struct LDKCResult_HeldHtlcAvailableDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_is_ok")] public static extern bool CResult_HeldHtlcAvailableDecodeErrorZ_is_ok(long _o);
	// void CResult_HeldHtlcAvailableDecodeErrorZ_free(struct LDKCResult_HeldHtlcAvailableDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_free")] public static extern void CResult_HeldHtlcAvailableDecodeErrorZ_free(long __res);
	// uint64_t CResult_HeldHtlcAvailableDecodeErrorZ_clone_ptr(LDKCResult_HeldHtlcAvailableDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_clone_ptr")] public static extern long CResult_HeldHtlcAvailableDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HeldHtlcAvailableDecodeErrorZ CResult_HeldHtlcAvailableDecodeErrorZ_clone(const struct LDKCResult_HeldHtlcAvailableDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HeldHtlcAvailableDecodeErrorZ_clone")] public static extern long CResult_HeldHtlcAvailableDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ReleaseHeldHtlcDecodeErrorZ CResult_ReleaseHeldHtlcDecodeErrorZ_ok(struct LDKReleaseHeldHtlc o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_ok")] public static extern long CResult_ReleaseHeldHtlcDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ReleaseHeldHtlcDecodeErrorZ CResult_ReleaseHeldHtlcDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_err")] public static extern long CResult_ReleaseHeldHtlcDecodeErrorZ_err(long _e);
	// bool CResult_ReleaseHeldHtlcDecodeErrorZ_is_ok(const struct LDKCResult_ReleaseHeldHtlcDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_is_ok")] public static extern bool CResult_ReleaseHeldHtlcDecodeErrorZ_is_ok(long _o);
	// void CResult_ReleaseHeldHtlcDecodeErrorZ_free(struct LDKCResult_ReleaseHeldHtlcDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_free")] public static extern void CResult_ReleaseHeldHtlcDecodeErrorZ_free(long __res);
	// uint64_t CResult_ReleaseHeldHtlcDecodeErrorZ_clone_ptr(LDKCResult_ReleaseHeldHtlcDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_clone_ptr")] public static extern long CResult_ReleaseHeldHtlcDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ReleaseHeldHtlcDecodeErrorZ CResult_ReleaseHeldHtlcDecodeErrorZ_clone(const struct LDKCResult_ReleaseHeldHtlcDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ReleaseHeldHtlcDecodeErrorZ_clone")] public static extern long CResult_ReleaseHeldHtlcDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_AsyncPaymentsMessageDecodeErrorZ CResult_AsyncPaymentsMessageDecodeErrorZ_ok(struct LDKAsyncPaymentsMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_ok")] public static extern long CResult_AsyncPaymentsMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_AsyncPaymentsMessageDecodeErrorZ CResult_AsyncPaymentsMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_err")] public static extern long CResult_AsyncPaymentsMessageDecodeErrorZ_err(long _e);
	// bool CResult_AsyncPaymentsMessageDecodeErrorZ_is_ok(const struct LDKCResult_AsyncPaymentsMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_is_ok")] public static extern bool CResult_AsyncPaymentsMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_AsyncPaymentsMessageDecodeErrorZ_free(struct LDKCResult_AsyncPaymentsMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_free")] public static extern void CResult_AsyncPaymentsMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_AsyncPaymentsMessageDecodeErrorZ_clone_ptr(LDKCResult_AsyncPaymentsMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_AsyncPaymentsMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_AsyncPaymentsMessageDecodeErrorZ CResult_AsyncPaymentsMessageDecodeErrorZ_clone(const struct LDKCResult_AsyncPaymentsMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsMessageDecodeErrorZ_clone")] public static extern long CResult_AsyncPaymentsMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OffersMessageDecodeErrorZ CResult_OffersMessageDecodeErrorZ_ok(struct LDKOffersMessage o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_ok")] public static extern long CResult_OffersMessageDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OffersMessageDecodeErrorZ CResult_OffersMessageDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_err")] public static extern long CResult_OffersMessageDecodeErrorZ_err(long _e);
	// bool CResult_OffersMessageDecodeErrorZ_is_ok(const struct LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_is_ok")] public static extern bool CResult_OffersMessageDecodeErrorZ_is_ok(long _o);
	// void CResult_OffersMessageDecodeErrorZ_free(struct LDKCResult_OffersMessageDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_free")] public static extern void CResult_OffersMessageDecodeErrorZ_free(long __res);
	// uint64_t CResult_OffersMessageDecodeErrorZ_clone_ptr(LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_clone_ptr")] public static extern long CResult_OffersMessageDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OffersMessageDecodeErrorZ CResult_OffersMessageDecodeErrorZ_clone(const struct LDKCResult_OffersMessageDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersMessageDecodeErrorZ_clone")] public static extern long CResult_OffersMessageDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_HTLCClaimZ COption_HTLCClaimZ_some(enum LDKHTLCClaim o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_some")] public static extern long COption_HTLCClaimZ_some(HTLCClaim _o);
	// struct LDKCOption_HTLCClaimZ COption_HTLCClaimZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_none")] public static extern long COption_HTLCClaimZ_none();
	// void COption_HTLCClaimZ_free(struct LDKCOption_HTLCClaimZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCClaimZ_free")] public static extern void COption_HTLCClaimZ_free(long __res);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok(struct LDKCounterpartyCommitmentSecrets o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_err(long _e);
	// bool CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok")] public static extern bool CResult_CounterpartyCommitmentSecretsDecodeErrorZ_is_ok(long _o);
	// void CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free(struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free")] public static extern void CResult_CounterpartyCommitmentSecretsDecodeErrorZ_free(long __res);
	// uint64_t CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone(const struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone")] public static extern long CResult_CounterpartyCommitmentSecretsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_ok(struct LDKTxCreationKeys o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_ok")] public static extern long CResult_TxCreationKeysDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_err")] public static extern long CResult_TxCreationKeysDecodeErrorZ_err(long _e);
	// bool CResult_TxCreationKeysDecodeErrorZ_is_ok(const struct LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_is_ok")] public static extern bool CResult_TxCreationKeysDecodeErrorZ_is_ok(long _o);
	// void CResult_TxCreationKeysDecodeErrorZ_free(struct LDKCResult_TxCreationKeysDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_free")] public static extern void CResult_TxCreationKeysDecodeErrorZ_free(long __res);
	// uint64_t CResult_TxCreationKeysDecodeErrorZ_clone_ptr(LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_clone_ptr")] public static extern long CResult_TxCreationKeysDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ CResult_TxCreationKeysDecodeErrorZ_clone(const struct LDKCResult_TxCreationKeysDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxCreationKeysDecodeErrorZ_clone")] public static extern long CResult_TxCreationKeysDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_ok(struct LDKChannelPublicKeys o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_ok")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_err")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_err(long _e);
	// bool CResult_ChannelPublicKeysDecodeErrorZ_is_ok(const struct LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelPublicKeysDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelPublicKeysDecodeErrorZ_free(struct LDKCResult_ChannelPublicKeysDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_free")] public static extern void CResult_ChannelPublicKeysDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr(LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ CResult_ChannelPublicKeysDecodeErrorZ_clone(const struct LDKCResult_ChannelPublicKeysDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelPublicKeysDecodeErrorZ_clone")] public static extern long CResult_ChannelPublicKeysDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_ok(struct LDKHTLCOutputInCommitment o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_ok")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_err")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_err(long _e);
	// bool CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(const struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok")] public static extern bool CResult_HTLCOutputInCommitmentDecodeErrorZ_is_ok(long _o);
	// void CResult_HTLCOutputInCommitmentDecodeErrorZ_free(struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_free")] public static extern void CResult_HTLCOutputInCommitmentDecodeErrorZ_free(long __res);
	// uint64_t CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr(LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ CResult_HTLCOutputInCommitmentDecodeErrorZ_clone(const struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HTLCOutputInCommitmentDecodeErrorZ_clone")] public static extern long CResult_HTLCOutputInCommitmentDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok(struct LDKCounterpartyChannelTransactionParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_err(long _e);
	// bool CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(const struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok")] public static extern bool CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free(struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free")] public static extern void CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone(const struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone")] public static extern long CResult_CounterpartyChannelTransactionParametersDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_ok(struct LDKChannelTransactionParameters o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_ok")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_err")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_err(long _e);
	// bool CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(const struct LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelTransactionParametersDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelTransactionParametersDecodeErrorZ_free(struct LDKCResult_ChannelTransactionParametersDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_free")] public static extern void CResult_ChannelTransactionParametersDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr(LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ CResult_ChannelTransactionParametersDecodeErrorZ_clone(const struct LDKCResult_ChannelTransactionParametersDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTransactionParametersDecodeErrorZ_clone")] public static extern long CResult_ChannelTransactionParametersDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_ok(struct LDKHolderCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_ok")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_err")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_err(long _e);
	// bool CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResult_HolderCommitmentTransactionDecodeErrorZ_is_ok(long _o);
	// void CResult_HolderCommitmentTransactionDecodeErrorZ_free(struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_free")] public static extern void CResult_HolderCommitmentTransactionDecodeErrorZ_free(long __res);
	// uint64_t CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ CResult_HolderCommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HolderCommitmentTransactionDecodeErrorZ_clone")] public static extern long CResult_HolderCommitmentTransactionDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_ok(struct LDKBuiltCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_ok")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_err")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_err(long _e);
	// bool CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResult_BuiltCommitmentTransactionDecodeErrorZ_is_ok(long _o);
	// void CResult_BuiltCommitmentTransactionDecodeErrorZ_free(struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_free")] public static extern void CResult_BuiltCommitmentTransactionDecodeErrorZ_free(long __res);
	// uint64_t CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ CResult_BuiltCommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BuiltCommitmentTransactionDecodeErrorZ_clone")] public static extern long CResult_BuiltCommitmentTransactionDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TrustedClosingTransactionNoneZ CResult_TrustedClosingTransactionNoneZ_ok(struct LDKTrustedClosingTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_ok")] public static extern long CResult_TrustedClosingTransactionNoneZ_ok(long _o);
	// struct LDKCResult_TrustedClosingTransactionNoneZ CResult_TrustedClosingTransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_err")] public static extern long CResult_TrustedClosingTransactionNoneZ_err();
	// bool CResult_TrustedClosingTransactionNoneZ_is_ok(const struct LDKCResult_TrustedClosingTransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_is_ok")] public static extern bool CResult_TrustedClosingTransactionNoneZ_is_ok(long _o);
	// void CResult_TrustedClosingTransactionNoneZ_free(struct LDKCResult_TrustedClosingTransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedClosingTransactionNoneZ_free")] public static extern void CResult_TrustedClosingTransactionNoneZ_free(long __res);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_ok(struct LDKCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_ok")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_ok(long _o);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_err")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_err(long _e);
	// bool CResult_CommitmentTransactionDecodeErrorZ_is_ok(const struct LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_is_ok")] public static extern bool CResult_CommitmentTransactionDecodeErrorZ_is_ok(long _o);
	// void CResult_CommitmentTransactionDecodeErrorZ_free(struct LDKCResult_CommitmentTransactionDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_free")] public static extern void CResult_CommitmentTransactionDecodeErrorZ_free(long __res);
	// uint64_t CResult_CommitmentTransactionDecodeErrorZ_clone_ptr(LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_clone_ptr")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CResult_CommitmentTransactionDecodeErrorZ_clone(const struct LDKCResult_CommitmentTransactionDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CommitmentTransactionDecodeErrorZ_clone")] public static extern long CResult_CommitmentTransactionDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TrustedCommitmentTransactionNoneZ CResult_TrustedCommitmentTransactionNoneZ_ok(struct LDKTrustedCommitmentTransaction o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_ok")] public static extern long CResult_TrustedCommitmentTransactionNoneZ_ok(long _o);
	// struct LDKCResult_TrustedCommitmentTransactionNoneZ CResult_TrustedCommitmentTransactionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_err")] public static extern long CResult_TrustedCommitmentTransactionNoneZ_err();
	// bool CResult_TrustedCommitmentTransactionNoneZ_is_ok(const struct LDKCResult_TrustedCommitmentTransactionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_is_ok")] public static extern bool CResult_TrustedCommitmentTransactionNoneZ_is_ok(long _o);
	// void CResult_TrustedCommitmentTransactionNoneZ_free(struct LDKCResult_TrustedCommitmentTransactionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrustedCommitmentTransactionNoneZ_free")] public static extern void CResult_TrustedCommitmentTransactionNoneZ_free(long __res);
	// struct LDKCResult_CVec_ECDSASignatureZNoneZ CResult_CVec_ECDSASignatureZNoneZ_ok(struct LDKCVec_ECDSASignatureZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_ok")] public static extern long CResult_CVec_ECDSASignatureZNoneZ_ok(long _o);
	// struct LDKCResult_CVec_ECDSASignatureZNoneZ CResult_CVec_ECDSASignatureZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_err")] public static extern long CResult_CVec_ECDSASignatureZNoneZ_err();
	// bool CResult_CVec_ECDSASignatureZNoneZ_is_ok(const struct LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_is_ok")] public static extern bool CResult_CVec_ECDSASignatureZNoneZ_is_ok(long _o);
	// void CResult_CVec_ECDSASignatureZNoneZ_free(struct LDKCResult_CVec_ECDSASignatureZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_free")] public static extern void CResult_CVec_ECDSASignatureZNoneZ_free(long __res);
	// uint64_t CResult_CVec_ECDSASignatureZNoneZ_clone_ptr(LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_clone_ptr")] public static extern long CResult_CVec_ECDSASignatureZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_ECDSASignatureZNoneZ CResult_CVec_ECDSASignatureZNoneZ_clone(const struct LDKCResult_CVec_ECDSASignatureZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_ECDSASignatureZNoneZ_clone")] public static extern long CResult_CVec_ECDSASignatureZNoneZ_clone(long _orig);
	// struct LDKCOption_usizeZ COption_usizeZ_some(uintptr_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_some")] public static extern long COption_usizeZ_some(long _o);
	// struct LDKCOption_usizeZ COption_usizeZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_none")] public static extern long COption_usizeZ_none();
	// void COption_usizeZ_free(struct LDKCOption_usizeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_free")] public static extern void COption_usizeZ_free(long __res);
	// uint64_t COption_usizeZ_clone_ptr(LDKCOption_usizeZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_clone_ptr")] public static extern long COption_usizeZ_clone_ptr(long _arg);
	// struct LDKCOption_usizeZ COption_usizeZ_clone(const struct LDKCOption_usizeZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_usizeZ_clone")] public static extern long COption_usizeZ_clone(long _orig);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_ok")] public static extern long CResult_ShutdownScriptDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_err")] public static extern long CResult_ShutdownScriptDecodeErrorZ_err(long _e);
	// bool CResult_ShutdownScriptDecodeErrorZ_is_ok(const struct LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_is_ok")] public static extern bool CResult_ShutdownScriptDecodeErrorZ_is_ok(long _o);
	// void CResult_ShutdownScriptDecodeErrorZ_free(struct LDKCResult_ShutdownScriptDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_free")] public static extern void CResult_ShutdownScriptDecodeErrorZ_free(long __res);
	// uint64_t CResult_ShutdownScriptDecodeErrorZ_clone_ptr(LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_clone_ptr")] public static extern long CResult_ShutdownScriptDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ CResult_ShutdownScriptDecodeErrorZ_clone(const struct LDKCResult_ShutdownScriptDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptDecodeErrorZ_clone")] public static extern long CResult_ShutdownScriptDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_ok(struct LDKShutdownScript o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_ok")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_ok(long _o);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_err(struct LDKInvalidShutdownScript e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_err")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_err(long _e);
	// bool CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(const struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok")] public static extern bool CResult_ShutdownScriptInvalidShutdownScriptZ_is_ok(long _o);
	// void CResult_ShutdownScriptInvalidShutdownScriptZ_free(struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_free")] public static extern void CResult_ShutdownScriptInvalidShutdownScriptZ_free(long __res);
	// uint64_t CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr(LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_clone_ptr(long _arg);
	// struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ CResult_ShutdownScriptInvalidShutdownScriptZ_clone(const struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ShutdownScriptInvalidShutdownScriptZ_clone")] public static extern long CResult_ShutdownScriptInvalidShutdownScriptZ_clone(long _orig);
	// void CVec_TransactionZ_free(struct LDKCVec_TransactionZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_TransactionZ_free")] public static extern void CVec_TransactionZ_free(long __res);
	// struct LDKCResult_u64NoneZ CResult_u64NoneZ_ok(uint64_t o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_ok")] public static extern long CResult_u64NoneZ_ok(long _o);
	// struct LDKCResult_u64NoneZ CResult_u64NoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_err")] public static extern long CResult_u64NoneZ_err();
	// bool CResult_u64NoneZ_is_ok(const struct LDKCResult_u64NoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_is_ok")] public static extern bool CResult_u64NoneZ_is_ok(long _o);
	// void CResult_u64NoneZ_free(struct LDKCResult_u64NoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_free")] public static extern void CResult_u64NoneZ_free(long __res);
	// uint64_t CResult_u64NoneZ_clone_ptr(LDKCResult_u64NoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_clone_ptr")] public static extern long CResult_u64NoneZ_clone_ptr(long _arg);
	// struct LDKCResult_u64NoneZ CResult_u64NoneZ_clone(const struct LDKCResult_u64NoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_u64NoneZ_clone")] public static extern long CResult_u64NoneZ_clone(long _orig);
	// struct LDKCResult_FundingInfoDecodeErrorZ CResult_FundingInfoDecodeErrorZ_ok(struct LDKFundingInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_ok")] public static extern long CResult_FundingInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_FundingInfoDecodeErrorZ CResult_FundingInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_err")] public static extern long CResult_FundingInfoDecodeErrorZ_err(long _e);
	// bool CResult_FundingInfoDecodeErrorZ_is_ok(const struct LDKCResult_FundingInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_is_ok")] public static extern bool CResult_FundingInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_FundingInfoDecodeErrorZ_free(struct LDKCResult_FundingInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_free")] public static extern void CResult_FundingInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_FundingInfoDecodeErrorZ_clone_ptr(LDKCResult_FundingInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_FundingInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_FundingInfoDecodeErrorZ CResult_FundingInfoDecodeErrorZ_clone(const struct LDKCResult_FundingInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_FundingInfoDecodeErrorZ_clone")] public static extern long CResult_FundingInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_ok(struct LDKPaymentPurpose o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_ok")] public static extern long CResult_PaymentPurposeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_err")] public static extern long CResult_PaymentPurposeDecodeErrorZ_err(long _e);
	// bool CResult_PaymentPurposeDecodeErrorZ_is_ok(const struct LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_is_ok")] public static extern bool CResult_PaymentPurposeDecodeErrorZ_is_ok(long _o);
	// void CResult_PaymentPurposeDecodeErrorZ_free(struct LDKCResult_PaymentPurposeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_free")] public static extern void CResult_PaymentPurposeDecodeErrorZ_free(long __res);
	// uint64_t CResult_PaymentPurposeDecodeErrorZ_clone_ptr(LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_clone_ptr")] public static extern long CResult_PaymentPurposeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ CResult_PaymentPurposeDecodeErrorZ_clone(const struct LDKCResult_PaymentPurposeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentPurposeDecodeErrorZ_clone")] public static extern long CResult_PaymentPurposeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ CResult_ClaimedHTLCDecodeErrorZ_ok(struct LDKClaimedHTLC o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_ok")] public static extern long CResult_ClaimedHTLCDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ CResult_ClaimedHTLCDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_err")] public static extern long CResult_ClaimedHTLCDecodeErrorZ_err(long _e);
	// bool CResult_ClaimedHTLCDecodeErrorZ_is_ok(const struct LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_is_ok")] public static extern bool CResult_ClaimedHTLCDecodeErrorZ_is_ok(long _o);
	// void CResult_ClaimedHTLCDecodeErrorZ_free(struct LDKCResult_ClaimedHTLCDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_free")] public static extern void CResult_ClaimedHTLCDecodeErrorZ_free(long __res);
	// uint64_t CResult_ClaimedHTLCDecodeErrorZ_clone_ptr(LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_clone_ptr")] public static extern long CResult_ClaimedHTLCDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ CResult_ClaimedHTLCDecodeErrorZ_clone(const struct LDKCResult_ClaimedHTLCDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ClaimedHTLCDecodeErrorZ_clone")] public static extern long CResult_ClaimedHTLCDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_PathFailureZ COption_PathFailureZ_some(struct LDKPathFailure o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_some")] public static extern long COption_PathFailureZ_some(long _o);
	// struct LDKCOption_PathFailureZ COption_PathFailureZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_none")] public static extern long COption_PathFailureZ_none();
	// void COption_PathFailureZ_free(struct LDKCOption_PathFailureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_free")] public static extern void COption_PathFailureZ_free(long __res);
	// uint64_t COption_PathFailureZ_clone_ptr(LDKCOption_PathFailureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_clone_ptr")] public static extern long COption_PathFailureZ_clone_ptr(long _arg);
	// struct LDKCOption_PathFailureZ COption_PathFailureZ_clone(const struct LDKCOption_PathFailureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PathFailureZ_clone")] public static extern long COption_PathFailureZ_clone(long _orig);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ CResult_COption_PathFailureZDecodeErrorZ_ok(struct LDKCOption_PathFailureZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_ok")] public static extern long CResult_COption_PathFailureZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ CResult_COption_PathFailureZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_err")] public static extern long CResult_COption_PathFailureZDecodeErrorZ_err(long _e);
	// bool CResult_COption_PathFailureZDecodeErrorZ_is_ok(const struct LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_PathFailureZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_PathFailureZDecodeErrorZ_free(struct LDKCResult_COption_PathFailureZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_free")] public static extern void CResult_COption_PathFailureZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_PathFailureZDecodeErrorZ_clone_ptr(LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_PathFailureZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ CResult_COption_PathFailureZDecodeErrorZ_clone(const struct LDKCResult_COption_PathFailureZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PathFailureZDecodeErrorZ_clone")] public static extern long CResult_COption_PathFailureZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_some(struct LDKClosureReason o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_some")] public static extern long COption_ClosureReasonZ_some(long _o);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_none")] public static extern long COption_ClosureReasonZ_none();
	// void COption_ClosureReasonZ_free(struct LDKCOption_ClosureReasonZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_free")] public static extern void COption_ClosureReasonZ_free(long __res);
	// uint64_t COption_ClosureReasonZ_clone_ptr(LDKCOption_ClosureReasonZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_clone_ptr")] public static extern long COption_ClosureReasonZ_clone_ptr(long _arg);
	// struct LDKCOption_ClosureReasonZ COption_ClosureReasonZ_clone(const struct LDKCOption_ClosureReasonZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_ClosureReasonZ_clone")] public static extern long COption_ClosureReasonZ_clone(long _orig);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_ok(struct LDKCOption_ClosureReasonZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_ok")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_err")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_err(long _e);
	// bool CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(const struct LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_ClosureReasonZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_ClosureReasonZDecodeErrorZ_free(struct LDKCResult_COption_ClosureReasonZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_free")] public static extern void CResult_COption_ClosureReasonZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr(LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ CResult_COption_ClosureReasonZDecodeErrorZ_clone(const struct LDKCResult_COption_ClosureReasonZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_ClosureReasonZDecodeErrorZ_clone")] public static extern long CResult_COption_ClosureReasonZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_some(struct LDKHTLCDestination o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_some")] public static extern long COption_HTLCDestinationZ_some(long _o);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_none")] public static extern long COption_HTLCDestinationZ_none();
	// void COption_HTLCDestinationZ_free(struct LDKCOption_HTLCDestinationZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_free")] public static extern void COption_HTLCDestinationZ_free(long __res);
	// uint64_t COption_HTLCDestinationZ_clone_ptr(LDKCOption_HTLCDestinationZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_clone_ptr")] public static extern long COption_HTLCDestinationZ_clone_ptr(long _arg);
	// struct LDKCOption_HTLCDestinationZ COption_HTLCDestinationZ_clone(const struct LDKCOption_HTLCDestinationZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_HTLCDestinationZ_clone")] public static extern long COption_HTLCDestinationZ_clone(long _orig);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_ok(struct LDKCOption_HTLCDestinationZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_ok")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_err")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_err(long _e);
	// bool CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok(const struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_HTLCDestinationZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_HTLCDestinationZDecodeErrorZ_free(struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_free")] public static extern void CResult_COption_HTLCDestinationZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr(LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ CResult_COption_HTLCDestinationZDecodeErrorZ_clone(const struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_HTLCDestinationZDecodeErrorZ_clone")] public static extern long CResult_COption_HTLCDestinationZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_PaymentFailureReasonZ COption_PaymentFailureReasonZ_some(enum LDKPaymentFailureReason o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_some")] public static extern long COption_PaymentFailureReasonZ_some(PaymentFailureReason _o);
	// struct LDKCOption_PaymentFailureReasonZ COption_PaymentFailureReasonZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_none")] public static extern long COption_PaymentFailureReasonZ_none();
	// void COption_PaymentFailureReasonZ_free(struct LDKCOption_PaymentFailureReasonZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_free")] public static extern void COption_PaymentFailureReasonZ_free(long __res);
	// uint64_t COption_PaymentFailureReasonZ_clone_ptr(LDKCOption_PaymentFailureReasonZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_clone_ptr")] public static extern long COption_PaymentFailureReasonZ_clone_ptr(long _arg);
	// struct LDKCOption_PaymentFailureReasonZ COption_PaymentFailureReasonZ_clone(const struct LDKCOption_PaymentFailureReasonZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_PaymentFailureReasonZ_clone")] public static extern long COption_PaymentFailureReasonZ_clone(long _orig);
	// struct LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ CResult_COption_PaymentFailureReasonZDecodeErrorZ_ok(struct LDKCOption_PaymentFailureReasonZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_ok")] public static extern long CResult_COption_PaymentFailureReasonZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ CResult_COption_PaymentFailureReasonZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_err")] public static extern long CResult_COption_PaymentFailureReasonZDecodeErrorZ_err(long _e);
	// bool CResult_COption_PaymentFailureReasonZDecodeErrorZ_is_ok(const struct LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_PaymentFailureReasonZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_PaymentFailureReasonZDecodeErrorZ_free(struct LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_free")] public static extern void CResult_COption_PaymentFailureReasonZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_PaymentFailureReasonZDecodeErrorZ_clone_ptr(LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_PaymentFailureReasonZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ CResult_COption_PaymentFailureReasonZDecodeErrorZ_clone(const struct LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_PaymentFailureReasonZDecodeErrorZ_clone")] public static extern long CResult_COption_PaymentFailureReasonZDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_U128Z COption_U128Z_some(struct LDKU128 o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_some")] public static extern long COption_U128Z_some(long _o);
	// struct LDKCOption_U128Z COption_U128Z_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_none")] public static extern long COption_U128Z_none();
	// void COption_U128Z_free(struct LDKCOption_U128Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_free")] public static extern void COption_U128Z_free(long __res);
	// uint64_t COption_U128Z_clone_ptr(LDKCOption_U128Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_clone_ptr")] public static extern long COption_U128Z_clone_ptr(long _arg);
	// struct LDKCOption_U128Z COption_U128Z_clone(const struct LDKCOption_U128Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_U128Z_clone")] public static extern long COption_U128Z_clone(long _orig);
	// void CVec_ClaimedHTLCZ_free(struct LDKCVec_ClaimedHTLCZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_ClaimedHTLCZ_free")] public static extern void CVec_ClaimedHTLCZ_free(long __res);
	// struct LDKCOption_EventZ COption_EventZ_some(struct LDKEvent o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_some")] public static extern long COption_EventZ_some(long _o);
	// struct LDKCOption_EventZ COption_EventZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_none")] public static extern long COption_EventZ_none();
	// void COption_EventZ_free(struct LDKCOption_EventZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_free")] public static extern void COption_EventZ_free(long __res);
	// uint64_t COption_EventZ_clone_ptr(LDKCOption_EventZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_clone_ptr")] public static extern long COption_EventZ_clone_ptr(long _arg);
	// struct LDKCOption_EventZ COption_EventZ_clone(const struct LDKCOption_EventZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_EventZ_clone")] public static extern long COption_EventZ_clone(long _orig);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_ok(struct LDKCOption_EventZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_ok")] public static extern long CResult_COption_EventZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_err")] public static extern long CResult_COption_EventZDecodeErrorZ_err(long _e);
	// bool CResult_COption_EventZDecodeErrorZ_is_ok(const struct LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_is_ok")] public static extern bool CResult_COption_EventZDecodeErrorZ_is_ok(long _o);
	// void CResult_COption_EventZDecodeErrorZ_free(struct LDKCResult_COption_EventZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_free")] public static extern void CResult_COption_EventZDecodeErrorZ_free(long __res);
	// uint64_t CResult_COption_EventZDecodeErrorZ_clone_ptr(LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_clone_ptr")] public static extern long CResult_COption_EventZDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_COption_EventZDecodeErrorZ CResult_COption_EventZDecodeErrorZ_clone(const struct LDKCResult_COption_EventZDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_COption_EventZDecodeErrorZ_clone")] public static extern long CResult_COption_EventZDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NonceDecodeErrorZ CResult_NonceDecodeErrorZ_ok(struct LDKNonce o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_ok")] public static extern long CResult_NonceDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NonceDecodeErrorZ CResult_NonceDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_err")] public static extern long CResult_NonceDecodeErrorZ_err(long _e);
	// bool CResult_NonceDecodeErrorZ_is_ok(const struct LDKCResult_NonceDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_is_ok")] public static extern bool CResult_NonceDecodeErrorZ_is_ok(long _o);
	// void CResult_NonceDecodeErrorZ_free(struct LDKCResult_NonceDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_free")] public static extern void CResult_NonceDecodeErrorZ_free(long __res);
	// uint64_t CResult_NonceDecodeErrorZ_clone_ptr(LDKCResult_NonceDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_clone_ptr")] public static extern long CResult_NonceDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NonceDecodeErrorZ CResult_NonceDecodeErrorZ_clone(const struct LDKCResult_NonceDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NonceDecodeErrorZ_clone")] public static extern long CResult_NonceDecodeErrorZ_clone(long _orig);
	// void CVec_RouteHintHopZ_free(struct LDKCVec_RouteHintHopZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_RouteHintHopZ_free")] public static extern void CVec_RouteHintHopZ_free(long __res);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ CResult_SiPrefixBolt11ParseErrorZ_ok(enum LDKSiPrefix o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_ok")] public static extern long CResult_SiPrefixBolt11ParseErrorZ_ok(SiPrefix _o);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ CResult_SiPrefixBolt11ParseErrorZ_err(struct LDKBolt11ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_err")] public static extern long CResult_SiPrefixBolt11ParseErrorZ_err(long _e);
	// bool CResult_SiPrefixBolt11ParseErrorZ_is_ok(const struct LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_is_ok")] public static extern bool CResult_SiPrefixBolt11ParseErrorZ_is_ok(long _o);
	// void CResult_SiPrefixBolt11ParseErrorZ_free(struct LDKCResult_SiPrefixBolt11ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_free")] public static extern void CResult_SiPrefixBolt11ParseErrorZ_free(long __res);
	// uint64_t CResult_SiPrefixBolt11ParseErrorZ_clone_ptr(LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_clone_ptr")] public static extern long CResult_SiPrefixBolt11ParseErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ CResult_SiPrefixBolt11ParseErrorZ_clone(const struct LDKCResult_SiPrefixBolt11ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SiPrefixBolt11ParseErrorZ_clone")] public static extern long CResult_SiPrefixBolt11ParseErrorZ_clone(long _orig);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ CResult_Bolt11InvoiceParseOrSemanticErrorZ_ok(struct LDKBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_ok")] public static extern long CResult_Bolt11InvoiceParseOrSemanticErrorZ_ok(long _o);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ CResult_Bolt11InvoiceParseOrSemanticErrorZ_err(struct LDKParseOrSemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_err")] public static extern long CResult_Bolt11InvoiceParseOrSemanticErrorZ_err(long _e);
	// bool CResult_Bolt11InvoiceParseOrSemanticErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_is_ok")] public static extern bool CResult_Bolt11InvoiceParseOrSemanticErrorZ_is_ok(long _o);
	// void CResult_Bolt11InvoiceParseOrSemanticErrorZ_free(struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_free")] public static extern void CResult_Bolt11InvoiceParseOrSemanticErrorZ_free(long __res);
	// uint64_t CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone_ptr")] public static extern long CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone(const struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone")] public static extern long CResult_Bolt11InvoiceParseOrSemanticErrorZ_clone(long _orig);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_ok(struct LDKSignedRawBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_ok")] public static extern long CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_ok(long _o);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_err(struct LDKBolt11ParseError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_err")] public static extern long CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_err(long _e);
	// bool CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_is_ok(const struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_is_ok")] public static extern bool CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_is_ok(long _o);
	// void CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_free(struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_free")] public static extern void CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_free(long __res);
	// uint64_t CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone_ptr(LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone_ptr")] public static extern long CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone(const struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone")] public static extern long CResult_SignedRawBolt11InvoiceBolt11ParseErrorZ_clone(long _orig);
	// uint64_t C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone_ptr(LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone_ptr")] public static extern long C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone(const struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone")] public static extern long C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_clone(long _orig);
	// struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_new(struct LDKRawBolt11Invoice a, struct LDKThirtyTwoBytes b, struct LDKBolt11InvoiceSignature c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_new")] public static extern long C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_new(long _a, long _b, long _c);
	// void C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_free(struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_free")] public static extern void C3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ_free(long __res);
	// struct LDKCResult_PayeePubKeySecp256k1ErrorZ CResult_PayeePubKeySecp256k1ErrorZ_ok(struct LDKPayeePubKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_ok")] public static extern long CResult_PayeePubKeySecp256k1ErrorZ_ok(long _o);
	// struct LDKCResult_PayeePubKeySecp256k1ErrorZ CResult_PayeePubKeySecp256k1ErrorZ_err(enum LDKSecp256k1Error e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_err")] public static extern long CResult_PayeePubKeySecp256k1ErrorZ_err(Secp256k1Error _e);
	// bool CResult_PayeePubKeySecp256k1ErrorZ_is_ok(const struct LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_is_ok")] public static extern bool CResult_PayeePubKeySecp256k1ErrorZ_is_ok(long _o);
	// void CResult_PayeePubKeySecp256k1ErrorZ_free(struct LDKCResult_PayeePubKeySecp256k1ErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_free")] public static extern void CResult_PayeePubKeySecp256k1ErrorZ_free(long __res);
	// uint64_t CResult_PayeePubKeySecp256k1ErrorZ_clone_ptr(LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_clone_ptr")] public static extern long CResult_PayeePubKeySecp256k1ErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PayeePubKeySecp256k1ErrorZ CResult_PayeePubKeySecp256k1ErrorZ_clone(const struct LDKCResult_PayeePubKeySecp256k1ErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PayeePubKeySecp256k1ErrorZ_clone")] public static extern long CResult_PayeePubKeySecp256k1ErrorZ_clone(long _orig);
	// void CVec_PrivateRouteZ_free(struct LDKCVec_PrivateRouteZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PrivateRouteZ_free")] public static extern void CVec_PrivateRouteZ_free(long __res);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_ok(struct LDKPositiveTimestamp o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_ok")] public static extern long CResult_PositiveTimestampCreationErrorZ_ok(long _o);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_err")] public static extern long CResult_PositiveTimestampCreationErrorZ_err(CreationError _e);
	// bool CResult_PositiveTimestampCreationErrorZ_is_ok(const struct LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_is_ok")] public static extern bool CResult_PositiveTimestampCreationErrorZ_is_ok(long _o);
	// void CResult_PositiveTimestampCreationErrorZ_free(struct LDKCResult_PositiveTimestampCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_free")] public static extern void CResult_PositiveTimestampCreationErrorZ_free(long __res);
	// uint64_t CResult_PositiveTimestampCreationErrorZ_clone_ptr(LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_clone_ptr")] public static extern long CResult_PositiveTimestampCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PositiveTimestampCreationErrorZ CResult_PositiveTimestampCreationErrorZ_clone(const struct LDKCResult_PositiveTimestampCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PositiveTimestampCreationErrorZ_clone")] public static extern long CResult_PositiveTimestampCreationErrorZ_clone(long _orig);
	// struct LDKCResult_NoneBolt11SemanticErrorZ CResult_NoneBolt11SemanticErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_ok")] public static extern long CResult_NoneBolt11SemanticErrorZ_ok();
	// struct LDKCResult_NoneBolt11SemanticErrorZ CResult_NoneBolt11SemanticErrorZ_err(enum LDKBolt11SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_err")] public static extern long CResult_NoneBolt11SemanticErrorZ_err(Bolt11SemanticError _e);
	// bool CResult_NoneBolt11SemanticErrorZ_is_ok(const struct LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_is_ok")] public static extern bool CResult_NoneBolt11SemanticErrorZ_is_ok(long _o);
	// void CResult_NoneBolt11SemanticErrorZ_free(struct LDKCResult_NoneBolt11SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_free")] public static extern void CResult_NoneBolt11SemanticErrorZ_free(long __res);
	// uint64_t CResult_NoneBolt11SemanticErrorZ_clone_ptr(LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_clone_ptr")] public static extern long CResult_NoneBolt11SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneBolt11SemanticErrorZ CResult_NoneBolt11SemanticErrorZ_clone(const struct LDKCResult_NoneBolt11SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneBolt11SemanticErrorZ_clone")] public static extern long CResult_NoneBolt11SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ CResult_Bolt11InvoiceBolt11SemanticErrorZ_ok(struct LDKBolt11Invoice o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_ok")] public static extern long CResult_Bolt11InvoiceBolt11SemanticErrorZ_ok(long _o);
	// struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ CResult_Bolt11InvoiceBolt11SemanticErrorZ_err(enum LDKBolt11SemanticError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_err")] public static extern long CResult_Bolt11InvoiceBolt11SemanticErrorZ_err(Bolt11SemanticError _e);
	// bool CResult_Bolt11InvoiceBolt11SemanticErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_is_ok")] public static extern bool CResult_Bolt11InvoiceBolt11SemanticErrorZ_is_ok(long _o);
	// void CResult_Bolt11InvoiceBolt11SemanticErrorZ_free(struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_free")] public static extern void CResult_Bolt11InvoiceBolt11SemanticErrorZ_free(long __res);
	// uint64_t CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone_ptr")] public static extern long CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone(const struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone")] public static extern long CResult_Bolt11InvoiceBolt11SemanticErrorZ_clone(long _orig);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_ok(struct LDKDescription o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_ok")] public static extern long CResult_DescriptionCreationErrorZ_ok(long _o);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_err")] public static extern long CResult_DescriptionCreationErrorZ_err(CreationError _e);
	// bool CResult_DescriptionCreationErrorZ_is_ok(const struct LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_is_ok")] public static extern bool CResult_DescriptionCreationErrorZ_is_ok(long _o);
	// void CResult_DescriptionCreationErrorZ_free(struct LDKCResult_DescriptionCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_free")] public static extern void CResult_DescriptionCreationErrorZ_free(long __res);
	// uint64_t CResult_DescriptionCreationErrorZ_clone_ptr(LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_clone_ptr")] public static extern long CResult_DescriptionCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DescriptionCreationErrorZ CResult_DescriptionCreationErrorZ_clone(const struct LDKCResult_DescriptionCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DescriptionCreationErrorZ_clone")] public static extern long CResult_DescriptionCreationErrorZ_clone(long _orig);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_ok(struct LDKPrivateRoute o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_ok")] public static extern long CResult_PrivateRouteCreationErrorZ_ok(long _o);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_err(enum LDKCreationError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_err")] public static extern long CResult_PrivateRouteCreationErrorZ_err(CreationError _e);
	// bool CResult_PrivateRouteCreationErrorZ_is_ok(const struct LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_is_ok")] public static extern bool CResult_PrivateRouteCreationErrorZ_is_ok(long _o);
	// void CResult_PrivateRouteCreationErrorZ_free(struct LDKCResult_PrivateRouteCreationErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_free")] public static extern void CResult_PrivateRouteCreationErrorZ_free(long __res);
	// uint64_t CResult_PrivateRouteCreationErrorZ_clone_ptr(LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_clone_ptr")] public static extern long CResult_PrivateRouteCreationErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PrivateRouteCreationErrorZ CResult_PrivateRouteCreationErrorZ_clone(const struct LDKCResult_PrivateRouteCreationErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PrivateRouteCreationErrorZ_clone")] public static extern long CResult_PrivateRouteCreationErrorZ_clone(long _orig);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_ok(struct LDKOutPoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_ok")] public static extern long CResult_OutPointDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_err")] public static extern long CResult_OutPointDecodeErrorZ_err(long _e);
	// bool CResult_OutPointDecodeErrorZ_is_ok(const struct LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_is_ok")] public static extern bool CResult_OutPointDecodeErrorZ_is_ok(long _o);
	// void CResult_OutPointDecodeErrorZ_free(struct LDKCResult_OutPointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_free")] public static extern void CResult_OutPointDecodeErrorZ_free(long __res);
	// uint64_t CResult_OutPointDecodeErrorZ_clone_ptr(LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_clone_ptr")] public static extern long CResult_OutPointDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OutPointDecodeErrorZ CResult_OutPointDecodeErrorZ_clone(const struct LDKCResult_OutPointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutPointDecodeErrorZ_clone")] public static extern long CResult_OutPointDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BigSizeDecodeErrorZ CResult_BigSizeDecodeErrorZ_ok(struct LDKBigSize o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_ok")] public static extern long CResult_BigSizeDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BigSizeDecodeErrorZ CResult_BigSizeDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_err")] public static extern long CResult_BigSizeDecodeErrorZ_err(long _e);
	// bool CResult_BigSizeDecodeErrorZ_is_ok(const struct LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_is_ok")] public static extern bool CResult_BigSizeDecodeErrorZ_is_ok(long _o);
	// void CResult_BigSizeDecodeErrorZ_free(struct LDKCResult_BigSizeDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_free")] public static extern void CResult_BigSizeDecodeErrorZ_free(long __res);
	// uint64_t CResult_BigSizeDecodeErrorZ_clone_ptr(LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_clone_ptr")] public static extern long CResult_BigSizeDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BigSizeDecodeErrorZ CResult_BigSizeDecodeErrorZ_clone(const struct LDKCResult_BigSizeDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BigSizeDecodeErrorZ_clone")] public static extern long CResult_BigSizeDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_UntrustedStringDecodeErrorZ CResult_UntrustedStringDecodeErrorZ_ok(struct LDKUntrustedString o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_ok")] public static extern long CResult_UntrustedStringDecodeErrorZ_ok(long _o);
	// struct LDKCResult_UntrustedStringDecodeErrorZ CResult_UntrustedStringDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_err")] public static extern long CResult_UntrustedStringDecodeErrorZ_err(long _e);
	// bool CResult_UntrustedStringDecodeErrorZ_is_ok(const struct LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_is_ok")] public static extern bool CResult_UntrustedStringDecodeErrorZ_is_ok(long _o);
	// void CResult_UntrustedStringDecodeErrorZ_free(struct LDKCResult_UntrustedStringDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_free")] public static extern void CResult_UntrustedStringDecodeErrorZ_free(long __res);
	// uint64_t CResult_UntrustedStringDecodeErrorZ_clone_ptr(LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_clone_ptr")] public static extern long CResult_UntrustedStringDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_UntrustedStringDecodeErrorZ CResult_UntrustedStringDecodeErrorZ_clone(const struct LDKCResult_UntrustedStringDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_UntrustedStringDecodeErrorZ_clone")] public static extern long CResult_UntrustedStringDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HostnameDecodeErrorZ CResult_HostnameDecodeErrorZ_ok(struct LDKHostname o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_ok")] public static extern long CResult_HostnameDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HostnameDecodeErrorZ CResult_HostnameDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_err")] public static extern long CResult_HostnameDecodeErrorZ_err(long _e);
	// bool CResult_HostnameDecodeErrorZ_is_ok(const struct LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_is_ok")] public static extern bool CResult_HostnameDecodeErrorZ_is_ok(long _o);
	// void CResult_HostnameDecodeErrorZ_free(struct LDKCResult_HostnameDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_free")] public static extern void CResult_HostnameDecodeErrorZ_free(long __res);
	// uint64_t CResult_HostnameDecodeErrorZ_clone_ptr(LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_clone_ptr")] public static extern long CResult_HostnameDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HostnameDecodeErrorZ CResult_HostnameDecodeErrorZ_clone(const struct LDKCResult_HostnameDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HostnameDecodeErrorZ_clone")] public static extern long CResult_HostnameDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TransactionU16LenLimitedNoneZ CResult_TransactionU16LenLimitedNoneZ_ok(struct LDKTransactionU16LenLimited o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_ok")] public static extern long CResult_TransactionU16LenLimitedNoneZ_ok(long _o);
	// struct LDKCResult_TransactionU16LenLimitedNoneZ CResult_TransactionU16LenLimitedNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_err")] public static extern long CResult_TransactionU16LenLimitedNoneZ_err();
	// bool CResult_TransactionU16LenLimitedNoneZ_is_ok(const struct LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_is_ok")] public static extern bool CResult_TransactionU16LenLimitedNoneZ_is_ok(long _o);
	// void CResult_TransactionU16LenLimitedNoneZ_free(struct LDKCResult_TransactionU16LenLimitedNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_free")] public static extern void CResult_TransactionU16LenLimitedNoneZ_free(long __res);
	// uint64_t CResult_TransactionU16LenLimitedNoneZ_clone_ptr(LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_clone_ptr")] public static extern long CResult_TransactionU16LenLimitedNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_TransactionU16LenLimitedNoneZ CResult_TransactionU16LenLimitedNoneZ_clone(const struct LDKCResult_TransactionU16LenLimitedNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedNoneZ_clone")] public static extern long CResult_TransactionU16LenLimitedNoneZ_clone(long _orig);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ CResult_TransactionU16LenLimitedDecodeErrorZ_ok(struct LDKTransactionU16LenLimited o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_ok")] public static extern long CResult_TransactionU16LenLimitedDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ CResult_TransactionU16LenLimitedDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_err")] public static extern long CResult_TransactionU16LenLimitedDecodeErrorZ_err(long _e);
	// bool CResult_TransactionU16LenLimitedDecodeErrorZ_is_ok(const struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_is_ok")] public static extern bool CResult_TransactionU16LenLimitedDecodeErrorZ_is_ok(long _o);
	// void CResult_TransactionU16LenLimitedDecodeErrorZ_free(struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_free")] public static extern void CResult_TransactionU16LenLimitedDecodeErrorZ_free(long __res);
	// uint64_t CResult_TransactionU16LenLimitedDecodeErrorZ_clone_ptr(LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_clone_ptr")] public static extern long CResult_TransactionU16LenLimitedDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ CResult_TransactionU16LenLimitedDecodeErrorZ_clone(const struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TransactionU16LenLimitedDecodeErrorZ_clone")] public static extern long CResult_TransactionU16LenLimitedDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelIdDecodeErrorZ CResult_ChannelIdDecodeErrorZ_ok(struct LDKChannelId o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_ok")] public static extern long CResult_ChannelIdDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelIdDecodeErrorZ CResult_ChannelIdDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_err")] public static extern long CResult_ChannelIdDecodeErrorZ_err(long _e);
	// bool CResult_ChannelIdDecodeErrorZ_is_ok(const struct LDKCResult_ChannelIdDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelIdDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelIdDecodeErrorZ_free(struct LDKCResult_ChannelIdDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_free")] public static extern void CResult_ChannelIdDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelIdDecodeErrorZ_clone_ptr(LDKCResult_ChannelIdDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelIdDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelIdDecodeErrorZ CResult_ChannelIdDecodeErrorZ_clone(const struct LDKCResult_ChannelIdDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelIdDecodeErrorZ_clone")] public static extern long CResult_ChannelIdDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_ok(struct LDKInitFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_ok")] public static extern long CResult_InitFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_err")] public static extern long CResult_InitFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_InitFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_InitFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_InitFeaturesDecodeErrorZ_free(struct LDKCResult_InitFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_free")] public static extern void CResult_InitFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_InitFeaturesDecodeErrorZ_clone_ptr(LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_InitFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InitFeaturesDecodeErrorZ CResult_InitFeaturesDecodeErrorZ_clone(const struct LDKCResult_InitFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InitFeaturesDecodeErrorZ_clone")] public static extern long CResult_InitFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_ok(struct LDKChannelFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_ok")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_err")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_ChannelFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelFeaturesDecodeErrorZ_free(struct LDKCResult_ChannelFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_free")] public static extern void CResult_ChannelFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelFeaturesDecodeErrorZ_clone_ptr(LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ CResult_ChannelFeaturesDecodeErrorZ_clone(const struct LDKCResult_ChannelFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelFeaturesDecodeErrorZ_clone")] public static extern long CResult_ChannelFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_ok(struct LDKNodeFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_ok")] public static extern long CResult_NodeFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_err")] public static extern long CResult_NodeFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_NodeFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_NodeFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_NodeFeaturesDecodeErrorZ_free(struct LDKCResult_NodeFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_free")] public static extern void CResult_NodeFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_NodeFeaturesDecodeErrorZ_clone_ptr(LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_NodeFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ CResult_NodeFeaturesDecodeErrorZ_clone(const struct LDKCResult_NodeFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NodeFeaturesDecodeErrorZ_clone")] public static extern long CResult_NodeFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ CResult_Bolt11InvoiceFeaturesDecodeErrorZ_ok(struct LDKBolt11InvoiceFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_ok")] public static extern long CResult_Bolt11InvoiceFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ CResult_Bolt11InvoiceFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_err")] public static extern long CResult_Bolt11InvoiceFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_Bolt11InvoiceFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_Bolt11InvoiceFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_Bolt11InvoiceFeaturesDecodeErrorZ_free(struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_free")] public static extern void CResult_Bolt11InvoiceFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone_ptr(LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone(const struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone")] public static extern long CResult_Bolt11InvoiceFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ CResult_Bolt12InvoiceFeaturesDecodeErrorZ_ok(struct LDKBolt12InvoiceFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_ok")] public static extern long CResult_Bolt12InvoiceFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ CResult_Bolt12InvoiceFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_err")] public static extern long CResult_Bolt12InvoiceFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_Bolt12InvoiceFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_Bolt12InvoiceFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_Bolt12InvoiceFeaturesDecodeErrorZ_free(struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_free")] public static extern void CResult_Bolt12InvoiceFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone_ptr(LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone(const struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone")] public static extern long CResult_Bolt12InvoiceFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ CResult_BlindedHopFeaturesDecodeErrorZ_ok(struct LDKBlindedHopFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_ok")] public static extern long CResult_BlindedHopFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ CResult_BlindedHopFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_err")] public static extern long CResult_BlindedHopFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_BlindedHopFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedHopFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedHopFeaturesDecodeErrorZ_free(struct LDKCResult_BlindedHopFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_free")] public static extern void CResult_BlindedHopFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedHopFeaturesDecodeErrorZ_clone_ptr(LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedHopFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ CResult_BlindedHopFeaturesDecodeErrorZ_clone(const struct LDKCResult_BlindedHopFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopFeaturesDecodeErrorZ_clone")] public static extern long CResult_BlindedHopFeaturesDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_ok(struct LDKChannelTypeFeatures o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_ok")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_err")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_err(long _e);
	// bool CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(const struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok")] public static extern bool CResult_ChannelTypeFeaturesDecodeErrorZ_is_ok(long _o);
	// void CResult_ChannelTypeFeaturesDecodeErrorZ_free(struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_free")] public static extern void CResult_ChannelTypeFeaturesDecodeErrorZ_free(long __res);
	// uint64_t CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr(LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ CResult_ChannelTypeFeaturesDecodeErrorZ_clone(const struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ChannelTypeFeaturesDecodeErrorZ_clone")] public static extern long CResult_ChannelTypeFeaturesDecodeErrorZ_clone(long _orig);
	// uint64_t C2Tuple__u832u16Z_clone_ptr(LDKC2Tuple__u832u16Z *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_clone_ptr")] public static extern long C2Tuple__u832u16Z_clone_ptr(long _arg);
	// struct LDKC2Tuple__u832u16Z C2Tuple__u832u16Z_clone(const struct LDKC2Tuple__u832u16Z *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_clone")] public static extern long C2Tuple__u832u16Z_clone(long _orig);
	// struct LDKC2Tuple__u832u16Z C2Tuple__u832u16Z_new(struct LDKThirtyTwoBytes a, uint16_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_new")] public static extern long C2Tuple__u832u16Z_new(long _a, short _b);
	// void C2Tuple__u832u16Z_free(struct LDKC2Tuple__u832u16Z _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple__u832u16Z_free")] public static extern void C2Tuple__u832u16Z_free(long __res);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ CResult_BlindedPayInfoDecodeErrorZ_ok(struct LDKBlindedPayInfo o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_ok")] public static extern long CResult_BlindedPayInfoDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ CResult_BlindedPayInfoDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_err")] public static extern long CResult_BlindedPayInfoDecodeErrorZ_err(long _e);
	// bool CResult_BlindedPayInfoDecodeErrorZ_is_ok(const struct LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedPayInfoDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedPayInfoDecodeErrorZ_free(struct LDKCResult_BlindedPayInfoDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_free")] public static extern void CResult_BlindedPayInfoDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedPayInfoDecodeErrorZ_clone_ptr(LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedPayInfoDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ CResult_BlindedPayInfoDecodeErrorZ_clone(const struct LDKCResult_BlindedPayInfoDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPayInfoDecodeErrorZ_clone")] public static extern long CResult_BlindedPayInfoDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BlindedPaymentPathNoneZ CResult_BlindedPaymentPathNoneZ_ok(struct LDKBlindedPaymentPath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_ok")] public static extern long CResult_BlindedPaymentPathNoneZ_ok(long _o);
	// struct LDKCResult_BlindedPaymentPathNoneZ CResult_BlindedPaymentPathNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_err")] public static extern long CResult_BlindedPaymentPathNoneZ_err();
	// bool CResult_BlindedPaymentPathNoneZ_is_ok(const struct LDKCResult_BlindedPaymentPathNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_is_ok")] public static extern bool CResult_BlindedPaymentPathNoneZ_is_ok(long _o);
	// void CResult_BlindedPaymentPathNoneZ_free(struct LDKCResult_BlindedPaymentPathNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_free")] public static extern void CResult_BlindedPaymentPathNoneZ_free(long __res);
	// uint64_t CResult_BlindedPaymentPathNoneZ_clone_ptr(LDKCResult_BlindedPaymentPathNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_clone_ptr")] public static extern long CResult_BlindedPaymentPathNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedPaymentPathNoneZ CResult_BlindedPaymentPathNoneZ_clone(const struct LDKCResult_BlindedPaymentPathNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedPaymentPathNoneZ_clone")] public static extern long CResult_BlindedPaymentPathNoneZ_clone(long _orig);
	// void CVec_PaymentForwardNodeZ_free(struct LDKCVec_PaymentForwardNodeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PaymentForwardNodeZ_free")] public static extern void CVec_PaymentForwardNodeZ_free(long __res);
	// struct LDKCResult_PaymentRelayDecodeErrorZ CResult_PaymentRelayDecodeErrorZ_ok(struct LDKPaymentRelay o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_ok")] public static extern long CResult_PaymentRelayDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PaymentRelayDecodeErrorZ CResult_PaymentRelayDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_err")] public static extern long CResult_PaymentRelayDecodeErrorZ_err(long _e);
	// bool CResult_PaymentRelayDecodeErrorZ_is_ok(const struct LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_is_ok")] public static extern bool CResult_PaymentRelayDecodeErrorZ_is_ok(long _o);
	// void CResult_PaymentRelayDecodeErrorZ_free(struct LDKCResult_PaymentRelayDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_free")] public static extern void CResult_PaymentRelayDecodeErrorZ_free(long __res);
	// uint64_t CResult_PaymentRelayDecodeErrorZ_clone_ptr(LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_clone_ptr")] public static extern long CResult_PaymentRelayDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentRelayDecodeErrorZ CResult_PaymentRelayDecodeErrorZ_clone(const struct LDKCResult_PaymentRelayDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentRelayDecodeErrorZ_clone")] public static extern long CResult_PaymentRelayDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ CResult_PaymentConstraintsDecodeErrorZ_ok(struct LDKPaymentConstraints o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_ok")] public static extern long CResult_PaymentConstraintsDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ CResult_PaymentConstraintsDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_err")] public static extern long CResult_PaymentConstraintsDecodeErrorZ_err(long _e);
	// bool CResult_PaymentConstraintsDecodeErrorZ_is_ok(const struct LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_is_ok")] public static extern bool CResult_PaymentConstraintsDecodeErrorZ_is_ok(long _o);
	// void CResult_PaymentConstraintsDecodeErrorZ_free(struct LDKCResult_PaymentConstraintsDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_free")] public static extern void CResult_PaymentConstraintsDecodeErrorZ_free(long __res);
	// uint64_t CResult_PaymentConstraintsDecodeErrorZ_clone_ptr(LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_clone_ptr")] public static extern long CResult_PaymentConstraintsDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ CResult_PaymentConstraintsDecodeErrorZ_clone(const struct LDKCResult_PaymentConstraintsDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentConstraintsDecodeErrorZ_clone")] public static extern long CResult_PaymentConstraintsDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_PaymentContextDecodeErrorZ CResult_PaymentContextDecodeErrorZ_ok(struct LDKPaymentContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_ok")] public static extern long CResult_PaymentContextDecodeErrorZ_ok(long _o);
	// struct LDKCResult_PaymentContextDecodeErrorZ CResult_PaymentContextDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_err")] public static extern long CResult_PaymentContextDecodeErrorZ_err(long _e);
	// bool CResult_PaymentContextDecodeErrorZ_is_ok(const struct LDKCResult_PaymentContextDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_is_ok")] public static extern bool CResult_PaymentContextDecodeErrorZ_is_ok(long _o);
	// void CResult_PaymentContextDecodeErrorZ_free(struct LDKCResult_PaymentContextDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_free")] public static extern void CResult_PaymentContextDecodeErrorZ_free(long __res);
	// uint64_t CResult_PaymentContextDecodeErrorZ_clone_ptr(LDKCResult_PaymentContextDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_clone_ptr")] public static extern long CResult_PaymentContextDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_PaymentContextDecodeErrorZ CResult_PaymentContextDecodeErrorZ_clone(const struct LDKCResult_PaymentContextDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PaymentContextDecodeErrorZ_clone")] public static extern long CResult_PaymentContextDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_Bolt12OfferContextDecodeErrorZ CResult_Bolt12OfferContextDecodeErrorZ_ok(struct LDKBolt12OfferContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_ok")] public static extern long CResult_Bolt12OfferContextDecodeErrorZ_ok(long _o);
	// struct LDKCResult_Bolt12OfferContextDecodeErrorZ CResult_Bolt12OfferContextDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_err")] public static extern long CResult_Bolt12OfferContextDecodeErrorZ_err(long _e);
	// bool CResult_Bolt12OfferContextDecodeErrorZ_is_ok(const struct LDKCResult_Bolt12OfferContextDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_is_ok")] public static extern bool CResult_Bolt12OfferContextDecodeErrorZ_is_ok(long _o);
	// void CResult_Bolt12OfferContextDecodeErrorZ_free(struct LDKCResult_Bolt12OfferContextDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_free")] public static extern void CResult_Bolt12OfferContextDecodeErrorZ_free(long __res);
	// uint64_t CResult_Bolt12OfferContextDecodeErrorZ_clone_ptr(LDKCResult_Bolt12OfferContextDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_clone_ptr")] public static extern long CResult_Bolt12OfferContextDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt12OfferContextDecodeErrorZ CResult_Bolt12OfferContextDecodeErrorZ_clone(const struct LDKCResult_Bolt12OfferContextDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12OfferContextDecodeErrorZ_clone")] public static extern long CResult_Bolt12OfferContextDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_Bolt12RefundContextDecodeErrorZ CResult_Bolt12RefundContextDecodeErrorZ_ok(struct LDKBolt12RefundContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_ok")] public static extern long CResult_Bolt12RefundContextDecodeErrorZ_ok(long _o);
	// struct LDKCResult_Bolt12RefundContextDecodeErrorZ CResult_Bolt12RefundContextDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_err")] public static extern long CResult_Bolt12RefundContextDecodeErrorZ_err(long _e);
	// bool CResult_Bolt12RefundContextDecodeErrorZ_is_ok(const struct LDKCResult_Bolt12RefundContextDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_is_ok")] public static extern bool CResult_Bolt12RefundContextDecodeErrorZ_is_ok(long _o);
	// void CResult_Bolt12RefundContextDecodeErrorZ_free(struct LDKCResult_Bolt12RefundContextDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_free")] public static extern void CResult_Bolt12RefundContextDecodeErrorZ_free(long __res);
	// uint64_t CResult_Bolt12RefundContextDecodeErrorZ_clone_ptr(LDKCResult_Bolt12RefundContextDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_clone_ptr")] public static extern long CResult_Bolt12RefundContextDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_Bolt12RefundContextDecodeErrorZ CResult_Bolt12RefundContextDecodeErrorZ_clone(const struct LDKCResult_Bolt12RefundContextDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_Bolt12RefundContextDecodeErrorZ_clone")] public static extern long CResult_Bolt12RefundContextDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TxOutUtxoLookupErrorZ CResult_TxOutUtxoLookupErrorZ_ok(struct LDKTxOut o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_ok")] public static extern long CResult_TxOutUtxoLookupErrorZ_ok(long _o);
	// struct LDKCResult_TxOutUtxoLookupErrorZ CResult_TxOutUtxoLookupErrorZ_err(enum LDKUtxoLookupError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_err")] public static extern long CResult_TxOutUtxoLookupErrorZ_err(UtxoLookupError _e);
	// bool CResult_TxOutUtxoLookupErrorZ_is_ok(const struct LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_is_ok")] public static extern bool CResult_TxOutUtxoLookupErrorZ_is_ok(long _o);
	// void CResult_TxOutUtxoLookupErrorZ_free(struct LDKCResult_TxOutUtxoLookupErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_free")] public static extern void CResult_TxOutUtxoLookupErrorZ_free(long __res);
	// uint64_t CResult_TxOutUtxoLookupErrorZ_clone_ptr(LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_clone_ptr")] public static extern long CResult_TxOutUtxoLookupErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TxOutUtxoLookupErrorZ CResult_TxOutUtxoLookupErrorZ_clone(const struct LDKCResult_TxOutUtxoLookupErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TxOutUtxoLookupErrorZ_clone")] public static extern long CResult_TxOutUtxoLookupErrorZ_clone(long _orig);
	// struct LDKCResult_ResponderDecodeErrorZ CResult_ResponderDecodeErrorZ_ok(struct LDKResponder o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_ok")] public static extern long CResult_ResponderDecodeErrorZ_ok(long _o);
	// struct LDKCResult_ResponderDecodeErrorZ CResult_ResponderDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_err")] public static extern long CResult_ResponderDecodeErrorZ_err(long _e);
	// bool CResult_ResponderDecodeErrorZ_is_ok(const struct LDKCResult_ResponderDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_is_ok")] public static extern bool CResult_ResponderDecodeErrorZ_is_ok(long _o);
	// void CResult_ResponderDecodeErrorZ_free(struct LDKCResult_ResponderDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_free")] public static extern void CResult_ResponderDecodeErrorZ_free(long __res);
	// uint64_t CResult_ResponderDecodeErrorZ_clone_ptr(LDKCResult_ResponderDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_clone_ptr")] public static extern long CResult_ResponderDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_ResponderDecodeErrorZ CResult_ResponderDecodeErrorZ_clone(const struct LDKCResult_ResponderDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_ResponderDecodeErrorZ_clone")] public static extern long CResult_ResponderDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OnionMessagePathNoneZ CResult_OnionMessagePathNoneZ_ok(struct LDKOnionMessagePath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_ok")] public static extern long CResult_OnionMessagePathNoneZ_ok(long _o);
	// struct LDKCResult_OnionMessagePathNoneZ CResult_OnionMessagePathNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_err")] public static extern long CResult_OnionMessagePathNoneZ_err();
	// bool CResult_OnionMessagePathNoneZ_is_ok(const struct LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_is_ok")] public static extern bool CResult_OnionMessagePathNoneZ_is_ok(long _o);
	// void CResult_OnionMessagePathNoneZ_free(struct LDKCResult_OnionMessagePathNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_free")] public static extern void CResult_OnionMessagePathNoneZ_free(long __res);
	// uint64_t CResult_OnionMessagePathNoneZ_clone_ptr(LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_clone_ptr")] public static extern long CResult_OnionMessagePathNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_OnionMessagePathNoneZ CResult_OnionMessagePathNoneZ_clone(const struct LDKCResult_OnionMessagePathNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OnionMessagePathNoneZ_clone")] public static extern long CResult_OnionMessagePathNoneZ_clone(long _orig);
	// struct LDKCResult_CVec_BlindedMessagePathZNoneZ CResult_CVec_BlindedMessagePathZNoneZ_ok(struct LDKCVec_BlindedMessagePathZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_ok")] public static extern long CResult_CVec_BlindedMessagePathZNoneZ_ok(long _o);
	// struct LDKCResult_CVec_BlindedMessagePathZNoneZ CResult_CVec_BlindedMessagePathZNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_err")] public static extern long CResult_CVec_BlindedMessagePathZNoneZ_err();
	// bool CResult_CVec_BlindedMessagePathZNoneZ_is_ok(const struct LDKCResult_CVec_BlindedMessagePathZNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_is_ok")] public static extern bool CResult_CVec_BlindedMessagePathZNoneZ_is_ok(long _o);
	// void CResult_CVec_BlindedMessagePathZNoneZ_free(struct LDKCResult_CVec_BlindedMessagePathZNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_free")] public static extern void CResult_CVec_BlindedMessagePathZNoneZ_free(long __res);
	// uint64_t CResult_CVec_BlindedMessagePathZNoneZ_clone_ptr(LDKCResult_CVec_BlindedMessagePathZNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_clone_ptr")] public static extern long CResult_CVec_BlindedMessagePathZNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_CVec_BlindedMessagePathZNoneZ CResult_CVec_BlindedMessagePathZNoneZ_clone(const struct LDKCResult_CVec_BlindedMessagePathZNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_CVec_BlindedMessagePathZNoneZ_clone")] public static extern long CResult_CVec_BlindedMessagePathZNoneZ_clone(long _orig);
	// void CVec_MessageForwardNodeZ_free(struct LDKCVec_MessageForwardNodeZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_MessageForwardNodeZ_free")] public static extern void CVec_MessageForwardNodeZ_free(long __res);
	// struct LDKCOption_MessageContextZ COption_MessageContextZ_some(struct LDKMessageContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MessageContextZ_some")] public static extern long COption_MessageContextZ_some(long _o);
	// struct LDKCOption_MessageContextZ COption_MessageContextZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MessageContextZ_none")] public static extern long COption_MessageContextZ_none();
	// void COption_MessageContextZ_free(struct LDKCOption_MessageContextZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MessageContextZ_free")] public static extern void COption_MessageContextZ_free(long __res);
	// uint64_t COption_MessageContextZ_clone_ptr(LDKCOption_MessageContextZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MessageContextZ_clone_ptr")] public static extern long COption_MessageContextZ_clone_ptr(long _arg);
	// struct LDKCOption_MessageContextZ COption_MessageContextZ_clone(const struct LDKCOption_MessageContextZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_MessageContextZ_clone")] public static extern long COption_MessageContextZ_clone(long _orig);
	// uint64_t C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone_ptr(LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone_ptr")] public static extern long C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone_ptr(long _arg);
	// struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone(const struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone")] public static extern long C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_clone(long _orig);
	// struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_new(struct LDKPublicKey a, struct LDKOnionMessage b, struct LDKCOption_CVec_SocketAddressZZ c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_new")] public static extern long C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_new(long _a, long _b, long _c);
	// void C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_free(struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_free")] public static extern void C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ_free(long __res);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_ok(struct LDKC3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_ok")] public static extern long CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_ok(long _o);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_err(struct LDKSendError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_err")] public static extern long CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_err(long _e);
	// bool CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_is_ok(const struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_is_ok")] public static extern bool CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_is_ok(long _o);
	// void CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_free(struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_free")] public static extern void CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_free(long __res);
	// uint64_t CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_clone_ptr(LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_clone_ptr")] public static extern long CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_clone(const struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_clone")] public static extern long CResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ_clone(long _orig);
	// struct LDKCResult_PeeledOnionNoneZ CResult_PeeledOnionNoneZ_ok(struct LDKPeeledOnion o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_ok")] public static extern long CResult_PeeledOnionNoneZ_ok(long _o);
	// struct LDKCResult_PeeledOnionNoneZ CResult_PeeledOnionNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_err")] public static extern long CResult_PeeledOnionNoneZ_err();
	// bool CResult_PeeledOnionNoneZ_is_ok(const struct LDKCResult_PeeledOnionNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_is_ok")] public static extern bool CResult_PeeledOnionNoneZ_is_ok(long _o);
	// void CResult_PeeledOnionNoneZ_free(struct LDKCResult_PeeledOnionNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_free")] public static extern void CResult_PeeledOnionNoneZ_free(long __res);
	// uint64_t CResult_PeeledOnionNoneZ_clone_ptr(LDKCResult_PeeledOnionNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_clone_ptr")] public static extern long CResult_PeeledOnionNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_PeeledOnionNoneZ CResult_PeeledOnionNoneZ_clone(const struct LDKCResult_PeeledOnionNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_PeeledOnionNoneZ_clone")] public static extern long CResult_PeeledOnionNoneZ_clone(long _orig);
	// struct LDKCResult_SendSuccessSendErrorZ CResult_SendSuccessSendErrorZ_ok(struct LDKSendSuccess o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_ok")] public static extern long CResult_SendSuccessSendErrorZ_ok(long _o);
	// struct LDKCResult_SendSuccessSendErrorZ CResult_SendSuccessSendErrorZ_err(struct LDKSendError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_err")] public static extern long CResult_SendSuccessSendErrorZ_err(long _e);
	// bool CResult_SendSuccessSendErrorZ_is_ok(const struct LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_is_ok")] public static extern bool CResult_SendSuccessSendErrorZ_is_ok(long _o);
	// void CResult_SendSuccessSendErrorZ_free(struct LDKCResult_SendSuccessSendErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_free")] public static extern void CResult_SendSuccessSendErrorZ_free(long __res);
	// uint64_t CResult_SendSuccessSendErrorZ_clone_ptr(LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_clone_ptr")] public static extern long CResult_SendSuccessSendErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_SendSuccessSendErrorZ CResult_SendSuccessSendErrorZ_clone(const struct LDKCResult_SendSuccessSendErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_SendSuccessSendErrorZ_clone")] public static extern long CResult_SendSuccessSendErrorZ_clone(long _orig);
	// struct LDKCResult_NoneSendErrorZ CResult_NoneSendErrorZ_ok(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_ok")] public static extern long CResult_NoneSendErrorZ_ok();
	// struct LDKCResult_NoneSendErrorZ CResult_NoneSendErrorZ_err(struct LDKSendError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_err")] public static extern long CResult_NoneSendErrorZ_err(long _e);
	// bool CResult_NoneSendErrorZ_is_ok(const struct LDKCResult_NoneSendErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_is_ok")] public static extern bool CResult_NoneSendErrorZ_is_ok(long _o);
	// void CResult_NoneSendErrorZ_free(struct LDKCResult_NoneSendErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_free")] public static extern void CResult_NoneSendErrorZ_free(long __res);
	// uint64_t CResult_NoneSendErrorZ_clone_ptr(LDKCResult_NoneSendErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_clone_ptr")] public static extern long CResult_NoneSendErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_NoneSendErrorZ CResult_NoneSendErrorZ_clone(const struct LDKCResult_NoneSendErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_NoneSendErrorZ_clone")] public static extern long CResult_NoneSendErrorZ_clone(long _orig);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_ok(struct LDKBlindedHop o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_ok")] public static extern long CResult_BlindedHopDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_err")] public static extern long CResult_BlindedHopDecodeErrorZ_err(long _e);
	// bool CResult_BlindedHopDecodeErrorZ_is_ok(const struct LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedHopDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedHopDecodeErrorZ_free(struct LDKCResult_BlindedHopDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_free")] public static extern void CResult_BlindedHopDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedHopDecodeErrorZ_clone_ptr(LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedHopDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedHopDecodeErrorZ CResult_BlindedHopDecodeErrorZ_clone(const struct LDKCResult_BlindedHopDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedHopDecodeErrorZ_clone")] public static extern long CResult_BlindedHopDecodeErrorZ_clone(long _orig);
	// void CVec_PhantomRouteHintsZ_free(struct LDKCVec_PhantomRouteHintsZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_PhantomRouteHintsZ_free")] public static extern void CVec_PhantomRouteHintsZ_free(long __res);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ CResult_InvoiceErrorDecodeErrorZ_ok(struct LDKInvoiceError o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_ok")] public static extern long CResult_InvoiceErrorDecodeErrorZ_ok(long _o);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ CResult_InvoiceErrorDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_err")] public static extern long CResult_InvoiceErrorDecodeErrorZ_err(long _e);
	// bool CResult_InvoiceErrorDecodeErrorZ_is_ok(const struct LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_is_ok")] public static extern bool CResult_InvoiceErrorDecodeErrorZ_is_ok(long _o);
	// void CResult_InvoiceErrorDecodeErrorZ_free(struct LDKCResult_InvoiceErrorDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_free")] public static extern void CResult_InvoiceErrorDecodeErrorZ_free(long __res);
	// uint64_t CResult_InvoiceErrorDecodeErrorZ_clone_ptr(LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_clone_ptr")] public static extern long CResult_InvoiceErrorDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ CResult_InvoiceErrorDecodeErrorZ_clone(const struct LDKCResult_InvoiceErrorDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_InvoiceErrorDecodeErrorZ_clone")] public static extern long CResult_InvoiceErrorDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_TrackedSpendableOutputDecodeErrorZ CResult_TrackedSpendableOutputDecodeErrorZ_ok(struct LDKTrackedSpendableOutput o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_ok")] public static extern long CResult_TrackedSpendableOutputDecodeErrorZ_ok(long _o);
	// struct LDKCResult_TrackedSpendableOutputDecodeErrorZ CResult_TrackedSpendableOutputDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_err")] public static extern long CResult_TrackedSpendableOutputDecodeErrorZ_err(long _e);
	// bool CResult_TrackedSpendableOutputDecodeErrorZ_is_ok(const struct LDKCResult_TrackedSpendableOutputDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_is_ok")] public static extern bool CResult_TrackedSpendableOutputDecodeErrorZ_is_ok(long _o);
	// void CResult_TrackedSpendableOutputDecodeErrorZ_free(struct LDKCResult_TrackedSpendableOutputDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_free")] public static extern void CResult_TrackedSpendableOutputDecodeErrorZ_free(long __res);
	// uint64_t CResult_TrackedSpendableOutputDecodeErrorZ_clone_ptr(LDKCResult_TrackedSpendableOutputDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_clone_ptr")] public static extern long CResult_TrackedSpendableOutputDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_TrackedSpendableOutputDecodeErrorZ CResult_TrackedSpendableOutputDecodeErrorZ_clone(const struct LDKCResult_TrackedSpendableOutputDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_TrackedSpendableOutputDecodeErrorZ_clone")] public static extern long CResult_TrackedSpendableOutputDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OutputSpendStatusDecodeErrorZ CResult_OutputSpendStatusDecodeErrorZ_ok(struct LDKOutputSpendStatus o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_ok")] public static extern long CResult_OutputSpendStatusDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OutputSpendStatusDecodeErrorZ CResult_OutputSpendStatusDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_err")] public static extern long CResult_OutputSpendStatusDecodeErrorZ_err(long _e);
	// bool CResult_OutputSpendStatusDecodeErrorZ_is_ok(const struct LDKCResult_OutputSpendStatusDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_is_ok")] public static extern bool CResult_OutputSpendStatusDecodeErrorZ_is_ok(long _o);
	// void CResult_OutputSpendStatusDecodeErrorZ_free(struct LDKCResult_OutputSpendStatusDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_free")] public static extern void CResult_OutputSpendStatusDecodeErrorZ_free(long __res);
	// uint64_t CResult_OutputSpendStatusDecodeErrorZ_clone_ptr(LDKCResult_OutputSpendStatusDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_clone_ptr")] public static extern long CResult_OutputSpendStatusDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OutputSpendStatusDecodeErrorZ CResult_OutputSpendStatusDecodeErrorZ_clone(const struct LDKCResult_OutputSpendStatusDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSpendStatusDecodeErrorZ_clone")] public static extern long CResult_OutputSpendStatusDecodeErrorZ_clone(long _orig);
	// struct LDKCOption_FilterZ COption_FilterZ_some(struct LDKFilter o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_some")] public static extern long COption_FilterZ_some(long _o);
	// struct LDKCOption_FilterZ COption_FilterZ_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_none")] public static extern long COption_FilterZ_none();
	// void COption_FilterZ_free(struct LDKCOption_FilterZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_COption_FilterZ_free")] public static extern void COption_FilterZ_free(long __res);
	// void CVec_TrackedSpendableOutputZ_free(struct LDKCVec_TrackedSpendableOutputZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_TrackedSpendableOutputZ_free")] public static extern void CVec_TrackedSpendableOutputZ_free(long __res);
	// struct LDKCResult_OutputSweeperDecodeErrorZ CResult_OutputSweeperDecodeErrorZ_ok(struct LDKOutputSweeper o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSweeperDecodeErrorZ_ok")] public static extern long CResult_OutputSweeperDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OutputSweeperDecodeErrorZ CResult_OutputSweeperDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSweeperDecodeErrorZ_err")] public static extern long CResult_OutputSweeperDecodeErrorZ_err(long _e);
	// bool CResult_OutputSweeperDecodeErrorZ_is_ok(const struct LDKCResult_OutputSweeperDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSweeperDecodeErrorZ_is_ok")] public static extern bool CResult_OutputSweeperDecodeErrorZ_is_ok(long _o);
	// void CResult_OutputSweeperDecodeErrorZ_free(struct LDKCResult_OutputSweeperDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OutputSweeperDecodeErrorZ_free")] public static extern void CResult_OutputSweeperDecodeErrorZ_free(long __res);
	// struct LDKC2Tuple_BestBlockOutputSweeperZ C2Tuple_BestBlockOutputSweeperZ_new(struct LDKBestBlock a, struct LDKOutputSweeper b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BestBlockOutputSweeperZ_new")] public static extern long C2Tuple_BestBlockOutputSweeperZ_new(long _a, long _b);
	// void C2Tuple_BestBlockOutputSweeperZ_free(struct LDKC2Tuple_BestBlockOutputSweeperZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BestBlockOutputSweeperZ_free")] public static extern void C2Tuple_BestBlockOutputSweeperZ_free(long __res);
	// struct LDKCResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_ok(struct LDKC2Tuple_BestBlockOutputSweeperZ o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_ok")] public static extern long CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_ok(long _o);
	// struct LDKCResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_err")] public static extern long CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_err(long _e);
	// bool CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_is_ok(const struct LDKCResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_is_ok")] public static extern bool CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_is_ok(long _o);
	// void CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_free(struct LDKCResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_free")] public static extern void CResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ_free(long __res);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ CResult_DelayedPaymentBasepointDecodeErrorZ_ok(struct LDKDelayedPaymentBasepoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_ok")] public static extern long CResult_DelayedPaymentBasepointDecodeErrorZ_ok(long _o);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ CResult_DelayedPaymentBasepointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_err")] public static extern long CResult_DelayedPaymentBasepointDecodeErrorZ_err(long _e);
	// bool CResult_DelayedPaymentBasepointDecodeErrorZ_is_ok(const struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_is_ok")] public static extern bool CResult_DelayedPaymentBasepointDecodeErrorZ_is_ok(long _o);
	// void CResult_DelayedPaymentBasepointDecodeErrorZ_free(struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_free")] public static extern void CResult_DelayedPaymentBasepointDecodeErrorZ_free(long __res);
	// uint64_t CResult_DelayedPaymentBasepointDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_clone_ptr")] public static extern long CResult_DelayedPaymentBasepointDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ CResult_DelayedPaymentBasepointDecodeErrorZ_clone(const struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentBasepointDecodeErrorZ_clone")] public static extern long CResult_DelayedPaymentBasepointDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ CResult_DelayedPaymentKeyDecodeErrorZ_ok(struct LDKDelayedPaymentKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_ok")] public static extern long CResult_DelayedPaymentKeyDecodeErrorZ_ok(long _o);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ CResult_DelayedPaymentKeyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_err")] public static extern long CResult_DelayedPaymentKeyDecodeErrorZ_err(long _e);
	// bool CResult_DelayedPaymentKeyDecodeErrorZ_is_ok(const struct LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_is_ok")] public static extern bool CResult_DelayedPaymentKeyDecodeErrorZ_is_ok(long _o);
	// void CResult_DelayedPaymentKeyDecodeErrorZ_free(struct LDKCResult_DelayedPaymentKeyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_free")] public static extern void CResult_DelayedPaymentKeyDecodeErrorZ_free(long __res);
	// uint64_t CResult_DelayedPaymentKeyDecodeErrorZ_clone_ptr(LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_clone_ptr")] public static extern long CResult_DelayedPaymentKeyDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ CResult_DelayedPaymentKeyDecodeErrorZ_clone(const struct LDKCResult_DelayedPaymentKeyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DelayedPaymentKeyDecodeErrorZ_clone")] public static extern long CResult_DelayedPaymentKeyDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ CResult_HtlcBasepointDecodeErrorZ_ok(struct LDKHtlcBasepoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_ok")] public static extern long CResult_HtlcBasepointDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ CResult_HtlcBasepointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_err")] public static extern long CResult_HtlcBasepointDecodeErrorZ_err(long _e);
	// bool CResult_HtlcBasepointDecodeErrorZ_is_ok(const struct LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_is_ok")] public static extern bool CResult_HtlcBasepointDecodeErrorZ_is_ok(long _o);
	// void CResult_HtlcBasepointDecodeErrorZ_free(struct LDKCResult_HtlcBasepointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_free")] public static extern void CResult_HtlcBasepointDecodeErrorZ_free(long __res);
	// uint64_t CResult_HtlcBasepointDecodeErrorZ_clone_ptr(LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_clone_ptr")] public static extern long CResult_HtlcBasepointDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ CResult_HtlcBasepointDecodeErrorZ_clone(const struct LDKCResult_HtlcBasepointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcBasepointDecodeErrorZ_clone")] public static extern long CResult_HtlcBasepointDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_HtlcKeyDecodeErrorZ CResult_HtlcKeyDecodeErrorZ_ok(struct LDKHtlcKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_ok")] public static extern long CResult_HtlcKeyDecodeErrorZ_ok(long _o);
	// struct LDKCResult_HtlcKeyDecodeErrorZ CResult_HtlcKeyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_err")] public static extern long CResult_HtlcKeyDecodeErrorZ_err(long _e);
	// bool CResult_HtlcKeyDecodeErrorZ_is_ok(const struct LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_is_ok")] public static extern bool CResult_HtlcKeyDecodeErrorZ_is_ok(long _o);
	// void CResult_HtlcKeyDecodeErrorZ_free(struct LDKCResult_HtlcKeyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_free")] public static extern void CResult_HtlcKeyDecodeErrorZ_free(long __res);
	// uint64_t CResult_HtlcKeyDecodeErrorZ_clone_ptr(LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_clone_ptr")] public static extern long CResult_HtlcKeyDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_HtlcKeyDecodeErrorZ CResult_HtlcKeyDecodeErrorZ_clone(const struct LDKCResult_HtlcKeyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_HtlcKeyDecodeErrorZ_clone")] public static extern long CResult_HtlcKeyDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ CResult_RevocationBasepointDecodeErrorZ_ok(struct LDKRevocationBasepoint o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_ok")] public static extern long CResult_RevocationBasepointDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ CResult_RevocationBasepointDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_err")] public static extern long CResult_RevocationBasepointDecodeErrorZ_err(long _e);
	// bool CResult_RevocationBasepointDecodeErrorZ_is_ok(const struct LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_is_ok")] public static extern bool CResult_RevocationBasepointDecodeErrorZ_is_ok(long _o);
	// void CResult_RevocationBasepointDecodeErrorZ_free(struct LDKCResult_RevocationBasepointDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_free")] public static extern void CResult_RevocationBasepointDecodeErrorZ_free(long __res);
	// uint64_t CResult_RevocationBasepointDecodeErrorZ_clone_ptr(LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_clone_ptr")] public static extern long CResult_RevocationBasepointDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ CResult_RevocationBasepointDecodeErrorZ_clone(const struct LDKCResult_RevocationBasepointDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationBasepointDecodeErrorZ_clone")] public static extern long CResult_RevocationBasepointDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_RevocationKeyDecodeErrorZ CResult_RevocationKeyDecodeErrorZ_ok(struct LDKRevocationKey o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_ok")] public static extern long CResult_RevocationKeyDecodeErrorZ_ok(long _o);
	// struct LDKCResult_RevocationKeyDecodeErrorZ CResult_RevocationKeyDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_err")] public static extern long CResult_RevocationKeyDecodeErrorZ_err(long _e);
	// bool CResult_RevocationKeyDecodeErrorZ_is_ok(const struct LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_is_ok")] public static extern bool CResult_RevocationKeyDecodeErrorZ_is_ok(long _o);
	// void CResult_RevocationKeyDecodeErrorZ_free(struct LDKCResult_RevocationKeyDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_free")] public static extern void CResult_RevocationKeyDecodeErrorZ_free(long __res);
	// uint64_t CResult_RevocationKeyDecodeErrorZ_clone_ptr(LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_clone_ptr")] public static extern long CResult_RevocationKeyDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_RevocationKeyDecodeErrorZ CResult_RevocationKeyDecodeErrorZ_clone(const struct LDKCResult_RevocationKeyDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_RevocationKeyDecodeErrorZ_clone")] public static extern long CResult_RevocationKeyDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_LockedChannelMonitorNoneZ CResult_LockedChannelMonitorNoneZ_ok(struct LDKLockedChannelMonitor o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_ok")] public static extern long CResult_LockedChannelMonitorNoneZ_ok(long _o);
	// struct LDKCResult_LockedChannelMonitorNoneZ CResult_LockedChannelMonitorNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_err")] public static extern long CResult_LockedChannelMonitorNoneZ_err();
	// bool CResult_LockedChannelMonitorNoneZ_is_ok(const struct LDKCResult_LockedChannelMonitorNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_is_ok")] public static extern bool CResult_LockedChannelMonitorNoneZ_is_ok(long _o);
	// void CResult_LockedChannelMonitorNoneZ_free(struct LDKCResult_LockedChannelMonitorNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_LockedChannelMonitorNoneZ_free")] public static extern void CResult_LockedChannelMonitorNoneZ_free(long __res);
	// uint64_t C2Tuple_OutPointChannelIdZ_clone_ptr(LDKC2Tuple_OutPointChannelIdZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointChannelIdZ_clone_ptr")] public static extern long C2Tuple_OutPointChannelIdZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OutPointChannelIdZ C2Tuple_OutPointChannelIdZ_clone(const struct LDKC2Tuple_OutPointChannelIdZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointChannelIdZ_clone")] public static extern long C2Tuple_OutPointChannelIdZ_clone(long _orig);
	// struct LDKC2Tuple_OutPointChannelIdZ C2Tuple_OutPointChannelIdZ_new(struct LDKOutPoint a, struct LDKChannelId b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointChannelIdZ_new")] public static extern long C2Tuple_OutPointChannelIdZ_new(long _a, long _b);
	// void C2Tuple_OutPointChannelIdZ_free(struct LDKC2Tuple_OutPointChannelIdZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointChannelIdZ_free")] public static extern void C2Tuple_OutPointChannelIdZ_free(long __res);
	// void CVec_C2Tuple_OutPointChannelIdZZ_free(struct LDKCVec_C2Tuple_OutPointChannelIdZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_OutPointChannelIdZZ_free")] public static extern void CVec_C2Tuple_OutPointChannelIdZZ_free(long __res);
	// uint64_t C2Tuple_OutPointCVec_u64ZZ_clone_ptr(LDKC2Tuple_OutPointCVec_u64ZZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u64ZZ_clone_ptr")] public static extern long C2Tuple_OutPointCVec_u64ZZ_clone_ptr(long _arg);
	// struct LDKC2Tuple_OutPointCVec_u64ZZ C2Tuple_OutPointCVec_u64ZZ_clone(const struct LDKC2Tuple_OutPointCVec_u64ZZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u64ZZ_clone")] public static extern long C2Tuple_OutPointCVec_u64ZZ_clone(long _orig);
	// struct LDKC2Tuple_OutPointCVec_u64ZZ C2Tuple_OutPointCVec_u64ZZ_new(struct LDKOutPoint a, struct LDKCVec_u64Z b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u64ZZ_new")] public static extern long C2Tuple_OutPointCVec_u64ZZ_new(long _a, long _b);
	// void C2Tuple_OutPointCVec_u64ZZ_free(struct LDKC2Tuple_OutPointCVec_u64ZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_OutPointCVec_u64ZZ_free")] public static extern void C2Tuple_OutPointCVec_u64ZZ_free(long __res);
	// void CVec_C2Tuple_OutPointCVec_u64ZZZ_free(struct LDKCVec_C2Tuple_OutPointCVec_u64ZZZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CVec_C2Tuple_OutPointCVec_u64ZZZ_free")] public static extern void CVec_C2Tuple_OutPointCVec_u64ZZZ_free(long __res);
	// struct LDKCResult_BlindedMessagePathDecodeErrorZ CResult_BlindedMessagePathDecodeErrorZ_ok(struct LDKBlindedMessagePath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_ok")] public static extern long CResult_BlindedMessagePathDecodeErrorZ_ok(long _o);
	// struct LDKCResult_BlindedMessagePathDecodeErrorZ CResult_BlindedMessagePathDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_err")] public static extern long CResult_BlindedMessagePathDecodeErrorZ_err(long _e);
	// bool CResult_BlindedMessagePathDecodeErrorZ_is_ok(const struct LDKCResult_BlindedMessagePathDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_is_ok")] public static extern bool CResult_BlindedMessagePathDecodeErrorZ_is_ok(long _o);
	// void CResult_BlindedMessagePathDecodeErrorZ_free(struct LDKCResult_BlindedMessagePathDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_free")] public static extern void CResult_BlindedMessagePathDecodeErrorZ_free(long __res);
	// uint64_t CResult_BlindedMessagePathDecodeErrorZ_clone_ptr(LDKCResult_BlindedMessagePathDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_clone_ptr")] public static extern long CResult_BlindedMessagePathDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedMessagePathDecodeErrorZ CResult_BlindedMessagePathDecodeErrorZ_clone(const struct LDKCResult_BlindedMessagePathDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathDecodeErrorZ_clone")] public static extern long CResult_BlindedMessagePathDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_BlindedMessagePathNoneZ CResult_BlindedMessagePathNoneZ_ok(struct LDKBlindedMessagePath o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_ok")] public static extern long CResult_BlindedMessagePathNoneZ_ok(long _o);
	// struct LDKCResult_BlindedMessagePathNoneZ CResult_BlindedMessagePathNoneZ_err(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_err")] public static extern long CResult_BlindedMessagePathNoneZ_err();
	// bool CResult_BlindedMessagePathNoneZ_is_ok(const struct LDKCResult_BlindedMessagePathNoneZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_is_ok")] public static extern bool CResult_BlindedMessagePathNoneZ_is_ok(long _o);
	// void CResult_BlindedMessagePathNoneZ_free(struct LDKCResult_BlindedMessagePathNoneZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_free")] public static extern void CResult_BlindedMessagePathNoneZ_free(long __res);
	// uint64_t CResult_BlindedMessagePathNoneZ_clone_ptr(LDKCResult_BlindedMessagePathNoneZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_clone_ptr")] public static extern long CResult_BlindedMessagePathNoneZ_clone_ptr(long _arg);
	// struct LDKCResult_BlindedMessagePathNoneZ CResult_BlindedMessagePathNoneZ_clone(const struct LDKCResult_BlindedMessagePathNoneZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_BlindedMessagePathNoneZ_clone")] public static extern long CResult_BlindedMessagePathNoneZ_clone(long _orig);
	// struct LDKCResult_MessageContextDecodeErrorZ CResult_MessageContextDecodeErrorZ_ok(struct LDKMessageContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_ok")] public static extern long CResult_MessageContextDecodeErrorZ_ok(long _o);
	// struct LDKCResult_MessageContextDecodeErrorZ CResult_MessageContextDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_err")] public static extern long CResult_MessageContextDecodeErrorZ_err(long _e);
	// bool CResult_MessageContextDecodeErrorZ_is_ok(const struct LDKCResult_MessageContextDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_is_ok")] public static extern bool CResult_MessageContextDecodeErrorZ_is_ok(long _o);
	// void CResult_MessageContextDecodeErrorZ_free(struct LDKCResult_MessageContextDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_free")] public static extern void CResult_MessageContextDecodeErrorZ_free(long __res);
	// uint64_t CResult_MessageContextDecodeErrorZ_clone_ptr(LDKCResult_MessageContextDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_clone_ptr")] public static extern long CResult_MessageContextDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_MessageContextDecodeErrorZ CResult_MessageContextDecodeErrorZ_clone(const struct LDKCResult_MessageContextDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_MessageContextDecodeErrorZ_clone")] public static extern long CResult_MessageContextDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_OffersContextDecodeErrorZ CResult_OffersContextDecodeErrorZ_ok(struct LDKOffersContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_ok")] public static extern long CResult_OffersContextDecodeErrorZ_ok(long _o);
	// struct LDKCResult_OffersContextDecodeErrorZ CResult_OffersContextDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_err")] public static extern long CResult_OffersContextDecodeErrorZ_err(long _e);
	// bool CResult_OffersContextDecodeErrorZ_is_ok(const struct LDKCResult_OffersContextDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_is_ok")] public static extern bool CResult_OffersContextDecodeErrorZ_is_ok(long _o);
	// void CResult_OffersContextDecodeErrorZ_free(struct LDKCResult_OffersContextDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_free")] public static extern void CResult_OffersContextDecodeErrorZ_free(long __res);
	// uint64_t CResult_OffersContextDecodeErrorZ_clone_ptr(LDKCResult_OffersContextDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_clone_ptr")] public static extern long CResult_OffersContextDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_OffersContextDecodeErrorZ CResult_OffersContextDecodeErrorZ_clone(const struct LDKCResult_OffersContextDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_OffersContextDecodeErrorZ_clone")] public static extern long CResult_OffersContextDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_AsyncPaymentsContextDecodeErrorZ CResult_AsyncPaymentsContextDecodeErrorZ_ok(struct LDKAsyncPaymentsContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_ok")] public static extern long CResult_AsyncPaymentsContextDecodeErrorZ_ok(long _o);
	// struct LDKCResult_AsyncPaymentsContextDecodeErrorZ CResult_AsyncPaymentsContextDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_err")] public static extern long CResult_AsyncPaymentsContextDecodeErrorZ_err(long _e);
	// bool CResult_AsyncPaymentsContextDecodeErrorZ_is_ok(const struct LDKCResult_AsyncPaymentsContextDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_is_ok")] public static extern bool CResult_AsyncPaymentsContextDecodeErrorZ_is_ok(long _o);
	// void CResult_AsyncPaymentsContextDecodeErrorZ_free(struct LDKCResult_AsyncPaymentsContextDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_free")] public static extern void CResult_AsyncPaymentsContextDecodeErrorZ_free(long __res);
	// uint64_t CResult_AsyncPaymentsContextDecodeErrorZ_clone_ptr(LDKCResult_AsyncPaymentsContextDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_clone_ptr")] public static extern long CResult_AsyncPaymentsContextDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_AsyncPaymentsContextDecodeErrorZ CResult_AsyncPaymentsContextDecodeErrorZ_clone(const struct LDKCResult_AsyncPaymentsContextDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_AsyncPaymentsContextDecodeErrorZ_clone")] public static extern long CResult_AsyncPaymentsContextDecodeErrorZ_clone(long _orig);
	// struct LDKCResult_DNSResolverContextDecodeErrorZ CResult_DNSResolverContextDecodeErrorZ_ok(struct LDKDNSResolverContext o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_ok")] public static extern long CResult_DNSResolverContextDecodeErrorZ_ok(long _o);
	// struct LDKCResult_DNSResolverContextDecodeErrorZ CResult_DNSResolverContextDecodeErrorZ_err(struct LDKDecodeError e);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_err")] public static extern long CResult_DNSResolverContextDecodeErrorZ_err(long _e);
	// bool CResult_DNSResolverContextDecodeErrorZ_is_ok(const struct LDKCResult_DNSResolverContextDecodeErrorZ *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_is_ok")] public static extern bool CResult_DNSResolverContextDecodeErrorZ_is_ok(long _o);
	// void CResult_DNSResolverContextDecodeErrorZ_free(struct LDKCResult_DNSResolverContextDecodeErrorZ _res);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_free")] public static extern void CResult_DNSResolverContextDecodeErrorZ_free(long __res);
	// uint64_t CResult_DNSResolverContextDecodeErrorZ_clone_ptr(LDKCResult_DNSResolverContextDecodeErrorZ *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_clone_ptr")] public static extern long CResult_DNSResolverContextDecodeErrorZ_clone_ptr(long _arg);
	// struct LDKCResult_DNSResolverContextDecodeErrorZ CResult_DNSResolverContextDecodeErrorZ_clone(const struct LDKCResult_DNSResolverContextDecodeErrorZ *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CResult_DNSResolverContextDecodeErrorZ_clone")] public static extern long CResult_DNSResolverContextDecodeErrorZ_clone(long _orig);
	// void APIError_free(struct LDKAPIError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_free")] public static extern void APIError_free(long _this_ptr);
	// uint64_t APIError_clone_ptr(LDKAPIError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_clone_ptr")] public static extern long APIError_clone_ptr(long _arg);
	// struct LDKAPIError APIError_clone(const struct LDKAPIError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_clone")] public static extern long APIError_clone(long _orig);
	// struct LDKAPIError APIError_apimisuse_error(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_apimisuse_error")] public static extern long APIError_apimisuse_error(long _err);
	// struct LDKAPIError APIError_fee_rate_too_high(struct LDKStr err, uint32_t feerate);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_fee_rate_too_high")] public static extern long APIError_fee_rate_too_high(long _err, int _feerate);
	// struct LDKAPIError APIError_invalid_route(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_invalid_route")] public static extern long APIError_invalid_route(long _err);
	// struct LDKAPIError APIError_channel_unavailable(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_channel_unavailable")] public static extern long APIError_channel_unavailable(long _err);
	// struct LDKAPIError APIError_monitor_update_in_progress(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_monitor_update_in_progress")] public static extern long APIError_monitor_update_in_progress();
	// struct LDKAPIError APIError_incompatible_shutdown_script(struct LDKShutdownScript script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_incompatible_shutdown_script")] public static extern long APIError_incompatible_shutdown_script(long _script);
	// bool APIError_eq(const struct LDKAPIError *NONNULL_PTR a, const struct LDKAPIError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_eq")] public static extern bool APIError_eq(long _a, long _b);
	// struct LDKCVec_u8Z APIError_write(const struct LDKAPIError *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_write")] public static extern long APIError_write(long _obj);
	// struct LDKCResult_COption_APIErrorZDecodeErrorZ APIError_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_APIError_read")] public static extern long APIError_read(long _ser);
	// void BigSize_free(struct LDKBigSize this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_free")] public static extern void BigSize_free(long _this_obj);
	// uint64_t BigSize_get_a(const struct LDKBigSize *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_get_a")] public static extern long BigSize_get_a(long _this_ptr);
	// void BigSize_set_a(struct LDKBigSize *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_set_a")] public static extern void BigSize_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBigSize BigSize_new(uint64_t a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_new")] public static extern long BigSize_new(long _a_arg);
	// uint64_t BigSize_clone_ptr(LDKBigSize *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_clone_ptr")] public static extern long BigSize_clone_ptr(long _arg);
	// struct LDKBigSize BigSize_clone(const struct LDKBigSize *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_clone")] public static extern long BigSize_clone(long _orig);
	// uint64_t BigSize_hash(const struct LDKBigSize *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_hash")] public static extern long BigSize_hash(long _o);
	// bool BigSize_eq(const struct LDKBigSize *NONNULL_PTR a, const struct LDKBigSize *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_eq")] public static extern bool BigSize_eq(long _a, long _b);
	// struct LDKCVec_u8Z BigSize_write(const struct LDKBigSize *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_write")] public static extern long BigSize_write(long _obj);
	// struct LDKCResult_BigSizeDecodeErrorZ BigSize_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BigSize_read")] public static extern long BigSize_read(long _ser);
	// struct LDKCVec_u8Z UntrustedString_write(const struct LDKUntrustedString *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_write")] public static extern long UntrustedString_write(long _obj);
	// struct LDKCResult_UntrustedStringDecodeErrorZ UntrustedString_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_read")] public static extern long UntrustedString_read(long _ser);
	// void Hostname_free(struct LDKHostname this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_free")] public static extern void Hostname_free(long _this_obj);
	// uint64_t Hostname_clone_ptr(LDKHostname *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_clone_ptr")] public static extern long Hostname_clone_ptr(long _arg);
	// struct LDKHostname Hostname_clone(const struct LDKHostname *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_clone")] public static extern long Hostname_clone(long _orig);
	// uint64_t Hostname_hash(const struct LDKHostname *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_hash")] public static extern long Hostname_hash(long _o);
	// bool Hostname_eq(const struct LDKHostname *NONNULL_PTR a, const struct LDKHostname *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_eq")] public static extern bool Hostname_eq(long _a, long _b);
	// MUST_USE_RES uint8_t Hostname_len(const struct LDKHostname *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_len")] public static extern byte Hostname_len(long _this_arg);
	// struct LDKStr Hostname_to_str(const struct LDKHostname *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_to_str")] public static extern long Hostname_to_str(long _o);
	// struct LDKCVec_u8Z Hostname_write(const struct LDKHostname *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_write")] public static extern long Hostname_write(long _obj);
	// struct LDKCResult_HostnameDecodeErrorZ Hostname_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Hostname_read")] public static extern long Hostname_read(long _ser);
	// void TransactionU16LenLimited_free(struct LDKTransactionU16LenLimited this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_free")] public static extern void TransactionU16LenLimited_free(long _this_obj);
	// uint64_t TransactionU16LenLimited_clone_ptr(LDKTransactionU16LenLimited *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_clone_ptr")] public static extern long TransactionU16LenLimited_clone_ptr(long _arg);
	// struct LDKTransactionU16LenLimited TransactionU16LenLimited_clone(const struct LDKTransactionU16LenLimited *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_clone")] public static extern long TransactionU16LenLimited_clone(long _orig);
	// uint64_t TransactionU16LenLimited_hash(const struct LDKTransactionU16LenLimited *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_hash")] public static extern long TransactionU16LenLimited_hash(long _o);
	// bool TransactionU16LenLimited_eq(const struct LDKTransactionU16LenLimited *NONNULL_PTR a, const struct LDKTransactionU16LenLimited *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_eq")] public static extern bool TransactionU16LenLimited_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCResult_TransactionU16LenLimitedNoneZ TransactionU16LenLimited_new(struct LDKTransaction transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_new")] public static extern long TransactionU16LenLimited_new(long _transaction);
	// MUST_USE_RES struct LDKTransaction TransactionU16LenLimited_into_transaction(struct LDKTransactionU16LenLimited this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_into_transaction")] public static extern long TransactionU16LenLimited_into_transaction(long _this_arg);
	// MUST_USE_RES struct LDKTransaction TransactionU16LenLimited_as_transaction(const struct LDKTransactionU16LenLimited *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_as_transaction")] public static extern long TransactionU16LenLimited_as_transaction(long _this_arg);
	// struct LDKCVec_u8Z TransactionU16LenLimited_write(const struct LDKTransactionU16LenLimited *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_write")] public static extern long TransactionU16LenLimited_write(long _obj);
	// struct LDKCResult_TransactionU16LenLimitedDecodeErrorZ TransactionU16LenLimited_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TransactionU16LenLimited_read")] public static extern long TransactionU16LenLimited_read(long _ser);
	// struct LDKStr sign(struct LDKu8slice msg, const uint8_t (*sk)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_sign")] public static extern long sign(long _msg, long _sk);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ recover_pk(struct LDKu8slice msg, struct LDKStr sig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_recover_pk")] public static extern long recover_pk(long _msg, long _sig);
	// bool verify(struct LDKu8slice msg, struct LDKStr sig, struct LDKPublicKey pk);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_verify")] public static extern bool verify(long _msg, long _sig, long _pk);
	// void KVStore_free(struct LDKKVStore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KVStore_free")] public static extern void KVStore_free(long _this_ptr);
	// void MigratableKVStore_free(struct LDKMigratableKVStore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MigratableKVStore_free")] public static extern void MigratableKVStore_free(long _this_ptr);
	// struct LDKCResult_NoneIOErrorZ migrate_kv_store_data(struct LDKMigratableKVStore *NONNULL_PTR source_store, struct LDKMigratableKVStore *NONNULL_PTR target_store);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_migrate_kv_store_data")] public static extern long migrate_kv_store_data(long _source_store, long _target_store);
	// void Persister_free(struct LDKPersister this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persister_free")] public static extern void Persister_free(long _this_ptr);
	// struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ read_channel_monitors(struct LDKKVStore kv_store, struct LDKEntropySource entropy_source, struct LDKSignerProvider signer_provider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_read_channel_monitors")] public static extern long read_channel_monitors(long _kv_store, long _entropy_source, long _signer_provider);
	// void MonitorUpdatingPersister_free(struct LDKMonitorUpdatingPersister this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_free")] public static extern void MonitorUpdatingPersister_free(long _this_obj);
	// MUST_USE_RES struct LDKMonitorUpdatingPersister MonitorUpdatingPersister_new(struct LDKKVStore kv_store, struct LDKLogger logger, uint64_t maximum_pending_updates, struct LDKEntropySource entropy_source, struct LDKSignerProvider signer_provider, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_new")] public static extern long MonitorUpdatingPersister_new(long _kv_store, long _logger, long _maximum_pending_updates, long _entropy_source, long _signer_provider, long _broadcaster, long _fee_estimator);
	// MUST_USE_RES struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesChannelMonitorZZIOErrorZ MonitorUpdatingPersister_read_all_channel_monitors_with_updates(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_read_all_channel_monitors_with_updates")] public static extern long MonitorUpdatingPersister_read_all_channel_monitors_with_updates(long _this_arg);
	// MUST_USE_RES struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZIOErrorZ MonitorUpdatingPersister_read_channel_monitor_with_updates(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg, struct LDKStr monitor_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_read_channel_monitor_with_updates")] public static extern long MonitorUpdatingPersister_read_channel_monitor_with_updates(long _this_arg, long _monitor_key);
	// MUST_USE_RES struct LDKCResult_NoneIOErrorZ MonitorUpdatingPersister_cleanup_stale_updates(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg, bool lazy);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_cleanup_stale_updates")] public static extern long MonitorUpdatingPersister_cleanup_stale_updates(long _this_arg, bool _lazy);
	// struct LDKPersist MonitorUpdatingPersister_as_Persist(const struct LDKMonitorUpdatingPersister *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorUpdatingPersister_as_Persist")] public static extern long MonitorUpdatingPersister_as_Persist(long _this_arg);
	// void MonitorName_free(struct LDKMonitorName this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorName_free")] public static extern void MonitorName_free(long _this_obj);
	// MUST_USE_RES struct LDKCResult_MonitorNameIOErrorZ MonitorName_new(struct LDKStr name);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorName_new")] public static extern long MonitorName_new(long _name);
	// MUST_USE_RES struct LDKStr MonitorName_as_str(const struct LDKMonitorName *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorName_as_str")] public static extern long MonitorName_as_str(long _this_arg);
	// void UpdateName_free(struct LDKUpdateName this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateName_free")] public static extern void UpdateName_free(long _this_obj);
	// uint64_t UpdateName_get_a(const struct LDKUpdateName *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateName_get_a")] public static extern long UpdateName_get_a(long _this_ptr);
	// void UpdateName_set_a(struct LDKUpdateName *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateName_set_a")] public static extern void UpdateName_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCResult_UpdateNameIOErrorZ UpdateName_new(struct LDKStr name);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateName_new")] public static extern long UpdateName_new(long _name);
	// MUST_USE_RES struct LDKStr UpdateName_as_str(const struct LDKUpdateName *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateName_as_str")] public static extern long UpdateName_as_str(long _this_arg);
	// enum LDKShortChannelIdError ShortChannelIdError_clone(const enum LDKShortChannelIdError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShortChannelIdError_clone")] public static extern ShortChannelIdError ShortChannelIdError_clone(long _orig);
	// enum LDKShortChannelIdError ShortChannelIdError_block_overflow(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShortChannelIdError_block_overflow")] public static extern ShortChannelIdError ShortChannelIdError_block_overflow();
	// enum LDKShortChannelIdError ShortChannelIdError_tx_index_overflow(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShortChannelIdError_tx_index_overflow")] public static extern ShortChannelIdError ShortChannelIdError_tx_index_overflow();
	// enum LDKShortChannelIdError ShortChannelIdError_vout_index_overflow(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShortChannelIdError_vout_index_overflow")] public static extern ShortChannelIdError ShortChannelIdError_vout_index_overflow();
	// bool ShortChannelIdError_eq(const enum LDKShortChannelIdError *NONNULL_PTR a, const enum LDKShortChannelIdError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShortChannelIdError_eq")] public static extern bool ShortChannelIdError_eq(long _a, long _b);
	// uint32_t block_from_scid(uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_block_from_scid")] public static extern int block_from_scid(long _short_channel_id);
	// uint32_t tx_index_from_scid(uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_tx_index_from_scid")] public static extern int tx_index_from_scid(long _short_channel_id);
	// uint16_t vout_from_scid(uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_vout_from_scid")] public static extern short vout_from_scid(long _short_channel_id);
	// struct LDKCResult_u64ShortChannelIdErrorZ scid_from_parts(uint64_t block, uint64_t tx_index, uint64_t vout_index);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_scid_from_parts")] public static extern long scid_from_parts(long _block, long _tx_index, long _vout_index);
	// void TrackedSpendableOutput_free(struct LDKTrackedSpendableOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_free")] public static extern void TrackedSpendableOutput_free(long _this_obj);
	// struct LDKSpendableOutputDescriptor TrackedSpendableOutput_get_descriptor(const struct LDKTrackedSpendableOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_get_descriptor")] public static extern long TrackedSpendableOutput_get_descriptor(long _this_ptr);
	// void TrackedSpendableOutput_set_descriptor(struct LDKTrackedSpendableOutput *NONNULL_PTR this_ptr, struct LDKSpendableOutputDescriptor val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_set_descriptor")] public static extern void TrackedSpendableOutput_set_descriptor(long _this_ptr, long _val);
	// struct LDKChannelId TrackedSpendableOutput_get_channel_id(const struct LDKTrackedSpendableOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_get_channel_id")] public static extern long TrackedSpendableOutput_get_channel_id(long _this_ptr);
	// void TrackedSpendableOutput_set_channel_id(struct LDKTrackedSpendableOutput *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_set_channel_id")] public static extern void TrackedSpendableOutput_set_channel_id(long _this_ptr, long _val);
	// struct LDKOutputSpendStatus TrackedSpendableOutput_get_status(const struct LDKTrackedSpendableOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_get_status")] public static extern long TrackedSpendableOutput_get_status(long _this_ptr);
	// void TrackedSpendableOutput_set_status(struct LDKTrackedSpendableOutput *NONNULL_PTR this_ptr, struct LDKOutputSpendStatus val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_set_status")] public static extern void TrackedSpendableOutput_set_status(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTrackedSpendableOutput TrackedSpendableOutput_new(struct LDKSpendableOutputDescriptor descriptor_arg, struct LDKChannelId channel_id_arg, struct LDKOutputSpendStatus status_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_new")] public static extern long TrackedSpendableOutput_new(long _descriptor_arg, long _channel_id_arg, long _status_arg);
	// uint64_t TrackedSpendableOutput_clone_ptr(LDKTrackedSpendableOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_clone_ptr")] public static extern long TrackedSpendableOutput_clone_ptr(long _arg);
	// struct LDKTrackedSpendableOutput TrackedSpendableOutput_clone(const struct LDKTrackedSpendableOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_clone")] public static extern long TrackedSpendableOutput_clone(long _orig);
	// bool TrackedSpendableOutput_eq(const struct LDKTrackedSpendableOutput *NONNULL_PTR a, const struct LDKTrackedSpendableOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_eq")] public static extern bool TrackedSpendableOutput_eq(long _a, long _b);
	// MUST_USE_RES bool TrackedSpendableOutput_is_spent_in(const struct LDKTrackedSpendableOutput *NONNULL_PTR this_arg, struct LDKTransaction tx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_is_spent_in")] public static extern bool TrackedSpendableOutput_is_spent_in(long _this_arg, long _tx);
	// struct LDKCVec_u8Z TrackedSpendableOutput_write(const struct LDKTrackedSpendableOutput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_write")] public static extern long TrackedSpendableOutput_write(long _obj);
	// struct LDKCResult_TrackedSpendableOutputDecodeErrorZ TrackedSpendableOutput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrackedSpendableOutput_read")] public static extern long TrackedSpendableOutput_read(long _ser);
	// void OutputSpendStatus_free(struct LDKOutputSpendStatus this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_free")] public static extern void OutputSpendStatus_free(long _this_ptr);
	// uint64_t OutputSpendStatus_clone_ptr(LDKOutputSpendStatus *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_clone_ptr")] public static extern long OutputSpendStatus_clone_ptr(long _arg);
	// struct LDKOutputSpendStatus OutputSpendStatus_clone(const struct LDKOutputSpendStatus *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_clone")] public static extern long OutputSpendStatus_clone(long _orig);
	// struct LDKOutputSpendStatus OutputSpendStatus_pending_initial_broadcast(struct LDKCOption_u32Z delayed_until_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_pending_initial_broadcast")] public static extern long OutputSpendStatus_pending_initial_broadcast(long _delayed_until_height);
	// struct LDKOutputSpendStatus OutputSpendStatus_pending_first_confirmation(struct LDKThirtyTwoBytes first_broadcast_hash, uint32_t latest_broadcast_height, struct LDKTransaction latest_spending_tx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_pending_first_confirmation")] public static extern long OutputSpendStatus_pending_first_confirmation(long _first_broadcast_hash, int _latest_broadcast_height, long _latest_spending_tx);
	// struct LDKOutputSpendStatus OutputSpendStatus_pending_threshold_confirmations(struct LDKThirtyTwoBytes first_broadcast_hash, uint32_t latest_broadcast_height, struct LDKTransaction latest_spending_tx, uint32_t confirmation_height, struct LDKThirtyTwoBytes confirmation_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_pending_threshold_confirmations")] public static extern long OutputSpendStatus_pending_threshold_confirmations(long _first_broadcast_hash, int _latest_broadcast_height, long _latest_spending_tx, int _confirmation_height, long _confirmation_hash);
	// bool OutputSpendStatus_eq(const struct LDKOutputSpendStatus *NONNULL_PTR a, const struct LDKOutputSpendStatus *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_eq")] public static extern bool OutputSpendStatus_eq(long _a, long _b);
	// struct LDKCVec_u8Z OutputSpendStatus_write(const struct LDKOutputSpendStatus *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_write")] public static extern long OutputSpendStatus_write(long _obj);
	// struct LDKCResult_OutputSpendStatusDecodeErrorZ OutputSpendStatus_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpendStatus_read")] public static extern long OutputSpendStatus_read(long _ser);
	// void OutputSweeper_free(struct LDKOutputSweeper this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_free")] public static extern void OutputSweeper_free(long _this_obj);
	// MUST_USE_RES struct LDKOutputSweeper OutputSweeper_new(struct LDKBestBlock best_block, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, struct LDKCOption_FilterZ chain_data_source, struct LDKOutputSpender output_spender, struct LDKChangeDestinationSource change_destination_source, struct LDKKVStore kv_store, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_new")] public static extern long OutputSweeper_new(long _best_block, long _broadcaster, long _fee_estimator, long _chain_data_source, long _output_spender, long _change_destination_source, long _kv_store, long _logger);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OutputSweeper_track_spendable_outputs(const struct LDKOutputSweeper *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ output_descriptors, struct LDKChannelId channel_id, bool exclude_static_outputs, struct LDKCOption_u32Z delay_until_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_track_spendable_outputs")] public static extern long OutputSweeper_track_spendable_outputs(long _this_arg, long _output_descriptors, long _channel_id, bool _exclude_static_outputs, long _delay_until_height);
	// MUST_USE_RES struct LDKCVec_TrackedSpendableOutputZ OutputSweeper_tracked_spendable_outputs(const struct LDKOutputSweeper *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_tracked_spendable_outputs")] public static extern long OutputSweeper_tracked_spendable_outputs(long _this_arg);
	// MUST_USE_RES struct LDKBestBlock OutputSweeper_current_best_block(const struct LDKOutputSweeper *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_current_best_block")] public static extern long OutputSweeper_current_best_block(long _this_arg);
	// struct LDKListen OutputSweeper_as_Listen(const struct LDKOutputSweeper *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_as_Listen")] public static extern long OutputSweeper_as_Listen(long _this_arg);
	// struct LDKConfirm OutputSweeper_as_Confirm(const struct LDKOutputSweeper *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_as_Confirm")] public static extern long OutputSweeper_as_Confirm(long _this_arg);
	// void SpendingDelay_free(struct LDKSpendingDelay this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendingDelay_free")] public static extern void SpendingDelay_free(long _this_ptr);
	// uint64_t SpendingDelay_clone_ptr(LDKSpendingDelay *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendingDelay_clone_ptr")] public static extern long SpendingDelay_clone_ptr(long _arg);
	// struct LDKSpendingDelay SpendingDelay_clone(const struct LDKSpendingDelay *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendingDelay_clone")] public static extern long SpendingDelay_clone(long _orig);
	// struct LDKSpendingDelay SpendingDelay_relative(uint32_t num_blocks);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendingDelay_relative")] public static extern long SpendingDelay_relative(int _num_blocks);
	// struct LDKSpendingDelay SpendingDelay_absolute(uint32_t height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendingDelay_absolute")] public static extern long SpendingDelay_absolute(int _height);
	// struct LDKCResult_OutputSweeperDecodeErrorZ OutputSweeper_read(struct LDKu8slice ser, struct LDKBroadcasterInterface arg_a, struct LDKFeeEstimator arg_b, struct LDKCOption_FilterZ arg_c, struct LDKOutputSpender arg_d, struct LDKChangeDestinationSource arg_e, struct LDKKVStore arg_f, struct LDKLogger arg_g);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSweeper_read")] public static extern long OutputSweeper_read(long _ser, long _arg_a, long _arg_b, long _arg_c, long _arg_d, long _arg_e, long _arg_f, long _arg_g);
	// struct LDKCResult_C2Tuple_BestBlockOutputSweeperZDecodeErrorZ C2Tuple_BestBlockOutputSweeperZ_read(struct LDKu8slice ser, struct LDKBroadcasterInterface arg_a, struct LDKFeeEstimator arg_b, struct LDKCOption_FilterZ arg_c, struct LDKOutputSpender arg_d, struct LDKChangeDestinationSource arg_e, struct LDKKVStore arg_f, struct LDKLogger arg_g);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_BestBlockOutputSweeperZ_read")] public static extern long C2Tuple_BestBlockOutputSweeperZ_read(long _ser, long _arg_a, long _arg_b, long _arg_c, long _arg_d, long _arg_e, long _arg_f, long _arg_g);
	// void FutureCallback_free(struct LDKFutureCallback this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FutureCallback_free")] public static extern void FutureCallback_free(long _this_ptr);
	// void Future_free(struct LDKFuture this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_free")] public static extern void Future_free(long _this_obj);
	// void Future_register_callback_fn(const struct LDKFuture *NONNULL_PTR this_arg, struct LDKFutureCallback callback);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_register_callback_fn")] public static extern void Future_register_callback_fn(long _this_arg, long _callback);
	// void Future_wait(const struct LDKFuture *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_wait")] public static extern void Future_wait(long _this_arg);
	// MUST_USE_RES bool Future_wait_timeout(const struct LDKFuture *NONNULL_PTR this_arg, uint64_t max_wait);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Future_wait_timeout")] public static extern bool Future_wait_timeout(long _this_arg, long _max_wait);
	// void Sleeper_free(struct LDKSleeper this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_free")] public static extern void Sleeper_free(long _this_obj);
	// MUST_USE_RES struct LDKSleeper Sleeper_from_single_future(const struct LDKFuture *NONNULL_PTR future);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_from_single_future")] public static extern long Sleeper_from_single_future(long _future);
	// MUST_USE_RES struct LDKSleeper Sleeper_from_two_futures(const struct LDKFuture *NONNULL_PTR fut_a, const struct LDKFuture *NONNULL_PTR fut_b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_from_two_futures")] public static extern long Sleeper_from_two_futures(long _fut_a, long _fut_b);
	// MUST_USE_RES struct LDKSleeper Sleeper_from_three_futures(const struct LDKFuture *NONNULL_PTR fut_a, const struct LDKFuture *NONNULL_PTR fut_b, const struct LDKFuture *NONNULL_PTR fut_c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_from_three_futures")] public static extern long Sleeper_from_three_futures(long _fut_a, long _fut_b, long _fut_c);
	// MUST_USE_RES struct LDKSleeper Sleeper_new(struct LDKCVec_FutureZ futures);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_new")] public static extern long Sleeper_new(long _futures);
	// void Sleeper_wait(const struct LDKSleeper *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_wait")] public static extern void Sleeper_wait(long _this_arg);
	// MUST_USE_RES bool Sleeper_wait_timeout(const struct LDKSleeper *NONNULL_PTR this_arg, uint64_t max_wait);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sleeper_wait_timeout")] public static extern bool Sleeper_wait_timeout(long _this_arg, long _max_wait);
	// enum LDKLevel Level_clone(const enum LDKLevel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_clone")] public static extern Level Level_clone(long _orig);
	// enum LDKLevel Level_gossip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_gossip")] public static extern Level Level_gossip();
	// enum LDKLevel Level_trace(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_trace")] public static extern Level Level_trace();
	// enum LDKLevel Level_debug(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_debug")] public static extern Level Level_debug();
	// enum LDKLevel Level_info(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_info")] public static extern Level Level_info();
	// enum LDKLevel Level_warn(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_warn")] public static extern Level Level_warn();
	// enum LDKLevel Level_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_error")] public static extern Level Level_error();
	// bool Level_eq(const enum LDKLevel *NONNULL_PTR a, const enum LDKLevel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_eq")] public static extern bool Level_eq(long _a, long _b);
	// uint64_t Level_hash(const enum LDKLevel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_hash")] public static extern long Level_hash(long _o);
	// struct LDKStr Level_to_str(const enum LDKLevel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_to_str")] public static extern long Level_to_str(long _o);
	// MUST_USE_RES enum LDKLevel Level_max(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Level_max")] public static extern Level Level_max();
	// void Record_free(struct LDKRecord this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_free")] public static extern void Record_free(long _this_obj);
	// enum LDKLevel Record_get_level(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_level")] public static extern Level Record_get_level(long _this_ptr);
	// void Record_set_level(struct LDKRecord *NONNULL_PTR this_ptr, enum LDKLevel val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_level")] public static extern void Record_set_level(long _this_ptr, Level _val);
	// struct LDKPublicKey Record_get_peer_id(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_peer_id")] public static extern long Record_get_peer_id(long _this_ptr);
	// void Record_set_peer_id(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_peer_id")] public static extern void Record_set_peer_id(long _this_ptr, long _val);
	// struct LDKChannelId Record_get_channel_id(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_channel_id")] public static extern long Record_get_channel_id(long _this_ptr);
	// void Record_set_channel_id(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_channel_id")] public static extern void Record_set_channel_id(long _this_ptr, long _val);
	// struct LDKStr Record_get_args(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_args")] public static extern long Record_get_args(long _this_ptr);
	// void Record_set_args(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_args")] public static extern void Record_set_args(long _this_ptr, long _val);
	// struct LDKStr Record_get_module_path(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_module_path")] public static extern long Record_get_module_path(long _this_ptr);
	// void Record_set_module_path(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_module_path")] public static extern void Record_set_module_path(long _this_ptr, long _val);
	// struct LDKStr Record_get_file(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_file")] public static extern long Record_get_file(long _this_ptr);
	// void Record_set_file(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_file")] public static extern void Record_set_file(long _this_ptr, long _val);
	// uint32_t Record_get_line(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_line")] public static extern int Record_get_line(long _this_ptr);
	// void Record_set_line(struct LDKRecord *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_line")] public static extern void Record_set_line(long _this_ptr, int _val);
	// struct LDKCOption_ThirtyTwoBytesZ Record_get_payment_hash(const struct LDKRecord *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_get_payment_hash")] public static extern long Record_get_payment_hash(long _this_ptr);
	// void Record_set_payment_hash(struct LDKRecord *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_set_payment_hash")] public static extern void Record_set_payment_hash(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRecord Record_new(enum LDKLevel level_arg, struct LDKPublicKey peer_id_arg, struct LDKChannelId channel_id_arg, struct LDKStr args_arg, struct LDKStr module_path_arg, struct LDKStr file_arg, uint32_t line_arg, struct LDKCOption_ThirtyTwoBytesZ payment_hash_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_new")] public static extern long Record_new(Level _level_arg, long _peer_id_arg, long _channel_id_arg, long _args_arg, long _module_path_arg, long _file_arg, int _line_arg, long _payment_hash_arg);
	// uint64_t Record_clone_ptr(LDKRecord *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_clone_ptr")] public static extern long Record_clone_ptr(long _arg);
	// struct LDKRecord Record_clone(const struct LDKRecord *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Record_clone")] public static extern long Record_clone(long _orig);
	// void Logger_free(struct LDKLogger this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Logger_free")] public static extern void Logger_free(long _this_ptr);
	// void ChannelHandshakeConfig_free(struct LDKChannelHandshakeConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_free")] public static extern void ChannelHandshakeConfig_free(long _this_obj);
	// uint32_t ChannelHandshakeConfig_get_minimum_depth(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_minimum_depth")] public static extern int ChannelHandshakeConfig_get_minimum_depth(long _this_ptr);
	// void ChannelHandshakeConfig_set_minimum_depth(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_minimum_depth")] public static extern void ChannelHandshakeConfig_set_minimum_depth(long _this_ptr, int _val);
	// uint16_t ChannelHandshakeConfig_get_our_to_self_delay(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_to_self_delay")] public static extern short ChannelHandshakeConfig_get_our_to_self_delay(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_to_self_delay(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_to_self_delay")] public static extern void ChannelHandshakeConfig_set_our_to_self_delay(long _this_ptr, short _val);
	// uint64_t ChannelHandshakeConfig_get_our_htlc_minimum_msat(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_htlc_minimum_msat")] public static extern long ChannelHandshakeConfig_get_our_htlc_minimum_msat(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_htlc_minimum_msat(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_htlc_minimum_msat")] public static extern void ChannelHandshakeConfig_set_our_htlc_minimum_msat(long _this_ptr, long _val);
	// uint8_t ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel")] public static extern byte ChannelHandshakeConfig_get_max_inbound_htlc_value_in_flight_percent_of_channel(long _this_ptr);
	// void ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel")] public static extern void ChannelHandshakeConfig_set_max_inbound_htlc_value_in_flight_percent_of_channel(long _this_ptr, byte _val);
	// bool ChannelHandshakeConfig_get_negotiate_scid_privacy(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_negotiate_scid_privacy")] public static extern bool ChannelHandshakeConfig_get_negotiate_scid_privacy(long _this_ptr);
	// void ChannelHandshakeConfig_set_negotiate_scid_privacy(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_negotiate_scid_privacy")] public static extern void ChannelHandshakeConfig_set_negotiate_scid_privacy(long _this_ptr, bool _val);
	// bool ChannelHandshakeConfig_get_announce_for_forwarding(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_announce_for_forwarding")] public static extern bool ChannelHandshakeConfig_get_announce_for_forwarding(long _this_ptr);
	// void ChannelHandshakeConfig_set_announce_for_forwarding(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_announce_for_forwarding")] public static extern void ChannelHandshakeConfig_set_announce_for_forwarding(long _this_ptr, bool _val);
	// bool ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey")] public static extern bool ChannelHandshakeConfig_get_commit_upfront_shutdown_pubkey(long _this_ptr);
	// void ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey")] public static extern void ChannelHandshakeConfig_set_commit_upfront_shutdown_pubkey(long _this_ptr, bool _val);
	// uint32_t ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths")] public static extern int ChannelHandshakeConfig_get_their_channel_reserve_proportional_millionths(long _this_ptr);
	// void ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths")] public static extern void ChannelHandshakeConfig_set_their_channel_reserve_proportional_millionths(long _this_ptr, int _val);
	// bool ChannelHandshakeConfig_get_negotiate_anchors_zero_fee_htlc_tx(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_negotiate_anchors_zero_fee_htlc_tx")] public static extern bool ChannelHandshakeConfig_get_negotiate_anchors_zero_fee_htlc_tx(long _this_ptr);
	// void ChannelHandshakeConfig_set_negotiate_anchors_zero_fee_htlc_tx(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_negotiate_anchors_zero_fee_htlc_tx")] public static extern void ChannelHandshakeConfig_set_negotiate_anchors_zero_fee_htlc_tx(long _this_ptr, bool _val);
	// uint16_t ChannelHandshakeConfig_get_our_max_accepted_htlcs(const struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_get_our_max_accepted_htlcs")] public static extern short ChannelHandshakeConfig_get_our_max_accepted_htlcs(long _this_ptr);
	// void ChannelHandshakeConfig_set_our_max_accepted_htlcs(struct LDKChannelHandshakeConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_set_our_max_accepted_htlcs")] public static extern void ChannelHandshakeConfig_set_our_max_accepted_htlcs(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKChannelHandshakeConfig ChannelHandshakeConfig_new(uint32_t minimum_depth_arg, uint16_t our_to_self_delay_arg, uint64_t our_htlc_minimum_msat_arg, uint8_t max_inbound_htlc_value_in_flight_percent_of_channel_arg, bool negotiate_scid_privacy_arg, bool announce_for_forwarding_arg, bool commit_upfront_shutdown_pubkey_arg, uint32_t their_channel_reserve_proportional_millionths_arg, bool negotiate_anchors_zero_fee_htlc_tx_arg, uint16_t our_max_accepted_htlcs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_new")] public static extern long ChannelHandshakeConfig_new(int _minimum_depth_arg, short _our_to_self_delay_arg, long _our_htlc_minimum_msat_arg, byte _max_inbound_htlc_value_in_flight_percent_of_channel_arg, bool _negotiate_scid_privacy_arg, bool _announce_for_forwarding_arg, bool _commit_upfront_shutdown_pubkey_arg, int _their_channel_reserve_proportional_millionths_arg, bool _negotiate_anchors_zero_fee_htlc_tx_arg, short _our_max_accepted_htlcs_arg);
	// uint64_t ChannelHandshakeConfig_clone_ptr(LDKChannelHandshakeConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_clone_ptr")] public static extern long ChannelHandshakeConfig_clone_ptr(long _arg);
	// struct LDKChannelHandshakeConfig ChannelHandshakeConfig_clone(const struct LDKChannelHandshakeConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_clone")] public static extern long ChannelHandshakeConfig_clone(long _orig);
	// MUST_USE_RES struct LDKChannelHandshakeConfig ChannelHandshakeConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeConfig_default")] public static extern long ChannelHandshakeConfig_default();
	// void ChannelHandshakeLimits_free(struct LDKChannelHandshakeLimits this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_free")] public static extern void ChannelHandshakeLimits_free(long _this_obj);
	// uint64_t ChannelHandshakeLimits_get_min_funding_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_funding_satoshis")] public static extern long ChannelHandshakeLimits_get_min_funding_satoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_funding_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_funding_satoshis")] public static extern void ChannelHandshakeLimits_set_min_funding_satoshis(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_funding_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_funding_satoshis")] public static extern long ChannelHandshakeLimits_get_max_funding_satoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_funding_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_funding_satoshis")] public static extern void ChannelHandshakeLimits_set_max_funding_satoshis(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_htlc_minimum_msat(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_htlc_minimum_msat")] public static extern long ChannelHandshakeLimits_get_max_htlc_minimum_msat(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_htlc_minimum_msat(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_htlc_minimum_msat")] public static extern void ChannelHandshakeLimits_set_max_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat")] public static extern long ChannelHandshakeLimits_get_min_max_htlc_value_in_flight_msat(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat")] public static extern void ChannelHandshakeLimits_set_min_max_htlc_value_in_flight_msat(long _this_ptr, long _val);
	// uint64_t ChannelHandshakeLimits_get_max_channel_reserve_satoshis(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_channel_reserve_satoshis")] public static extern long ChannelHandshakeLimits_get_max_channel_reserve_satoshis(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_channel_reserve_satoshis(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_channel_reserve_satoshis")] public static extern void ChannelHandshakeLimits_set_max_channel_reserve_satoshis(long _this_ptr, long _val);
	// uint16_t ChannelHandshakeLimits_get_min_max_accepted_htlcs(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_min_max_accepted_htlcs")] public static extern short ChannelHandshakeLimits_get_min_max_accepted_htlcs(long _this_ptr);
	// void ChannelHandshakeLimits_set_min_max_accepted_htlcs(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_min_max_accepted_htlcs")] public static extern void ChannelHandshakeLimits_set_min_max_accepted_htlcs(long _this_ptr, short _val);
	// uint32_t ChannelHandshakeLimits_get_max_minimum_depth(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_max_minimum_depth")] public static extern int ChannelHandshakeLimits_get_max_minimum_depth(long _this_ptr);
	// void ChannelHandshakeLimits_set_max_minimum_depth(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_max_minimum_depth")] public static extern void ChannelHandshakeLimits_set_max_minimum_depth(long _this_ptr, int _val);
	// bool ChannelHandshakeLimits_get_trust_own_funding_0conf(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_trust_own_funding_0conf")] public static extern bool ChannelHandshakeLimits_get_trust_own_funding_0conf(long _this_ptr);
	// void ChannelHandshakeLimits_set_trust_own_funding_0conf(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_trust_own_funding_0conf")] public static extern void ChannelHandshakeLimits_set_trust_own_funding_0conf(long _this_ptr, bool _val);
	// bool ChannelHandshakeLimits_get_force_announced_channel_preference(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_force_announced_channel_preference")] public static extern bool ChannelHandshakeLimits_get_force_announced_channel_preference(long _this_ptr);
	// void ChannelHandshakeLimits_set_force_announced_channel_preference(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_force_announced_channel_preference")] public static extern void ChannelHandshakeLimits_set_force_announced_channel_preference(long _this_ptr, bool _val);
	// uint16_t ChannelHandshakeLimits_get_their_to_self_delay(const struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_get_their_to_self_delay")] public static extern short ChannelHandshakeLimits_get_their_to_self_delay(long _this_ptr);
	// void ChannelHandshakeLimits_set_their_to_self_delay(struct LDKChannelHandshakeLimits *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_set_their_to_self_delay")] public static extern void ChannelHandshakeLimits_set_their_to_self_delay(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKChannelHandshakeLimits ChannelHandshakeLimits_new(uint64_t min_funding_satoshis_arg, uint64_t max_funding_satoshis_arg, uint64_t max_htlc_minimum_msat_arg, uint64_t min_max_htlc_value_in_flight_msat_arg, uint64_t max_channel_reserve_satoshis_arg, uint16_t min_max_accepted_htlcs_arg, uint32_t max_minimum_depth_arg, bool trust_own_funding_0conf_arg, bool force_announced_channel_preference_arg, uint16_t their_to_self_delay_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_new")] public static extern long ChannelHandshakeLimits_new(long _min_funding_satoshis_arg, long _max_funding_satoshis_arg, long _max_htlc_minimum_msat_arg, long _min_max_htlc_value_in_flight_msat_arg, long _max_channel_reserve_satoshis_arg, short _min_max_accepted_htlcs_arg, int _max_minimum_depth_arg, bool _trust_own_funding_0conf_arg, bool _force_announced_channel_preference_arg, short _their_to_self_delay_arg);
	// uint64_t ChannelHandshakeLimits_clone_ptr(LDKChannelHandshakeLimits *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_clone_ptr")] public static extern long ChannelHandshakeLimits_clone_ptr(long _arg);
	// struct LDKChannelHandshakeLimits ChannelHandshakeLimits_clone(const struct LDKChannelHandshakeLimits *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_clone")] public static extern long ChannelHandshakeLimits_clone(long _orig);
	// MUST_USE_RES struct LDKChannelHandshakeLimits ChannelHandshakeLimits_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelHandshakeLimits_default")] public static extern long ChannelHandshakeLimits_default();
	// void MaxDustHTLCExposure_free(struct LDKMaxDustHTLCExposure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_free")] public static extern void MaxDustHTLCExposure_free(long _this_ptr);
	// uint64_t MaxDustHTLCExposure_clone_ptr(LDKMaxDustHTLCExposure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_clone_ptr")] public static extern long MaxDustHTLCExposure_clone_ptr(long _arg);
	// struct LDKMaxDustHTLCExposure MaxDustHTLCExposure_clone(const struct LDKMaxDustHTLCExposure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_clone")] public static extern long MaxDustHTLCExposure_clone(long _orig);
	// struct LDKMaxDustHTLCExposure MaxDustHTLCExposure_fixed_limit_msat(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_fixed_limit_msat")] public static extern long MaxDustHTLCExposure_fixed_limit_msat(long _a);
	// struct LDKMaxDustHTLCExposure MaxDustHTLCExposure_fee_rate_multiplier(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_fee_rate_multiplier")] public static extern long MaxDustHTLCExposure_fee_rate_multiplier(long _a);
	// bool MaxDustHTLCExposure_eq(const struct LDKMaxDustHTLCExposure *NONNULL_PTR a, const struct LDKMaxDustHTLCExposure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_eq")] public static extern bool MaxDustHTLCExposure_eq(long _a, long _b);
	// struct LDKCVec_u8Z MaxDustHTLCExposure_write(const struct LDKMaxDustHTLCExposure *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_write")] public static extern long MaxDustHTLCExposure_write(long _obj);
	// struct LDKCResult_MaxDustHTLCExposureDecodeErrorZ MaxDustHTLCExposure_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MaxDustHTLCExposure_read")] public static extern long MaxDustHTLCExposure_read(long _ser);
	// void ChannelConfig_free(struct LDKChannelConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_free")] public static extern void ChannelConfig_free(long _this_obj);
	// uint32_t ChannelConfig_get_forwarding_fee_proportional_millionths(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_forwarding_fee_proportional_millionths")] public static extern int ChannelConfig_get_forwarding_fee_proportional_millionths(long _this_ptr);
	// void ChannelConfig_set_forwarding_fee_proportional_millionths(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_forwarding_fee_proportional_millionths")] public static extern void ChannelConfig_set_forwarding_fee_proportional_millionths(long _this_ptr, int _val);
	// uint32_t ChannelConfig_get_forwarding_fee_base_msat(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_forwarding_fee_base_msat")] public static extern int ChannelConfig_get_forwarding_fee_base_msat(long _this_ptr);
	// void ChannelConfig_set_forwarding_fee_base_msat(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_forwarding_fee_base_msat")] public static extern void ChannelConfig_set_forwarding_fee_base_msat(long _this_ptr, int _val);
	// uint16_t ChannelConfig_get_cltv_expiry_delta(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_cltv_expiry_delta")] public static extern short ChannelConfig_get_cltv_expiry_delta(long _this_ptr);
	// void ChannelConfig_set_cltv_expiry_delta(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_cltv_expiry_delta")] public static extern void ChannelConfig_set_cltv_expiry_delta(long _this_ptr, short _val);
	// struct LDKMaxDustHTLCExposure ChannelConfig_get_max_dust_htlc_exposure(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_max_dust_htlc_exposure")] public static extern long ChannelConfig_get_max_dust_htlc_exposure(long _this_ptr);
	// void ChannelConfig_set_max_dust_htlc_exposure(struct LDKChannelConfig *NONNULL_PTR this_ptr, struct LDKMaxDustHTLCExposure val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_max_dust_htlc_exposure")] public static extern void ChannelConfig_set_max_dust_htlc_exposure(long _this_ptr, long _val);
	// uint64_t ChannelConfig_get_force_close_avoidance_max_fee_satoshis(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_force_close_avoidance_max_fee_satoshis")] public static extern long ChannelConfig_get_force_close_avoidance_max_fee_satoshis(long _this_ptr);
	// void ChannelConfig_set_force_close_avoidance_max_fee_satoshis(struct LDKChannelConfig *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_force_close_avoidance_max_fee_satoshis")] public static extern void ChannelConfig_set_force_close_avoidance_max_fee_satoshis(long _this_ptr, long _val);
	// bool ChannelConfig_get_accept_underpaying_htlcs(const struct LDKChannelConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_get_accept_underpaying_htlcs")] public static extern bool ChannelConfig_get_accept_underpaying_htlcs(long _this_ptr);
	// void ChannelConfig_set_accept_underpaying_htlcs(struct LDKChannelConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_set_accept_underpaying_htlcs")] public static extern void ChannelConfig_set_accept_underpaying_htlcs(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKChannelConfig ChannelConfig_new(uint32_t forwarding_fee_proportional_millionths_arg, uint32_t forwarding_fee_base_msat_arg, uint16_t cltv_expiry_delta_arg, struct LDKMaxDustHTLCExposure max_dust_htlc_exposure_arg, uint64_t force_close_avoidance_max_fee_satoshis_arg, bool accept_underpaying_htlcs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_new")] public static extern long ChannelConfig_new(int _forwarding_fee_proportional_millionths_arg, int _forwarding_fee_base_msat_arg, short _cltv_expiry_delta_arg, long _max_dust_htlc_exposure_arg, long _force_close_avoidance_max_fee_satoshis_arg, bool _accept_underpaying_htlcs_arg);
	// uint64_t ChannelConfig_clone_ptr(LDKChannelConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_clone_ptr")] public static extern long ChannelConfig_clone_ptr(long _arg);
	// struct LDKChannelConfig ChannelConfig_clone(const struct LDKChannelConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_clone")] public static extern long ChannelConfig_clone(long _orig);
	// bool ChannelConfig_eq(const struct LDKChannelConfig *NONNULL_PTR a, const struct LDKChannelConfig *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_eq")] public static extern bool ChannelConfig_eq(long _a, long _b);
	// void ChannelConfig_apply(struct LDKChannelConfig *NONNULL_PTR this_arg, const struct LDKChannelConfigUpdate *NONNULL_PTR update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_apply")] public static extern void ChannelConfig_apply(long _this_arg, long _update);
	// MUST_USE_RES struct LDKChannelConfig ChannelConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_default")] public static extern long ChannelConfig_default();
	// struct LDKCVec_u8Z ChannelConfig_write(const struct LDKChannelConfig *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_write")] public static extern long ChannelConfig_write(long _obj);
	// struct LDKCResult_ChannelConfigDecodeErrorZ ChannelConfig_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfig_read")] public static extern long ChannelConfig_read(long _ser);
	// void ChannelConfigUpdate_free(struct LDKChannelConfigUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_free")] public static extern void ChannelConfigUpdate_free(long _this_obj);
	// struct LDKCOption_u32Z ChannelConfigUpdate_get_forwarding_fee_proportional_millionths(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_forwarding_fee_proportional_millionths")] public static extern long ChannelConfigUpdate_get_forwarding_fee_proportional_millionths(long _this_ptr);
	// void ChannelConfigUpdate_set_forwarding_fee_proportional_millionths(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_forwarding_fee_proportional_millionths")] public static extern void ChannelConfigUpdate_set_forwarding_fee_proportional_millionths(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelConfigUpdate_get_forwarding_fee_base_msat(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_forwarding_fee_base_msat")] public static extern long ChannelConfigUpdate_get_forwarding_fee_base_msat(long _this_ptr);
	// void ChannelConfigUpdate_set_forwarding_fee_base_msat(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_forwarding_fee_base_msat")] public static extern void ChannelConfigUpdate_set_forwarding_fee_base_msat(long _this_ptr, long _val);
	// struct LDKCOption_u16Z ChannelConfigUpdate_get_cltv_expiry_delta(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_cltv_expiry_delta")] public static extern long ChannelConfigUpdate_get_cltv_expiry_delta(long _this_ptr);
	// void ChannelConfigUpdate_set_cltv_expiry_delta(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_cltv_expiry_delta")] public static extern void ChannelConfigUpdate_set_cltv_expiry_delta(long _this_ptr, long _val);
	// struct LDKCOption_MaxDustHTLCExposureZ ChannelConfigUpdate_get_max_dust_htlc_exposure_msat(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_max_dust_htlc_exposure_msat")] public static extern long ChannelConfigUpdate_get_max_dust_htlc_exposure_msat(long _this_ptr);
	// void ChannelConfigUpdate_set_max_dust_htlc_exposure_msat(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_MaxDustHTLCExposureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_max_dust_htlc_exposure_msat")] public static extern void ChannelConfigUpdate_set_max_dust_htlc_exposure_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelConfigUpdate_get_force_close_avoidance_max_fee_satoshis(const struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_get_force_close_avoidance_max_fee_satoshis")] public static extern long ChannelConfigUpdate_get_force_close_avoidance_max_fee_satoshis(long _this_ptr);
	// void ChannelConfigUpdate_set_force_close_avoidance_max_fee_satoshis(struct LDKChannelConfigUpdate *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_set_force_close_avoidance_max_fee_satoshis")] public static extern void ChannelConfigUpdate_set_force_close_avoidance_max_fee_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelConfigUpdate ChannelConfigUpdate_new(struct LDKCOption_u32Z forwarding_fee_proportional_millionths_arg, struct LDKCOption_u32Z forwarding_fee_base_msat_arg, struct LDKCOption_u16Z cltv_expiry_delta_arg, struct LDKCOption_MaxDustHTLCExposureZ max_dust_htlc_exposure_msat_arg, struct LDKCOption_u64Z force_close_avoidance_max_fee_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelConfigUpdate_new")] public static extern long ChannelConfigUpdate_new(long _forwarding_fee_proportional_millionths_arg, long _forwarding_fee_base_msat_arg, long _cltv_expiry_delta_arg, long _max_dust_htlc_exposure_msat_arg, long _force_close_avoidance_max_fee_satoshis_arg);
	// void UserConfig_free(struct LDKUserConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_free")] public static extern void UserConfig_free(long _this_obj);
	// struct LDKChannelHandshakeConfig UserConfig_get_channel_handshake_config(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_handshake_config")] public static extern long UserConfig_get_channel_handshake_config(long _this_ptr);
	// void UserConfig_set_channel_handshake_config(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelHandshakeConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_handshake_config")] public static extern void UserConfig_set_channel_handshake_config(long _this_ptr, long _val);
	// struct LDKChannelHandshakeLimits UserConfig_get_channel_handshake_limits(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_handshake_limits")] public static extern long UserConfig_get_channel_handshake_limits(long _this_ptr);
	// void UserConfig_set_channel_handshake_limits(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelHandshakeLimits val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_handshake_limits")] public static extern void UserConfig_set_channel_handshake_limits(long _this_ptr, long _val);
	// struct LDKChannelConfig UserConfig_get_channel_config(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_channel_config")] public static extern long UserConfig_get_channel_config(long _this_ptr);
	// void UserConfig_set_channel_config(struct LDKUserConfig *NONNULL_PTR this_ptr, struct LDKChannelConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_channel_config")] public static extern void UserConfig_set_channel_config(long _this_ptr, long _val);
	// bool UserConfig_get_accept_forwards_to_priv_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_forwards_to_priv_channels")] public static extern bool UserConfig_get_accept_forwards_to_priv_channels(long _this_ptr);
	// void UserConfig_set_accept_forwards_to_priv_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_forwards_to_priv_channels")] public static extern void UserConfig_set_accept_forwards_to_priv_channels(long _this_ptr, bool _val);
	// bool UserConfig_get_accept_inbound_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_inbound_channels")] public static extern bool UserConfig_get_accept_inbound_channels(long _this_ptr);
	// void UserConfig_set_accept_inbound_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_inbound_channels")] public static extern void UserConfig_set_accept_inbound_channels(long _this_ptr, bool _val);
	// bool UserConfig_get_manually_accept_inbound_channels(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_manually_accept_inbound_channels")] public static extern bool UserConfig_get_manually_accept_inbound_channels(long _this_ptr);
	// void UserConfig_set_manually_accept_inbound_channels(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_manually_accept_inbound_channels")] public static extern void UserConfig_set_manually_accept_inbound_channels(long _this_ptr, bool _val);
	// bool UserConfig_get_accept_intercept_htlcs(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_accept_intercept_htlcs")] public static extern bool UserConfig_get_accept_intercept_htlcs(long _this_ptr);
	// void UserConfig_set_accept_intercept_htlcs(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_accept_intercept_htlcs")] public static extern void UserConfig_set_accept_intercept_htlcs(long _this_ptr, bool _val);
	// bool UserConfig_get_manually_handle_bolt12_invoices(const struct LDKUserConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_get_manually_handle_bolt12_invoices")] public static extern bool UserConfig_get_manually_handle_bolt12_invoices(long _this_ptr);
	// void UserConfig_set_manually_handle_bolt12_invoices(struct LDKUserConfig *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_set_manually_handle_bolt12_invoices")] public static extern void UserConfig_set_manually_handle_bolt12_invoices(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKUserConfig UserConfig_new(struct LDKChannelHandshakeConfig channel_handshake_config_arg, struct LDKChannelHandshakeLimits channel_handshake_limits_arg, struct LDKChannelConfig channel_config_arg, bool accept_forwards_to_priv_channels_arg, bool accept_inbound_channels_arg, bool manually_accept_inbound_channels_arg, bool accept_intercept_htlcs_arg, bool manually_handle_bolt12_invoices_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_new")] public static extern long UserConfig_new(long _channel_handshake_config_arg, long _channel_handshake_limits_arg, long _channel_config_arg, bool _accept_forwards_to_priv_channels_arg, bool _accept_inbound_channels_arg, bool _manually_accept_inbound_channels_arg, bool _accept_intercept_htlcs_arg, bool _manually_handle_bolt12_invoices_arg);
	// uint64_t UserConfig_clone_ptr(LDKUserConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_clone_ptr")] public static extern long UserConfig_clone_ptr(long _arg);
	// struct LDKUserConfig UserConfig_clone(const struct LDKUserConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_clone")] public static extern long UserConfig_clone(long _orig);
	// MUST_USE_RES struct LDKUserConfig UserConfig_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UserConfig_default")] public static extern long UserConfig_default();
	// void BestBlock_free(struct LDKBestBlock this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_free")] public static extern void BestBlock_free(long _this_obj);
	// const uint8_t (*BestBlock_get_block_hash(const struct LDKBestBlock *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_get_block_hash")] public static extern long BestBlock_get_block_hash(long _this_ptr);
	// void BestBlock_set_block_hash(struct LDKBestBlock *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_set_block_hash")] public static extern void BestBlock_set_block_hash(long _this_ptr, long _val);
	// uint32_t BestBlock_get_height(const struct LDKBestBlock *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_get_height")] public static extern int BestBlock_get_height(long _this_ptr);
	// void BestBlock_set_height(struct LDKBestBlock *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_set_height")] public static extern void BestBlock_set_height(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKBestBlock BestBlock_new(struct LDKThirtyTwoBytes block_hash_arg, uint32_t height_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_new")] public static extern long BestBlock_new(long _block_hash_arg, int _height_arg);
	// uint64_t BestBlock_clone_ptr(LDKBestBlock *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_clone_ptr")] public static extern long BestBlock_clone_ptr(long _arg);
	// struct LDKBestBlock BestBlock_clone(const struct LDKBestBlock *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_clone")] public static extern long BestBlock_clone(long _orig);
	// uint64_t BestBlock_hash(const struct LDKBestBlock *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_hash")] public static extern long BestBlock_hash(long _o);
	// bool BestBlock_eq(const struct LDKBestBlock *NONNULL_PTR a, const struct LDKBestBlock *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_eq")] public static extern bool BestBlock_eq(long _a, long _b);
	// MUST_USE_RES struct LDKBestBlock BestBlock_from_network(enum LDKNetwork network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_from_network")] public static extern long BestBlock_from_network(Network _network);
	// struct LDKCVec_u8Z BestBlock_write(const struct LDKBestBlock *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_write")] public static extern long BestBlock_write(long _obj);
	// struct LDKCResult_BestBlockDecodeErrorZ BestBlock_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BestBlock_read")] public static extern long BestBlock_read(long _ser);
	// void Listen_free(struct LDKListen this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Listen_free")] public static extern void Listen_free(long _this_ptr);
	// void Confirm_free(struct LDKConfirm this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Confirm_free")] public static extern void Confirm_free(long _this_ptr);
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_clone(const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_clone")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_clone(long _orig);
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_completed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_completed")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_completed();
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_in_progress(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_in_progress")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_in_progress();
	// enum LDKChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_unrecoverable_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_unrecoverable_error")] public static extern ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_unrecoverable_error();
	// bool ChannelMonitorUpdateStatus_eq(const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR a, const enum LDKChannelMonitorUpdateStatus *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdateStatus_eq")] public static extern bool ChannelMonitorUpdateStatus_eq(long _a, long _b);
	// void Watch_free(struct LDKWatch this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Watch_free")] public static extern void Watch_free(long _this_ptr);
	// void Filter_free(struct LDKFilter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Filter_free")] public static extern void Filter_free(long _this_ptr);
	// void WatchedOutput_free(struct LDKWatchedOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_free")] public static extern void WatchedOutput_free(long _this_obj);
	// struct LDKCOption_ThirtyTwoBytesZ WatchedOutput_get_block_hash(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_block_hash")] public static extern long WatchedOutput_get_block_hash(long _this_ptr);
	// void WatchedOutput_set_block_hash(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_block_hash")] public static extern void WatchedOutput_set_block_hash(long _this_ptr, long _val);
	// struct LDKOutPoint WatchedOutput_get_outpoint(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_outpoint")] public static extern long WatchedOutput_get_outpoint(long _this_ptr);
	// void WatchedOutput_set_outpoint(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_outpoint")] public static extern void WatchedOutput_set_outpoint(long _this_ptr, long _val);
	// struct LDKCVec_u8Z WatchedOutput_get_script_pubkey(const struct LDKWatchedOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_get_script_pubkey")] public static extern long WatchedOutput_get_script_pubkey(long _this_ptr);
	// void WatchedOutput_set_script_pubkey(struct LDKWatchedOutput *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_set_script_pubkey")] public static extern void WatchedOutput_set_script_pubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKWatchedOutput WatchedOutput_new(struct LDKCOption_ThirtyTwoBytesZ block_hash_arg, struct LDKOutPoint outpoint_arg, struct LDKCVec_u8Z script_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_new")] public static extern long WatchedOutput_new(long _block_hash_arg, long _outpoint_arg, long _script_pubkey_arg);
	// uint64_t WatchedOutput_clone_ptr(LDKWatchedOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_clone_ptr")] public static extern long WatchedOutput_clone_ptr(long _arg);
	// struct LDKWatchedOutput WatchedOutput_clone(const struct LDKWatchedOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_clone")] public static extern long WatchedOutput_clone(long _orig);
	// bool WatchedOutput_eq(const struct LDKWatchedOutput *NONNULL_PTR a, const struct LDKWatchedOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_eq")] public static extern bool WatchedOutput_eq(long _a, long _b);
	// uint64_t WatchedOutput_hash(const struct LDKWatchedOutput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WatchedOutput_hash")] public static extern long WatchedOutput_hash(long _o);
	// void BroadcasterInterface_free(struct LDKBroadcasterInterface this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BroadcasterInterface_free")] public static extern void BroadcasterInterface_free(long _this_ptr);
	// enum LDKConfirmationTarget ConfirmationTarget_clone(const enum LDKConfirmationTarget *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_clone")] public static extern ConfirmationTarget ConfirmationTarget_clone(long _orig);
	// enum LDKConfirmationTarget ConfirmationTarget_maximum_fee_estimate(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_maximum_fee_estimate")] public static extern ConfirmationTarget ConfirmationTarget_maximum_fee_estimate();
	// enum LDKConfirmationTarget ConfirmationTarget_urgent_on_chain_sweep(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_urgent_on_chain_sweep")] public static extern ConfirmationTarget ConfirmationTarget_urgent_on_chain_sweep();
	// enum LDKConfirmationTarget ConfirmationTarget_min_allowed_anchor_channel_remote_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_min_allowed_anchor_channel_remote_fee")] public static extern ConfirmationTarget ConfirmationTarget_min_allowed_anchor_channel_remote_fee();
	// enum LDKConfirmationTarget ConfirmationTarget_min_allowed_non_anchor_channel_remote_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_min_allowed_non_anchor_channel_remote_fee")] public static extern ConfirmationTarget ConfirmationTarget_min_allowed_non_anchor_channel_remote_fee();
	// enum LDKConfirmationTarget ConfirmationTarget_anchor_channel_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_anchor_channel_fee")] public static extern ConfirmationTarget ConfirmationTarget_anchor_channel_fee();
	// enum LDKConfirmationTarget ConfirmationTarget_non_anchor_channel_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_non_anchor_channel_fee")] public static extern ConfirmationTarget ConfirmationTarget_non_anchor_channel_fee();
	// enum LDKConfirmationTarget ConfirmationTarget_channel_close_minimum(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_channel_close_minimum")] public static extern ConfirmationTarget ConfirmationTarget_channel_close_minimum();
	// enum LDKConfirmationTarget ConfirmationTarget_output_spending_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_output_spending_fee")] public static extern ConfirmationTarget ConfirmationTarget_output_spending_fee();
	// uint64_t ConfirmationTarget_hash(const enum LDKConfirmationTarget *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_hash")] public static extern long ConfirmationTarget_hash(long _o);
	// bool ConfirmationTarget_eq(const enum LDKConfirmationTarget *NONNULL_PTR a, const enum LDKConfirmationTarget *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ConfirmationTarget_eq")] public static extern bool ConfirmationTarget_eq(long _a, long _b);
	// void FeeEstimator_free(struct LDKFeeEstimator this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FeeEstimator_free")] public static extern void FeeEstimator_free(long _this_ptr);
	// void Persist_free(struct LDKPersist this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Persist_free")] public static extern void Persist_free(long _this_ptr);
	// void LockedChannelMonitor_free(struct LDKLockedChannelMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockedChannelMonitor_free")] public static extern void LockedChannelMonitor_free(long _this_obj);
	// void ChainMonitor_free(struct LDKChainMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_free")] public static extern void ChainMonitor_free(long _this_obj);
	// MUST_USE_RES struct LDKChainMonitor ChainMonitor_new(struct LDKCOption_FilterZ chain_source, struct LDKBroadcasterInterface broadcaster, struct LDKLogger logger, struct LDKFeeEstimator feeest, struct LDKPersist persister);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_new")] public static extern long ChainMonitor_new(long _chain_source, long _broadcaster, long _logger, long _feeest, long _persister);
	// MUST_USE_RES struct LDKCVec_BalanceZ ChainMonitor_get_claimable_balances(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKCVec_ChannelDetailsZ ignored_channels);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_claimable_balances")] public static extern long ChainMonitor_get_claimable_balances(long _this_arg, long _ignored_channels);
	// MUST_USE_RES struct LDKCResult_LockedChannelMonitorNoneZ ChainMonitor_get_monitor(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_monitor")] public static extern long ChainMonitor_get_monitor(long _this_arg, long _funding_txo);
	// MUST_USE_RES struct LDKCVec_C2Tuple_OutPointChannelIdZZ ChainMonitor_list_monitors(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_list_monitors")] public static extern long ChainMonitor_list_monitors(long _this_arg);
	// MUST_USE_RES struct LDKCVec_C2Tuple_OutPointCVec_u64ZZZ ChainMonitor_list_pending_monitor_updates(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_list_pending_monitor_updates")] public static extern long ChainMonitor_list_pending_monitor_updates(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChainMonitor_channel_monitor_updated(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKOutPoint funding_txo, uint64_t completed_update_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_channel_monitor_updated")] public static extern long ChainMonitor_channel_monitor_updated(long _this_arg, long _funding_txo, long _completed_update_id);
	// MUST_USE_RES struct LDKFuture ChainMonitor_get_update_future(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_get_update_future")] public static extern long ChainMonitor_get_update_future(long _this_arg);
	// void ChainMonitor_rebroadcast_pending_claims(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_rebroadcast_pending_claims")] public static extern void ChainMonitor_rebroadcast_pending_claims(long _this_arg);
	// void ChainMonitor_signer_unblocked(const struct LDKChainMonitor *NONNULL_PTR this_arg, struct LDKOutPoint monitor_opt);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_signer_unblocked")] public static extern void ChainMonitor_signer_unblocked(long _this_arg, long _monitor_opt);
	// void ChainMonitor_archive_fully_resolved_channel_monitors(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_archive_fully_resolved_channel_monitors")] public static extern void ChainMonitor_archive_fully_resolved_channel_monitors(long _this_arg);
	// struct LDKListen ChainMonitor_as_Listen(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Listen")] public static extern long ChainMonitor_as_Listen(long _this_arg);
	// struct LDKConfirm ChainMonitor_as_Confirm(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Confirm")] public static extern long ChainMonitor_as_Confirm(long _this_arg);
	// struct LDKWatch ChainMonitor_as_Watch(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_Watch")] public static extern long ChainMonitor_as_Watch(long _this_arg);
	// struct LDKEventsProvider ChainMonitor_as_EventsProvider(const struct LDKChainMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainMonitor_as_EventsProvider")] public static extern long ChainMonitor_as_EventsProvider(long _this_arg);
	// void ChannelMonitorUpdate_free(struct LDKChannelMonitorUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_free")] public static extern void ChannelMonitorUpdate_free(long _this_obj);
	// uint64_t ChannelMonitorUpdate_get_update_id(const struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_get_update_id")] public static extern long ChannelMonitorUpdate_get_update_id(long _this_ptr);
	// void ChannelMonitorUpdate_set_update_id(struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_set_update_id")] public static extern void ChannelMonitorUpdate_set_update_id(long _this_ptr, long _val);
	// struct LDKChannelId ChannelMonitorUpdate_get_channel_id(const struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_get_channel_id")] public static extern long ChannelMonitorUpdate_get_channel_id(long _this_ptr);
	// void ChannelMonitorUpdate_set_channel_id(struct LDKChannelMonitorUpdate *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_set_channel_id")] public static extern void ChannelMonitorUpdate_set_channel_id(long _this_ptr, long _val);
	// uint64_t ChannelMonitorUpdate_clone_ptr(LDKChannelMonitorUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_clone_ptr")] public static extern long ChannelMonitorUpdate_clone_ptr(long _arg);
	// struct LDKChannelMonitorUpdate ChannelMonitorUpdate_clone(const struct LDKChannelMonitorUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_clone")] public static extern long ChannelMonitorUpdate_clone(long _orig);
	// bool ChannelMonitorUpdate_eq(const struct LDKChannelMonitorUpdate *NONNULL_PTR a, const struct LDKChannelMonitorUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_eq")] public static extern bool ChannelMonitorUpdate_eq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelMonitorUpdate_write(const struct LDKChannelMonitorUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_write")] public static extern long ChannelMonitorUpdate_write(long _obj);
	// struct LDKCResult_ChannelMonitorUpdateDecodeErrorZ ChannelMonitorUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitorUpdate_read")] public static extern long ChannelMonitorUpdate_read(long _ser);
	// void MonitorEvent_free(struct LDKMonitorEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_free")] public static extern void MonitorEvent_free(long _this_ptr);
	// uint64_t MonitorEvent_clone_ptr(LDKMonitorEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_clone_ptr")] public static extern long MonitorEvent_clone_ptr(long _arg);
	// struct LDKMonitorEvent MonitorEvent_clone(const struct LDKMonitorEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_clone")] public static extern long MonitorEvent_clone(long _orig);
	// struct LDKMonitorEvent MonitorEvent_htlcevent(struct LDKHTLCUpdate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_htlcevent")] public static extern long MonitorEvent_htlcevent(long _a);
	// struct LDKMonitorEvent MonitorEvent_holder_force_closed_with_info(struct LDKClosureReason reason, struct LDKOutPoint outpoint, struct LDKChannelId channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_holder_force_closed_with_info")] public static extern long MonitorEvent_holder_force_closed_with_info(long _reason, long _outpoint, long _channel_id);
	// struct LDKMonitorEvent MonitorEvent_holder_force_closed(struct LDKOutPoint a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_holder_force_closed")] public static extern long MonitorEvent_holder_force_closed(long _a);
	// struct LDKMonitorEvent MonitorEvent_completed(struct LDKOutPoint funding_txo, struct LDKChannelId channel_id, uint64_t monitor_update_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_completed")] public static extern long MonitorEvent_completed(long _funding_txo, long _channel_id, long _monitor_update_id);
	// bool MonitorEvent_eq(const struct LDKMonitorEvent *NONNULL_PTR a, const struct LDKMonitorEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_eq")] public static extern bool MonitorEvent_eq(long _a, long _b);
	// struct LDKCVec_u8Z MonitorEvent_write(const struct LDKMonitorEvent *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_write")] public static extern long MonitorEvent_write(long _obj);
	// struct LDKCResult_COption_MonitorEventZDecodeErrorZ MonitorEvent_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MonitorEvent_read")] public static extern long MonitorEvent_read(long _ser);
	// void HTLCUpdate_free(struct LDKHTLCUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_free")] public static extern void HTLCUpdate_free(long _this_obj);
	// uint64_t HTLCUpdate_clone_ptr(LDKHTLCUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_clone_ptr")] public static extern long HTLCUpdate_clone_ptr(long _arg);
	// struct LDKHTLCUpdate HTLCUpdate_clone(const struct LDKHTLCUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_clone")] public static extern long HTLCUpdate_clone(long _orig);
	// bool HTLCUpdate_eq(const struct LDKHTLCUpdate *NONNULL_PTR a, const struct LDKHTLCUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_eq")] public static extern bool HTLCUpdate_eq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCUpdate_write(const struct LDKHTLCUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_write")] public static extern long HTLCUpdate_write(long _obj);
	// struct LDKCResult_HTLCUpdateDecodeErrorZ HTLCUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCUpdate_read")] public static extern long HTLCUpdate_read(long _ser);
	// enum LDKBalanceSource BalanceSource_clone(const enum LDKBalanceSource *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BalanceSource_clone")] public static extern BalanceSource BalanceSource_clone(long _orig);
	// enum LDKBalanceSource BalanceSource_holder_force_closed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BalanceSource_holder_force_closed")] public static extern BalanceSource BalanceSource_holder_force_closed();
	// enum LDKBalanceSource BalanceSource_counterparty_force_closed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BalanceSource_counterparty_force_closed")] public static extern BalanceSource BalanceSource_counterparty_force_closed();
	// enum LDKBalanceSource BalanceSource_coop_close(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BalanceSource_coop_close")] public static extern BalanceSource BalanceSource_coop_close();
	// enum LDKBalanceSource BalanceSource_htlc(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BalanceSource_htlc")] public static extern BalanceSource BalanceSource_htlc();
	// bool BalanceSource_eq(const enum LDKBalanceSource *NONNULL_PTR a, const enum LDKBalanceSource *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BalanceSource_eq")] public static extern bool BalanceSource_eq(long _a, long _b);
	// void Balance_free(struct LDKBalance this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_free")] public static extern void Balance_free(long _this_ptr);
	// uint64_t Balance_clone_ptr(LDKBalance *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_clone_ptr")] public static extern long Balance_clone_ptr(long _arg);
	// struct LDKBalance Balance_clone(const struct LDKBalance *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_clone")] public static extern long Balance_clone(long _orig);
	// struct LDKBalance Balance_claimable_on_channel_close(uint64_t amount_satoshis, uint64_t transaction_fee_satoshis, uint64_t outbound_payment_htlc_rounded_msat, uint64_t outbound_forwarded_htlc_rounded_msat, uint64_t inbound_claiming_htlc_rounded_msat, uint64_t inbound_htlc_rounded_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_on_channel_close")] public static extern long Balance_claimable_on_channel_close(long _amount_satoshis, long _transaction_fee_satoshis, long _outbound_payment_htlc_rounded_msat, long _outbound_forwarded_htlc_rounded_msat, long _inbound_claiming_htlc_rounded_msat, long _inbound_htlc_rounded_msat);
	// struct LDKBalance Balance_claimable_awaiting_confirmations(uint64_t amount_satoshis, uint32_t confirmation_height, enum LDKBalanceSource source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_awaiting_confirmations")] public static extern long Balance_claimable_awaiting_confirmations(long _amount_satoshis, int _confirmation_height, BalanceSource _source);
	// struct LDKBalance Balance_contentious_claimable(uint64_t amount_satoshis, uint32_t timeout_height, struct LDKThirtyTwoBytes payment_hash, struct LDKThirtyTwoBytes payment_preimage);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_contentious_claimable")] public static extern long Balance_contentious_claimable(long _amount_satoshis, int _timeout_height, long _payment_hash, long _payment_preimage);
	// struct LDKBalance Balance_maybe_timeout_claimable_htlc(uint64_t amount_satoshis, uint32_t claimable_height, struct LDKThirtyTwoBytes payment_hash, bool outbound_payment);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_maybe_timeout_claimable_htlc")] public static extern long Balance_maybe_timeout_claimable_htlc(long _amount_satoshis, int _claimable_height, long _payment_hash, bool _outbound_payment);
	// struct LDKBalance Balance_maybe_preimage_claimable_htlc(uint64_t amount_satoshis, uint32_t expiry_height, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_maybe_preimage_claimable_htlc")] public static extern long Balance_maybe_preimage_claimable_htlc(long _amount_satoshis, int _expiry_height, long _payment_hash);
	// struct LDKBalance Balance_counterparty_revoked_output_claimable(uint64_t amount_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_counterparty_revoked_output_claimable")] public static extern long Balance_counterparty_revoked_output_claimable(long _amount_satoshis);
	// bool Balance_eq(const struct LDKBalance *NONNULL_PTR a, const struct LDKBalance *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_eq")] public static extern bool Balance_eq(long _a, long _b);
	// MUST_USE_RES uint64_t Balance_claimable_amount_satoshis(const struct LDKBalance *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Balance_claimable_amount_satoshis")] public static extern long Balance_claimable_amount_satoshis(long _this_arg);
	// void ChannelMonitor_free(struct LDKChannelMonitor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_free")] public static extern void ChannelMonitor_free(long _this_obj);
	// uint64_t ChannelMonitor_clone_ptr(LDKChannelMonitor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_clone_ptr")] public static extern long ChannelMonitor_clone_ptr(long _arg);
	// struct LDKChannelMonitor ChannelMonitor_clone(const struct LDKChannelMonitor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_clone")] public static extern long ChannelMonitor_clone(long _orig);
	// struct LDKCVec_u8Z ChannelMonitor_write(const struct LDKChannelMonitor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_write")] public static extern long ChannelMonitor_write(long _obj);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelMonitor_update_monitor(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKChannelMonitorUpdate *NONNULL_PTR updates, const struct LDKBroadcasterInterface *NONNULL_PTR broadcaster, const struct LDKFeeEstimator *NONNULL_PTR fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_update_monitor")] public static extern long ChannelMonitor_update_monitor(long _this_arg, long _updates, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES uint64_t ChannelMonitor_get_latest_update_id(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_latest_update_id")] public static extern long ChannelMonitor_get_latest_update_id(long _this_arg);
	// MUST_USE_RES struct LDKC2Tuple_OutPointCVec_u8ZZ ChannelMonitor_get_funding_txo(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_funding_txo")] public static extern long ChannelMonitor_get_funding_txo(long _this_arg);
	// MUST_USE_RES struct LDKChannelId ChannelMonitor_channel_id(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_channel_id")] public static extern long ChannelMonitor_channel_id(long _this_arg);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32CVec_u8ZZZZZ ChannelMonitor_get_outputs_to_watch(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_outputs_to_watch")] public static extern long ChannelMonitor_get_outputs_to_watch(long _this_arg);
	// void ChannelMonitor_load_outputs_to_watch(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKFilter *NONNULL_PTR filter, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_load_outputs_to_watch")] public static extern void ChannelMonitor_load_outputs_to_watch(long _this_arg, long _filter, long _logger);
	// MUST_USE_RES struct LDKCVec_MonitorEventZ ChannelMonitor_get_and_clear_pending_monitor_events(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_and_clear_pending_monitor_events")] public static extern long ChannelMonitor_get_and_clear_pending_monitor_events(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneReplayEventZ ChannelMonitor_process_pending_events(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKEventHandler *NONNULL_PTR handler, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_process_pending_events")] public static extern long ChannelMonitor_process_pending_events(long _this_arg, long _handler, long _logger);
	// MUST_USE_RES struct LDKCommitmentTransaction ChannelMonitor_initial_counterparty_commitment_tx(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_initial_counterparty_commitment_tx")] public static extern long ChannelMonitor_initial_counterparty_commitment_tx(long _this_arg);
	// MUST_USE_RES struct LDKCVec_CommitmentTransactionZ ChannelMonitor_counterparty_commitment_txs_from_update(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKChannelMonitorUpdate *NONNULL_PTR update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_counterparty_commitment_txs_from_update")] public static extern long ChannelMonitor_counterparty_commitment_txs_from_update(long _this_arg, long _update);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ ChannelMonitor_sign_to_local_justice_tx(const struct LDKChannelMonitor *NONNULL_PTR this_arg, struct LDKTransaction justice_tx, uintptr_t input_idx, uint64_t value, uint64_t commitment_number);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_sign_to_local_justice_tx")] public static extern long ChannelMonitor_sign_to_local_justice_tx(long _this_arg, long _justice_tx, long _input_idx, long _value, long _commitment_number);
	// MUST_USE_RES struct LDKPublicKey ChannelMonitor_get_counterparty_node_id(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_counterparty_node_id")] public static extern long ChannelMonitor_get_counterparty_node_id(long _this_arg);
	// void ChannelMonitor_broadcast_latest_holder_commitment_txn(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKBroadcasterInterface *NONNULL_PTR broadcaster, const struct LDKFeeEstimator *NONNULL_PTR fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_broadcast_latest_holder_commitment_txn")] public static extern void ChannelMonitor_broadcast_latest_holder_commitment_txn(long _this_arg, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_block_connected(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_block_connected")] public static extern long ChannelMonitor_block_connected(long _this_arg, long _header, long _txdata, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// void ChannelMonitor_block_disconnected(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_block_disconnected")] public static extern void ChannelMonitor_block_disconnected(long _this_arg, long _header, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_transactions_confirmed(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], struct LDKCVec_C2Tuple_usizeTransactionZZ txdata, uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_transactions_confirmed")] public static extern long ChannelMonitor_transactions_confirmed(long _this_arg, long _header, long _txdata, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// void ChannelMonitor_transaction_unconfirmed(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*txid)[32], struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_transaction_unconfirmed")] public static extern void ChannelMonitor_transaction_unconfirmed(long _this_arg, long _txid, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C2Tuple_ThirtyTwoBytesCVec_C2Tuple_u32TxOutZZZZ ChannelMonitor_best_block_updated(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const uint8_t (*header)[80], uint32_t height, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_best_block_updated")] public static extern long ChannelMonitor_best_block_updated(long _this_arg, long _header, int _height, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_C3Tuple_ThirtyTwoBytesu32COption_ThirtyTwoBytesZZZ ChannelMonitor_get_relevant_txids(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_relevant_txids")] public static extern long ChannelMonitor_get_relevant_txids(long _this_arg);
	// MUST_USE_RES struct LDKBestBlock ChannelMonitor_current_best_block(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_current_best_block")] public static extern long ChannelMonitor_current_best_block(long _this_arg);
	// void ChannelMonitor_rebroadcast_pending_claims(const struct LDKChannelMonitor *NONNULL_PTR this_arg, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_rebroadcast_pending_claims")] public static extern void ChannelMonitor_rebroadcast_pending_claims(long _this_arg, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES bool ChannelMonitor_has_pending_claims(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_has_pending_claims")] public static extern bool ChannelMonitor_has_pending_claims(long _this_arg);
	// void ChannelMonitor_signer_unblocked(const struct LDKChannelMonitor *NONNULL_PTR this_arg, struct LDKBroadcasterInterface broadcaster, struct LDKFeeEstimator fee_estimator, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_signer_unblocked")] public static extern void ChannelMonitor_signer_unblocked(long _this_arg, long _broadcaster, long _fee_estimator, long _logger);
	// MUST_USE_RES struct LDKCVec_SpendableOutputDescriptorZ ChannelMonitor_get_spendable_outputs(const struct LDKChannelMonitor *NONNULL_PTR this_arg, struct LDKTransaction tx, uint32_t confirmation_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_spendable_outputs")] public static extern long ChannelMonitor_get_spendable_outputs(long _this_arg, long _tx, int _confirmation_height);
	// MUST_USE_RES struct LDKC2Tuple_boolboolZ ChannelMonitor_check_and_update_full_resolution_status(const struct LDKChannelMonitor *NONNULL_PTR this_arg, const struct LDKLogger *NONNULL_PTR logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_check_and_update_full_resolution_status")] public static extern long ChannelMonitor_check_and_update_full_resolution_status(long _this_arg, long _logger);
	// MUST_USE_RES struct LDKCVec_BalanceZ ChannelMonitor_get_claimable_balances(const struct LDKChannelMonitor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMonitor_get_claimable_balances")] public static extern long ChannelMonitor_get_claimable_balances(long _this_arg);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelMonitorZDecodeErrorZ C2Tuple_ThirtyTwoBytesChannelMonitorZ_read(struct LDKu8slice ser, const struct LDKEntropySource *NONNULL_PTR arg_a, const struct LDKSignerProvider *NONNULL_PTR arg_b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelMonitorZ_read")] public static extern long C2Tuple_ThirtyTwoBytesChannelMonitorZ_read(long _ser, long _arg_a, long _arg_b);
	// void OutPoint_free(struct LDKOutPoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_free")] public static extern void OutPoint_free(long _this_obj);
	// const uint8_t (*OutPoint_get_txid(const struct LDKOutPoint *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_get_txid")] public static extern long OutPoint_get_txid(long _this_ptr);
	// void OutPoint_set_txid(struct LDKOutPoint *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_set_txid")] public static extern void OutPoint_set_txid(long _this_ptr, long _val);
	// uint16_t OutPoint_get_index(const struct LDKOutPoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_get_index")] public static extern short OutPoint_get_index(long _this_ptr);
	// void OutPoint_set_index(struct LDKOutPoint *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_set_index")] public static extern void OutPoint_set_index(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKOutPoint OutPoint_new(struct LDKThirtyTwoBytes txid_arg, uint16_t index_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_new")] public static extern long OutPoint_new(long _txid_arg, short _index_arg);
	// uint64_t OutPoint_clone_ptr(LDKOutPoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_clone_ptr")] public static extern long OutPoint_clone_ptr(long _arg);
	// struct LDKOutPoint OutPoint_clone(const struct LDKOutPoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_clone")] public static extern long OutPoint_clone(long _orig);
	// bool OutPoint_eq(const struct LDKOutPoint *NONNULL_PTR a, const struct LDKOutPoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_eq")] public static extern bool OutPoint_eq(long _a, long _b);
	// uint64_t OutPoint_hash(const struct LDKOutPoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_hash")] public static extern long OutPoint_hash(long _o);
	// struct LDKStr OutPoint_to_str(const struct LDKOutPoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_to_str")] public static extern long OutPoint_to_str(long _o);
	// struct LDKCVec_u8Z OutPoint_write(const struct LDKOutPoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_write")] public static extern long OutPoint_write(long _obj);
	// struct LDKCResult_OutPointDecodeErrorZ OutPoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutPoint_read")] public static extern long OutPoint_read(long _ser);
	// void InboundHTLCErr_free(struct LDKInboundHTLCErr this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_free")] public static extern void InboundHTLCErr_free(long _this_obj);
	// uint16_t InboundHTLCErr_get_err_code(const struct LDKInboundHTLCErr *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_get_err_code")] public static extern short InboundHTLCErr_get_err_code(long _this_ptr);
	// void InboundHTLCErr_set_err_code(struct LDKInboundHTLCErr *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_set_err_code")] public static extern void InboundHTLCErr_set_err_code(long _this_ptr, short _val);
	// struct LDKCVec_u8Z InboundHTLCErr_get_err_data(const struct LDKInboundHTLCErr *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_get_err_data")] public static extern long InboundHTLCErr_get_err_data(long _this_ptr);
	// void InboundHTLCErr_set_err_data(struct LDKInboundHTLCErr *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_set_err_data")] public static extern void InboundHTLCErr_set_err_data(long _this_ptr, long _val);
	// struct LDKStr InboundHTLCErr_get_msg(const struct LDKInboundHTLCErr *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_get_msg")] public static extern long InboundHTLCErr_get_msg(long _this_ptr);
	// void InboundHTLCErr_set_msg(struct LDKInboundHTLCErr *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_set_msg")] public static extern void InboundHTLCErr_set_msg(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInboundHTLCErr InboundHTLCErr_new(uint16_t err_code_arg, struct LDKCVec_u8Z err_data_arg, struct LDKStr msg_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_new")] public static extern long InboundHTLCErr_new(short _err_code_arg, long _err_data_arg, long _msg_arg);
	// uint64_t InboundHTLCErr_clone_ptr(LDKInboundHTLCErr *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_clone_ptr")] public static extern long InboundHTLCErr_clone_ptr(long _arg);
	// struct LDKInboundHTLCErr InboundHTLCErr_clone(const struct LDKInboundHTLCErr *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_clone")] public static extern long InboundHTLCErr_clone(long _orig);
	// uint64_t InboundHTLCErr_hash(const struct LDKInboundHTLCErr *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_hash")] public static extern long InboundHTLCErr_hash(long _o);
	// bool InboundHTLCErr_eq(const struct LDKInboundHTLCErr *NONNULL_PTR a, const struct LDKInboundHTLCErr *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCErr_eq")] public static extern bool InboundHTLCErr_eq(long _a, long _b);
	// struct LDKCResult_PendingHTLCInfoInboundHTLCErrZ peel_payment_onion(const struct LDKUpdateAddHTLC *NONNULL_PTR msg, struct LDKNodeSigner node_signer, struct LDKLogger logger, uint32_t cur_height, bool allow_skimmed_fees);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_peel_payment_onion")] public static extern long peel_payment_onion(long _msg, long _node_signer, long _logger, int _cur_height, bool _allow_skimmed_fees);
	// void PendingHTLCRouting_free(struct LDKPendingHTLCRouting this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_free")] public static extern void PendingHTLCRouting_free(long _this_ptr);
	// uint64_t PendingHTLCRouting_clone_ptr(LDKPendingHTLCRouting *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_clone_ptr")] public static extern long PendingHTLCRouting_clone_ptr(long _arg);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_clone(const struct LDKPendingHTLCRouting *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_clone")] public static extern long PendingHTLCRouting_clone(long _orig);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_forward(struct LDKOnionPacket onion_packet, uint64_t short_channel_id, struct LDKBlindedForward blinded, struct LDKCOption_u32Z incoming_cltv_expiry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_forward")] public static extern long PendingHTLCRouting_forward(long _onion_packet, long _short_channel_id, long _blinded, long _incoming_cltv_expiry);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_receive(struct LDKFinalOnionHopData payment_data, struct LDKCOption_CVec_u8ZZ payment_metadata, struct LDKCOption_PaymentContextZ payment_context, uint32_t incoming_cltv_expiry, struct LDKThirtyTwoBytes phantom_shared_secret, struct LDKCVec_C2Tuple_u64CVec_u8ZZZ custom_tlvs, bool requires_blinded_error);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_receive")] public static extern long PendingHTLCRouting_receive(long _payment_data, long _payment_metadata, long _payment_context, int _incoming_cltv_expiry, long _phantom_shared_secret, long _custom_tlvs, bool _requires_blinded_error);
	// struct LDKPendingHTLCRouting PendingHTLCRouting_receive_keysend(struct LDKFinalOnionHopData payment_data, struct LDKThirtyTwoBytes payment_preimage, struct LDKCOption_CVec_u8ZZ payment_metadata, uint32_t incoming_cltv_expiry, struct LDKCVec_C2Tuple_u64CVec_u8ZZZ custom_tlvs, bool requires_blinded_error, bool has_recipient_created_payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_receive_keysend")] public static extern long PendingHTLCRouting_receive_keysend(long _payment_data, long _payment_preimage, long _payment_metadata, int _incoming_cltv_expiry, long _custom_tlvs, bool _requires_blinded_error, bool _has_recipient_created_payment_secret);
	// void BlindedForward_free(struct LDKBlindedForward this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_free")] public static extern void BlindedForward_free(long _this_obj);
	// struct LDKPublicKey BlindedForward_get_inbound_blinding_point(const struct LDKBlindedForward *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_get_inbound_blinding_point")] public static extern long BlindedForward_get_inbound_blinding_point(long _this_ptr);
	// void BlindedForward_set_inbound_blinding_point(struct LDKBlindedForward *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_set_inbound_blinding_point")] public static extern void BlindedForward_set_inbound_blinding_point(long _this_ptr, long _val);
	// enum LDKBlindedFailure BlindedForward_get_failure(const struct LDKBlindedForward *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_get_failure")] public static extern BlindedFailure BlindedForward_get_failure(long _this_ptr);
	// void BlindedForward_set_failure(struct LDKBlindedForward *NONNULL_PTR this_ptr, enum LDKBlindedFailure val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_set_failure")] public static extern void BlindedForward_set_failure(long _this_ptr, BlindedFailure _val);
	// struct LDKPublicKey BlindedForward_get_next_blinding_override(const struct LDKBlindedForward *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_get_next_blinding_override")] public static extern long BlindedForward_get_next_blinding_override(long _this_ptr);
	// void BlindedForward_set_next_blinding_override(struct LDKBlindedForward *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_set_next_blinding_override")] public static extern void BlindedForward_set_next_blinding_override(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedForward BlindedForward_new(struct LDKPublicKey inbound_blinding_point_arg, enum LDKBlindedFailure failure_arg, struct LDKPublicKey next_blinding_override_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_new")] public static extern long BlindedForward_new(long _inbound_blinding_point_arg, BlindedFailure _failure_arg, long _next_blinding_override_arg);
	// uint64_t BlindedForward_clone_ptr(LDKBlindedForward *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_clone_ptr")] public static extern long BlindedForward_clone_ptr(long _arg);
	// struct LDKBlindedForward BlindedForward_clone(const struct LDKBlindedForward *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_clone")] public static extern long BlindedForward_clone(long _orig);
	// uint64_t BlindedForward_hash(const struct LDKBlindedForward *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_hash")] public static extern long BlindedForward_hash(long _o);
	// bool BlindedForward_eq(const struct LDKBlindedForward *NONNULL_PTR a, const struct LDKBlindedForward *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_eq")] public static extern bool BlindedForward_eq(long _a, long _b);
	// void PendingHTLCInfo_free(struct LDKPendingHTLCInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_free")] public static extern void PendingHTLCInfo_free(long _this_obj);
	// struct LDKPendingHTLCRouting PendingHTLCInfo_get_routing(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_routing")] public static extern long PendingHTLCInfo_get_routing(long _this_ptr);
	// void PendingHTLCInfo_set_routing(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKPendingHTLCRouting val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_routing")] public static extern void PendingHTLCInfo_set_routing(long _this_ptr, long _val);
	// const uint8_t (*PendingHTLCInfo_get_incoming_shared_secret(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_incoming_shared_secret")] public static extern long PendingHTLCInfo_get_incoming_shared_secret(long _this_ptr);
	// void PendingHTLCInfo_set_incoming_shared_secret(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_incoming_shared_secret")] public static extern void PendingHTLCInfo_set_incoming_shared_secret(long _this_ptr, long _val);
	// const uint8_t (*PendingHTLCInfo_get_payment_hash(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_payment_hash")] public static extern long PendingHTLCInfo_get_payment_hash(long _this_ptr);
	// void PendingHTLCInfo_set_payment_hash(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_payment_hash")] public static extern void PendingHTLCInfo_set_payment_hash(long _this_ptr, long _val);
	// struct LDKCOption_u64Z PendingHTLCInfo_get_incoming_amt_msat(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_incoming_amt_msat")] public static extern long PendingHTLCInfo_get_incoming_amt_msat(long _this_ptr);
	// void PendingHTLCInfo_set_incoming_amt_msat(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_incoming_amt_msat")] public static extern void PendingHTLCInfo_set_incoming_amt_msat(long _this_ptr, long _val);
	// uint64_t PendingHTLCInfo_get_outgoing_amt_msat(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_outgoing_amt_msat")] public static extern long PendingHTLCInfo_get_outgoing_amt_msat(long _this_ptr);
	// void PendingHTLCInfo_set_outgoing_amt_msat(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_outgoing_amt_msat")] public static extern void PendingHTLCInfo_set_outgoing_amt_msat(long _this_ptr, long _val);
	// uint32_t PendingHTLCInfo_get_outgoing_cltv_value(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_outgoing_cltv_value")] public static extern int PendingHTLCInfo_get_outgoing_cltv_value(long _this_ptr);
	// void PendingHTLCInfo_set_outgoing_cltv_value(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_outgoing_cltv_value")] public static extern void PendingHTLCInfo_set_outgoing_cltv_value(long _this_ptr, int _val);
	// struct LDKCOption_u64Z PendingHTLCInfo_get_skimmed_fee_msat(const struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_get_skimmed_fee_msat")] public static extern long PendingHTLCInfo_get_skimmed_fee_msat(long _this_ptr);
	// void PendingHTLCInfo_set_skimmed_fee_msat(struct LDKPendingHTLCInfo *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_set_skimmed_fee_msat")] public static extern void PendingHTLCInfo_set_skimmed_fee_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPendingHTLCInfo PendingHTLCInfo_new(struct LDKPendingHTLCRouting routing_arg, struct LDKThirtyTwoBytes incoming_shared_secret_arg, struct LDKThirtyTwoBytes payment_hash_arg, struct LDKCOption_u64Z incoming_amt_msat_arg, uint64_t outgoing_amt_msat_arg, uint32_t outgoing_cltv_value_arg, struct LDKCOption_u64Z skimmed_fee_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_new")] public static extern long PendingHTLCInfo_new(long _routing_arg, long _incoming_shared_secret_arg, long _payment_hash_arg, long _incoming_amt_msat_arg, long _outgoing_amt_msat_arg, int _outgoing_cltv_value_arg, long _skimmed_fee_msat_arg);
	// uint64_t PendingHTLCInfo_clone_ptr(LDKPendingHTLCInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_clone_ptr")] public static extern long PendingHTLCInfo_clone_ptr(long _arg);
	// struct LDKPendingHTLCInfo PendingHTLCInfo_clone(const struct LDKPendingHTLCInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_clone")] public static extern long PendingHTLCInfo_clone(long _orig);
	// enum LDKBlindedFailure BlindedFailure_clone(const enum LDKBlindedFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_clone")] public static extern BlindedFailure BlindedFailure_clone(long _orig);
	// enum LDKBlindedFailure BlindedFailure_from_introduction_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_from_introduction_node")] public static extern BlindedFailure BlindedFailure_from_introduction_node();
	// enum LDKBlindedFailure BlindedFailure_from_blinded_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_from_blinded_node")] public static extern BlindedFailure BlindedFailure_from_blinded_node();
	// uint64_t BlindedFailure_hash(const enum LDKBlindedFailure *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_hash")] public static extern long BlindedFailure_hash(long _o);
	// bool BlindedFailure_eq(const enum LDKBlindedFailure *NONNULL_PTR a, const enum LDKBlindedFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_eq")] public static extern bool BlindedFailure_eq(long _a, long _b);
	// void Verification_free(struct LDKVerification this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Verification_free")] public static extern void Verification_free(long _this_ptr);
	// struct LDKVerification UnauthenticatedReceiveTlvs_as_Verification(const struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_as_Verification")] public static extern long UnauthenticatedReceiveTlvs_as_Verification(long _this_arg);
	// void FailureCode_free(struct LDKFailureCode this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_free")] public static extern void FailureCode_free(long _this_ptr);
	// uint64_t FailureCode_clone_ptr(LDKFailureCode *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_clone_ptr")] public static extern long FailureCode_clone_ptr(long _arg);
	// struct LDKFailureCode FailureCode_clone(const struct LDKFailureCode *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_clone")] public static extern long FailureCode_clone(long _orig);
	// struct LDKFailureCode FailureCode_temporary_node_failure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_temporary_node_failure")] public static extern long FailureCode_temporary_node_failure();
	// struct LDKFailureCode FailureCode_required_node_feature_missing(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_required_node_feature_missing")] public static extern long FailureCode_required_node_feature_missing();
	// struct LDKFailureCode FailureCode_incorrect_or_unknown_payment_details(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_incorrect_or_unknown_payment_details")] public static extern long FailureCode_incorrect_or_unknown_payment_details();
	// struct LDKFailureCode FailureCode_invalid_onion_payload(struct LDKCOption_C2Tuple_u64u16ZZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FailureCode_invalid_onion_payload")] public static extern long FailureCode_invalid_onion_payload(long _a);
	// void ChannelManager_free(struct LDKChannelManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_free")] public static extern void ChannelManager_free(long _this_obj);
	// void ChainParameters_free(struct LDKChainParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_free")] public static extern void ChainParameters_free(long _this_obj);
	// enum LDKNetwork ChainParameters_get_network(const struct LDKChainParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_get_network")] public static extern Network ChainParameters_get_network(long _this_ptr);
	// void ChainParameters_set_network(struct LDKChainParameters *NONNULL_PTR this_ptr, enum LDKNetwork val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_set_network")] public static extern void ChainParameters_set_network(long _this_ptr, Network _val);
	// struct LDKBestBlock ChainParameters_get_best_block(const struct LDKChainParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_get_best_block")] public static extern long ChainParameters_get_best_block(long _this_ptr);
	// void ChainParameters_set_best_block(struct LDKChainParameters *NONNULL_PTR this_ptr, struct LDKBestBlock val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_set_best_block")] public static extern void ChainParameters_set_best_block(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChainParameters ChainParameters_new(enum LDKNetwork network_arg, struct LDKBestBlock best_block_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_new")] public static extern long ChainParameters_new(Network _network_arg, long _best_block_arg);
	// uint64_t ChainParameters_clone_ptr(LDKChainParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_clone_ptr")] public static extern long ChainParameters_clone_ptr(long _arg);
	// struct LDKChainParameters ChainParameters_clone(const struct LDKChainParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChainParameters_clone")] public static extern long ChainParameters_clone(long _orig);
	// void RecentPaymentDetails_free(struct LDKRecentPaymentDetails this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_free")] public static extern void RecentPaymentDetails_free(long _this_ptr);
	// uint64_t RecentPaymentDetails_clone_ptr(LDKRecentPaymentDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_clone_ptr")] public static extern long RecentPaymentDetails_clone_ptr(long _arg);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_clone(const struct LDKRecentPaymentDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_clone")] public static extern long RecentPaymentDetails_clone(long _orig);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_awaiting_invoice(struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_awaiting_invoice")] public static extern long RecentPaymentDetails_awaiting_invoice(long _payment_id);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_pending(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, uint64_t total_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_pending")] public static extern long RecentPaymentDetails_pending(long _payment_id, long _payment_hash, long _total_msat);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_fulfilled(struct LDKThirtyTwoBytes payment_id, struct LDKCOption_ThirtyTwoBytesZ payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_fulfilled")] public static extern long RecentPaymentDetails_fulfilled(long _payment_id, long _payment_hash);
	// struct LDKRecentPaymentDetails RecentPaymentDetails_abandoned(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecentPaymentDetails_abandoned")] public static extern long RecentPaymentDetails_abandoned(long _payment_id, long _payment_hash);
	// void PhantomRouteHints_free(struct LDKPhantomRouteHints this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_free")] public static extern void PhantomRouteHints_free(long _this_obj);
	// struct LDKCVec_ChannelDetailsZ PhantomRouteHints_get_channels(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_channels")] public static extern long PhantomRouteHints_get_channels(long _this_ptr);
	// void PhantomRouteHints_set_channels(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, struct LDKCVec_ChannelDetailsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_channels")] public static extern void PhantomRouteHints_set_channels(long _this_ptr, long _val);
	// uint64_t PhantomRouteHints_get_phantom_scid(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_phantom_scid")] public static extern long PhantomRouteHints_get_phantom_scid(long _this_ptr);
	// void PhantomRouteHints_set_phantom_scid(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_phantom_scid")] public static extern void PhantomRouteHints_set_phantom_scid(long _this_ptr, long _val);
	// struct LDKPublicKey PhantomRouteHints_get_real_node_pubkey(const struct LDKPhantomRouteHints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_get_real_node_pubkey")] public static extern long PhantomRouteHints_get_real_node_pubkey(long _this_ptr);
	// void PhantomRouteHints_set_real_node_pubkey(struct LDKPhantomRouteHints *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_set_real_node_pubkey")] public static extern void PhantomRouteHints_set_real_node_pubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPhantomRouteHints PhantomRouteHints_new(struct LDKCVec_ChannelDetailsZ channels_arg, uint64_t phantom_scid_arg, struct LDKPublicKey real_node_pubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_new")] public static extern long PhantomRouteHints_new(long _channels_arg, long _phantom_scid_arg, long _real_node_pubkey_arg);
	// uint64_t PhantomRouteHints_clone_ptr(LDKPhantomRouteHints *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_clone_ptr")] public static extern long PhantomRouteHints_clone_ptr(long _arg);
	// struct LDKPhantomRouteHints PhantomRouteHints_clone(const struct LDKPhantomRouteHints *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_clone")] public static extern long PhantomRouteHints_clone(long _orig);
	// MUST_USE_RES struct LDKChannelManager ChannelManager_new(struct LDKFeeEstimator fee_est, struct LDKWatch chain_monitor, struct LDKBroadcasterInterface tx_broadcaster, struct LDKRouter router, struct LDKMessageRouter message_router, struct LDKLogger logger, struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKSignerProvider signer_provider, struct LDKUserConfig config, struct LDKChainParameters params, uint32_t current_timestamp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_new")] public static extern long ChannelManager_new(long _fee_est, long _chain_monitor, long _tx_broadcaster, long _router, long _message_router, long _logger, long _entropy_source, long _node_signer, long _signer_provider, long _config, long _params, int _current_timestamp);
	// MUST_USE_RES struct LDKUserConfig ChannelManager_get_current_default_configuration(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_current_default_configuration")] public static extern long ChannelManager_get_current_default_configuration(long _this_arg);
	// MUST_USE_RES struct LDKCResult_ChannelIdAPIErrorZ ChannelManager_create_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey their_network_key, uint64_t channel_value_satoshis, uint64_t push_msat, struct LDKU128 user_channel_id, struct LDKChannelId temporary_channel_id, struct LDKUserConfig override_config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_channel")] public static extern long ChannelManager_create_channel(long _this_arg, long _their_network_key, long _channel_value_satoshis, long _push_msat, long _user_channel_id, long _temporary_channel_id, long _override_config);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_channels(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_channels")] public static extern long ChannelManager_list_channels(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_usable_channels(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_usable_channels")] public static extern long ChannelManager_list_usable_channels(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ChannelDetailsZ ChannelManager_list_channels_with_counterparty(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_channels_with_counterparty")] public static extern long ChannelManager_list_channels_with_counterparty(long _this_arg, long _counterparty_node_id);
	// MUST_USE_RES struct LDKCVec_RecentPaymentDetailsZ ChannelManager_list_recent_payments(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_list_recent_payments")] public static extern long ChannelManager_list_recent_payments(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_close_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKChannelId *NONNULL_PTR channel_id, struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_close_channel")] public static extern long ChannelManager_close_channel(long _this_arg, long _channel_id, long _counterparty_node_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_close_channel_with_feerate_and_script(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKChannelId *NONNULL_PTR channel_id, struct LDKPublicKey counterparty_node_id, struct LDKCOption_u32Z target_feerate_sats_per_1000_weight, struct LDKShutdownScript shutdown_script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_close_channel_with_feerate_and_script")] public static extern long ChannelManager_close_channel_with_feerate_and_script(long _this_arg, long _channel_id, long _counterparty_node_id, long _target_feerate_sats_per_1000_weight, long _shutdown_script);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_force_close_broadcasting_latest_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKChannelId *NONNULL_PTR channel_id, struct LDKPublicKey counterparty_node_id, struct LDKStr error_message);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_broadcasting_latest_txn")] public static extern long ChannelManager_force_close_broadcasting_latest_txn(long _this_arg, long _channel_id, long _counterparty_node_id, long _error_message);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_force_close_without_broadcasting_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKChannelId *NONNULL_PTR channel_id, struct LDKPublicKey counterparty_node_id, struct LDKStr error_message);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_without_broadcasting_txn")] public static extern long ChannelManager_force_close_without_broadcasting_txn(long _this_arg, long _channel_id, long _counterparty_node_id, long _error_message);
	// void ChannelManager_force_close_all_channels_broadcasting_latest_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKStr error_message);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_all_channels_broadcasting_latest_txn")] public static extern void ChannelManager_force_close_all_channels_broadcasting_latest_txn(long _this_arg, long _error_message);
	// void ChannelManager_force_close_all_channels_without_broadcasting_txn(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKStr error_message);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_force_close_all_channels_without_broadcasting_txn")] public static extern void ChannelManager_force_close_all_channels_without_broadcasting_txn(long _this_arg, long _error_message);
	// MUST_USE_RES struct LDKCResult_NoneRetryableSendFailureZ ChannelManager_send_payment_with_route(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKRoute route, struct LDKThirtyTwoBytes payment_hash, struct LDKRecipientOnionFields recipient_onion, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_payment_with_route")] public static extern long ChannelManager_send_payment_with_route(long _this_arg, long _route, long _payment_hash, long _recipient_onion, long _payment_id);
	// MUST_USE_RES struct LDKCResult_NoneRetryableSendFailureZ ChannelManager_send_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKRecipientOnionFields recipient_onion, struct LDKThirtyTwoBytes payment_id, struct LDKRouteParameters route_params, struct LDKRetry retry_strategy);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_payment")] public static extern long ChannelManager_send_payment(long _this_arg, long _payment_hash, long _recipient_onion, long _payment_id, long _route_params, long _retry_strategy);
	// MUST_USE_RES struct LDKCResult_NoneBolt12PaymentErrorZ ChannelManager_send_payment_for_bolt12_invoice(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKBolt12Invoice *NONNULL_PTR invoice, struct LDKCOption_OffersContextZ context);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_payment_for_bolt12_invoice")] public static extern long ChannelManager_send_payment_for_bolt12_invoice(long _this_arg, long _invoice, long _context);
	// void ChannelManager_abandon_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_abandon_payment")] public static extern void ChannelManager_abandon_payment(long _this_arg, long _payment_id);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesRetryableSendFailureZ ChannelManager_send_spontaneous_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_ThirtyTwoBytesZ payment_preimage, struct LDKRecipientOnionFields recipient_onion, struct LDKThirtyTwoBytes payment_id, struct LDKRouteParameters route_params, struct LDKRetry retry_strategy);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_spontaneous_payment")] public static extern long ChannelManager_send_spontaneous_payment(long _this_arg, long _payment_preimage, long _recipient_onion, long _payment_id, long _route_params, long _retry_strategy);
	// MUST_USE_RES struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZProbeSendFailureZ ChannelManager_send_probe(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_probe")] public static extern long ChannelManager_send_probe(long _this_arg, long _path);
	// MUST_USE_RES struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ ChannelManager_send_spontaneous_preflight_probes(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey node_id, uint64_t amount_msat, uint32_t final_cltv_expiry_delta, struct LDKCOption_u64Z liquidity_limit_multiplier);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_spontaneous_preflight_probes")] public static extern long ChannelManager_send_spontaneous_preflight_probes(long _this_arg, long _node_id, long _amount_msat, int _final_cltv_expiry_delta, long _liquidity_limit_multiplier);
	// MUST_USE_RES struct LDKCResult_CVec_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZZProbeSendFailureZ ChannelManager_send_preflight_probes(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKRouteParameters route_params, struct LDKCOption_u64Z liquidity_limit_multiplier);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_send_preflight_probes")] public static extern long ChannelManager_send_preflight_probes(long _this_arg, long _route_params, long _liquidity_limit_multiplier);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_funding_transaction_generated(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKChannelId temporary_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKTransaction funding_transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_funding_transaction_generated")] public static extern long ChannelManager_funding_transaction_generated(long _this_arg, long _temporary_channel_id, long _counterparty_node_id, long _funding_transaction);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_unsafe_manual_funding_transaction_generated(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKChannelId temporary_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKOutPoint funding);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_unsafe_manual_funding_transaction_generated")] public static extern long ChannelManager_unsafe_manual_funding_transaction_generated(long _this_arg, long _temporary_channel_id, long _counterparty_node_id, long _funding);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_batch_funding_transaction_generated(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCVec_C2Tuple_ChannelIdPublicKeyZZ temporary_channels, struct LDKTransaction funding_transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_batch_funding_transaction_generated")] public static extern long ChannelManager_batch_funding_transaction_generated(long _this_arg, long _temporary_channels, long _funding_transaction);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_update_partial_channel_config(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKCVec_ChannelIdZ channel_ids, const struct LDKChannelConfigUpdate *NONNULL_PTR config_update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_update_partial_channel_config")] public static extern long ChannelManager_update_partial_channel_config(long _this_arg, long _counterparty_node_id, long _channel_ids, long _config_update);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_update_channel_config(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKCVec_ChannelIdZ channel_ids, const struct LDKChannelConfig *NONNULL_PTR config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_update_channel_config")] public static extern long ChannelManager_update_channel_config(long _this_arg, long _counterparty_node_id, long _channel_ids, long _config);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_forward_intercepted_htlc(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes intercept_id, const struct LDKChannelId *NONNULL_PTR next_hop_channel_id, struct LDKPublicKey next_node_id, uint64_t amt_to_forward_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_forward_intercepted_htlc")] public static extern long ChannelManager_forward_intercepted_htlc(long _this_arg, long _intercept_id, long _next_hop_channel_id, long _next_node_id, long _amt_to_forward_msat);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_fail_intercepted_htlc(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes intercept_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_intercepted_htlc")] public static extern long ChannelManager_fail_intercepted_htlc(long _this_arg, long _intercept_id);
	// void ChannelManager_process_pending_htlc_forwards(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_process_pending_htlc_forwards")] public static extern void ChannelManager_process_pending_htlc_forwards(long _this_arg);
	// void ChannelManager_timer_tick_occurred(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_timer_tick_occurred")] public static extern void ChannelManager_timer_tick_occurred(long _this_arg);
	// void ChannelManager_fail_htlc_backwards(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*payment_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_htlc_backwards")] public static extern void ChannelManager_fail_htlc_backwards(long _this_arg, long _payment_hash);
	// void ChannelManager_fail_htlc_backwards_with_reason(const struct LDKChannelManager *NONNULL_PTR this_arg, const uint8_t (*payment_hash)[32], struct LDKFailureCode failure_code);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_fail_htlc_backwards_with_reason")] public static extern void ChannelManager_fail_htlc_backwards_with_reason(long _this_arg, long _payment_hash, long _failure_code);
	// void ChannelManager_claim_funds(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_preimage);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_claim_funds")] public static extern void ChannelManager_claim_funds(long _this_arg, long _payment_preimage);
	// void ChannelManager_claim_funds_with_known_custom_tlvs(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_preimage);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_claim_funds_with_known_custom_tlvs")] public static extern void ChannelManager_claim_funds_with_known_custom_tlvs(long _this_arg, long _payment_preimage);
	// MUST_USE_RES struct LDKPublicKey ChannelManager_get_our_node_id(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_our_node_id")] public static extern long ChannelManager_get_our_node_id(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_accept_inbound_channel(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKChannelId *NONNULL_PTR temporary_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_accept_inbound_channel")] public static extern long ChannelManager_accept_inbound_channel(long _this_arg, long _temporary_channel_id, long _counterparty_node_id, long _user_channel_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ ChannelManager_accept_inbound_channel_from_trusted_peer_0conf(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKChannelId *NONNULL_PTR temporary_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_accept_inbound_channel_from_trusted_peer_0conf")] public static extern long ChannelManager_accept_inbound_channel_from_trusted_peer_0conf(long _this_arg, long _temporary_channel_id, long _counterparty_node_id, long _user_channel_id);
	// void ChannelManager_signer_unblocked(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_C2Tuple_PublicKeyChannelIdZZ channel_opt);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_signer_unblocked")] public static extern void ChannelManager_signer_unblocked(long _this_arg, long _channel_opt);
	// MUST_USE_RES struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ ChannelManager_create_bolt11_invoice(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKBolt11InvoiceParameters params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_bolt11_invoice")] public static extern long ChannelManager_create_bolt11_invoice(long _this_arg, long _params);
	// void Bolt11InvoiceParameters_free(struct LDKBolt11InvoiceParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_free")] public static extern void Bolt11InvoiceParameters_free(long _this_obj);
	// struct LDKCOption_u64Z Bolt11InvoiceParameters_get_amount_msats(const struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_get_amount_msats")] public static extern long Bolt11InvoiceParameters_get_amount_msats(long _this_ptr);
	// void Bolt11InvoiceParameters_set_amount_msats(struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_set_amount_msats")] public static extern void Bolt11InvoiceParameters_set_amount_msats(long _this_ptr, long _val);
	// struct LDKBolt11InvoiceDescription Bolt11InvoiceParameters_get_description(const struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_get_description")] public static extern long Bolt11InvoiceParameters_get_description(long _this_ptr);
	// void Bolt11InvoiceParameters_set_description(struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr, struct LDKBolt11InvoiceDescription val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_set_description")] public static extern void Bolt11InvoiceParameters_set_description(long _this_ptr, long _val);
	// struct LDKCOption_u32Z Bolt11InvoiceParameters_get_invoice_expiry_delta_secs(const struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_get_invoice_expiry_delta_secs")] public static extern long Bolt11InvoiceParameters_get_invoice_expiry_delta_secs(long _this_ptr);
	// void Bolt11InvoiceParameters_set_invoice_expiry_delta_secs(struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_set_invoice_expiry_delta_secs")] public static extern void Bolt11InvoiceParameters_set_invoice_expiry_delta_secs(long _this_ptr, long _val);
	// struct LDKCOption_u16Z Bolt11InvoiceParameters_get_min_final_cltv_expiry_delta(const struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_get_min_final_cltv_expiry_delta")] public static extern long Bolt11InvoiceParameters_get_min_final_cltv_expiry_delta(long _this_ptr);
	// void Bolt11InvoiceParameters_set_min_final_cltv_expiry_delta(struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr, struct LDKCOption_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_set_min_final_cltv_expiry_delta")] public static extern void Bolt11InvoiceParameters_set_min_final_cltv_expiry_delta(long _this_ptr, long _val);
	// struct LDKCOption_ThirtyTwoBytesZ Bolt11InvoiceParameters_get_payment_hash(const struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_get_payment_hash")] public static extern long Bolt11InvoiceParameters_get_payment_hash(long _this_ptr);
	// void Bolt11InvoiceParameters_set_payment_hash(struct LDKBolt11InvoiceParameters *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_set_payment_hash")] public static extern void Bolt11InvoiceParameters_set_payment_hash(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBolt11InvoiceParameters Bolt11InvoiceParameters_new(struct LDKCOption_u64Z amount_msats_arg, struct LDKBolt11InvoiceDescription description_arg, struct LDKCOption_u32Z invoice_expiry_delta_secs_arg, struct LDKCOption_u16Z min_final_cltv_expiry_delta_arg, struct LDKCOption_ThirtyTwoBytesZ payment_hash_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_new")] public static extern long Bolt11InvoiceParameters_new(long _amount_msats_arg, long _description_arg, long _invoice_expiry_delta_secs_arg, long _min_final_cltv_expiry_delta_arg, long _payment_hash_arg);
	// MUST_USE_RES struct LDKBolt11InvoiceParameters Bolt11InvoiceParameters_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceParameters_default")] public static extern long Bolt11InvoiceParameters_default();
	// MUST_USE_RES struct LDKCResult_OfferWithDerivedMetadataBuilderBolt12SemanticErrorZ ChannelManager_create_offer_builder(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_u64Z absolute_expiry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_offer_builder")] public static extern long ChannelManager_create_offer_builder(long _this_arg, long _absolute_expiry);
	// MUST_USE_RES struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ ChannelManager_create_refund_builder(const struct LDKChannelManager *NONNULL_PTR this_arg, uint64_t amount_msats, uint64_t absolute_expiry, struct LDKThirtyTwoBytes payment_id, struct LDKRetry retry_strategy, struct LDKCOption_u64Z max_total_routing_fee_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_refund_builder")] public static extern long ChannelManager_create_refund_builder(long _this_arg, long _amount_msats, long _absolute_expiry, long _payment_id, long _retry_strategy, long _max_total_routing_fee_msat);
	// MUST_USE_RES struct LDKCResult_NoneBolt12SemanticErrorZ ChannelManager_pay_for_offer(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKOffer *NONNULL_PTR offer, struct LDKCOption_u64Z quantity, struct LDKCOption_u64Z amount_msats, struct LDKCOption_StrZ payer_note, struct LDKThirtyTwoBytes payment_id, struct LDKRetry retry_strategy, struct LDKCOption_u64Z max_total_routing_fee_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_pay_for_offer")] public static extern long ChannelManager_pay_for_offer(long _this_arg, long _offer, long _quantity, long _amount_msats, long _payer_note, long _payment_id, long _retry_strategy, long _max_total_routing_fee_msat);
	// MUST_USE_RES struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ ChannelManager_request_refund_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, const struct LDKRefund *NONNULL_PTR refund);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_request_refund_payment")] public static extern long ChannelManager_request_refund_payment(long _this_arg, long _refund);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelManager_pay_for_offer_from_human_readable_name(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKHumanReadableName name, uint64_t amount_msats, struct LDKThirtyTwoBytes payment_id, struct LDKRetry retry_strategy, struct LDKCOption_u64Z max_total_routing_fee_msat, struct LDKCVec_DestinationZ dns_resolvers);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_pay_for_offer_from_human_readable_name")] public static extern long ChannelManager_pay_for_offer_from_human_readable_name(long _this_arg, long _name, long _amount_msats, long _payment_id, long _retry_strategy, long _max_total_routing_fee_msat, long _dns_resolvers);
	// MUST_USE_RES struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ ChannelManager_create_inbound_payment(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment")] public static extern long ChannelManager_create_inbound_payment(long _this_arg, long _min_value_msat, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesNoneZ ChannelManager_create_inbound_payment_for_hash(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_create_inbound_payment_for_hash")] public static extern long ChannelManager_create_inbound_payment_for_hash(long _this_arg, long _payment_hash, long _min_value_msat, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesAPIErrorZ ChannelManager_get_payment_preimage(const struct LDKChannelManager *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_hash, struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_payment_preimage")] public static extern long ChannelManager_get_payment_preimage(long _this_arg, long _payment_hash, long _payment_secret);
	// MUST_USE_RES uint64_t ChannelManager_get_phantom_scid(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_phantom_scid")] public static extern long ChannelManager_get_phantom_scid(long _this_arg);
	// MUST_USE_RES struct LDKPhantomRouteHints ChannelManager_get_phantom_route_hints(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_phantom_route_hints")] public static extern long ChannelManager_get_phantom_route_hints(long _this_arg);
	// MUST_USE_RES uint64_t ChannelManager_get_intercept_scid(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_intercept_scid")] public static extern long ChannelManager_get_intercept_scid(long _this_arg);
	// MUST_USE_RES struct LDKInFlightHtlcs ChannelManager_compute_inflight_htlcs(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_compute_inflight_htlcs")] public static extern long ChannelManager_compute_inflight_htlcs(long _this_arg);
	// struct LDKMessageSendEventsProvider ChannelManager_as_MessageSendEventsProvider(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_MessageSendEventsProvider")] public static extern long ChannelManager_as_MessageSendEventsProvider(long _this_arg);
	// struct LDKEventsProvider ChannelManager_as_EventsProvider(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_EventsProvider")] public static extern long ChannelManager_as_EventsProvider(long _this_arg);
	// struct LDKListen ChannelManager_as_Listen(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_Listen")] public static extern long ChannelManager_as_Listen(long _this_arg);
	// struct LDKConfirm ChannelManager_as_Confirm(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_Confirm")] public static extern long ChannelManager_as_Confirm(long _this_arg);
	// MUST_USE_RES struct LDKFuture ChannelManager_get_event_or_persistence_needed_future(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_event_or_persistence_needed_future")] public static extern long ChannelManager_get_event_or_persistence_needed_future(long _this_arg);
	// MUST_USE_RES bool ChannelManager_get_and_clear_needs_persistence(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_get_and_clear_needs_persistence")] public static extern bool ChannelManager_get_and_clear_needs_persistence(long _this_arg);
	// MUST_USE_RES struct LDKBestBlock ChannelManager_current_best_block(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_current_best_block")] public static extern long ChannelManager_current_best_block(long _this_arg);
	// MUST_USE_RES struct LDKNodeFeatures ChannelManager_node_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_node_features")] public static extern long ChannelManager_node_features(long _this_arg);
	// MUST_USE_RES struct LDKChannelFeatures ChannelManager_channel_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_channel_features")] public static extern long ChannelManager_channel_features(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures ChannelManager_channel_type_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_channel_type_features")] public static extern long ChannelManager_channel_type_features(long _this_arg);
	// MUST_USE_RES struct LDKInitFeatures ChannelManager_init_features(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_init_features")] public static extern long ChannelManager_init_features(long _this_arg);
	// struct LDKChannelMessageHandler ChannelManager_as_ChannelMessageHandler(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_ChannelMessageHandler")] public static extern long ChannelManager_as_ChannelMessageHandler(long _this_arg);
	// struct LDKOffersMessageHandler ChannelManager_as_OffersMessageHandler(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_OffersMessageHandler")] public static extern long ChannelManager_as_OffersMessageHandler(long _this_arg);
	// struct LDKAsyncPaymentsMessageHandler ChannelManager_as_AsyncPaymentsMessageHandler(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_AsyncPaymentsMessageHandler")] public static extern long ChannelManager_as_AsyncPaymentsMessageHandler(long _this_arg);
	// struct LDKDNSResolverMessageHandler ChannelManager_as_DNSResolverMessageHandler(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_DNSResolverMessageHandler")] public static extern long ChannelManager_as_DNSResolverMessageHandler(long _this_arg);
	// struct LDKNodeIdLookUp ChannelManager_as_NodeIdLookUp(const struct LDKChannelManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_as_NodeIdLookUp")] public static extern long ChannelManager_as_NodeIdLookUp(long _this_arg);
	// struct LDKInitFeatures provided_init_features(const struct LDKUserConfig *NONNULL_PTR config);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_provided_init_features")] public static extern long provided_init_features(long _config);
	// struct LDKCVec_u8Z PhantomRouteHints_write(const struct LDKPhantomRouteHints *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_write")] public static extern long PhantomRouteHints_write(long _obj);
	// struct LDKCResult_PhantomRouteHintsDecodeErrorZ PhantomRouteHints_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomRouteHints_read")] public static extern long PhantomRouteHints_read(long _ser);
	// struct LDKCVec_u8Z BlindedForward_write(const struct LDKBlindedForward *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_write")] public static extern long BlindedForward_write(long _obj);
	// struct LDKCResult_BlindedForwardDecodeErrorZ BlindedForward_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedForward_read")] public static extern long BlindedForward_read(long _ser);
	// struct LDKCVec_u8Z PendingHTLCRouting_write(const struct LDKPendingHTLCRouting *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_write")] public static extern long PendingHTLCRouting_write(long _obj);
	// struct LDKCResult_PendingHTLCRoutingDecodeErrorZ PendingHTLCRouting_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCRouting_read")] public static extern long PendingHTLCRouting_read(long _ser);
	// struct LDKCVec_u8Z PendingHTLCInfo_write(const struct LDKPendingHTLCInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_write")] public static extern long PendingHTLCInfo_write(long _obj);
	// struct LDKCResult_PendingHTLCInfoDecodeErrorZ PendingHTLCInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PendingHTLCInfo_read")] public static extern long PendingHTLCInfo_read(long _ser);
	// struct LDKCVec_u8Z BlindedFailure_write(const enum LDKBlindedFailure *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_write")] public static extern long BlindedFailure_write(long _obj);
	// struct LDKCResult_BlindedFailureDecodeErrorZ BlindedFailure_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedFailure_read")] public static extern long BlindedFailure_read(long _ser);
	// struct LDKCVec_u8Z ChannelManager_write(const struct LDKChannelManager *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManager_write")] public static extern long ChannelManager_write(long _obj);
	// void ChannelManagerReadArgs_free(struct LDKChannelManagerReadArgs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_free")] public static extern void ChannelManagerReadArgs_free(long _this_obj);
	// const struct LDKEntropySource *ChannelManagerReadArgs_get_entropy_source(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_entropy_source")] public static extern long ChannelManagerReadArgs_get_entropy_source(long _this_ptr);
	// void ChannelManagerReadArgs_set_entropy_source(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKEntropySource val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_entropy_source")] public static extern void ChannelManagerReadArgs_set_entropy_source(long _this_ptr, long _val);
	// const struct LDKNodeSigner *ChannelManagerReadArgs_get_node_signer(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_node_signer")] public static extern long ChannelManagerReadArgs_get_node_signer(long _this_ptr);
	// void ChannelManagerReadArgs_set_node_signer(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKNodeSigner val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_node_signer")] public static extern void ChannelManagerReadArgs_set_node_signer(long _this_ptr, long _val);
	// const struct LDKSignerProvider *ChannelManagerReadArgs_get_signer_provider(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_signer_provider")] public static extern long ChannelManagerReadArgs_get_signer_provider(long _this_ptr);
	// void ChannelManagerReadArgs_set_signer_provider(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKSignerProvider val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_signer_provider")] public static extern void ChannelManagerReadArgs_set_signer_provider(long _this_ptr, long _val);
	// const struct LDKFeeEstimator *ChannelManagerReadArgs_get_fee_estimator(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_fee_estimator")] public static extern long ChannelManagerReadArgs_get_fee_estimator(long _this_ptr);
	// void ChannelManagerReadArgs_set_fee_estimator(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKFeeEstimator val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_fee_estimator")] public static extern void ChannelManagerReadArgs_set_fee_estimator(long _this_ptr, long _val);
	// const struct LDKWatch *ChannelManagerReadArgs_get_chain_monitor(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_chain_monitor")] public static extern long ChannelManagerReadArgs_get_chain_monitor(long _this_ptr);
	// void ChannelManagerReadArgs_set_chain_monitor(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKWatch val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_chain_monitor")] public static extern void ChannelManagerReadArgs_set_chain_monitor(long _this_ptr, long _val);
	// const struct LDKBroadcasterInterface *ChannelManagerReadArgs_get_tx_broadcaster(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_tx_broadcaster")] public static extern long ChannelManagerReadArgs_get_tx_broadcaster(long _this_ptr);
	// void ChannelManagerReadArgs_set_tx_broadcaster(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKBroadcasterInterface val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_tx_broadcaster")] public static extern void ChannelManagerReadArgs_set_tx_broadcaster(long _this_ptr, long _val);
	// const struct LDKRouter *ChannelManagerReadArgs_get_router(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_router")] public static extern long ChannelManagerReadArgs_get_router(long _this_ptr);
	// void ChannelManagerReadArgs_set_router(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKRouter val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_router")] public static extern void ChannelManagerReadArgs_set_router(long _this_ptr, long _val);
	// const struct LDKMessageRouter *ChannelManagerReadArgs_get_message_router(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_message_router")] public static extern long ChannelManagerReadArgs_get_message_router(long _this_ptr);
	// void ChannelManagerReadArgs_set_message_router(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKMessageRouter val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_message_router")] public static extern void ChannelManagerReadArgs_set_message_router(long _this_ptr, long _val);
	// const struct LDKLogger *ChannelManagerReadArgs_get_logger(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_logger")] public static extern long ChannelManagerReadArgs_get_logger(long _this_ptr);
	// void ChannelManagerReadArgs_set_logger(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKLogger val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_logger")] public static extern void ChannelManagerReadArgs_set_logger(long _this_ptr, long _val);
	// struct LDKUserConfig ChannelManagerReadArgs_get_default_config(const struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_get_default_config")] public static extern long ChannelManagerReadArgs_get_default_config(long _this_ptr);
	// void ChannelManagerReadArgs_set_default_config(struct LDKChannelManagerReadArgs *NONNULL_PTR this_ptr, struct LDKUserConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_set_default_config")] public static extern void ChannelManagerReadArgs_set_default_config(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelManagerReadArgs ChannelManagerReadArgs_new(struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKSignerProvider signer_provider, struct LDKFeeEstimator fee_estimator, struct LDKWatch chain_monitor, struct LDKBroadcasterInterface tx_broadcaster, struct LDKRouter router, struct LDKMessageRouter message_router, struct LDKLogger logger, struct LDKUserConfig default_config, struct LDKCVec_ChannelMonitorZ channel_monitors);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelManagerReadArgs_new")] public static extern long ChannelManagerReadArgs_new(long _entropy_source, long _node_signer, long _signer_provider, long _fee_estimator, long _chain_monitor, long _tx_broadcaster, long _router, long _message_router, long _logger, long _default_config, long _channel_monitors);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesChannelManagerZDecodeErrorZ C2Tuple_ThirtyTwoBytesChannelManagerZ_read(struct LDKu8slice ser, struct LDKChannelManagerReadArgs arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_C2Tuple_ThirtyTwoBytesChannelManagerZ_read")] public static extern long C2Tuple_ThirtyTwoBytesChannelManagerZ_read(long _ser, long _arg);
	// void DelayedPaymentBasepoint_free(struct LDKDelayedPaymentBasepoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_free")] public static extern void DelayedPaymentBasepoint_free(long _this_obj);
	// struct LDKPublicKey DelayedPaymentBasepoint_get_a(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_get_a")] public static extern long DelayedPaymentBasepoint_get_a(long _this_ptr);
	// void DelayedPaymentBasepoint_set_a(struct LDKDelayedPaymentBasepoint *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_set_a")] public static extern void DelayedPaymentBasepoint_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDelayedPaymentBasepoint DelayedPaymentBasepoint_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_new")] public static extern long DelayedPaymentBasepoint_new(long _a_arg);
	// bool DelayedPaymentBasepoint_eq(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR a, const struct LDKDelayedPaymentBasepoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_eq")] public static extern bool DelayedPaymentBasepoint_eq(long _a, long _b);
	// uint64_t DelayedPaymentBasepoint_clone_ptr(LDKDelayedPaymentBasepoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_clone_ptr")] public static extern long DelayedPaymentBasepoint_clone_ptr(long _arg);
	// struct LDKDelayedPaymentBasepoint DelayedPaymentBasepoint_clone(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_clone")] public static extern long DelayedPaymentBasepoint_clone(long _orig);
	// uint64_t DelayedPaymentBasepoint_hash(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_hash")] public static extern long DelayedPaymentBasepoint_hash(long _o);
	// MUST_USE_RES struct LDKPublicKey DelayedPaymentBasepoint_to_public_key(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_to_public_key")] public static extern long DelayedPaymentBasepoint_to_public_key(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes DelayedPaymentBasepoint_derive_add_tweak(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR this_arg, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_derive_add_tweak")] public static extern long DelayedPaymentBasepoint_derive_add_tweak(long _this_arg, long _per_commitment_point);
	// struct LDKCVec_u8Z DelayedPaymentBasepoint_write(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_write")] public static extern long DelayedPaymentBasepoint_write(long _obj);
	// struct LDKCResult_DelayedPaymentBasepointDecodeErrorZ DelayedPaymentBasepoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentBasepoint_read")] public static extern long DelayedPaymentBasepoint_read(long _ser);
	// void DelayedPaymentKey_free(struct LDKDelayedPaymentKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_free")] public static extern void DelayedPaymentKey_free(long _this_obj);
	// struct LDKPublicKey DelayedPaymentKey_get_a(const struct LDKDelayedPaymentKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_get_a")] public static extern long DelayedPaymentKey_get_a(long _this_ptr);
	// void DelayedPaymentKey_set_a(struct LDKDelayedPaymentKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_set_a")] public static extern void DelayedPaymentKey_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDelayedPaymentKey DelayedPaymentKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_new")] public static extern long DelayedPaymentKey_new(long _a_arg);
	// bool DelayedPaymentKey_eq(const struct LDKDelayedPaymentKey *NONNULL_PTR a, const struct LDKDelayedPaymentKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_eq")] public static extern bool DelayedPaymentKey_eq(long _a, long _b);
	// uint64_t DelayedPaymentKey_clone_ptr(LDKDelayedPaymentKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_clone_ptr")] public static extern long DelayedPaymentKey_clone_ptr(long _arg);
	// struct LDKDelayedPaymentKey DelayedPaymentKey_clone(const struct LDKDelayedPaymentKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_clone")] public static extern long DelayedPaymentKey_clone(long _orig);
	// MUST_USE_RES struct LDKDelayedPaymentKey DelayedPaymentKey_from_basepoint(const struct LDKDelayedPaymentBasepoint *NONNULL_PTR countersignatory_basepoint, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_from_basepoint")] public static extern long DelayedPaymentKey_from_basepoint(long _countersignatory_basepoint, long _per_commitment_point);
	// MUST_USE_RES struct LDKDelayedPaymentKey DelayedPaymentKey_from_secret_key(const uint8_t (*sk)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_from_secret_key")] public static extern long DelayedPaymentKey_from_secret_key(long _sk);
	// MUST_USE_RES struct LDKPublicKey DelayedPaymentKey_to_public_key(const struct LDKDelayedPaymentKey *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_to_public_key")] public static extern long DelayedPaymentKey_to_public_key(long _this_arg);
	// struct LDKCVec_u8Z DelayedPaymentKey_write(const struct LDKDelayedPaymentKey *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_write")] public static extern long DelayedPaymentKey_write(long _obj);
	// struct LDKCResult_DelayedPaymentKeyDecodeErrorZ DelayedPaymentKey_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentKey_read")] public static extern long DelayedPaymentKey_read(long _ser);
	// void HtlcBasepoint_free(struct LDKHtlcBasepoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_free")] public static extern void HtlcBasepoint_free(long _this_obj);
	// struct LDKPublicKey HtlcBasepoint_get_a(const struct LDKHtlcBasepoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_get_a")] public static extern long HtlcBasepoint_get_a(long _this_ptr);
	// void HtlcBasepoint_set_a(struct LDKHtlcBasepoint *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_set_a")] public static extern void HtlcBasepoint_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHtlcBasepoint HtlcBasepoint_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_new")] public static extern long HtlcBasepoint_new(long _a_arg);
	// bool HtlcBasepoint_eq(const struct LDKHtlcBasepoint *NONNULL_PTR a, const struct LDKHtlcBasepoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_eq")] public static extern bool HtlcBasepoint_eq(long _a, long _b);
	// uint64_t HtlcBasepoint_clone_ptr(LDKHtlcBasepoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_clone_ptr")] public static extern long HtlcBasepoint_clone_ptr(long _arg);
	// struct LDKHtlcBasepoint HtlcBasepoint_clone(const struct LDKHtlcBasepoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_clone")] public static extern long HtlcBasepoint_clone(long _orig);
	// uint64_t HtlcBasepoint_hash(const struct LDKHtlcBasepoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_hash")] public static extern long HtlcBasepoint_hash(long _o);
	// MUST_USE_RES struct LDKPublicKey HtlcBasepoint_to_public_key(const struct LDKHtlcBasepoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_to_public_key")] public static extern long HtlcBasepoint_to_public_key(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes HtlcBasepoint_derive_add_tweak(const struct LDKHtlcBasepoint *NONNULL_PTR this_arg, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_derive_add_tweak")] public static extern long HtlcBasepoint_derive_add_tweak(long _this_arg, long _per_commitment_point);
	// struct LDKCVec_u8Z HtlcBasepoint_write(const struct LDKHtlcBasepoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_write")] public static extern long HtlcBasepoint_write(long _obj);
	// struct LDKCResult_HtlcBasepointDecodeErrorZ HtlcBasepoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcBasepoint_read")] public static extern long HtlcBasepoint_read(long _ser);
	// void HtlcKey_free(struct LDKHtlcKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_free")] public static extern void HtlcKey_free(long _this_obj);
	// struct LDKPublicKey HtlcKey_get_a(const struct LDKHtlcKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_get_a")] public static extern long HtlcKey_get_a(long _this_ptr);
	// void HtlcKey_set_a(struct LDKHtlcKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_set_a")] public static extern void HtlcKey_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHtlcKey HtlcKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_new")] public static extern long HtlcKey_new(long _a_arg);
	// bool HtlcKey_eq(const struct LDKHtlcKey *NONNULL_PTR a, const struct LDKHtlcKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_eq")] public static extern bool HtlcKey_eq(long _a, long _b);
	// uint64_t HtlcKey_clone_ptr(LDKHtlcKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_clone_ptr")] public static extern long HtlcKey_clone_ptr(long _arg);
	// struct LDKHtlcKey HtlcKey_clone(const struct LDKHtlcKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_clone")] public static extern long HtlcKey_clone(long _orig);
	// MUST_USE_RES struct LDKHtlcKey HtlcKey_from_basepoint(const struct LDKHtlcBasepoint *NONNULL_PTR countersignatory_basepoint, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_from_basepoint")] public static extern long HtlcKey_from_basepoint(long _countersignatory_basepoint, long _per_commitment_point);
	// MUST_USE_RES struct LDKHtlcKey HtlcKey_from_secret_key(const uint8_t (*sk)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_from_secret_key")] public static extern long HtlcKey_from_secret_key(long _sk);
	// MUST_USE_RES struct LDKPublicKey HtlcKey_to_public_key(const struct LDKHtlcKey *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_to_public_key")] public static extern long HtlcKey_to_public_key(long _this_arg);
	// struct LDKCVec_u8Z HtlcKey_write(const struct LDKHtlcKey *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_write")] public static extern long HtlcKey_write(long _obj);
	// struct LDKCResult_HtlcKeyDecodeErrorZ HtlcKey_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HtlcKey_read")] public static extern long HtlcKey_read(long _ser);
	// struct LDKPublicKey add_public_key_tweak(struct LDKPublicKey base_point, const uint8_t (*tweak)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_add_public_key_tweak")] public static extern long add_public_key_tweak(long _base_point, long _tweak);
	// void RevocationBasepoint_free(struct LDKRevocationBasepoint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_free")] public static extern void RevocationBasepoint_free(long _this_obj);
	// struct LDKPublicKey RevocationBasepoint_get_a(const struct LDKRevocationBasepoint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_get_a")] public static extern long RevocationBasepoint_get_a(long _this_ptr);
	// void RevocationBasepoint_set_a(struct LDKRevocationBasepoint *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_set_a")] public static extern void RevocationBasepoint_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRevocationBasepoint RevocationBasepoint_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_new")] public static extern long RevocationBasepoint_new(long _a_arg);
	// bool RevocationBasepoint_eq(const struct LDKRevocationBasepoint *NONNULL_PTR a, const struct LDKRevocationBasepoint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_eq")] public static extern bool RevocationBasepoint_eq(long _a, long _b);
	// uint64_t RevocationBasepoint_clone_ptr(LDKRevocationBasepoint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_clone_ptr")] public static extern long RevocationBasepoint_clone_ptr(long _arg);
	// struct LDKRevocationBasepoint RevocationBasepoint_clone(const struct LDKRevocationBasepoint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_clone")] public static extern long RevocationBasepoint_clone(long _orig);
	// uint64_t RevocationBasepoint_hash(const struct LDKRevocationBasepoint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_hash")] public static extern long RevocationBasepoint_hash(long _o);
	// MUST_USE_RES struct LDKPublicKey RevocationBasepoint_to_public_key(const struct LDKRevocationBasepoint *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_to_public_key")] public static extern long RevocationBasepoint_to_public_key(long _this_arg);
	// struct LDKCVec_u8Z RevocationBasepoint_write(const struct LDKRevocationBasepoint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_write")] public static extern long RevocationBasepoint_write(long _obj);
	// struct LDKCResult_RevocationBasepointDecodeErrorZ RevocationBasepoint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationBasepoint_read")] public static extern long RevocationBasepoint_read(long _ser);
	// void RevocationKey_free(struct LDKRevocationKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_free")] public static extern void RevocationKey_free(long _this_obj);
	// struct LDKPublicKey RevocationKey_get_a(const struct LDKRevocationKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_get_a")] public static extern long RevocationKey_get_a(long _this_ptr);
	// void RevocationKey_set_a(struct LDKRevocationKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_set_a")] public static extern void RevocationKey_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRevocationKey RevocationKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_new")] public static extern long RevocationKey_new(long _a_arg);
	// bool RevocationKey_eq(const struct LDKRevocationKey *NONNULL_PTR a, const struct LDKRevocationKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_eq")] public static extern bool RevocationKey_eq(long _a, long _b);
	// uint64_t RevocationKey_clone_ptr(LDKRevocationKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_clone_ptr")] public static extern long RevocationKey_clone_ptr(long _arg);
	// struct LDKRevocationKey RevocationKey_clone(const struct LDKRevocationKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_clone")] public static extern long RevocationKey_clone(long _orig);
	// uint64_t RevocationKey_hash(const struct LDKRevocationKey *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_hash")] public static extern long RevocationKey_hash(long _o);
	// MUST_USE_RES struct LDKRevocationKey RevocationKey_from_basepoint(const struct LDKRevocationBasepoint *NONNULL_PTR countersignatory_basepoint, struct LDKPublicKey per_commitment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_from_basepoint")] public static extern long RevocationKey_from_basepoint(long _countersignatory_basepoint, long _per_commitment_point);
	// MUST_USE_RES struct LDKPublicKey RevocationKey_to_public_key(const struct LDKRevocationKey *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_to_public_key")] public static extern long RevocationKey_to_public_key(long _this_arg);
	// struct LDKCVec_u8Z RevocationKey_write(const struct LDKRevocationKey *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_write")] public static extern long RevocationKey_write(long _obj);
	// struct LDKCResult_RevocationKeyDecodeErrorZ RevocationKey_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevocationKey_read")] public static extern long RevocationKey_read(long _ser);
	// enum LDKInboundHTLCStateDetails InboundHTLCStateDetails_clone(const enum LDKInboundHTLCStateDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCStateDetails_clone")] public static extern InboundHTLCStateDetails InboundHTLCStateDetails_clone(long _orig);
	// enum LDKInboundHTLCStateDetails InboundHTLCStateDetails_awaiting_remote_revoke_to_add(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCStateDetails_awaiting_remote_revoke_to_add")] public static extern InboundHTLCStateDetails InboundHTLCStateDetails_awaiting_remote_revoke_to_add();
	// enum LDKInboundHTLCStateDetails InboundHTLCStateDetails_committed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCStateDetails_committed")] public static extern InboundHTLCStateDetails InboundHTLCStateDetails_committed();
	// enum LDKInboundHTLCStateDetails InboundHTLCStateDetails_awaiting_remote_revoke_to_remove_fulfill(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCStateDetails_awaiting_remote_revoke_to_remove_fulfill")] public static extern InboundHTLCStateDetails InboundHTLCStateDetails_awaiting_remote_revoke_to_remove_fulfill();
	// enum LDKInboundHTLCStateDetails InboundHTLCStateDetails_awaiting_remote_revoke_to_remove_fail(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCStateDetails_awaiting_remote_revoke_to_remove_fail")] public static extern InboundHTLCStateDetails InboundHTLCStateDetails_awaiting_remote_revoke_to_remove_fail();
	// struct LDKCVec_u8Z InboundHTLCStateDetails_write(const enum LDKInboundHTLCStateDetails *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCStateDetails_write")] public static extern long InboundHTLCStateDetails_write(long _obj);
	// struct LDKCResult_COption_InboundHTLCStateDetailsZDecodeErrorZ InboundHTLCStateDetails_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCStateDetails_read")] public static extern long InboundHTLCStateDetails_read(long _ser);
	// void InboundHTLCDetails_free(struct LDKInboundHTLCDetails this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_free")] public static extern void InboundHTLCDetails_free(long _this_obj);
	// uint64_t InboundHTLCDetails_get_htlc_id(const struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_get_htlc_id")] public static extern long InboundHTLCDetails_get_htlc_id(long _this_ptr);
	// void InboundHTLCDetails_set_htlc_id(struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_set_htlc_id")] public static extern void InboundHTLCDetails_set_htlc_id(long _this_ptr, long _val);
	// uint64_t InboundHTLCDetails_get_amount_msat(const struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_get_amount_msat")] public static extern long InboundHTLCDetails_get_amount_msat(long _this_ptr);
	// void InboundHTLCDetails_set_amount_msat(struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_set_amount_msat")] public static extern void InboundHTLCDetails_set_amount_msat(long _this_ptr, long _val);
	// uint32_t InboundHTLCDetails_get_cltv_expiry(const struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_get_cltv_expiry")] public static extern int InboundHTLCDetails_get_cltv_expiry(long _this_ptr);
	// void InboundHTLCDetails_set_cltv_expiry(struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_set_cltv_expiry")] public static extern void InboundHTLCDetails_set_cltv_expiry(long _this_ptr, int _val);
	// const uint8_t (*InboundHTLCDetails_get_payment_hash(const struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_get_payment_hash")] public static extern long InboundHTLCDetails_get_payment_hash(long _this_ptr);
	// void InboundHTLCDetails_set_payment_hash(struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_set_payment_hash")] public static extern void InboundHTLCDetails_set_payment_hash(long _this_ptr, long _val);
	// struct LDKCOption_InboundHTLCStateDetailsZ InboundHTLCDetails_get_state(const struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_get_state")] public static extern long InboundHTLCDetails_get_state(long _this_ptr);
	// void InboundHTLCDetails_set_state(struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr, struct LDKCOption_InboundHTLCStateDetailsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_set_state")] public static extern void InboundHTLCDetails_set_state(long _this_ptr, long _val);
	// bool InboundHTLCDetails_get_is_dust(const struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_get_is_dust")] public static extern bool InboundHTLCDetails_get_is_dust(long _this_ptr);
	// void InboundHTLCDetails_set_is_dust(struct LDKInboundHTLCDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_set_is_dust")] public static extern void InboundHTLCDetails_set_is_dust(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKInboundHTLCDetails InboundHTLCDetails_new(uint64_t htlc_id_arg, uint64_t amount_msat_arg, uint32_t cltv_expiry_arg, struct LDKThirtyTwoBytes payment_hash_arg, struct LDKCOption_InboundHTLCStateDetailsZ state_arg, bool is_dust_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_new")] public static extern long InboundHTLCDetails_new(long _htlc_id_arg, long _amount_msat_arg, int _cltv_expiry_arg, long _payment_hash_arg, long _state_arg, bool _is_dust_arg);
	// uint64_t InboundHTLCDetails_clone_ptr(LDKInboundHTLCDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_clone_ptr")] public static extern long InboundHTLCDetails_clone_ptr(long _arg);
	// struct LDKInboundHTLCDetails InboundHTLCDetails_clone(const struct LDKInboundHTLCDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_clone")] public static extern long InboundHTLCDetails_clone(long _orig);
	// struct LDKCVec_u8Z InboundHTLCDetails_write(const struct LDKInboundHTLCDetails *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_write")] public static extern long InboundHTLCDetails_write(long _obj);
	// struct LDKCResult_InboundHTLCDetailsDecodeErrorZ InboundHTLCDetails_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundHTLCDetails_read")] public static extern long InboundHTLCDetails_read(long _ser);
	// enum LDKOutboundHTLCStateDetails OutboundHTLCStateDetails_clone(const enum LDKOutboundHTLCStateDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCStateDetails_clone")] public static extern OutboundHTLCStateDetails OutboundHTLCStateDetails_clone(long _orig);
	// enum LDKOutboundHTLCStateDetails OutboundHTLCStateDetails_awaiting_remote_revoke_to_add(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCStateDetails_awaiting_remote_revoke_to_add")] public static extern OutboundHTLCStateDetails OutboundHTLCStateDetails_awaiting_remote_revoke_to_add();
	// enum LDKOutboundHTLCStateDetails OutboundHTLCStateDetails_committed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCStateDetails_committed")] public static extern OutboundHTLCStateDetails OutboundHTLCStateDetails_committed();
	// enum LDKOutboundHTLCStateDetails OutboundHTLCStateDetails_awaiting_remote_revoke_to_remove_success(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCStateDetails_awaiting_remote_revoke_to_remove_success")] public static extern OutboundHTLCStateDetails OutboundHTLCStateDetails_awaiting_remote_revoke_to_remove_success();
	// enum LDKOutboundHTLCStateDetails OutboundHTLCStateDetails_awaiting_remote_revoke_to_remove_failure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCStateDetails_awaiting_remote_revoke_to_remove_failure")] public static extern OutboundHTLCStateDetails OutboundHTLCStateDetails_awaiting_remote_revoke_to_remove_failure();
	// struct LDKCVec_u8Z OutboundHTLCStateDetails_write(const enum LDKOutboundHTLCStateDetails *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCStateDetails_write")] public static extern long OutboundHTLCStateDetails_write(long _obj);
	// struct LDKCResult_COption_OutboundHTLCStateDetailsZDecodeErrorZ OutboundHTLCStateDetails_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCStateDetails_read")] public static extern long OutboundHTLCStateDetails_read(long _ser);
	// void OutboundHTLCDetails_free(struct LDKOutboundHTLCDetails this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_free")] public static extern void OutboundHTLCDetails_free(long _this_obj);
	// struct LDKCOption_u64Z OutboundHTLCDetails_get_htlc_id(const struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_get_htlc_id")] public static extern long OutboundHTLCDetails_get_htlc_id(long _this_ptr);
	// void OutboundHTLCDetails_set_htlc_id(struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_set_htlc_id")] public static extern void OutboundHTLCDetails_set_htlc_id(long _this_ptr, long _val);
	// uint64_t OutboundHTLCDetails_get_amount_msat(const struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_get_amount_msat")] public static extern long OutboundHTLCDetails_get_amount_msat(long _this_ptr);
	// void OutboundHTLCDetails_set_amount_msat(struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_set_amount_msat")] public static extern void OutboundHTLCDetails_set_amount_msat(long _this_ptr, long _val);
	// uint32_t OutboundHTLCDetails_get_cltv_expiry(const struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_get_cltv_expiry")] public static extern int OutboundHTLCDetails_get_cltv_expiry(long _this_ptr);
	// void OutboundHTLCDetails_set_cltv_expiry(struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_set_cltv_expiry")] public static extern void OutboundHTLCDetails_set_cltv_expiry(long _this_ptr, int _val);
	// const uint8_t (*OutboundHTLCDetails_get_payment_hash(const struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_get_payment_hash")] public static extern long OutboundHTLCDetails_get_payment_hash(long _this_ptr);
	// void OutboundHTLCDetails_set_payment_hash(struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_set_payment_hash")] public static extern void OutboundHTLCDetails_set_payment_hash(long _this_ptr, long _val);
	// struct LDKCOption_OutboundHTLCStateDetailsZ OutboundHTLCDetails_get_state(const struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_get_state")] public static extern long OutboundHTLCDetails_get_state(long _this_ptr);
	// void OutboundHTLCDetails_set_state(struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr, struct LDKCOption_OutboundHTLCStateDetailsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_set_state")] public static extern void OutboundHTLCDetails_set_state(long _this_ptr, long _val);
	// struct LDKCOption_u64Z OutboundHTLCDetails_get_skimmed_fee_msat(const struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_get_skimmed_fee_msat")] public static extern long OutboundHTLCDetails_get_skimmed_fee_msat(long _this_ptr);
	// void OutboundHTLCDetails_set_skimmed_fee_msat(struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_set_skimmed_fee_msat")] public static extern void OutboundHTLCDetails_set_skimmed_fee_msat(long _this_ptr, long _val);
	// bool OutboundHTLCDetails_get_is_dust(const struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_get_is_dust")] public static extern bool OutboundHTLCDetails_get_is_dust(long _this_ptr);
	// void OutboundHTLCDetails_set_is_dust(struct LDKOutboundHTLCDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_set_is_dust")] public static extern void OutboundHTLCDetails_set_is_dust(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKOutboundHTLCDetails OutboundHTLCDetails_new(struct LDKCOption_u64Z htlc_id_arg, uint64_t amount_msat_arg, uint32_t cltv_expiry_arg, struct LDKThirtyTwoBytes payment_hash_arg, struct LDKCOption_OutboundHTLCStateDetailsZ state_arg, struct LDKCOption_u64Z skimmed_fee_msat_arg, bool is_dust_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_new")] public static extern long OutboundHTLCDetails_new(long _htlc_id_arg, long _amount_msat_arg, int _cltv_expiry_arg, long _payment_hash_arg, long _state_arg, long _skimmed_fee_msat_arg, bool _is_dust_arg);
	// uint64_t OutboundHTLCDetails_clone_ptr(LDKOutboundHTLCDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_clone_ptr")] public static extern long OutboundHTLCDetails_clone_ptr(long _arg);
	// struct LDKOutboundHTLCDetails OutboundHTLCDetails_clone(const struct LDKOutboundHTLCDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_clone")] public static extern long OutboundHTLCDetails_clone(long _orig);
	// struct LDKCVec_u8Z OutboundHTLCDetails_write(const struct LDKOutboundHTLCDetails *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_write")] public static extern long OutboundHTLCDetails_write(long _obj);
	// struct LDKCResult_OutboundHTLCDetailsDecodeErrorZ OutboundHTLCDetails_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutboundHTLCDetails_read")] public static extern long OutboundHTLCDetails_read(long _ser);
	// void CounterpartyForwardingInfo_free(struct LDKCounterpartyForwardingInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_free")] public static extern void CounterpartyForwardingInfo_free(long _this_obj);
	// uint32_t CounterpartyForwardingInfo_get_fee_base_msat(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_fee_base_msat")] public static extern int CounterpartyForwardingInfo_get_fee_base_msat(long _this_ptr);
	// void CounterpartyForwardingInfo_set_fee_base_msat(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_fee_base_msat")] public static extern void CounterpartyForwardingInfo_set_fee_base_msat(long _this_ptr, int _val);
	// uint32_t CounterpartyForwardingInfo_get_fee_proportional_millionths(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_fee_proportional_millionths")] public static extern int CounterpartyForwardingInfo_get_fee_proportional_millionths(long _this_ptr);
	// void CounterpartyForwardingInfo_set_fee_proportional_millionths(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_fee_proportional_millionths")] public static extern void CounterpartyForwardingInfo_set_fee_proportional_millionths(long _this_ptr, int _val);
	// uint16_t CounterpartyForwardingInfo_get_cltv_expiry_delta(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_get_cltv_expiry_delta")] public static extern short CounterpartyForwardingInfo_get_cltv_expiry_delta(long _this_ptr);
	// void CounterpartyForwardingInfo_set_cltv_expiry_delta(struct LDKCounterpartyForwardingInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_set_cltv_expiry_delta")] public static extern void CounterpartyForwardingInfo_set_cltv_expiry_delta(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKCounterpartyForwardingInfo CounterpartyForwardingInfo_new(uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, uint16_t cltv_expiry_delta_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_new")] public static extern long CounterpartyForwardingInfo_new(int _fee_base_msat_arg, int _fee_proportional_millionths_arg, short _cltv_expiry_delta_arg);
	// uint64_t CounterpartyForwardingInfo_clone_ptr(LDKCounterpartyForwardingInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_clone_ptr")] public static extern long CounterpartyForwardingInfo_clone_ptr(long _arg);
	// struct LDKCounterpartyForwardingInfo CounterpartyForwardingInfo_clone(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_clone")] public static extern long CounterpartyForwardingInfo_clone(long _orig);
	// struct LDKCVec_u8Z CounterpartyForwardingInfo_write(const struct LDKCounterpartyForwardingInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_write")] public static extern long CounterpartyForwardingInfo_write(long _obj);
	// struct LDKCResult_CounterpartyForwardingInfoDecodeErrorZ CounterpartyForwardingInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyForwardingInfo_read")] public static extern long CounterpartyForwardingInfo_read(long _ser);
	// void ChannelCounterparty_free(struct LDKChannelCounterparty this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_free")] public static extern void ChannelCounterparty_free(long _this_obj);
	// struct LDKPublicKey ChannelCounterparty_get_node_id(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_node_id")] public static extern long ChannelCounterparty_get_node_id(long _this_ptr);
	// void ChannelCounterparty_set_node_id(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_node_id")] public static extern void ChannelCounterparty_set_node_id(long _this_ptr, long _val);
	// struct LDKInitFeatures ChannelCounterparty_get_features(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_features")] public static extern long ChannelCounterparty_get_features(long _this_ptr);
	// void ChannelCounterparty_set_features(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKInitFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_features")] public static extern void ChannelCounterparty_set_features(long _this_ptr, long _val);
	// uint64_t ChannelCounterparty_get_unspendable_punishment_reserve(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_unspendable_punishment_reserve")] public static extern long ChannelCounterparty_get_unspendable_punishment_reserve(long _this_ptr);
	// void ChannelCounterparty_set_unspendable_punishment_reserve(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_unspendable_punishment_reserve")] public static extern void ChannelCounterparty_set_unspendable_punishment_reserve(long _this_ptr, long _val);
	// struct LDKCounterpartyForwardingInfo ChannelCounterparty_get_forwarding_info(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_forwarding_info")] public static extern long ChannelCounterparty_get_forwarding_info(long _this_ptr);
	// void ChannelCounterparty_set_forwarding_info(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCounterpartyForwardingInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_forwarding_info")] public static extern void ChannelCounterparty_set_forwarding_info(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelCounterparty_get_outbound_htlc_minimum_msat(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_outbound_htlc_minimum_msat")] public static extern long ChannelCounterparty_get_outbound_htlc_minimum_msat(long _this_ptr);
	// void ChannelCounterparty_set_outbound_htlc_minimum_msat(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_outbound_htlc_minimum_msat")] public static extern void ChannelCounterparty_set_outbound_htlc_minimum_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelCounterparty_get_outbound_htlc_maximum_msat(const struct LDKChannelCounterparty *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_get_outbound_htlc_maximum_msat")] public static extern long ChannelCounterparty_get_outbound_htlc_maximum_msat(long _this_ptr);
	// void ChannelCounterparty_set_outbound_htlc_maximum_msat(struct LDKChannelCounterparty *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_set_outbound_htlc_maximum_msat")] public static extern void ChannelCounterparty_set_outbound_htlc_maximum_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelCounterparty ChannelCounterparty_new(struct LDKPublicKey node_id_arg, struct LDKInitFeatures features_arg, uint64_t unspendable_punishment_reserve_arg, struct LDKCounterpartyForwardingInfo forwarding_info_arg, struct LDKCOption_u64Z outbound_htlc_minimum_msat_arg, struct LDKCOption_u64Z outbound_htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_new")] public static extern long ChannelCounterparty_new(long _node_id_arg, long _features_arg, long _unspendable_punishment_reserve_arg, long _forwarding_info_arg, long _outbound_htlc_minimum_msat_arg, long _outbound_htlc_maximum_msat_arg);
	// uint64_t ChannelCounterparty_clone_ptr(LDKChannelCounterparty *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_clone_ptr")] public static extern long ChannelCounterparty_clone_ptr(long _arg);
	// struct LDKChannelCounterparty ChannelCounterparty_clone(const struct LDKChannelCounterparty *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_clone")] public static extern long ChannelCounterparty_clone(long _orig);
	// struct LDKCVec_u8Z ChannelCounterparty_write(const struct LDKChannelCounterparty *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_write")] public static extern long ChannelCounterparty_write(long _obj);
	// struct LDKCResult_ChannelCounterpartyDecodeErrorZ ChannelCounterparty_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelCounterparty_read")] public static extern long ChannelCounterparty_read(long _ser);
	// void ChannelDetails_free(struct LDKChannelDetails this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_free")] public static extern void ChannelDetails_free(long _this_obj);
	// struct LDKChannelId ChannelDetails_get_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_id")] public static extern long ChannelDetails_get_channel_id(long _this_ptr);
	// void ChannelDetails_set_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_id")] public static extern void ChannelDetails_set_channel_id(long _this_ptr, long _val);
	// struct LDKChannelCounterparty ChannelDetails_get_counterparty(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_counterparty")] public static extern long ChannelDetails_get_counterparty(long _this_ptr);
	// void ChannelDetails_set_counterparty(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelCounterparty val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_counterparty")] public static extern void ChannelDetails_set_counterparty(long _this_ptr, long _val);
	// struct LDKOutPoint ChannelDetails_get_funding_txo(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_funding_txo")] public static extern long ChannelDetails_get_funding_txo(long _this_ptr);
	// void ChannelDetails_set_funding_txo(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_funding_txo")] public static extern void ChannelDetails_set_funding_txo(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures ChannelDetails_get_channel_type(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_type")] public static extern long ChannelDetails_get_channel_type(long _this_ptr);
	// void ChannelDetails_set_channel_type(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_type")] public static extern void ChannelDetails_set_channel_type(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_short_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_short_channel_id")] public static extern long ChannelDetails_get_short_channel_id(long _this_ptr);
	// void ChannelDetails_set_short_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_short_channel_id")] public static extern void ChannelDetails_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_outbound_scid_alias(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_scid_alias")] public static extern long ChannelDetails_get_outbound_scid_alias(long _this_ptr);
	// void ChannelDetails_set_outbound_scid_alias(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_outbound_scid_alias")] public static extern void ChannelDetails_set_outbound_scid_alias(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_scid_alias(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_scid_alias")] public static extern long ChannelDetails_get_inbound_scid_alias(long _this_ptr);
	// void ChannelDetails_set_inbound_scid_alias(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_scid_alias")] public static extern void ChannelDetails_set_inbound_scid_alias(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_channel_value_satoshis(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_value_satoshis")] public static extern long ChannelDetails_get_channel_value_satoshis(long _this_ptr);
	// void ChannelDetails_set_channel_value_satoshis(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_value_satoshis")] public static extern void ChannelDetails_set_channel_value_satoshis(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_unspendable_punishment_reserve(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_unspendable_punishment_reserve")] public static extern long ChannelDetails_get_unspendable_punishment_reserve(long _this_ptr);
	// void ChannelDetails_set_unspendable_punishment_reserve(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_unspendable_punishment_reserve")] public static extern void ChannelDetails_set_unspendable_punishment_reserve(long _this_ptr, long _val);
	// struct LDKU128 ChannelDetails_get_user_channel_id(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_user_channel_id")] public static extern long ChannelDetails_get_user_channel_id(long _this_ptr);
	// void ChannelDetails_set_user_channel_id(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_user_channel_id")] public static extern void ChannelDetails_set_user_channel_id(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_feerate_sat_per_1000_weight(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_feerate_sat_per_1000_weight")] public static extern long ChannelDetails_get_feerate_sat_per_1000_weight(long _this_ptr);
	// void ChannelDetails_set_feerate_sat_per_1000_weight(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_feerate_sat_per_1000_weight")] public static extern void ChannelDetails_set_feerate_sat_per_1000_weight(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_outbound_capacity_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_capacity_msat")] public static extern long ChannelDetails_get_outbound_capacity_msat(long _this_ptr);
	// void ChannelDetails_set_outbound_capacity_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_outbound_capacity_msat")] public static extern void ChannelDetails_set_outbound_capacity_msat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_next_outbound_htlc_limit_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_next_outbound_htlc_limit_msat")] public static extern long ChannelDetails_get_next_outbound_htlc_limit_msat(long _this_ptr);
	// void ChannelDetails_set_next_outbound_htlc_limit_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_next_outbound_htlc_limit_msat")] public static extern void ChannelDetails_set_next_outbound_htlc_limit_msat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_next_outbound_htlc_minimum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_next_outbound_htlc_minimum_msat")] public static extern long ChannelDetails_get_next_outbound_htlc_minimum_msat(long _this_ptr);
	// void ChannelDetails_set_next_outbound_htlc_minimum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_next_outbound_htlc_minimum_msat")] public static extern void ChannelDetails_set_next_outbound_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t ChannelDetails_get_inbound_capacity_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_capacity_msat")] public static extern long ChannelDetails_get_inbound_capacity_msat(long _this_ptr);
	// void ChannelDetails_set_inbound_capacity_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_capacity_msat")] public static extern void ChannelDetails_set_inbound_capacity_msat(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_confirmations_required(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_confirmations_required")] public static extern long ChannelDetails_get_confirmations_required(long _this_ptr);
	// void ChannelDetails_set_confirmations_required(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_confirmations_required")] public static extern void ChannelDetails_set_confirmations_required(long _this_ptr, long _val);
	// struct LDKCOption_u32Z ChannelDetails_get_confirmations(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_confirmations")] public static extern long ChannelDetails_get_confirmations(long _this_ptr);
	// void ChannelDetails_set_confirmations(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_confirmations")] public static extern void ChannelDetails_set_confirmations(long _this_ptr, long _val);
	// struct LDKCOption_u16Z ChannelDetails_get_force_close_spend_delay(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_force_close_spend_delay")] public static extern long ChannelDetails_get_force_close_spend_delay(long _this_ptr);
	// void ChannelDetails_set_force_close_spend_delay(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_force_close_spend_delay")] public static extern void ChannelDetails_set_force_close_spend_delay(long _this_ptr, long _val);
	// bool ChannelDetails_get_is_outbound(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_outbound")] public static extern bool ChannelDetails_get_is_outbound(long _this_ptr);
	// void ChannelDetails_set_is_outbound(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_outbound")] public static extern void ChannelDetails_set_is_outbound(long _this_ptr, bool _val);
	// bool ChannelDetails_get_is_channel_ready(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_channel_ready")] public static extern bool ChannelDetails_get_is_channel_ready(long _this_ptr);
	// void ChannelDetails_set_is_channel_ready(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_channel_ready")] public static extern void ChannelDetails_set_is_channel_ready(long _this_ptr, bool _val);
	// struct LDKCOption_ChannelShutdownStateZ ChannelDetails_get_channel_shutdown_state(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_channel_shutdown_state")] public static extern long ChannelDetails_get_channel_shutdown_state(long _this_ptr);
	// void ChannelDetails_set_channel_shutdown_state(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_ChannelShutdownStateZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_channel_shutdown_state")] public static extern void ChannelDetails_set_channel_shutdown_state(long _this_ptr, long _val);
	// bool ChannelDetails_get_is_usable(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_usable")] public static extern bool ChannelDetails_get_is_usable(long _this_ptr);
	// void ChannelDetails_set_is_usable(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_usable")] public static extern void ChannelDetails_set_is_usable(long _this_ptr, bool _val);
	// bool ChannelDetails_get_is_announced(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_is_announced")] public static extern bool ChannelDetails_get_is_announced(long _this_ptr);
	// void ChannelDetails_set_is_announced(struct LDKChannelDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_is_announced")] public static extern void ChannelDetails_set_is_announced(long _this_ptr, bool _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_htlc_minimum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_htlc_minimum_msat")] public static extern long ChannelDetails_get_inbound_htlc_minimum_msat(long _this_ptr);
	// void ChannelDetails_set_inbound_htlc_minimum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_htlc_minimum_msat")] public static extern void ChannelDetails_set_inbound_htlc_minimum_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelDetails_get_inbound_htlc_maximum_msat(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_htlc_maximum_msat")] public static extern long ChannelDetails_get_inbound_htlc_maximum_msat(long _this_ptr);
	// void ChannelDetails_set_inbound_htlc_maximum_msat(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_inbound_htlc_maximum_msat")] public static extern void ChannelDetails_set_inbound_htlc_maximum_msat(long _this_ptr, long _val);
	// struct LDKChannelConfig ChannelDetails_get_config(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_config")] public static extern long ChannelDetails_get_config(long _this_ptr);
	// void ChannelDetails_set_config(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKChannelConfig val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_config")] public static extern void ChannelDetails_set_config(long _this_ptr, long _val);
	// struct LDKCVec_InboundHTLCDetailsZ ChannelDetails_get_pending_inbound_htlcs(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_pending_inbound_htlcs")] public static extern long ChannelDetails_get_pending_inbound_htlcs(long _this_ptr);
	// void ChannelDetails_set_pending_inbound_htlcs(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCVec_InboundHTLCDetailsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_pending_inbound_htlcs")] public static extern void ChannelDetails_set_pending_inbound_htlcs(long _this_ptr, long _val);
	// struct LDKCVec_OutboundHTLCDetailsZ ChannelDetails_get_pending_outbound_htlcs(const struct LDKChannelDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_pending_outbound_htlcs")] public static extern long ChannelDetails_get_pending_outbound_htlcs(long _this_ptr);
	// void ChannelDetails_set_pending_outbound_htlcs(struct LDKChannelDetails *NONNULL_PTR this_ptr, struct LDKCVec_OutboundHTLCDetailsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_set_pending_outbound_htlcs")] public static extern void ChannelDetails_set_pending_outbound_htlcs(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelDetails ChannelDetails_new(struct LDKChannelId channel_id_arg, struct LDKChannelCounterparty counterparty_arg, struct LDKOutPoint funding_txo_arg, struct LDKChannelTypeFeatures channel_type_arg, struct LDKCOption_u64Z short_channel_id_arg, struct LDKCOption_u64Z outbound_scid_alias_arg, struct LDKCOption_u64Z inbound_scid_alias_arg, uint64_t channel_value_satoshis_arg, struct LDKCOption_u64Z unspendable_punishment_reserve_arg, struct LDKU128 user_channel_id_arg, struct LDKCOption_u32Z feerate_sat_per_1000_weight_arg, uint64_t outbound_capacity_msat_arg, uint64_t next_outbound_htlc_limit_msat_arg, uint64_t next_outbound_htlc_minimum_msat_arg, uint64_t inbound_capacity_msat_arg, struct LDKCOption_u32Z confirmations_required_arg, struct LDKCOption_u32Z confirmations_arg, struct LDKCOption_u16Z force_close_spend_delay_arg, bool is_outbound_arg, bool is_channel_ready_arg, struct LDKCOption_ChannelShutdownStateZ channel_shutdown_state_arg, bool is_usable_arg, bool is_announced_arg, struct LDKCOption_u64Z inbound_htlc_minimum_msat_arg, struct LDKCOption_u64Z inbound_htlc_maximum_msat_arg, struct LDKChannelConfig config_arg, struct LDKCVec_InboundHTLCDetailsZ pending_inbound_htlcs_arg, struct LDKCVec_OutboundHTLCDetailsZ pending_outbound_htlcs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_new")] public static extern long ChannelDetails_new(long _channel_id_arg, long _counterparty_arg, long _funding_txo_arg, long _channel_type_arg, long _short_channel_id_arg, long _outbound_scid_alias_arg, long _inbound_scid_alias_arg, long _channel_value_satoshis_arg, long _unspendable_punishment_reserve_arg, long _user_channel_id_arg, long _feerate_sat_per_1000_weight_arg, long _outbound_capacity_msat_arg, long _next_outbound_htlc_limit_msat_arg, long _next_outbound_htlc_minimum_msat_arg, long _inbound_capacity_msat_arg, long _confirmations_required_arg, long _confirmations_arg, long _force_close_spend_delay_arg, bool _is_outbound_arg, bool _is_channel_ready_arg, long _channel_shutdown_state_arg, bool _is_usable_arg, bool _is_announced_arg, long _inbound_htlc_minimum_msat_arg, long _inbound_htlc_maximum_msat_arg, long _config_arg, long _pending_inbound_htlcs_arg, long _pending_outbound_htlcs_arg);
	// uint64_t ChannelDetails_clone_ptr(LDKChannelDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_clone_ptr")] public static extern long ChannelDetails_clone_ptr(long _arg);
	// struct LDKChannelDetails ChannelDetails_clone(const struct LDKChannelDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_clone")] public static extern long ChannelDetails_clone(long _orig);
	// MUST_USE_RES struct LDKCOption_u64Z ChannelDetails_get_inbound_payment_scid(const struct LDKChannelDetails *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_inbound_payment_scid")] public static extern long ChannelDetails_get_inbound_payment_scid(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z ChannelDetails_get_outbound_payment_scid(const struct LDKChannelDetails *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_get_outbound_payment_scid")] public static extern long ChannelDetails_get_outbound_payment_scid(long _this_arg);
	// struct LDKCVec_u8Z ChannelDetails_write(const struct LDKChannelDetails *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_write")] public static extern long ChannelDetails_write(long _obj);
	// struct LDKCResult_ChannelDetailsDecodeErrorZ ChannelDetails_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDetails_read")] public static extern long ChannelDetails_read(long _ser);
	// enum LDKChannelShutdownState ChannelShutdownState_clone(const enum LDKChannelShutdownState *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_clone")] public static extern ChannelShutdownState ChannelShutdownState_clone(long _orig);
	// enum LDKChannelShutdownState ChannelShutdownState_not_shutting_down(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_not_shutting_down")] public static extern ChannelShutdownState ChannelShutdownState_not_shutting_down();
	// enum LDKChannelShutdownState ChannelShutdownState_shutdown_initiated(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_shutdown_initiated")] public static extern ChannelShutdownState ChannelShutdownState_shutdown_initiated();
	// enum LDKChannelShutdownState ChannelShutdownState_resolving_htlcs(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_resolving_htlcs")] public static extern ChannelShutdownState ChannelShutdownState_resolving_htlcs();
	// enum LDKChannelShutdownState ChannelShutdownState_negotiating_closing_fee(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_negotiating_closing_fee")] public static extern ChannelShutdownState ChannelShutdownState_negotiating_closing_fee();
	// enum LDKChannelShutdownState ChannelShutdownState_shutdown_complete(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_shutdown_complete")] public static extern ChannelShutdownState ChannelShutdownState_shutdown_complete();
	// bool ChannelShutdownState_eq(const enum LDKChannelShutdownState *NONNULL_PTR a, const enum LDKChannelShutdownState *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_eq")] public static extern bool ChannelShutdownState_eq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelShutdownState_write(const enum LDKChannelShutdownState *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_write")] public static extern long ChannelShutdownState_write(long _obj);
	// struct LDKCResult_ChannelShutdownStateDecodeErrorZ ChannelShutdownState_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelShutdownState_read")] public static extern long ChannelShutdownState_read(long _ser);
	// void ExpandedKey_free(struct LDKExpandedKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_free")] public static extern void ExpandedKey_free(long _this_obj);
	// uint64_t ExpandedKey_hash(const struct LDKExpandedKey *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_hash")] public static extern long ExpandedKey_hash(long _o);
	// uint64_t ExpandedKey_clone_ptr(LDKExpandedKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_clone_ptr")] public static extern long ExpandedKey_clone_ptr(long _arg);
	// struct LDKExpandedKey ExpandedKey_clone(const struct LDKExpandedKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_clone")] public static extern long ExpandedKey_clone(long _orig);
	// bool ExpandedKey_eq(const struct LDKExpandedKey *NONNULL_PTR a, const struct LDKExpandedKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_eq")] public static extern bool ExpandedKey_eq(long _a, long _b);
	// MUST_USE_RES struct LDKExpandedKey ExpandedKey_new(struct LDKThirtyTwoBytes key_material);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpandedKey_new")] public static extern long ExpandedKey_new(long _key_material);
	// struct LDKCResult_C2Tuple_ThirtyTwoBytesThirtyTwoBytesZNoneZ create(const struct LDKExpandedKey *NONNULL_PTR keys, struct LDKCOption_u64Z min_value_msat, uint32_t invoice_expiry_delta_secs, const struct LDKEntropySource *NONNULL_PTR entropy_source, uint64_t current_time, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create")] public static extern long create(long _keys, long _min_value_msat, int _invoice_expiry_delta_secs, long _entropy_source, long _current_time, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_ThirtyTwoBytesNoneZ create_from_hash(const struct LDKExpandedKey *NONNULL_PTR keys, struct LDKCOption_u64Z min_value_msat, struct LDKThirtyTwoBytes payment_hash, uint32_t invoice_expiry_delta_secs, uint64_t current_time, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_from_hash")] public static extern long create_from_hash(long _keys, long _min_value_msat, long _payment_hash, int _invoice_expiry_delta_secs, long _current_time, long _min_final_cltv_expiry_delta);
	// void DecodeError_free(struct LDKDecodeError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_free")] public static extern void DecodeError_free(long _this_ptr);
	// uint64_t DecodeError_clone_ptr(LDKDecodeError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_clone_ptr")] public static extern long DecodeError_clone_ptr(long _arg);
	// struct LDKDecodeError DecodeError_clone(const struct LDKDecodeError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_clone")] public static extern long DecodeError_clone(long _orig);
	// struct LDKDecodeError DecodeError_unknown_version(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unknown_version")] public static extern long DecodeError_unknown_version();
	// struct LDKDecodeError DecodeError_unknown_required_feature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unknown_required_feature")] public static extern long DecodeError_unknown_required_feature();
	// struct LDKDecodeError DecodeError_invalid_value(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_invalid_value")] public static extern long DecodeError_invalid_value();
	// struct LDKDecodeError DecodeError_short_read(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_short_read")] public static extern long DecodeError_short_read();
	// struct LDKDecodeError DecodeError_bad_length_descriptor(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_bad_length_descriptor")] public static extern long DecodeError_bad_length_descriptor();
	// struct LDKDecodeError DecodeError_io(enum LDKIOError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_io")] public static extern long DecodeError_io(IOError _a);
	// struct LDKDecodeError DecodeError_unsupported_compression(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_unsupported_compression")] public static extern long DecodeError_unsupported_compression();
	// struct LDKDecodeError DecodeError_dangerous_value(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_dangerous_value")] public static extern long DecodeError_dangerous_value();
	// uint64_t DecodeError_hash(const struct LDKDecodeError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_hash")] public static extern long DecodeError_hash(long _o);
	// bool DecodeError_eq(const struct LDKDecodeError *NONNULL_PTR a, const struct LDKDecodeError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_eq")] public static extern bool DecodeError_eq(long _a, long _b);
	// void Init_free(struct LDKInit this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_free")] public static extern void Init_free(long _this_obj);
	// struct LDKInitFeatures Init_get_features(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_features")] public static extern long Init_get_features(long _this_ptr);
	// void Init_set_features(struct LDKInit *NONNULL_PTR this_ptr, struct LDKInitFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_features")] public static extern void Init_set_features(long _this_ptr, long _val);
	// struct LDKCOption_CVec_ThirtyTwoBytesZZ Init_get_networks(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_networks")] public static extern long Init_get_networks(long _this_ptr);
	// void Init_set_networks(struct LDKInit *NONNULL_PTR this_ptr, struct LDKCOption_CVec_ThirtyTwoBytesZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_networks")] public static extern void Init_set_networks(long _this_ptr, long _val);
	// struct LDKCOption_SocketAddressZ Init_get_remote_network_address(const struct LDKInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_get_remote_network_address")] public static extern long Init_get_remote_network_address(long _this_ptr);
	// void Init_set_remote_network_address(struct LDKInit *NONNULL_PTR this_ptr, struct LDKCOption_SocketAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_set_remote_network_address")] public static extern void Init_set_remote_network_address(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInit Init_new(struct LDKInitFeatures features_arg, struct LDKCOption_CVec_ThirtyTwoBytesZZ networks_arg, struct LDKCOption_SocketAddressZ remote_network_address_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_new")] public static extern long Init_new(long _features_arg, long _networks_arg, long _remote_network_address_arg);
	// uint64_t Init_clone_ptr(LDKInit *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_clone_ptr")] public static extern long Init_clone_ptr(long _arg);
	// struct LDKInit Init_clone(const struct LDKInit *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_clone")] public static extern long Init_clone(long _orig);
	// uint64_t Init_hash(const struct LDKInit *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_hash")] public static extern long Init_hash(long _o);
	// bool Init_eq(const struct LDKInit *NONNULL_PTR a, const struct LDKInit *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_eq")] public static extern bool Init_eq(long _a, long _b);
	// void ErrorMessage_free(struct LDKErrorMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_free")] public static extern void ErrorMessage_free(long _this_obj);
	// struct LDKChannelId ErrorMessage_get_channel_id(const struct LDKErrorMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_get_channel_id")] public static extern long ErrorMessage_get_channel_id(long _this_ptr);
	// void ErrorMessage_set_channel_id(struct LDKErrorMessage *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_set_channel_id")] public static extern void ErrorMessage_set_channel_id(long _this_ptr, long _val);
	// struct LDKStr ErrorMessage_get_data(const struct LDKErrorMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_get_data")] public static extern long ErrorMessage_get_data(long _this_ptr);
	// void ErrorMessage_set_data(struct LDKErrorMessage *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_set_data")] public static extern void ErrorMessage_set_data(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKErrorMessage ErrorMessage_new(struct LDKChannelId channel_id_arg, struct LDKStr data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_new")] public static extern long ErrorMessage_new(long _channel_id_arg, long _data_arg);
	// uint64_t ErrorMessage_clone_ptr(LDKErrorMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_clone_ptr")] public static extern long ErrorMessage_clone_ptr(long _arg);
	// struct LDKErrorMessage ErrorMessage_clone(const struct LDKErrorMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_clone")] public static extern long ErrorMessage_clone(long _orig);
	// uint64_t ErrorMessage_hash(const struct LDKErrorMessage *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_hash")] public static extern long ErrorMessage_hash(long _o);
	// bool ErrorMessage_eq(const struct LDKErrorMessage *NONNULL_PTR a, const struct LDKErrorMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_eq")] public static extern bool ErrorMessage_eq(long _a, long _b);
	// void WarningMessage_free(struct LDKWarningMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_free")] public static extern void WarningMessage_free(long _this_obj);
	// struct LDKChannelId WarningMessage_get_channel_id(const struct LDKWarningMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_get_channel_id")] public static extern long WarningMessage_get_channel_id(long _this_ptr);
	// void WarningMessage_set_channel_id(struct LDKWarningMessage *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_set_channel_id")] public static extern void WarningMessage_set_channel_id(long _this_ptr, long _val);
	// struct LDKStr WarningMessage_get_data(const struct LDKWarningMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_get_data")] public static extern long WarningMessage_get_data(long _this_ptr);
	// void WarningMessage_set_data(struct LDKWarningMessage *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_set_data")] public static extern void WarningMessage_set_data(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKWarningMessage WarningMessage_new(struct LDKChannelId channel_id_arg, struct LDKStr data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_new")] public static extern long WarningMessage_new(long _channel_id_arg, long _data_arg);
	// uint64_t WarningMessage_clone_ptr(LDKWarningMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_clone_ptr")] public static extern long WarningMessage_clone_ptr(long _arg);
	// struct LDKWarningMessage WarningMessage_clone(const struct LDKWarningMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_clone")] public static extern long WarningMessage_clone(long _orig);
	// uint64_t WarningMessage_hash(const struct LDKWarningMessage *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_hash")] public static extern long WarningMessage_hash(long _o);
	// bool WarningMessage_eq(const struct LDKWarningMessage *NONNULL_PTR a, const struct LDKWarningMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_eq")] public static extern bool WarningMessage_eq(long _a, long _b);
	// void Ping_free(struct LDKPing this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_free")] public static extern void Ping_free(long _this_obj);
	// uint16_t Ping_get_ponglen(const struct LDKPing *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_get_ponglen")] public static extern short Ping_get_ponglen(long _this_ptr);
	// void Ping_set_ponglen(struct LDKPing *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_set_ponglen")] public static extern void Ping_set_ponglen(long _this_ptr, short _val);
	// uint16_t Ping_get_byteslen(const struct LDKPing *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_get_byteslen")] public static extern short Ping_get_byteslen(long _this_ptr);
	// void Ping_set_byteslen(struct LDKPing *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_set_byteslen")] public static extern void Ping_set_byteslen(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKPing Ping_new(uint16_t ponglen_arg, uint16_t byteslen_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_new")] public static extern long Ping_new(short _ponglen_arg, short _byteslen_arg);
	// uint64_t Ping_clone_ptr(LDKPing *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_clone_ptr")] public static extern long Ping_clone_ptr(long _arg);
	// struct LDKPing Ping_clone(const struct LDKPing *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_clone")] public static extern long Ping_clone(long _orig);
	// uint64_t Ping_hash(const struct LDKPing *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_hash")] public static extern long Ping_hash(long _o);
	// bool Ping_eq(const struct LDKPing *NONNULL_PTR a, const struct LDKPing *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_eq")] public static extern bool Ping_eq(long _a, long _b);
	// void Pong_free(struct LDKPong this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_free")] public static extern void Pong_free(long _this_obj);
	// uint16_t Pong_get_byteslen(const struct LDKPong *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_get_byteslen")] public static extern short Pong_get_byteslen(long _this_ptr);
	// void Pong_set_byteslen(struct LDKPong *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_set_byteslen")] public static extern void Pong_set_byteslen(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKPong Pong_new(uint16_t byteslen_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_new")] public static extern long Pong_new(short _byteslen_arg);
	// uint64_t Pong_clone_ptr(LDKPong *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_clone_ptr")] public static extern long Pong_clone_ptr(long _arg);
	// struct LDKPong Pong_clone(const struct LDKPong *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_clone")] public static extern long Pong_clone(long _orig);
	// uint64_t Pong_hash(const struct LDKPong *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_hash")] public static extern long Pong_hash(long _o);
	// bool Pong_eq(const struct LDKPong *NONNULL_PTR a, const struct LDKPong *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_eq")] public static extern bool Pong_eq(long _a, long _b);
	// void CommonOpenChannelFields_free(struct LDKCommonOpenChannelFields this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_free")] public static extern void CommonOpenChannelFields_free(long _this_obj);
	// const uint8_t (*CommonOpenChannelFields_get_chain_hash(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_chain_hash")] public static extern long CommonOpenChannelFields_get_chain_hash(long _this_ptr);
	// void CommonOpenChannelFields_set_chain_hash(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_chain_hash")] public static extern void CommonOpenChannelFields_set_chain_hash(long _this_ptr, long _val);
	// struct LDKChannelId CommonOpenChannelFields_get_temporary_channel_id(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_temporary_channel_id")] public static extern long CommonOpenChannelFields_get_temporary_channel_id(long _this_ptr);
	// void CommonOpenChannelFields_set_temporary_channel_id(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_temporary_channel_id")] public static extern void CommonOpenChannelFields_set_temporary_channel_id(long _this_ptr, long _val);
	// uint64_t CommonOpenChannelFields_get_funding_satoshis(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_funding_satoshis")] public static extern long CommonOpenChannelFields_get_funding_satoshis(long _this_ptr);
	// void CommonOpenChannelFields_set_funding_satoshis(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_funding_satoshis")] public static extern void CommonOpenChannelFields_set_funding_satoshis(long _this_ptr, long _val);
	// uint64_t CommonOpenChannelFields_get_dust_limit_satoshis(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_dust_limit_satoshis")] public static extern long CommonOpenChannelFields_get_dust_limit_satoshis(long _this_ptr);
	// void CommonOpenChannelFields_set_dust_limit_satoshis(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_dust_limit_satoshis")] public static extern void CommonOpenChannelFields_set_dust_limit_satoshis(long _this_ptr, long _val);
	// uint64_t CommonOpenChannelFields_get_max_htlc_value_in_flight_msat(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_max_htlc_value_in_flight_msat")] public static extern long CommonOpenChannelFields_get_max_htlc_value_in_flight_msat(long _this_ptr);
	// void CommonOpenChannelFields_set_max_htlc_value_in_flight_msat(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_max_htlc_value_in_flight_msat")] public static extern void CommonOpenChannelFields_set_max_htlc_value_in_flight_msat(long _this_ptr, long _val);
	// uint64_t CommonOpenChannelFields_get_htlc_minimum_msat(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_htlc_minimum_msat")] public static extern long CommonOpenChannelFields_get_htlc_minimum_msat(long _this_ptr);
	// void CommonOpenChannelFields_set_htlc_minimum_msat(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_htlc_minimum_msat")] public static extern void CommonOpenChannelFields_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint32_t CommonOpenChannelFields_get_commitment_feerate_sat_per_1000_weight(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_commitment_feerate_sat_per_1000_weight")] public static extern int CommonOpenChannelFields_get_commitment_feerate_sat_per_1000_weight(long _this_ptr);
	// void CommonOpenChannelFields_set_commitment_feerate_sat_per_1000_weight(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_commitment_feerate_sat_per_1000_weight")] public static extern void CommonOpenChannelFields_set_commitment_feerate_sat_per_1000_weight(long _this_ptr, int _val);
	// uint16_t CommonOpenChannelFields_get_to_self_delay(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_to_self_delay")] public static extern short CommonOpenChannelFields_get_to_self_delay(long _this_ptr);
	// void CommonOpenChannelFields_set_to_self_delay(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_to_self_delay")] public static extern void CommonOpenChannelFields_set_to_self_delay(long _this_ptr, short _val);
	// uint16_t CommonOpenChannelFields_get_max_accepted_htlcs(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_max_accepted_htlcs")] public static extern short CommonOpenChannelFields_get_max_accepted_htlcs(long _this_ptr);
	// void CommonOpenChannelFields_set_max_accepted_htlcs(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_max_accepted_htlcs")] public static extern void CommonOpenChannelFields_set_max_accepted_htlcs(long _this_ptr, short _val);
	// struct LDKPublicKey CommonOpenChannelFields_get_funding_pubkey(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_funding_pubkey")] public static extern long CommonOpenChannelFields_get_funding_pubkey(long _this_ptr);
	// void CommonOpenChannelFields_set_funding_pubkey(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_funding_pubkey")] public static extern void CommonOpenChannelFields_set_funding_pubkey(long _this_ptr, long _val);
	// struct LDKPublicKey CommonOpenChannelFields_get_revocation_basepoint(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_revocation_basepoint")] public static extern long CommonOpenChannelFields_get_revocation_basepoint(long _this_ptr);
	// void CommonOpenChannelFields_set_revocation_basepoint(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_revocation_basepoint")] public static extern void CommonOpenChannelFields_set_revocation_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonOpenChannelFields_get_payment_basepoint(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_payment_basepoint")] public static extern long CommonOpenChannelFields_get_payment_basepoint(long _this_ptr);
	// void CommonOpenChannelFields_set_payment_basepoint(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_payment_basepoint")] public static extern void CommonOpenChannelFields_set_payment_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonOpenChannelFields_get_delayed_payment_basepoint(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_delayed_payment_basepoint")] public static extern long CommonOpenChannelFields_get_delayed_payment_basepoint(long _this_ptr);
	// void CommonOpenChannelFields_set_delayed_payment_basepoint(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_delayed_payment_basepoint")] public static extern void CommonOpenChannelFields_set_delayed_payment_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonOpenChannelFields_get_htlc_basepoint(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_htlc_basepoint")] public static extern long CommonOpenChannelFields_get_htlc_basepoint(long _this_ptr);
	// void CommonOpenChannelFields_set_htlc_basepoint(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_htlc_basepoint")] public static extern void CommonOpenChannelFields_set_htlc_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonOpenChannelFields_get_first_per_commitment_point(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_first_per_commitment_point")] public static extern long CommonOpenChannelFields_get_first_per_commitment_point(long _this_ptr);
	// void CommonOpenChannelFields_set_first_per_commitment_point(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_first_per_commitment_point")] public static extern void CommonOpenChannelFields_set_first_per_commitment_point(long _this_ptr, long _val);
	// uint8_t CommonOpenChannelFields_get_channel_flags(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_channel_flags")] public static extern byte CommonOpenChannelFields_get_channel_flags(long _this_ptr);
	// void CommonOpenChannelFields_set_channel_flags(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_channel_flags")] public static extern void CommonOpenChannelFields_set_channel_flags(long _this_ptr, byte _val);
	// struct LDKCOption_CVec_u8ZZ CommonOpenChannelFields_get_shutdown_scriptpubkey(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_shutdown_scriptpubkey")] public static extern long CommonOpenChannelFields_get_shutdown_scriptpubkey(long _this_ptr);
	// void CommonOpenChannelFields_set_shutdown_scriptpubkey(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_shutdown_scriptpubkey")] public static extern void CommonOpenChannelFields_set_shutdown_scriptpubkey(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures CommonOpenChannelFields_get_channel_type(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_get_channel_type")] public static extern long CommonOpenChannelFields_get_channel_type(long _this_ptr);
	// void CommonOpenChannelFields_set_channel_type(struct LDKCommonOpenChannelFields *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_set_channel_type")] public static extern void CommonOpenChannelFields_set_channel_type(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommonOpenChannelFields CommonOpenChannelFields_new(struct LDKThirtyTwoBytes chain_hash_arg, struct LDKChannelId temporary_channel_id_arg, uint64_t funding_satoshis_arg, uint64_t dust_limit_satoshis_arg, uint64_t max_htlc_value_in_flight_msat_arg, uint64_t htlc_minimum_msat_arg, uint32_t commitment_feerate_sat_per_1000_weight_arg, uint16_t to_self_delay_arg, uint16_t max_accepted_htlcs_arg, struct LDKPublicKey funding_pubkey_arg, struct LDKPublicKey revocation_basepoint_arg, struct LDKPublicKey payment_basepoint_arg, struct LDKPublicKey delayed_payment_basepoint_arg, struct LDKPublicKey htlc_basepoint_arg, struct LDKPublicKey first_per_commitment_point_arg, uint8_t channel_flags_arg, struct LDKCOption_CVec_u8ZZ shutdown_scriptpubkey_arg, struct LDKChannelTypeFeatures channel_type_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_new")] public static extern long CommonOpenChannelFields_new(long _chain_hash_arg, long _temporary_channel_id_arg, long _funding_satoshis_arg, long _dust_limit_satoshis_arg, long _max_htlc_value_in_flight_msat_arg, long _htlc_minimum_msat_arg, int _commitment_feerate_sat_per_1000_weight_arg, short _to_self_delay_arg, short _max_accepted_htlcs_arg, long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_basepoint_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg, long _first_per_commitment_point_arg, byte _channel_flags_arg, long _shutdown_scriptpubkey_arg, long _channel_type_arg);
	// uint64_t CommonOpenChannelFields_clone_ptr(LDKCommonOpenChannelFields *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_clone_ptr")] public static extern long CommonOpenChannelFields_clone_ptr(long _arg);
	// struct LDKCommonOpenChannelFields CommonOpenChannelFields_clone(const struct LDKCommonOpenChannelFields *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_clone")] public static extern long CommonOpenChannelFields_clone(long _orig);
	// uint64_t CommonOpenChannelFields_hash(const struct LDKCommonOpenChannelFields *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_hash")] public static extern long CommonOpenChannelFields_hash(long _o);
	// bool CommonOpenChannelFields_eq(const struct LDKCommonOpenChannelFields *NONNULL_PTR a, const struct LDKCommonOpenChannelFields *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_eq")] public static extern bool CommonOpenChannelFields_eq(long _a, long _b);
	// MUST_USE_RES struct LDKChannelParameters CommonOpenChannelFields_channel_parameters(const struct LDKCommonOpenChannelFields *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonOpenChannelFields_channel_parameters")] public static extern long CommonOpenChannelFields_channel_parameters(long _this_arg);
	// void ChannelParameters_free(struct LDKChannelParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_free")] public static extern void ChannelParameters_free(long _this_obj);
	// uint64_t ChannelParameters_get_dust_limit_satoshis(const struct LDKChannelParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_get_dust_limit_satoshis")] public static extern long ChannelParameters_get_dust_limit_satoshis(long _this_ptr);
	// void ChannelParameters_set_dust_limit_satoshis(struct LDKChannelParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_set_dust_limit_satoshis")] public static extern void ChannelParameters_set_dust_limit_satoshis(long _this_ptr, long _val);
	// uint64_t ChannelParameters_get_max_htlc_value_in_flight_msat(const struct LDKChannelParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_get_max_htlc_value_in_flight_msat")] public static extern long ChannelParameters_get_max_htlc_value_in_flight_msat(long _this_ptr);
	// void ChannelParameters_set_max_htlc_value_in_flight_msat(struct LDKChannelParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_set_max_htlc_value_in_flight_msat")] public static extern void ChannelParameters_set_max_htlc_value_in_flight_msat(long _this_ptr, long _val);
	// uint64_t ChannelParameters_get_htlc_minimum_msat(const struct LDKChannelParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_get_htlc_minimum_msat")] public static extern long ChannelParameters_get_htlc_minimum_msat(long _this_ptr);
	// void ChannelParameters_set_htlc_minimum_msat(struct LDKChannelParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_set_htlc_minimum_msat")] public static extern void ChannelParameters_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint32_t ChannelParameters_get_commitment_feerate_sat_per_1000_weight(const struct LDKChannelParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_get_commitment_feerate_sat_per_1000_weight")] public static extern int ChannelParameters_get_commitment_feerate_sat_per_1000_weight(long _this_ptr);
	// void ChannelParameters_set_commitment_feerate_sat_per_1000_weight(struct LDKChannelParameters *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_set_commitment_feerate_sat_per_1000_weight")] public static extern void ChannelParameters_set_commitment_feerate_sat_per_1000_weight(long _this_ptr, int _val);
	// uint16_t ChannelParameters_get_to_self_delay(const struct LDKChannelParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_get_to_self_delay")] public static extern short ChannelParameters_get_to_self_delay(long _this_ptr);
	// void ChannelParameters_set_to_self_delay(struct LDKChannelParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_set_to_self_delay")] public static extern void ChannelParameters_set_to_self_delay(long _this_ptr, short _val);
	// uint16_t ChannelParameters_get_max_accepted_htlcs(const struct LDKChannelParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_get_max_accepted_htlcs")] public static extern short ChannelParameters_get_max_accepted_htlcs(long _this_ptr);
	// void ChannelParameters_set_max_accepted_htlcs(struct LDKChannelParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_set_max_accepted_htlcs")] public static extern void ChannelParameters_set_max_accepted_htlcs(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKChannelParameters ChannelParameters_new(uint64_t dust_limit_satoshis_arg, uint64_t max_htlc_value_in_flight_msat_arg, uint64_t htlc_minimum_msat_arg, uint32_t commitment_feerate_sat_per_1000_weight_arg, uint16_t to_self_delay_arg, uint16_t max_accepted_htlcs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_new")] public static extern long ChannelParameters_new(long _dust_limit_satoshis_arg, long _max_htlc_value_in_flight_msat_arg, long _htlc_minimum_msat_arg, int _commitment_feerate_sat_per_1000_weight_arg, short _to_self_delay_arg, short _max_accepted_htlcs_arg);
	// uint64_t ChannelParameters_clone_ptr(LDKChannelParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_clone_ptr")] public static extern long ChannelParameters_clone_ptr(long _arg);
	// struct LDKChannelParameters ChannelParameters_clone(const struct LDKChannelParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_clone")] public static extern long ChannelParameters_clone(long _orig);
	// uint64_t ChannelParameters_hash(const struct LDKChannelParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_hash")] public static extern long ChannelParameters_hash(long _o);
	// bool ChannelParameters_eq(const struct LDKChannelParameters *NONNULL_PTR a, const struct LDKChannelParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelParameters_eq")] public static extern bool ChannelParameters_eq(long _a, long _b);
	// void OpenChannel_free(struct LDKOpenChannel this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_free")] public static extern void OpenChannel_free(long _this_obj);
	// struct LDKCommonOpenChannelFields OpenChannel_get_common_fields(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_common_fields")] public static extern long OpenChannel_get_common_fields(long _this_ptr);
	// void OpenChannel_set_common_fields(struct LDKOpenChannel *NONNULL_PTR this_ptr, struct LDKCommonOpenChannelFields val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_common_fields")] public static extern void OpenChannel_set_common_fields(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_push_msat(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_push_msat")] public static extern long OpenChannel_get_push_msat(long _this_ptr);
	// void OpenChannel_set_push_msat(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_push_msat")] public static extern void OpenChannel_set_push_msat(long _this_ptr, long _val);
	// uint64_t OpenChannel_get_channel_reserve_satoshis(const struct LDKOpenChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_get_channel_reserve_satoshis")] public static extern long OpenChannel_get_channel_reserve_satoshis(long _this_ptr);
	// void OpenChannel_set_channel_reserve_satoshis(struct LDKOpenChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_set_channel_reserve_satoshis")] public static extern void OpenChannel_set_channel_reserve_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKOpenChannel OpenChannel_new(struct LDKCommonOpenChannelFields common_fields_arg, uint64_t push_msat_arg, uint64_t channel_reserve_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_new")] public static extern long OpenChannel_new(long _common_fields_arg, long _push_msat_arg, long _channel_reserve_satoshis_arg);
	// uint64_t OpenChannel_clone_ptr(LDKOpenChannel *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_clone_ptr")] public static extern long OpenChannel_clone_ptr(long _arg);
	// struct LDKOpenChannel OpenChannel_clone(const struct LDKOpenChannel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_clone")] public static extern long OpenChannel_clone(long _orig);
	// uint64_t OpenChannel_hash(const struct LDKOpenChannel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_hash")] public static extern long OpenChannel_hash(long _o);
	// bool OpenChannel_eq(const struct LDKOpenChannel *NONNULL_PTR a, const struct LDKOpenChannel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_eq")] public static extern bool OpenChannel_eq(long _a, long _b);
	// void OpenChannelV2_free(struct LDKOpenChannelV2 this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_free")] public static extern void OpenChannelV2_free(long _this_obj);
	// struct LDKCommonOpenChannelFields OpenChannelV2_get_common_fields(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_common_fields")] public static extern long OpenChannelV2_get_common_fields(long _this_ptr);
	// void OpenChannelV2_set_common_fields(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKCommonOpenChannelFields val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_common_fields")] public static extern void OpenChannelV2_set_common_fields(long _this_ptr, long _val);
	// uint32_t OpenChannelV2_get_funding_feerate_sat_per_1000_weight(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_funding_feerate_sat_per_1000_weight")] public static extern int OpenChannelV2_get_funding_feerate_sat_per_1000_weight(long _this_ptr);
	// void OpenChannelV2_set_funding_feerate_sat_per_1000_weight(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_funding_feerate_sat_per_1000_weight")] public static extern void OpenChannelV2_set_funding_feerate_sat_per_1000_weight(long _this_ptr, int _val);
	// uint32_t OpenChannelV2_get_locktime(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_locktime")] public static extern int OpenChannelV2_get_locktime(long _this_ptr);
	// void OpenChannelV2_set_locktime(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_locktime")] public static extern void OpenChannelV2_set_locktime(long _this_ptr, int _val);
	// struct LDKPublicKey OpenChannelV2_get_second_per_commitment_point(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_second_per_commitment_point")] public static extern long OpenChannelV2_get_second_per_commitment_point(long _this_ptr);
	// void OpenChannelV2_set_second_per_commitment_point(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_second_per_commitment_point")] public static extern void OpenChannelV2_set_second_per_commitment_point(long _this_ptr, long _val);
	// enum LDKCOption_NoneZ OpenChannelV2_get_require_confirmed_inputs(const struct LDKOpenChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_get_require_confirmed_inputs")] public static extern COption_NoneZ OpenChannelV2_get_require_confirmed_inputs(long _this_ptr);
	// void OpenChannelV2_set_require_confirmed_inputs(struct LDKOpenChannelV2 *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_set_require_confirmed_inputs")] public static extern void OpenChannelV2_set_require_confirmed_inputs(long _this_ptr, COption_NoneZ _val);
	// MUST_USE_RES struct LDKOpenChannelV2 OpenChannelV2_new(struct LDKCommonOpenChannelFields common_fields_arg, uint32_t funding_feerate_sat_per_1000_weight_arg, uint32_t locktime_arg, struct LDKPublicKey second_per_commitment_point_arg, enum LDKCOption_NoneZ require_confirmed_inputs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_new")] public static extern long OpenChannelV2_new(long _common_fields_arg, int _funding_feerate_sat_per_1000_weight_arg, int _locktime_arg, long _second_per_commitment_point_arg, COption_NoneZ _require_confirmed_inputs_arg);
	// uint64_t OpenChannelV2_clone_ptr(LDKOpenChannelV2 *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_clone_ptr")] public static extern long OpenChannelV2_clone_ptr(long _arg);
	// struct LDKOpenChannelV2 OpenChannelV2_clone(const struct LDKOpenChannelV2 *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_clone")] public static extern long OpenChannelV2_clone(long _orig);
	// uint64_t OpenChannelV2_hash(const struct LDKOpenChannelV2 *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_hash")] public static extern long OpenChannelV2_hash(long _o);
	// bool OpenChannelV2_eq(const struct LDKOpenChannelV2 *NONNULL_PTR a, const struct LDKOpenChannelV2 *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_eq")] public static extern bool OpenChannelV2_eq(long _a, long _b);
	// void CommonAcceptChannelFields_free(struct LDKCommonAcceptChannelFields this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_free")] public static extern void CommonAcceptChannelFields_free(long _this_obj);
	// struct LDKChannelId CommonAcceptChannelFields_get_temporary_channel_id(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_temporary_channel_id")] public static extern long CommonAcceptChannelFields_get_temporary_channel_id(long _this_ptr);
	// void CommonAcceptChannelFields_set_temporary_channel_id(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_temporary_channel_id")] public static extern void CommonAcceptChannelFields_set_temporary_channel_id(long _this_ptr, long _val);
	// uint64_t CommonAcceptChannelFields_get_dust_limit_satoshis(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_dust_limit_satoshis")] public static extern long CommonAcceptChannelFields_get_dust_limit_satoshis(long _this_ptr);
	// void CommonAcceptChannelFields_set_dust_limit_satoshis(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_dust_limit_satoshis")] public static extern void CommonAcceptChannelFields_set_dust_limit_satoshis(long _this_ptr, long _val);
	// uint64_t CommonAcceptChannelFields_get_max_htlc_value_in_flight_msat(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_max_htlc_value_in_flight_msat")] public static extern long CommonAcceptChannelFields_get_max_htlc_value_in_flight_msat(long _this_ptr);
	// void CommonAcceptChannelFields_set_max_htlc_value_in_flight_msat(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_max_htlc_value_in_flight_msat")] public static extern void CommonAcceptChannelFields_set_max_htlc_value_in_flight_msat(long _this_ptr, long _val);
	// uint64_t CommonAcceptChannelFields_get_htlc_minimum_msat(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_htlc_minimum_msat")] public static extern long CommonAcceptChannelFields_get_htlc_minimum_msat(long _this_ptr);
	// void CommonAcceptChannelFields_set_htlc_minimum_msat(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_htlc_minimum_msat")] public static extern void CommonAcceptChannelFields_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint32_t CommonAcceptChannelFields_get_minimum_depth(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_minimum_depth")] public static extern int CommonAcceptChannelFields_get_minimum_depth(long _this_ptr);
	// void CommonAcceptChannelFields_set_minimum_depth(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_minimum_depth")] public static extern void CommonAcceptChannelFields_set_minimum_depth(long _this_ptr, int _val);
	// uint16_t CommonAcceptChannelFields_get_to_self_delay(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_to_self_delay")] public static extern short CommonAcceptChannelFields_get_to_self_delay(long _this_ptr);
	// void CommonAcceptChannelFields_set_to_self_delay(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_to_self_delay")] public static extern void CommonAcceptChannelFields_set_to_self_delay(long _this_ptr, short _val);
	// uint16_t CommonAcceptChannelFields_get_max_accepted_htlcs(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_max_accepted_htlcs")] public static extern short CommonAcceptChannelFields_get_max_accepted_htlcs(long _this_ptr);
	// void CommonAcceptChannelFields_set_max_accepted_htlcs(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_max_accepted_htlcs")] public static extern void CommonAcceptChannelFields_set_max_accepted_htlcs(long _this_ptr, short _val);
	// struct LDKPublicKey CommonAcceptChannelFields_get_funding_pubkey(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_funding_pubkey")] public static extern long CommonAcceptChannelFields_get_funding_pubkey(long _this_ptr);
	// void CommonAcceptChannelFields_set_funding_pubkey(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_funding_pubkey")] public static extern void CommonAcceptChannelFields_set_funding_pubkey(long _this_ptr, long _val);
	// struct LDKPublicKey CommonAcceptChannelFields_get_revocation_basepoint(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_revocation_basepoint")] public static extern long CommonAcceptChannelFields_get_revocation_basepoint(long _this_ptr);
	// void CommonAcceptChannelFields_set_revocation_basepoint(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_revocation_basepoint")] public static extern void CommonAcceptChannelFields_set_revocation_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonAcceptChannelFields_get_payment_basepoint(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_payment_basepoint")] public static extern long CommonAcceptChannelFields_get_payment_basepoint(long _this_ptr);
	// void CommonAcceptChannelFields_set_payment_basepoint(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_payment_basepoint")] public static extern void CommonAcceptChannelFields_set_payment_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonAcceptChannelFields_get_delayed_payment_basepoint(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_delayed_payment_basepoint")] public static extern long CommonAcceptChannelFields_get_delayed_payment_basepoint(long _this_ptr);
	// void CommonAcceptChannelFields_set_delayed_payment_basepoint(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_delayed_payment_basepoint")] public static extern void CommonAcceptChannelFields_set_delayed_payment_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonAcceptChannelFields_get_htlc_basepoint(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_htlc_basepoint")] public static extern long CommonAcceptChannelFields_get_htlc_basepoint(long _this_ptr);
	// void CommonAcceptChannelFields_set_htlc_basepoint(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_htlc_basepoint")] public static extern void CommonAcceptChannelFields_set_htlc_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey CommonAcceptChannelFields_get_first_per_commitment_point(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_first_per_commitment_point")] public static extern long CommonAcceptChannelFields_get_first_per_commitment_point(long _this_ptr);
	// void CommonAcceptChannelFields_set_first_per_commitment_point(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_first_per_commitment_point")] public static extern void CommonAcceptChannelFields_set_first_per_commitment_point(long _this_ptr, long _val);
	// struct LDKCOption_CVec_u8ZZ CommonAcceptChannelFields_get_shutdown_scriptpubkey(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_shutdown_scriptpubkey")] public static extern long CommonAcceptChannelFields_get_shutdown_scriptpubkey(long _this_ptr);
	// void CommonAcceptChannelFields_set_shutdown_scriptpubkey(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_shutdown_scriptpubkey")] public static extern void CommonAcceptChannelFields_set_shutdown_scriptpubkey(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures CommonAcceptChannelFields_get_channel_type(const struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_get_channel_type")] public static extern long CommonAcceptChannelFields_get_channel_type(long _this_ptr);
	// void CommonAcceptChannelFields_set_channel_type(struct LDKCommonAcceptChannelFields *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_set_channel_type")] public static extern void CommonAcceptChannelFields_set_channel_type(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommonAcceptChannelFields CommonAcceptChannelFields_new(struct LDKChannelId temporary_channel_id_arg, uint64_t dust_limit_satoshis_arg, uint64_t max_htlc_value_in_flight_msat_arg, uint64_t htlc_minimum_msat_arg, uint32_t minimum_depth_arg, uint16_t to_self_delay_arg, uint16_t max_accepted_htlcs_arg, struct LDKPublicKey funding_pubkey_arg, struct LDKPublicKey revocation_basepoint_arg, struct LDKPublicKey payment_basepoint_arg, struct LDKPublicKey delayed_payment_basepoint_arg, struct LDKPublicKey htlc_basepoint_arg, struct LDKPublicKey first_per_commitment_point_arg, struct LDKCOption_CVec_u8ZZ shutdown_scriptpubkey_arg, struct LDKChannelTypeFeatures channel_type_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_new")] public static extern long CommonAcceptChannelFields_new(long _temporary_channel_id_arg, long _dust_limit_satoshis_arg, long _max_htlc_value_in_flight_msat_arg, long _htlc_minimum_msat_arg, int _minimum_depth_arg, short _to_self_delay_arg, short _max_accepted_htlcs_arg, long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_basepoint_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg, long _first_per_commitment_point_arg, long _shutdown_scriptpubkey_arg, long _channel_type_arg);
	// uint64_t CommonAcceptChannelFields_clone_ptr(LDKCommonAcceptChannelFields *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_clone_ptr")] public static extern long CommonAcceptChannelFields_clone_ptr(long _arg);
	// struct LDKCommonAcceptChannelFields CommonAcceptChannelFields_clone(const struct LDKCommonAcceptChannelFields *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_clone")] public static extern long CommonAcceptChannelFields_clone(long _orig);
	// uint64_t CommonAcceptChannelFields_hash(const struct LDKCommonAcceptChannelFields *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_hash")] public static extern long CommonAcceptChannelFields_hash(long _o);
	// bool CommonAcceptChannelFields_eq(const struct LDKCommonAcceptChannelFields *NONNULL_PTR a, const struct LDKCommonAcceptChannelFields *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommonAcceptChannelFields_eq")] public static extern bool CommonAcceptChannelFields_eq(long _a, long _b);
	// void AcceptChannel_free(struct LDKAcceptChannel this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_free")] public static extern void AcceptChannel_free(long _this_obj);
	// struct LDKCommonAcceptChannelFields AcceptChannel_get_common_fields(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_common_fields")] public static extern long AcceptChannel_get_common_fields(long _this_ptr);
	// void AcceptChannel_set_common_fields(struct LDKAcceptChannel *NONNULL_PTR this_ptr, struct LDKCommonAcceptChannelFields val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_common_fields")] public static extern void AcceptChannel_set_common_fields(long _this_ptr, long _val);
	// uint64_t AcceptChannel_get_channel_reserve_satoshis(const struct LDKAcceptChannel *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_get_channel_reserve_satoshis")] public static extern long AcceptChannel_get_channel_reserve_satoshis(long _this_ptr);
	// void AcceptChannel_set_channel_reserve_satoshis(struct LDKAcceptChannel *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_set_channel_reserve_satoshis")] public static extern void AcceptChannel_set_channel_reserve_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKAcceptChannel AcceptChannel_new(struct LDKCommonAcceptChannelFields common_fields_arg, uint64_t channel_reserve_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_new")] public static extern long AcceptChannel_new(long _common_fields_arg, long _channel_reserve_satoshis_arg);
	// uint64_t AcceptChannel_clone_ptr(LDKAcceptChannel *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_clone_ptr")] public static extern long AcceptChannel_clone_ptr(long _arg);
	// struct LDKAcceptChannel AcceptChannel_clone(const struct LDKAcceptChannel *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_clone")] public static extern long AcceptChannel_clone(long _orig);
	// uint64_t AcceptChannel_hash(const struct LDKAcceptChannel *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_hash")] public static extern long AcceptChannel_hash(long _o);
	// bool AcceptChannel_eq(const struct LDKAcceptChannel *NONNULL_PTR a, const struct LDKAcceptChannel *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_eq")] public static extern bool AcceptChannel_eq(long _a, long _b);
	// void AcceptChannelV2_free(struct LDKAcceptChannelV2 this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_free")] public static extern void AcceptChannelV2_free(long _this_obj);
	// struct LDKCommonAcceptChannelFields AcceptChannelV2_get_common_fields(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_common_fields")] public static extern long AcceptChannelV2_get_common_fields(long _this_ptr);
	// void AcceptChannelV2_set_common_fields(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKCommonAcceptChannelFields val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_common_fields")] public static extern void AcceptChannelV2_set_common_fields(long _this_ptr, long _val);
	// uint64_t AcceptChannelV2_get_funding_satoshis(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_funding_satoshis")] public static extern long AcceptChannelV2_get_funding_satoshis(long _this_ptr);
	// void AcceptChannelV2_set_funding_satoshis(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_funding_satoshis")] public static extern void AcceptChannelV2_set_funding_satoshis(long _this_ptr, long _val);
	// struct LDKPublicKey AcceptChannelV2_get_second_per_commitment_point(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_second_per_commitment_point")] public static extern long AcceptChannelV2_get_second_per_commitment_point(long _this_ptr);
	// void AcceptChannelV2_set_second_per_commitment_point(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_second_per_commitment_point")] public static extern void AcceptChannelV2_set_second_per_commitment_point(long _this_ptr, long _val);
	// enum LDKCOption_NoneZ AcceptChannelV2_get_require_confirmed_inputs(const struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_get_require_confirmed_inputs")] public static extern COption_NoneZ AcceptChannelV2_get_require_confirmed_inputs(long _this_ptr);
	// void AcceptChannelV2_set_require_confirmed_inputs(struct LDKAcceptChannelV2 *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_set_require_confirmed_inputs")] public static extern void AcceptChannelV2_set_require_confirmed_inputs(long _this_ptr, COption_NoneZ _val);
	// MUST_USE_RES struct LDKAcceptChannelV2 AcceptChannelV2_new(struct LDKCommonAcceptChannelFields common_fields_arg, uint64_t funding_satoshis_arg, struct LDKPublicKey second_per_commitment_point_arg, enum LDKCOption_NoneZ require_confirmed_inputs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_new")] public static extern long AcceptChannelV2_new(long _common_fields_arg, long _funding_satoshis_arg, long _second_per_commitment_point_arg, COption_NoneZ _require_confirmed_inputs_arg);
	// uint64_t AcceptChannelV2_clone_ptr(LDKAcceptChannelV2 *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_clone_ptr")] public static extern long AcceptChannelV2_clone_ptr(long _arg);
	// struct LDKAcceptChannelV2 AcceptChannelV2_clone(const struct LDKAcceptChannelV2 *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_clone")] public static extern long AcceptChannelV2_clone(long _orig);
	// uint64_t AcceptChannelV2_hash(const struct LDKAcceptChannelV2 *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_hash")] public static extern long AcceptChannelV2_hash(long _o);
	// bool AcceptChannelV2_eq(const struct LDKAcceptChannelV2 *NONNULL_PTR a, const struct LDKAcceptChannelV2 *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_eq")] public static extern bool AcceptChannelV2_eq(long _a, long _b);
	// void FundingCreated_free(struct LDKFundingCreated this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_free")] public static extern void FundingCreated_free(long _this_obj);
	// struct LDKChannelId FundingCreated_get_temporary_channel_id(const struct LDKFundingCreated *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_temporary_channel_id")] public static extern long FundingCreated_get_temporary_channel_id(long _this_ptr);
	// void FundingCreated_set_temporary_channel_id(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_temporary_channel_id")] public static extern void FundingCreated_set_temporary_channel_id(long _this_ptr, long _val);
	// const uint8_t (*FundingCreated_get_funding_txid(const struct LDKFundingCreated *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_funding_txid")] public static extern long FundingCreated_get_funding_txid(long _this_ptr);
	// void FundingCreated_set_funding_txid(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_funding_txid")] public static extern void FundingCreated_set_funding_txid(long _this_ptr, long _val);
	// uint16_t FundingCreated_get_funding_output_index(const struct LDKFundingCreated *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_funding_output_index")] public static extern short FundingCreated_get_funding_output_index(long _this_ptr);
	// void FundingCreated_set_funding_output_index(struct LDKFundingCreated *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_funding_output_index")] public static extern void FundingCreated_set_funding_output_index(long _this_ptr, short _val);
	// struct LDKECDSASignature FundingCreated_get_signature(const struct LDKFundingCreated *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_get_signature")] public static extern long FundingCreated_get_signature(long _this_ptr);
	// void FundingCreated_set_signature(struct LDKFundingCreated *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_set_signature")] public static extern void FundingCreated_set_signature(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKFundingCreated FundingCreated_new(struct LDKChannelId temporary_channel_id_arg, struct LDKThirtyTwoBytes funding_txid_arg, uint16_t funding_output_index_arg, struct LDKECDSASignature signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_new")] public static extern long FundingCreated_new(long _temporary_channel_id_arg, long _funding_txid_arg, short _funding_output_index_arg, long _signature_arg);
	// uint64_t FundingCreated_clone_ptr(LDKFundingCreated *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_clone_ptr")] public static extern long FundingCreated_clone_ptr(long _arg);
	// struct LDKFundingCreated FundingCreated_clone(const struct LDKFundingCreated *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_clone")] public static extern long FundingCreated_clone(long _orig);
	// uint64_t FundingCreated_hash(const struct LDKFundingCreated *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_hash")] public static extern long FundingCreated_hash(long _o);
	// bool FundingCreated_eq(const struct LDKFundingCreated *NONNULL_PTR a, const struct LDKFundingCreated *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_eq")] public static extern bool FundingCreated_eq(long _a, long _b);
	// void FundingSigned_free(struct LDKFundingSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_free")] public static extern void FundingSigned_free(long _this_obj);
	// struct LDKChannelId FundingSigned_get_channel_id(const struct LDKFundingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_get_channel_id")] public static extern long FundingSigned_get_channel_id(long _this_ptr);
	// void FundingSigned_set_channel_id(struct LDKFundingSigned *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_set_channel_id")] public static extern void FundingSigned_set_channel_id(long _this_ptr, long _val);
	// struct LDKECDSASignature FundingSigned_get_signature(const struct LDKFundingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_get_signature")] public static extern long FundingSigned_get_signature(long _this_ptr);
	// void FundingSigned_set_signature(struct LDKFundingSigned *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_set_signature")] public static extern void FundingSigned_set_signature(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKFundingSigned FundingSigned_new(struct LDKChannelId channel_id_arg, struct LDKECDSASignature signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_new")] public static extern long FundingSigned_new(long _channel_id_arg, long _signature_arg);
	// uint64_t FundingSigned_clone_ptr(LDKFundingSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_clone_ptr")] public static extern long FundingSigned_clone_ptr(long _arg);
	// struct LDKFundingSigned FundingSigned_clone(const struct LDKFundingSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_clone")] public static extern long FundingSigned_clone(long _orig);
	// uint64_t FundingSigned_hash(const struct LDKFundingSigned *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_hash")] public static extern long FundingSigned_hash(long _o);
	// bool FundingSigned_eq(const struct LDKFundingSigned *NONNULL_PTR a, const struct LDKFundingSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_eq")] public static extern bool FundingSigned_eq(long _a, long _b);
	// void ChannelReady_free(struct LDKChannelReady this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_free")] public static extern void ChannelReady_free(long _this_obj);
	// struct LDKChannelId ChannelReady_get_channel_id(const struct LDKChannelReady *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_channel_id")] public static extern long ChannelReady_get_channel_id(long _this_ptr);
	// void ChannelReady_set_channel_id(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_channel_id")] public static extern void ChannelReady_set_channel_id(long _this_ptr, long _val);
	// struct LDKPublicKey ChannelReady_get_next_per_commitment_point(const struct LDKChannelReady *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_next_per_commitment_point")] public static extern long ChannelReady_get_next_per_commitment_point(long _this_ptr);
	// void ChannelReady_set_next_per_commitment_point(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_next_per_commitment_point")] public static extern void ChannelReady_set_next_per_commitment_point(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelReady_get_short_channel_id_alias(const struct LDKChannelReady *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_get_short_channel_id_alias")] public static extern long ChannelReady_get_short_channel_id_alias(long _this_ptr);
	// void ChannelReady_set_short_channel_id_alias(struct LDKChannelReady *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_set_short_channel_id_alias")] public static extern void ChannelReady_set_short_channel_id_alias(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelReady ChannelReady_new(struct LDKChannelId channel_id_arg, struct LDKPublicKey next_per_commitment_point_arg, struct LDKCOption_u64Z short_channel_id_alias_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_new")] public static extern long ChannelReady_new(long _channel_id_arg, long _next_per_commitment_point_arg, long _short_channel_id_alias_arg);
	// uint64_t ChannelReady_clone_ptr(LDKChannelReady *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_clone_ptr")] public static extern long ChannelReady_clone_ptr(long _arg);
	// struct LDKChannelReady ChannelReady_clone(const struct LDKChannelReady *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_clone")] public static extern long ChannelReady_clone(long _orig);
	// uint64_t ChannelReady_hash(const struct LDKChannelReady *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_hash")] public static extern long ChannelReady_hash(long _o);
	// bool ChannelReady_eq(const struct LDKChannelReady *NONNULL_PTR a, const struct LDKChannelReady *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_eq")] public static extern bool ChannelReady_eq(long _a, long _b);
	// void Stfu_free(struct LDKStfu this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_free")] public static extern void Stfu_free(long _this_obj);
	// struct LDKChannelId Stfu_get_channel_id(const struct LDKStfu *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_get_channel_id")] public static extern long Stfu_get_channel_id(long _this_ptr);
	// void Stfu_set_channel_id(struct LDKStfu *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_set_channel_id")] public static extern void Stfu_set_channel_id(long _this_ptr, long _val);
	// uint8_t Stfu_get_initiator(const struct LDKStfu *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_get_initiator")] public static extern byte Stfu_get_initiator(long _this_ptr);
	// void Stfu_set_initiator(struct LDKStfu *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_set_initiator")] public static extern void Stfu_set_initiator(long _this_ptr, byte _val);
	// MUST_USE_RES struct LDKStfu Stfu_new(struct LDKChannelId channel_id_arg, uint8_t initiator_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_new")] public static extern long Stfu_new(long _channel_id_arg, byte _initiator_arg);
	// uint64_t Stfu_clone_ptr(LDKStfu *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_clone_ptr")] public static extern long Stfu_clone_ptr(long _arg);
	// struct LDKStfu Stfu_clone(const struct LDKStfu *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_clone")] public static extern long Stfu_clone(long _orig);
	// bool Stfu_eq(const struct LDKStfu *NONNULL_PTR a, const struct LDKStfu *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_eq")] public static extern bool Stfu_eq(long _a, long _b);
	// void SpliceInit_free(struct LDKSpliceInit this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_free")] public static extern void SpliceInit_free(long _this_obj);
	// struct LDKChannelId SpliceInit_get_channel_id(const struct LDKSpliceInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_get_channel_id")] public static extern long SpliceInit_get_channel_id(long _this_ptr);
	// void SpliceInit_set_channel_id(struct LDKSpliceInit *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_set_channel_id")] public static extern void SpliceInit_set_channel_id(long _this_ptr, long _val);
	// int64_t SpliceInit_get_funding_contribution_satoshis(const struct LDKSpliceInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_get_funding_contribution_satoshis")] public static extern long SpliceInit_get_funding_contribution_satoshis(long _this_ptr);
	// void SpliceInit_set_funding_contribution_satoshis(struct LDKSpliceInit *NONNULL_PTR this_ptr, int64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_set_funding_contribution_satoshis")] public static extern void SpliceInit_set_funding_contribution_satoshis(long _this_ptr, long _val);
	// uint32_t SpliceInit_get_funding_feerate_perkw(const struct LDKSpliceInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_get_funding_feerate_perkw")] public static extern int SpliceInit_get_funding_feerate_perkw(long _this_ptr);
	// void SpliceInit_set_funding_feerate_perkw(struct LDKSpliceInit *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_set_funding_feerate_perkw")] public static extern void SpliceInit_set_funding_feerate_perkw(long _this_ptr, int _val);
	// uint32_t SpliceInit_get_locktime(const struct LDKSpliceInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_get_locktime")] public static extern int SpliceInit_get_locktime(long _this_ptr);
	// void SpliceInit_set_locktime(struct LDKSpliceInit *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_set_locktime")] public static extern void SpliceInit_set_locktime(long _this_ptr, int _val);
	// struct LDKPublicKey SpliceInit_get_funding_pubkey(const struct LDKSpliceInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_get_funding_pubkey")] public static extern long SpliceInit_get_funding_pubkey(long _this_ptr);
	// void SpliceInit_set_funding_pubkey(struct LDKSpliceInit *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_set_funding_pubkey")] public static extern void SpliceInit_set_funding_pubkey(long _this_ptr, long _val);
	// enum LDKCOption_NoneZ SpliceInit_get_require_confirmed_inputs(const struct LDKSpliceInit *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_get_require_confirmed_inputs")] public static extern COption_NoneZ SpliceInit_get_require_confirmed_inputs(long _this_ptr);
	// void SpliceInit_set_require_confirmed_inputs(struct LDKSpliceInit *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_set_require_confirmed_inputs")] public static extern void SpliceInit_set_require_confirmed_inputs(long _this_ptr, COption_NoneZ _val);
	// MUST_USE_RES struct LDKSpliceInit SpliceInit_new(struct LDKChannelId channel_id_arg, int64_t funding_contribution_satoshis_arg, uint32_t funding_feerate_perkw_arg, uint32_t locktime_arg, struct LDKPublicKey funding_pubkey_arg, enum LDKCOption_NoneZ require_confirmed_inputs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_new")] public static extern long SpliceInit_new(long _channel_id_arg, long _funding_contribution_satoshis_arg, int _funding_feerate_perkw_arg, int _locktime_arg, long _funding_pubkey_arg, COption_NoneZ _require_confirmed_inputs_arg);
	// uint64_t SpliceInit_clone_ptr(LDKSpliceInit *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_clone_ptr")] public static extern long SpliceInit_clone_ptr(long _arg);
	// struct LDKSpliceInit SpliceInit_clone(const struct LDKSpliceInit *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_clone")] public static extern long SpliceInit_clone(long _orig);
	// bool SpliceInit_eq(const struct LDKSpliceInit *NONNULL_PTR a, const struct LDKSpliceInit *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_eq")] public static extern bool SpliceInit_eq(long _a, long _b);
	// void SpliceAck_free(struct LDKSpliceAck this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_free")] public static extern void SpliceAck_free(long _this_obj);
	// struct LDKChannelId SpliceAck_get_channel_id(const struct LDKSpliceAck *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_channel_id")] public static extern long SpliceAck_get_channel_id(long _this_ptr);
	// void SpliceAck_set_channel_id(struct LDKSpliceAck *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_channel_id")] public static extern void SpliceAck_set_channel_id(long _this_ptr, long _val);
	// int64_t SpliceAck_get_funding_contribution_satoshis(const struct LDKSpliceAck *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_funding_contribution_satoshis")] public static extern long SpliceAck_get_funding_contribution_satoshis(long _this_ptr);
	// void SpliceAck_set_funding_contribution_satoshis(struct LDKSpliceAck *NONNULL_PTR this_ptr, int64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_funding_contribution_satoshis")] public static extern void SpliceAck_set_funding_contribution_satoshis(long _this_ptr, long _val);
	// struct LDKPublicKey SpliceAck_get_funding_pubkey(const struct LDKSpliceAck *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_funding_pubkey")] public static extern long SpliceAck_get_funding_pubkey(long _this_ptr);
	// void SpliceAck_set_funding_pubkey(struct LDKSpliceAck *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_funding_pubkey")] public static extern void SpliceAck_set_funding_pubkey(long _this_ptr, long _val);
	// enum LDKCOption_NoneZ SpliceAck_get_require_confirmed_inputs(const struct LDKSpliceAck *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_get_require_confirmed_inputs")] public static extern COption_NoneZ SpliceAck_get_require_confirmed_inputs(long _this_ptr);
	// void SpliceAck_set_require_confirmed_inputs(struct LDKSpliceAck *NONNULL_PTR this_ptr, enum LDKCOption_NoneZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_set_require_confirmed_inputs")] public static extern void SpliceAck_set_require_confirmed_inputs(long _this_ptr, COption_NoneZ _val);
	// MUST_USE_RES struct LDKSpliceAck SpliceAck_new(struct LDKChannelId channel_id_arg, int64_t funding_contribution_satoshis_arg, struct LDKPublicKey funding_pubkey_arg, enum LDKCOption_NoneZ require_confirmed_inputs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_new")] public static extern long SpliceAck_new(long _channel_id_arg, long _funding_contribution_satoshis_arg, long _funding_pubkey_arg, COption_NoneZ _require_confirmed_inputs_arg);
	// uint64_t SpliceAck_clone_ptr(LDKSpliceAck *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_clone_ptr")] public static extern long SpliceAck_clone_ptr(long _arg);
	// struct LDKSpliceAck SpliceAck_clone(const struct LDKSpliceAck *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_clone")] public static extern long SpliceAck_clone(long _orig);
	// bool SpliceAck_eq(const struct LDKSpliceAck *NONNULL_PTR a, const struct LDKSpliceAck *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_eq")] public static extern bool SpliceAck_eq(long _a, long _b);
	// void SpliceLocked_free(struct LDKSpliceLocked this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_free")] public static extern void SpliceLocked_free(long _this_obj);
	// struct LDKChannelId SpliceLocked_get_channel_id(const struct LDKSpliceLocked *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_get_channel_id")] public static extern long SpliceLocked_get_channel_id(long _this_ptr);
	// void SpliceLocked_set_channel_id(struct LDKSpliceLocked *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_set_channel_id")] public static extern void SpliceLocked_set_channel_id(long _this_ptr, long _val);
	// const uint8_t (*SpliceLocked_get_splice_txid(const struct LDKSpliceLocked *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_get_splice_txid")] public static extern long SpliceLocked_get_splice_txid(long _this_ptr);
	// void SpliceLocked_set_splice_txid(struct LDKSpliceLocked *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_set_splice_txid")] public static extern void SpliceLocked_set_splice_txid(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKSpliceLocked SpliceLocked_new(struct LDKChannelId channel_id_arg, struct LDKThirtyTwoBytes splice_txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_new")] public static extern long SpliceLocked_new(long _channel_id_arg, long _splice_txid_arg);
	// uint64_t SpliceLocked_clone_ptr(LDKSpliceLocked *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_clone_ptr")] public static extern long SpliceLocked_clone_ptr(long _arg);
	// struct LDKSpliceLocked SpliceLocked_clone(const struct LDKSpliceLocked *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_clone")] public static extern long SpliceLocked_clone(long _orig);
	// bool SpliceLocked_eq(const struct LDKSpliceLocked *NONNULL_PTR a, const struct LDKSpliceLocked *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_eq")] public static extern bool SpliceLocked_eq(long _a, long _b);
	// void TxAddInput_free(struct LDKTxAddInput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_free")] public static extern void TxAddInput_free(long _this_obj);
	// struct LDKChannelId TxAddInput_get_channel_id(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_channel_id")] public static extern long TxAddInput_get_channel_id(long _this_ptr);
	// void TxAddInput_set_channel_id(struct LDKTxAddInput *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_channel_id")] public static extern void TxAddInput_set_channel_id(long _this_ptr, long _val);
	// uint64_t TxAddInput_get_serial_id(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_serial_id")] public static extern long TxAddInput_get_serial_id(long _this_ptr);
	// void TxAddInput_set_serial_id(struct LDKTxAddInput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_serial_id")] public static extern void TxAddInput_set_serial_id(long _this_ptr, long _val);
	// struct LDKTransactionU16LenLimited TxAddInput_get_prevtx(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_prevtx")] public static extern long TxAddInput_get_prevtx(long _this_ptr);
	// void TxAddInput_set_prevtx(struct LDKTxAddInput *NONNULL_PTR this_ptr, struct LDKTransactionU16LenLimited val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_prevtx")] public static extern void TxAddInput_set_prevtx(long _this_ptr, long _val);
	// uint32_t TxAddInput_get_prevtx_out(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_prevtx_out")] public static extern int TxAddInput_get_prevtx_out(long _this_ptr);
	// void TxAddInput_set_prevtx_out(struct LDKTxAddInput *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_prevtx_out")] public static extern void TxAddInput_set_prevtx_out(long _this_ptr, int _val);
	// uint32_t TxAddInput_get_sequence(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_sequence")] public static extern int TxAddInput_get_sequence(long _this_ptr);
	// void TxAddInput_set_sequence(struct LDKTxAddInput *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_sequence")] public static extern void TxAddInput_set_sequence(long _this_ptr, int _val);
	// struct LDKCOption_ThirtyTwoBytesZ TxAddInput_get_shared_input_txid(const struct LDKTxAddInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_get_shared_input_txid")] public static extern long TxAddInput_get_shared_input_txid(long _this_ptr);
	// void TxAddInput_set_shared_input_txid(struct LDKTxAddInput *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_set_shared_input_txid")] public static extern void TxAddInput_set_shared_input_txid(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxAddInput TxAddInput_new(struct LDKChannelId channel_id_arg, uint64_t serial_id_arg, struct LDKTransactionU16LenLimited prevtx_arg, uint32_t prevtx_out_arg, uint32_t sequence_arg, struct LDKCOption_ThirtyTwoBytesZ shared_input_txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_new")] public static extern long TxAddInput_new(long _channel_id_arg, long _serial_id_arg, long _prevtx_arg, int _prevtx_out_arg, int _sequence_arg, long _shared_input_txid_arg);
	// uint64_t TxAddInput_clone_ptr(LDKTxAddInput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_clone_ptr")] public static extern long TxAddInput_clone_ptr(long _arg);
	// struct LDKTxAddInput TxAddInput_clone(const struct LDKTxAddInput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_clone")] public static extern long TxAddInput_clone(long _orig);
	// uint64_t TxAddInput_hash(const struct LDKTxAddInput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_hash")] public static extern long TxAddInput_hash(long _o);
	// bool TxAddInput_eq(const struct LDKTxAddInput *NONNULL_PTR a, const struct LDKTxAddInput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_eq")] public static extern bool TxAddInput_eq(long _a, long _b);
	// void TxAddOutput_free(struct LDKTxAddOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_free")] public static extern void TxAddOutput_free(long _this_obj);
	// struct LDKChannelId TxAddOutput_get_channel_id(const struct LDKTxAddOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_channel_id")] public static extern long TxAddOutput_get_channel_id(long _this_ptr);
	// void TxAddOutput_set_channel_id(struct LDKTxAddOutput *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_channel_id")] public static extern void TxAddOutput_set_channel_id(long _this_ptr, long _val);
	// uint64_t TxAddOutput_get_serial_id(const struct LDKTxAddOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_serial_id")] public static extern long TxAddOutput_get_serial_id(long _this_ptr);
	// void TxAddOutput_set_serial_id(struct LDKTxAddOutput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_serial_id")] public static extern void TxAddOutput_set_serial_id(long _this_ptr, long _val);
	// uint64_t TxAddOutput_get_sats(const struct LDKTxAddOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_sats")] public static extern long TxAddOutput_get_sats(long _this_ptr);
	// void TxAddOutput_set_sats(struct LDKTxAddOutput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_sats")] public static extern void TxAddOutput_set_sats(long _this_ptr, long _val);
	// struct LDKCVec_u8Z TxAddOutput_get_script(const struct LDKTxAddOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_get_script")] public static extern long TxAddOutput_get_script(long _this_ptr);
	// void TxAddOutput_set_script(struct LDKTxAddOutput *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_set_script")] public static extern void TxAddOutput_set_script(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxAddOutput TxAddOutput_new(struct LDKChannelId channel_id_arg, uint64_t serial_id_arg, uint64_t sats_arg, struct LDKCVec_u8Z script_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_new")] public static extern long TxAddOutput_new(long _channel_id_arg, long _serial_id_arg, long _sats_arg, long _script_arg);
	// uint64_t TxAddOutput_clone_ptr(LDKTxAddOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_clone_ptr")] public static extern long TxAddOutput_clone_ptr(long _arg);
	// struct LDKTxAddOutput TxAddOutput_clone(const struct LDKTxAddOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_clone")] public static extern long TxAddOutput_clone(long _orig);
	// uint64_t TxAddOutput_hash(const struct LDKTxAddOutput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_hash")] public static extern long TxAddOutput_hash(long _o);
	// bool TxAddOutput_eq(const struct LDKTxAddOutput *NONNULL_PTR a, const struct LDKTxAddOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_eq")] public static extern bool TxAddOutput_eq(long _a, long _b);
	// void TxRemoveInput_free(struct LDKTxRemoveInput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_free")] public static extern void TxRemoveInput_free(long _this_obj);
	// struct LDKChannelId TxRemoveInput_get_channel_id(const struct LDKTxRemoveInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_get_channel_id")] public static extern long TxRemoveInput_get_channel_id(long _this_ptr);
	// void TxRemoveInput_set_channel_id(struct LDKTxRemoveInput *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_set_channel_id")] public static extern void TxRemoveInput_set_channel_id(long _this_ptr, long _val);
	// uint64_t TxRemoveInput_get_serial_id(const struct LDKTxRemoveInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_get_serial_id")] public static extern long TxRemoveInput_get_serial_id(long _this_ptr);
	// void TxRemoveInput_set_serial_id(struct LDKTxRemoveInput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_set_serial_id")] public static extern void TxRemoveInput_set_serial_id(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxRemoveInput TxRemoveInput_new(struct LDKChannelId channel_id_arg, uint64_t serial_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_new")] public static extern long TxRemoveInput_new(long _channel_id_arg, long _serial_id_arg);
	// uint64_t TxRemoveInput_clone_ptr(LDKTxRemoveInput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_clone_ptr")] public static extern long TxRemoveInput_clone_ptr(long _arg);
	// struct LDKTxRemoveInput TxRemoveInput_clone(const struct LDKTxRemoveInput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_clone")] public static extern long TxRemoveInput_clone(long _orig);
	// uint64_t TxRemoveInput_hash(const struct LDKTxRemoveInput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_hash")] public static extern long TxRemoveInput_hash(long _o);
	// bool TxRemoveInput_eq(const struct LDKTxRemoveInput *NONNULL_PTR a, const struct LDKTxRemoveInput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_eq")] public static extern bool TxRemoveInput_eq(long _a, long _b);
	// void TxRemoveOutput_free(struct LDKTxRemoveOutput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_free")] public static extern void TxRemoveOutput_free(long _this_obj);
	// struct LDKChannelId TxRemoveOutput_get_channel_id(const struct LDKTxRemoveOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_get_channel_id")] public static extern long TxRemoveOutput_get_channel_id(long _this_ptr);
	// void TxRemoveOutput_set_channel_id(struct LDKTxRemoveOutput *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_set_channel_id")] public static extern void TxRemoveOutput_set_channel_id(long _this_ptr, long _val);
	// uint64_t TxRemoveOutput_get_serial_id(const struct LDKTxRemoveOutput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_get_serial_id")] public static extern long TxRemoveOutput_get_serial_id(long _this_ptr);
	// void TxRemoveOutput_set_serial_id(struct LDKTxRemoveOutput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_set_serial_id")] public static extern void TxRemoveOutput_set_serial_id(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxRemoveOutput TxRemoveOutput_new(struct LDKChannelId channel_id_arg, uint64_t serial_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_new")] public static extern long TxRemoveOutput_new(long _channel_id_arg, long _serial_id_arg);
	// uint64_t TxRemoveOutput_clone_ptr(LDKTxRemoveOutput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_clone_ptr")] public static extern long TxRemoveOutput_clone_ptr(long _arg);
	// struct LDKTxRemoveOutput TxRemoveOutput_clone(const struct LDKTxRemoveOutput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_clone")] public static extern long TxRemoveOutput_clone(long _orig);
	// uint64_t TxRemoveOutput_hash(const struct LDKTxRemoveOutput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_hash")] public static extern long TxRemoveOutput_hash(long _o);
	// bool TxRemoveOutput_eq(const struct LDKTxRemoveOutput *NONNULL_PTR a, const struct LDKTxRemoveOutput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_eq")] public static extern bool TxRemoveOutput_eq(long _a, long _b);
	// void TxComplete_free(struct LDKTxComplete this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_free")] public static extern void TxComplete_free(long _this_obj);
	// struct LDKChannelId TxComplete_get_channel_id(const struct LDKTxComplete *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_get_channel_id")] public static extern long TxComplete_get_channel_id(long _this_ptr);
	// void TxComplete_set_channel_id(struct LDKTxComplete *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_set_channel_id")] public static extern void TxComplete_set_channel_id(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxComplete TxComplete_new(struct LDKChannelId channel_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_new")] public static extern long TxComplete_new(long _channel_id_arg);
	// uint64_t TxComplete_clone_ptr(LDKTxComplete *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_clone_ptr")] public static extern long TxComplete_clone_ptr(long _arg);
	// struct LDKTxComplete TxComplete_clone(const struct LDKTxComplete *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_clone")] public static extern long TxComplete_clone(long _orig);
	// uint64_t TxComplete_hash(const struct LDKTxComplete *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_hash")] public static extern long TxComplete_hash(long _o);
	// bool TxComplete_eq(const struct LDKTxComplete *NONNULL_PTR a, const struct LDKTxComplete *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_eq")] public static extern bool TxComplete_eq(long _a, long _b);
	// void TxSignatures_free(struct LDKTxSignatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_free")] public static extern void TxSignatures_free(long _this_obj);
	// struct LDKChannelId TxSignatures_get_channel_id(const struct LDKTxSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_get_channel_id")] public static extern long TxSignatures_get_channel_id(long _this_ptr);
	// void TxSignatures_set_channel_id(struct LDKTxSignatures *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_set_channel_id")] public static extern void TxSignatures_set_channel_id(long _this_ptr, long _val);
	// const uint8_t (*TxSignatures_get_tx_hash(const struct LDKTxSignatures *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_get_tx_hash")] public static extern long TxSignatures_get_tx_hash(long _this_ptr);
	// void TxSignatures_set_tx_hash(struct LDKTxSignatures *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_set_tx_hash")] public static extern void TxSignatures_set_tx_hash(long _this_ptr, long _val);
	// struct LDKCVec_WitnessZ TxSignatures_get_witnesses(const struct LDKTxSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_get_witnesses")] public static extern long TxSignatures_get_witnesses(long _this_ptr);
	// void TxSignatures_set_witnesses(struct LDKTxSignatures *NONNULL_PTR this_ptr, struct LDKCVec_WitnessZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_set_witnesses")] public static extern void TxSignatures_set_witnesses(long _this_ptr, long _val);
	// struct LDKCOption_ECDSASignatureZ TxSignatures_get_shared_input_signature(const struct LDKTxSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_get_shared_input_signature")] public static extern long TxSignatures_get_shared_input_signature(long _this_ptr);
	// void TxSignatures_set_shared_input_signature(struct LDKTxSignatures *NONNULL_PTR this_ptr, struct LDKCOption_ECDSASignatureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_set_shared_input_signature")] public static extern void TxSignatures_set_shared_input_signature(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxSignatures TxSignatures_new(struct LDKChannelId channel_id_arg, struct LDKThirtyTwoBytes tx_hash_arg, struct LDKCVec_WitnessZ witnesses_arg, struct LDKCOption_ECDSASignatureZ shared_input_signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_new")] public static extern long TxSignatures_new(long _channel_id_arg, long _tx_hash_arg, long _witnesses_arg, long _shared_input_signature_arg);
	// uint64_t TxSignatures_clone_ptr(LDKTxSignatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_clone_ptr")] public static extern long TxSignatures_clone_ptr(long _arg);
	// struct LDKTxSignatures TxSignatures_clone(const struct LDKTxSignatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_clone")] public static extern long TxSignatures_clone(long _orig);
	// uint64_t TxSignatures_hash(const struct LDKTxSignatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_hash")] public static extern long TxSignatures_hash(long _o);
	// bool TxSignatures_eq(const struct LDKTxSignatures *NONNULL_PTR a, const struct LDKTxSignatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_eq")] public static extern bool TxSignatures_eq(long _a, long _b);
	// void TxInitRbf_free(struct LDKTxInitRbf this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_free")] public static extern void TxInitRbf_free(long _this_obj);
	// struct LDKChannelId TxInitRbf_get_channel_id(const struct LDKTxInitRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_channel_id")] public static extern long TxInitRbf_get_channel_id(long _this_ptr);
	// void TxInitRbf_set_channel_id(struct LDKTxInitRbf *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_channel_id")] public static extern void TxInitRbf_set_channel_id(long _this_ptr, long _val);
	// uint32_t TxInitRbf_get_locktime(const struct LDKTxInitRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_locktime")] public static extern int TxInitRbf_get_locktime(long _this_ptr);
	// void TxInitRbf_set_locktime(struct LDKTxInitRbf *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_locktime")] public static extern void TxInitRbf_set_locktime(long _this_ptr, int _val);
	// uint32_t TxInitRbf_get_feerate_sat_per_1000_weight(const struct LDKTxInitRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_feerate_sat_per_1000_weight")] public static extern int TxInitRbf_get_feerate_sat_per_1000_weight(long _this_ptr);
	// void TxInitRbf_set_feerate_sat_per_1000_weight(struct LDKTxInitRbf *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_feerate_sat_per_1000_weight")] public static extern void TxInitRbf_set_feerate_sat_per_1000_weight(long _this_ptr, int _val);
	// struct LDKCOption_i64Z TxInitRbf_get_funding_output_contribution(const struct LDKTxInitRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_get_funding_output_contribution")] public static extern long TxInitRbf_get_funding_output_contribution(long _this_ptr);
	// void TxInitRbf_set_funding_output_contribution(struct LDKTxInitRbf *NONNULL_PTR this_ptr, struct LDKCOption_i64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_set_funding_output_contribution")] public static extern void TxInitRbf_set_funding_output_contribution(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxInitRbf TxInitRbf_new(struct LDKChannelId channel_id_arg, uint32_t locktime_arg, uint32_t feerate_sat_per_1000_weight_arg, struct LDKCOption_i64Z funding_output_contribution_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_new")] public static extern long TxInitRbf_new(long _channel_id_arg, int _locktime_arg, int _feerate_sat_per_1000_weight_arg, long _funding_output_contribution_arg);
	// uint64_t TxInitRbf_clone_ptr(LDKTxInitRbf *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_clone_ptr")] public static extern long TxInitRbf_clone_ptr(long _arg);
	// struct LDKTxInitRbf TxInitRbf_clone(const struct LDKTxInitRbf *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_clone")] public static extern long TxInitRbf_clone(long _orig);
	// uint64_t TxInitRbf_hash(const struct LDKTxInitRbf *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_hash")] public static extern long TxInitRbf_hash(long _o);
	// bool TxInitRbf_eq(const struct LDKTxInitRbf *NONNULL_PTR a, const struct LDKTxInitRbf *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_eq")] public static extern bool TxInitRbf_eq(long _a, long _b);
	// void TxAckRbf_free(struct LDKTxAckRbf this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_free")] public static extern void TxAckRbf_free(long _this_obj);
	// struct LDKChannelId TxAckRbf_get_channel_id(const struct LDKTxAckRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_get_channel_id")] public static extern long TxAckRbf_get_channel_id(long _this_ptr);
	// void TxAckRbf_set_channel_id(struct LDKTxAckRbf *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_set_channel_id")] public static extern void TxAckRbf_set_channel_id(long _this_ptr, long _val);
	// struct LDKCOption_i64Z TxAckRbf_get_funding_output_contribution(const struct LDKTxAckRbf *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_get_funding_output_contribution")] public static extern long TxAckRbf_get_funding_output_contribution(long _this_ptr);
	// void TxAckRbf_set_funding_output_contribution(struct LDKTxAckRbf *NONNULL_PTR this_ptr, struct LDKCOption_i64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_set_funding_output_contribution")] public static extern void TxAckRbf_set_funding_output_contribution(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxAckRbf TxAckRbf_new(struct LDKChannelId channel_id_arg, struct LDKCOption_i64Z funding_output_contribution_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_new")] public static extern long TxAckRbf_new(long _channel_id_arg, long _funding_output_contribution_arg);
	// uint64_t TxAckRbf_clone_ptr(LDKTxAckRbf *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_clone_ptr")] public static extern long TxAckRbf_clone_ptr(long _arg);
	// struct LDKTxAckRbf TxAckRbf_clone(const struct LDKTxAckRbf *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_clone")] public static extern long TxAckRbf_clone(long _orig);
	// uint64_t TxAckRbf_hash(const struct LDKTxAckRbf *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_hash")] public static extern long TxAckRbf_hash(long _o);
	// bool TxAckRbf_eq(const struct LDKTxAckRbf *NONNULL_PTR a, const struct LDKTxAckRbf *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_eq")] public static extern bool TxAckRbf_eq(long _a, long _b);
	// void TxAbort_free(struct LDKTxAbort this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_free")] public static extern void TxAbort_free(long _this_obj);
	// struct LDKChannelId TxAbort_get_channel_id(const struct LDKTxAbort *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_get_channel_id")] public static extern long TxAbort_get_channel_id(long _this_ptr);
	// void TxAbort_set_channel_id(struct LDKTxAbort *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_set_channel_id")] public static extern void TxAbort_set_channel_id(long _this_ptr, long _val);
	// struct LDKCVec_u8Z TxAbort_get_data(const struct LDKTxAbort *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_get_data")] public static extern long TxAbort_get_data(long _this_ptr);
	// void TxAbort_set_data(struct LDKTxAbort *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_set_data")] public static extern void TxAbort_set_data(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxAbort TxAbort_new(struct LDKChannelId channel_id_arg, struct LDKCVec_u8Z data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_new")] public static extern long TxAbort_new(long _channel_id_arg, long _data_arg);
	// uint64_t TxAbort_clone_ptr(LDKTxAbort *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_clone_ptr")] public static extern long TxAbort_clone_ptr(long _arg);
	// struct LDKTxAbort TxAbort_clone(const struct LDKTxAbort *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_clone")] public static extern long TxAbort_clone(long _orig);
	// uint64_t TxAbort_hash(const struct LDKTxAbort *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_hash")] public static extern long TxAbort_hash(long _o);
	// bool TxAbort_eq(const struct LDKTxAbort *NONNULL_PTR a, const struct LDKTxAbort *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_eq")] public static extern bool TxAbort_eq(long _a, long _b);
	// void Shutdown_free(struct LDKShutdown this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_free")] public static extern void Shutdown_free(long _this_obj);
	// struct LDKChannelId Shutdown_get_channel_id(const struct LDKShutdown *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_get_channel_id")] public static extern long Shutdown_get_channel_id(long _this_ptr);
	// void Shutdown_set_channel_id(struct LDKShutdown *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_set_channel_id")] public static extern void Shutdown_set_channel_id(long _this_ptr, long _val);
	// struct LDKCVec_u8Z Shutdown_get_scriptpubkey(const struct LDKShutdown *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_get_scriptpubkey")] public static extern long Shutdown_get_scriptpubkey(long _this_ptr);
	// void Shutdown_set_scriptpubkey(struct LDKShutdown *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_set_scriptpubkey")] public static extern void Shutdown_set_scriptpubkey(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKShutdown Shutdown_new(struct LDKChannelId channel_id_arg, struct LDKCVec_u8Z scriptpubkey_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_new")] public static extern long Shutdown_new(long _channel_id_arg, long _scriptpubkey_arg);
	// uint64_t Shutdown_clone_ptr(LDKShutdown *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_clone_ptr")] public static extern long Shutdown_clone_ptr(long _arg);
	// struct LDKShutdown Shutdown_clone(const struct LDKShutdown *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_clone")] public static extern long Shutdown_clone(long _orig);
	// uint64_t Shutdown_hash(const struct LDKShutdown *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_hash")] public static extern long Shutdown_hash(long _o);
	// bool Shutdown_eq(const struct LDKShutdown *NONNULL_PTR a, const struct LDKShutdown *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_eq")] public static extern bool Shutdown_eq(long _a, long _b);
	// void ClosingSignedFeeRange_free(struct LDKClosingSignedFeeRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_free")] public static extern void ClosingSignedFeeRange_free(long _this_obj);
	// uint64_t ClosingSignedFeeRange_get_min_fee_satoshis(const struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_get_min_fee_satoshis")] public static extern long ClosingSignedFeeRange_get_min_fee_satoshis(long _this_ptr);
	// void ClosingSignedFeeRange_set_min_fee_satoshis(struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_set_min_fee_satoshis")] public static extern void ClosingSignedFeeRange_set_min_fee_satoshis(long _this_ptr, long _val);
	// uint64_t ClosingSignedFeeRange_get_max_fee_satoshis(const struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_get_max_fee_satoshis")] public static extern long ClosingSignedFeeRange_get_max_fee_satoshis(long _this_ptr);
	// void ClosingSignedFeeRange_set_max_fee_satoshis(struct LDKClosingSignedFeeRange *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_set_max_fee_satoshis")] public static extern void ClosingSignedFeeRange_set_max_fee_satoshis(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClosingSignedFeeRange ClosingSignedFeeRange_new(uint64_t min_fee_satoshis_arg, uint64_t max_fee_satoshis_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_new")] public static extern long ClosingSignedFeeRange_new(long _min_fee_satoshis_arg, long _max_fee_satoshis_arg);
	// uint64_t ClosingSignedFeeRange_clone_ptr(LDKClosingSignedFeeRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_clone_ptr")] public static extern long ClosingSignedFeeRange_clone_ptr(long _arg);
	// struct LDKClosingSignedFeeRange ClosingSignedFeeRange_clone(const struct LDKClosingSignedFeeRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_clone")] public static extern long ClosingSignedFeeRange_clone(long _orig);
	// uint64_t ClosingSignedFeeRange_hash(const struct LDKClosingSignedFeeRange *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_hash")] public static extern long ClosingSignedFeeRange_hash(long _o);
	// bool ClosingSignedFeeRange_eq(const struct LDKClosingSignedFeeRange *NONNULL_PTR a, const struct LDKClosingSignedFeeRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_eq")] public static extern bool ClosingSignedFeeRange_eq(long _a, long _b);
	// void ClosingSigned_free(struct LDKClosingSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_free")] public static extern void ClosingSigned_free(long _this_obj);
	// struct LDKChannelId ClosingSigned_get_channel_id(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_channel_id")] public static extern long ClosingSigned_get_channel_id(long _this_ptr);
	// void ClosingSigned_set_channel_id(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_channel_id")] public static extern void ClosingSigned_set_channel_id(long _this_ptr, long _val);
	// uint64_t ClosingSigned_get_fee_satoshis(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_fee_satoshis")] public static extern long ClosingSigned_get_fee_satoshis(long _this_ptr);
	// void ClosingSigned_set_fee_satoshis(struct LDKClosingSigned *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_fee_satoshis")] public static extern void ClosingSigned_set_fee_satoshis(long _this_ptr, long _val);
	// struct LDKECDSASignature ClosingSigned_get_signature(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_signature")] public static extern long ClosingSigned_get_signature(long _this_ptr);
	// void ClosingSigned_set_signature(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_signature")] public static extern void ClosingSigned_set_signature(long _this_ptr, long _val);
	// struct LDKClosingSignedFeeRange ClosingSigned_get_fee_range(const struct LDKClosingSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_get_fee_range")] public static extern long ClosingSigned_get_fee_range(long _this_ptr);
	// void ClosingSigned_set_fee_range(struct LDKClosingSigned *NONNULL_PTR this_ptr, struct LDKClosingSignedFeeRange val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_set_fee_range")] public static extern void ClosingSigned_set_fee_range(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClosingSigned ClosingSigned_new(struct LDKChannelId channel_id_arg, uint64_t fee_satoshis_arg, struct LDKECDSASignature signature_arg, struct LDKClosingSignedFeeRange fee_range_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_new")] public static extern long ClosingSigned_new(long _channel_id_arg, long _fee_satoshis_arg, long _signature_arg, long _fee_range_arg);
	// uint64_t ClosingSigned_clone_ptr(LDKClosingSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_clone_ptr")] public static extern long ClosingSigned_clone_ptr(long _arg);
	// struct LDKClosingSigned ClosingSigned_clone(const struct LDKClosingSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_clone")] public static extern long ClosingSigned_clone(long _orig);
	// uint64_t ClosingSigned_hash(const struct LDKClosingSigned *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_hash")] public static extern long ClosingSigned_hash(long _o);
	// bool ClosingSigned_eq(const struct LDKClosingSigned *NONNULL_PTR a, const struct LDKClosingSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_eq")] public static extern bool ClosingSigned_eq(long _a, long _b);
	// void UpdateAddHTLC_free(struct LDKUpdateAddHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_free")] public static extern void UpdateAddHTLC_free(long _this_obj);
	// struct LDKChannelId UpdateAddHTLC_get_channel_id(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_channel_id")] public static extern long UpdateAddHTLC_get_channel_id(long _this_ptr);
	// void UpdateAddHTLC_set_channel_id(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_channel_id")] public static extern void UpdateAddHTLC_set_channel_id(long _this_ptr, long _val);
	// uint64_t UpdateAddHTLC_get_htlc_id(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_htlc_id")] public static extern long UpdateAddHTLC_get_htlc_id(long _this_ptr);
	// void UpdateAddHTLC_set_htlc_id(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_htlc_id")] public static extern void UpdateAddHTLC_set_htlc_id(long _this_ptr, long _val);
	// uint64_t UpdateAddHTLC_get_amount_msat(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_amount_msat")] public static extern long UpdateAddHTLC_get_amount_msat(long _this_ptr);
	// void UpdateAddHTLC_set_amount_msat(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_amount_msat")] public static extern void UpdateAddHTLC_set_amount_msat(long _this_ptr, long _val);
	// const uint8_t (*UpdateAddHTLC_get_payment_hash(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_payment_hash")] public static extern long UpdateAddHTLC_get_payment_hash(long _this_ptr);
	// void UpdateAddHTLC_set_payment_hash(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_payment_hash")] public static extern void UpdateAddHTLC_set_payment_hash(long _this_ptr, long _val);
	// uint32_t UpdateAddHTLC_get_cltv_expiry(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_cltv_expiry")] public static extern int UpdateAddHTLC_get_cltv_expiry(long _this_ptr);
	// void UpdateAddHTLC_set_cltv_expiry(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_cltv_expiry")] public static extern void UpdateAddHTLC_set_cltv_expiry(long _this_ptr, int _val);
	// struct LDKCOption_u64Z UpdateAddHTLC_get_skimmed_fee_msat(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_skimmed_fee_msat")] public static extern long UpdateAddHTLC_get_skimmed_fee_msat(long _this_ptr);
	// void UpdateAddHTLC_set_skimmed_fee_msat(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_skimmed_fee_msat")] public static extern void UpdateAddHTLC_set_skimmed_fee_msat(long _this_ptr, long _val);
	// struct LDKOnionPacket UpdateAddHTLC_get_onion_routing_packet(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_onion_routing_packet")] public static extern long UpdateAddHTLC_get_onion_routing_packet(long _this_ptr);
	// void UpdateAddHTLC_set_onion_routing_packet(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKOnionPacket val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_onion_routing_packet")] public static extern void UpdateAddHTLC_set_onion_routing_packet(long _this_ptr, long _val);
	// struct LDKPublicKey UpdateAddHTLC_get_blinding_point(const struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_get_blinding_point")] public static extern long UpdateAddHTLC_get_blinding_point(long _this_ptr);
	// void UpdateAddHTLC_set_blinding_point(struct LDKUpdateAddHTLC *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_set_blinding_point")] public static extern void UpdateAddHTLC_set_blinding_point(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUpdateAddHTLC UpdateAddHTLC_new(struct LDKChannelId channel_id_arg, uint64_t htlc_id_arg, uint64_t amount_msat_arg, struct LDKThirtyTwoBytes payment_hash_arg, uint32_t cltv_expiry_arg, struct LDKCOption_u64Z skimmed_fee_msat_arg, struct LDKOnionPacket onion_routing_packet_arg, struct LDKPublicKey blinding_point_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_new")] public static extern long UpdateAddHTLC_new(long _channel_id_arg, long _htlc_id_arg, long _amount_msat_arg, long _payment_hash_arg, int _cltv_expiry_arg, long _skimmed_fee_msat_arg, long _onion_routing_packet_arg, long _blinding_point_arg);
	// uint64_t UpdateAddHTLC_clone_ptr(LDKUpdateAddHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_clone_ptr")] public static extern long UpdateAddHTLC_clone_ptr(long _arg);
	// struct LDKUpdateAddHTLC UpdateAddHTLC_clone(const struct LDKUpdateAddHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_clone")] public static extern long UpdateAddHTLC_clone(long _orig);
	// uint64_t UpdateAddHTLC_hash(const struct LDKUpdateAddHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_hash")] public static extern long UpdateAddHTLC_hash(long _o);
	// bool UpdateAddHTLC_eq(const struct LDKUpdateAddHTLC *NONNULL_PTR a, const struct LDKUpdateAddHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_eq")] public static extern bool UpdateAddHTLC_eq(long _a, long _b);
	// void OnionMessage_free(struct LDKOnionMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_free")] public static extern void OnionMessage_free(long _this_obj);
	// struct LDKPublicKey OnionMessage_get_blinding_point(const struct LDKOnionMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_get_blinding_point")] public static extern long OnionMessage_get_blinding_point(long _this_ptr);
	// void OnionMessage_set_blinding_point(struct LDKOnionMessage *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_set_blinding_point")] public static extern void OnionMessage_set_blinding_point(long _this_ptr, long _val);
	// struct LDKPacket OnionMessage_get_onion_routing_packet(const struct LDKOnionMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_get_onion_routing_packet")] public static extern long OnionMessage_get_onion_routing_packet(long _this_ptr);
	// void OnionMessage_set_onion_routing_packet(struct LDKOnionMessage *NONNULL_PTR this_ptr, struct LDKPacket val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_set_onion_routing_packet")] public static extern void OnionMessage_set_onion_routing_packet(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKOnionMessage OnionMessage_new(struct LDKPublicKey blinding_point_arg, struct LDKPacket onion_routing_packet_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_new")] public static extern long OnionMessage_new(long _blinding_point_arg, long _onion_routing_packet_arg);
	// uint64_t OnionMessage_clone_ptr(LDKOnionMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_clone_ptr")] public static extern long OnionMessage_clone_ptr(long _arg);
	// struct LDKOnionMessage OnionMessage_clone(const struct LDKOnionMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_clone")] public static extern long OnionMessage_clone(long _orig);
	// uint64_t OnionMessage_hash(const struct LDKOnionMessage *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_hash")] public static extern long OnionMessage_hash(long _o);
	// bool OnionMessage_eq(const struct LDKOnionMessage *NONNULL_PTR a, const struct LDKOnionMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_eq")] public static extern bool OnionMessage_eq(long _a, long _b);
	// void UpdateFulfillHTLC_free(struct LDKUpdateFulfillHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_free")] public static extern void UpdateFulfillHTLC_free(long _this_obj);
	// struct LDKChannelId UpdateFulfillHTLC_get_channel_id(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_channel_id")] public static extern long UpdateFulfillHTLC_get_channel_id(long _this_ptr);
	// void UpdateFulfillHTLC_set_channel_id(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_channel_id")] public static extern void UpdateFulfillHTLC_set_channel_id(long _this_ptr, long _val);
	// uint64_t UpdateFulfillHTLC_get_htlc_id(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_htlc_id")] public static extern long UpdateFulfillHTLC_get_htlc_id(long _this_ptr);
	// void UpdateFulfillHTLC_set_htlc_id(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_htlc_id")] public static extern void UpdateFulfillHTLC_set_htlc_id(long _this_ptr, long _val);
	// const uint8_t (*UpdateFulfillHTLC_get_payment_preimage(const struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_get_payment_preimage")] public static extern long UpdateFulfillHTLC_get_payment_preimage(long _this_ptr);
	// void UpdateFulfillHTLC_set_payment_preimage(struct LDKUpdateFulfillHTLC *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_set_payment_preimage")] public static extern void UpdateFulfillHTLC_set_payment_preimage(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUpdateFulfillHTLC UpdateFulfillHTLC_new(struct LDKChannelId channel_id_arg, uint64_t htlc_id_arg, struct LDKThirtyTwoBytes payment_preimage_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_new")] public static extern long UpdateFulfillHTLC_new(long _channel_id_arg, long _htlc_id_arg, long _payment_preimage_arg);
	// uint64_t UpdateFulfillHTLC_clone_ptr(LDKUpdateFulfillHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_clone_ptr")] public static extern long UpdateFulfillHTLC_clone_ptr(long _arg);
	// struct LDKUpdateFulfillHTLC UpdateFulfillHTLC_clone(const struct LDKUpdateFulfillHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_clone")] public static extern long UpdateFulfillHTLC_clone(long _orig);
	// uint64_t UpdateFulfillHTLC_hash(const struct LDKUpdateFulfillHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_hash")] public static extern long UpdateFulfillHTLC_hash(long _o);
	// bool UpdateFulfillHTLC_eq(const struct LDKUpdateFulfillHTLC *NONNULL_PTR a, const struct LDKUpdateFulfillHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_eq")] public static extern bool UpdateFulfillHTLC_eq(long _a, long _b);
	// void UpdateFailHTLC_free(struct LDKUpdateFailHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_free")] public static extern void UpdateFailHTLC_free(long _this_obj);
	// struct LDKChannelId UpdateFailHTLC_get_channel_id(const struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_get_channel_id")] public static extern long UpdateFailHTLC_get_channel_id(long _this_ptr);
	// void UpdateFailHTLC_set_channel_id(struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_set_channel_id")] public static extern void UpdateFailHTLC_set_channel_id(long _this_ptr, long _val);
	// uint64_t UpdateFailHTLC_get_htlc_id(const struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_get_htlc_id")] public static extern long UpdateFailHTLC_get_htlc_id(long _this_ptr);
	// void UpdateFailHTLC_set_htlc_id(struct LDKUpdateFailHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_set_htlc_id")] public static extern void UpdateFailHTLC_set_htlc_id(long _this_ptr, long _val);
	// uint64_t UpdateFailHTLC_clone_ptr(LDKUpdateFailHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_clone_ptr")] public static extern long UpdateFailHTLC_clone_ptr(long _arg);
	// struct LDKUpdateFailHTLC UpdateFailHTLC_clone(const struct LDKUpdateFailHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_clone")] public static extern long UpdateFailHTLC_clone(long _orig);
	// uint64_t UpdateFailHTLC_hash(const struct LDKUpdateFailHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_hash")] public static extern long UpdateFailHTLC_hash(long _o);
	// bool UpdateFailHTLC_eq(const struct LDKUpdateFailHTLC *NONNULL_PTR a, const struct LDKUpdateFailHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_eq")] public static extern bool UpdateFailHTLC_eq(long _a, long _b);
	// void UpdateFailMalformedHTLC_free(struct LDKUpdateFailMalformedHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_free")] public static extern void UpdateFailMalformedHTLC_free(long _this_obj);
	// struct LDKChannelId UpdateFailMalformedHTLC_get_channel_id(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_channel_id")] public static extern long UpdateFailMalformedHTLC_get_channel_id(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_channel_id(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_channel_id")] public static extern void UpdateFailMalformedHTLC_set_channel_id(long _this_ptr, long _val);
	// uint64_t UpdateFailMalformedHTLC_get_htlc_id(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_htlc_id")] public static extern long UpdateFailMalformedHTLC_get_htlc_id(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_htlc_id(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_htlc_id")] public static extern void UpdateFailMalformedHTLC_set_htlc_id(long _this_ptr, long _val);
	// uint16_t UpdateFailMalformedHTLC_get_failure_code(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_get_failure_code")] public static extern short UpdateFailMalformedHTLC_get_failure_code(long _this_ptr);
	// void UpdateFailMalformedHTLC_set_failure_code(struct LDKUpdateFailMalformedHTLC *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_set_failure_code")] public static extern void UpdateFailMalformedHTLC_set_failure_code(long _this_ptr, short _val);
	// uint64_t UpdateFailMalformedHTLC_clone_ptr(LDKUpdateFailMalformedHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_clone_ptr")] public static extern long UpdateFailMalformedHTLC_clone_ptr(long _arg);
	// struct LDKUpdateFailMalformedHTLC UpdateFailMalformedHTLC_clone(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_clone")] public static extern long UpdateFailMalformedHTLC_clone(long _orig);
	// uint64_t UpdateFailMalformedHTLC_hash(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_hash")] public static extern long UpdateFailMalformedHTLC_hash(long _o);
	// bool UpdateFailMalformedHTLC_eq(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR a, const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_eq")] public static extern bool UpdateFailMalformedHTLC_eq(long _a, long _b);
	// void CommitmentSignedBatch_free(struct LDKCommitmentSignedBatch this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_free")] public static extern void CommitmentSignedBatch_free(long _this_obj);
	// uint16_t CommitmentSignedBatch_get_batch_size(const struct LDKCommitmentSignedBatch *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_get_batch_size")] public static extern short CommitmentSignedBatch_get_batch_size(long _this_ptr);
	// void CommitmentSignedBatch_set_batch_size(struct LDKCommitmentSignedBatch *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_set_batch_size")] public static extern void CommitmentSignedBatch_set_batch_size(long _this_ptr, short _val);
	// const uint8_t (*CommitmentSignedBatch_get_funding_txid(const struct LDKCommitmentSignedBatch *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_get_funding_txid")] public static extern long CommitmentSignedBatch_get_funding_txid(long _this_ptr);
	// void CommitmentSignedBatch_set_funding_txid(struct LDKCommitmentSignedBatch *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_set_funding_txid")] public static extern void CommitmentSignedBatch_set_funding_txid(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommitmentSignedBatch CommitmentSignedBatch_new(uint16_t batch_size_arg, struct LDKThirtyTwoBytes funding_txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_new")] public static extern long CommitmentSignedBatch_new(short _batch_size_arg, long _funding_txid_arg);
	// uint64_t CommitmentSignedBatch_clone_ptr(LDKCommitmentSignedBatch *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_clone_ptr")] public static extern long CommitmentSignedBatch_clone_ptr(long _arg);
	// struct LDKCommitmentSignedBatch CommitmentSignedBatch_clone(const struct LDKCommitmentSignedBatch *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_clone")] public static extern long CommitmentSignedBatch_clone(long _orig);
	// uint64_t CommitmentSignedBatch_hash(const struct LDKCommitmentSignedBatch *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_hash")] public static extern long CommitmentSignedBatch_hash(long _o);
	// bool CommitmentSignedBatch_eq(const struct LDKCommitmentSignedBatch *NONNULL_PTR a, const struct LDKCommitmentSignedBatch *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_eq")] public static extern bool CommitmentSignedBatch_eq(long _a, long _b);
	// void CommitmentSigned_free(struct LDKCommitmentSigned this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_free")] public static extern void CommitmentSigned_free(long _this_obj);
	// struct LDKChannelId CommitmentSigned_get_channel_id(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_channel_id")] public static extern long CommitmentSigned_get_channel_id(long _this_ptr);
	// void CommitmentSigned_set_channel_id(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_channel_id")] public static extern void CommitmentSigned_set_channel_id(long _this_ptr, long _val);
	// struct LDKECDSASignature CommitmentSigned_get_signature(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_signature")] public static extern long CommitmentSigned_get_signature(long _this_ptr);
	// void CommitmentSigned_set_signature(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_signature")] public static extern void CommitmentSigned_set_signature(long _this_ptr, long _val);
	// struct LDKCVec_ECDSASignatureZ CommitmentSigned_get_htlc_signatures(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_htlc_signatures")] public static extern long CommitmentSigned_get_htlc_signatures(long _this_ptr);
	// void CommitmentSigned_set_htlc_signatures(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKCVec_ECDSASignatureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_htlc_signatures")] public static extern void CommitmentSigned_set_htlc_signatures(long _this_ptr, long _val);
	// struct LDKCommitmentSignedBatch CommitmentSigned_get_batch(const struct LDKCommitmentSigned *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_get_batch")] public static extern long CommitmentSigned_get_batch(long _this_ptr);
	// void CommitmentSigned_set_batch(struct LDKCommitmentSigned *NONNULL_PTR this_ptr, struct LDKCommitmentSignedBatch val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_set_batch")] public static extern void CommitmentSigned_set_batch(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommitmentSigned CommitmentSigned_new(struct LDKChannelId channel_id_arg, struct LDKECDSASignature signature_arg, struct LDKCVec_ECDSASignatureZ htlc_signatures_arg, struct LDKCommitmentSignedBatch batch_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_new")] public static extern long CommitmentSigned_new(long _channel_id_arg, long _signature_arg, long _htlc_signatures_arg, long _batch_arg);
	// uint64_t CommitmentSigned_clone_ptr(LDKCommitmentSigned *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_clone_ptr")] public static extern long CommitmentSigned_clone_ptr(long _arg);
	// struct LDKCommitmentSigned CommitmentSigned_clone(const struct LDKCommitmentSigned *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_clone")] public static extern long CommitmentSigned_clone(long _orig);
	// uint64_t CommitmentSigned_hash(const struct LDKCommitmentSigned *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_hash")] public static extern long CommitmentSigned_hash(long _o);
	// bool CommitmentSigned_eq(const struct LDKCommitmentSigned *NONNULL_PTR a, const struct LDKCommitmentSigned *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_eq")] public static extern bool CommitmentSigned_eq(long _a, long _b);
	// void RevokeAndACK_free(struct LDKRevokeAndACK this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_free")] public static extern void RevokeAndACK_free(long _this_obj);
	// struct LDKChannelId RevokeAndACK_get_channel_id(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_channel_id")] public static extern long RevokeAndACK_get_channel_id(long _this_ptr);
	// void RevokeAndACK_set_channel_id(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_channel_id")] public static extern void RevokeAndACK_set_channel_id(long _this_ptr, long _val);
	// const uint8_t (*RevokeAndACK_get_per_commitment_secret(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_per_commitment_secret")] public static extern long RevokeAndACK_get_per_commitment_secret(long _this_ptr);
	// void RevokeAndACK_set_per_commitment_secret(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_per_commitment_secret")] public static extern void RevokeAndACK_set_per_commitment_secret(long _this_ptr, long _val);
	// struct LDKPublicKey RevokeAndACK_get_next_per_commitment_point(const struct LDKRevokeAndACK *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_get_next_per_commitment_point")] public static extern long RevokeAndACK_get_next_per_commitment_point(long _this_ptr);
	// void RevokeAndACK_set_next_per_commitment_point(struct LDKRevokeAndACK *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_set_next_per_commitment_point")] public static extern void RevokeAndACK_set_next_per_commitment_point(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRevokeAndACK RevokeAndACK_new(struct LDKChannelId channel_id_arg, struct LDKThirtyTwoBytes per_commitment_secret_arg, struct LDKPublicKey next_per_commitment_point_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_new")] public static extern long RevokeAndACK_new(long _channel_id_arg, long _per_commitment_secret_arg, long _next_per_commitment_point_arg);
	// uint64_t RevokeAndACK_clone_ptr(LDKRevokeAndACK *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_clone_ptr")] public static extern long RevokeAndACK_clone_ptr(long _arg);
	// struct LDKRevokeAndACK RevokeAndACK_clone(const struct LDKRevokeAndACK *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_clone")] public static extern long RevokeAndACK_clone(long _orig);
	// uint64_t RevokeAndACK_hash(const struct LDKRevokeAndACK *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_hash")] public static extern long RevokeAndACK_hash(long _o);
	// bool RevokeAndACK_eq(const struct LDKRevokeAndACK *NONNULL_PTR a, const struct LDKRevokeAndACK *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_eq")] public static extern bool RevokeAndACK_eq(long _a, long _b);
	// void UpdateFee_free(struct LDKUpdateFee this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_free")] public static extern void UpdateFee_free(long _this_obj);
	// struct LDKChannelId UpdateFee_get_channel_id(const struct LDKUpdateFee *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_get_channel_id")] public static extern long UpdateFee_get_channel_id(long _this_ptr);
	// void UpdateFee_set_channel_id(struct LDKUpdateFee *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_set_channel_id")] public static extern void UpdateFee_set_channel_id(long _this_ptr, long _val);
	// uint32_t UpdateFee_get_feerate_per_kw(const struct LDKUpdateFee *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_get_feerate_per_kw")] public static extern int UpdateFee_get_feerate_per_kw(long _this_ptr);
	// void UpdateFee_set_feerate_per_kw(struct LDKUpdateFee *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_set_feerate_per_kw")] public static extern void UpdateFee_set_feerate_per_kw(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKUpdateFee UpdateFee_new(struct LDKChannelId channel_id_arg, uint32_t feerate_per_kw_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_new")] public static extern long UpdateFee_new(long _channel_id_arg, int _feerate_per_kw_arg);
	// uint64_t UpdateFee_clone_ptr(LDKUpdateFee *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_clone_ptr")] public static extern long UpdateFee_clone_ptr(long _arg);
	// struct LDKUpdateFee UpdateFee_clone(const struct LDKUpdateFee *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_clone")] public static extern long UpdateFee_clone(long _orig);
	// uint64_t UpdateFee_hash(const struct LDKUpdateFee *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_hash")] public static extern long UpdateFee_hash(long _o);
	// bool UpdateFee_eq(const struct LDKUpdateFee *NONNULL_PTR a, const struct LDKUpdateFee *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_eq")] public static extern bool UpdateFee_eq(long _a, long _b);
	// void ChannelReestablish_free(struct LDKChannelReestablish this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_free")] public static extern void ChannelReestablish_free(long _this_obj);
	// struct LDKChannelId ChannelReestablish_get_channel_id(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_channel_id")] public static extern long ChannelReestablish_get_channel_id(long _this_ptr);
	// void ChannelReestablish_set_channel_id(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_channel_id")] public static extern void ChannelReestablish_set_channel_id(long _this_ptr, long _val);
	// uint64_t ChannelReestablish_get_next_local_commitment_number(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_local_commitment_number")] public static extern long ChannelReestablish_get_next_local_commitment_number(long _this_ptr);
	// void ChannelReestablish_set_next_local_commitment_number(struct LDKChannelReestablish *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_local_commitment_number")] public static extern void ChannelReestablish_set_next_local_commitment_number(long _this_ptr, long _val);
	// uint64_t ChannelReestablish_get_next_remote_commitment_number(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_remote_commitment_number")] public static extern long ChannelReestablish_get_next_remote_commitment_number(long _this_ptr);
	// void ChannelReestablish_set_next_remote_commitment_number(struct LDKChannelReestablish *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_remote_commitment_number")] public static extern void ChannelReestablish_set_next_remote_commitment_number(long _this_ptr, long _val);
	// const uint8_t (*ChannelReestablish_get_your_last_per_commitment_secret(const struct LDKChannelReestablish *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_your_last_per_commitment_secret")] public static extern long ChannelReestablish_get_your_last_per_commitment_secret(long _this_ptr);
	// void ChannelReestablish_set_your_last_per_commitment_secret(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_your_last_per_commitment_secret")] public static extern void ChannelReestablish_set_your_last_per_commitment_secret(long _this_ptr, long _val);
	// struct LDKPublicKey ChannelReestablish_get_my_current_per_commitment_point(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_my_current_per_commitment_point")] public static extern long ChannelReestablish_get_my_current_per_commitment_point(long _this_ptr);
	// void ChannelReestablish_set_my_current_per_commitment_point(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_my_current_per_commitment_point")] public static extern void ChannelReestablish_set_my_current_per_commitment_point(long _this_ptr, long _val);
	// struct LDKCOption_ThirtyTwoBytesZ ChannelReestablish_get_next_funding_txid(const struct LDKChannelReestablish *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_get_next_funding_txid")] public static extern long ChannelReestablish_get_next_funding_txid(long _this_ptr);
	// void ChannelReestablish_set_next_funding_txid(struct LDKChannelReestablish *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_set_next_funding_txid")] public static extern void ChannelReestablish_set_next_funding_txid(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelReestablish ChannelReestablish_new(struct LDKChannelId channel_id_arg, uint64_t next_local_commitment_number_arg, uint64_t next_remote_commitment_number_arg, struct LDKThirtyTwoBytes your_last_per_commitment_secret_arg, struct LDKPublicKey my_current_per_commitment_point_arg, struct LDKCOption_ThirtyTwoBytesZ next_funding_txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_new")] public static extern long ChannelReestablish_new(long _channel_id_arg, long _next_local_commitment_number_arg, long _next_remote_commitment_number_arg, long _your_last_per_commitment_secret_arg, long _my_current_per_commitment_point_arg, long _next_funding_txid_arg);
	// uint64_t ChannelReestablish_clone_ptr(LDKChannelReestablish *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_clone_ptr")] public static extern long ChannelReestablish_clone_ptr(long _arg);
	// struct LDKChannelReestablish ChannelReestablish_clone(const struct LDKChannelReestablish *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_clone")] public static extern long ChannelReestablish_clone(long _orig);
	// uint64_t ChannelReestablish_hash(const struct LDKChannelReestablish *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_hash")] public static extern long ChannelReestablish_hash(long _o);
	// bool ChannelReestablish_eq(const struct LDKChannelReestablish *NONNULL_PTR a, const struct LDKChannelReestablish *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_eq")] public static extern bool ChannelReestablish_eq(long _a, long _b);
	// void AnnouncementSignatures_free(struct LDKAnnouncementSignatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_free")] public static extern void AnnouncementSignatures_free(long _this_obj);
	// struct LDKChannelId AnnouncementSignatures_get_channel_id(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_channel_id")] public static extern long AnnouncementSignatures_get_channel_id(long _this_ptr);
	// void AnnouncementSignatures_set_channel_id(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_channel_id")] public static extern void AnnouncementSignatures_set_channel_id(long _this_ptr, long _val);
	// uint64_t AnnouncementSignatures_get_short_channel_id(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_short_channel_id")] public static extern long AnnouncementSignatures_get_short_channel_id(long _this_ptr);
	// void AnnouncementSignatures_set_short_channel_id(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_short_channel_id")] public static extern void AnnouncementSignatures_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKECDSASignature AnnouncementSignatures_get_node_signature(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_node_signature")] public static extern long AnnouncementSignatures_get_node_signature(long _this_ptr);
	// void AnnouncementSignatures_set_node_signature(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_node_signature")] public static extern void AnnouncementSignatures_set_node_signature(long _this_ptr, long _val);
	// struct LDKECDSASignature AnnouncementSignatures_get_bitcoin_signature(const struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_get_bitcoin_signature")] public static extern long AnnouncementSignatures_get_bitcoin_signature(long _this_ptr);
	// void AnnouncementSignatures_set_bitcoin_signature(struct LDKAnnouncementSignatures *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_set_bitcoin_signature")] public static extern void AnnouncementSignatures_set_bitcoin_signature(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKAnnouncementSignatures AnnouncementSignatures_new(struct LDKChannelId channel_id_arg, uint64_t short_channel_id_arg, struct LDKECDSASignature node_signature_arg, struct LDKECDSASignature bitcoin_signature_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_new")] public static extern long AnnouncementSignatures_new(long _channel_id_arg, long _short_channel_id_arg, long _node_signature_arg, long _bitcoin_signature_arg);
	// uint64_t AnnouncementSignatures_clone_ptr(LDKAnnouncementSignatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_clone_ptr")] public static extern long AnnouncementSignatures_clone_ptr(long _arg);
	// struct LDKAnnouncementSignatures AnnouncementSignatures_clone(const struct LDKAnnouncementSignatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_clone")] public static extern long AnnouncementSignatures_clone(long _orig);
	// uint64_t AnnouncementSignatures_hash(const struct LDKAnnouncementSignatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_hash")] public static extern long AnnouncementSignatures_hash(long _o);
	// bool AnnouncementSignatures_eq(const struct LDKAnnouncementSignatures *NONNULL_PTR a, const struct LDKAnnouncementSignatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_eq")] public static extern bool AnnouncementSignatures_eq(long _a, long _b);
	// void SocketAddress_free(struct LDKSocketAddress this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_free")] public static extern void SocketAddress_free(long _this_ptr);
	// uint64_t SocketAddress_clone_ptr(LDKSocketAddress *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_clone_ptr")] public static extern long SocketAddress_clone_ptr(long _arg);
	// struct LDKSocketAddress SocketAddress_clone(const struct LDKSocketAddress *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_clone")] public static extern long SocketAddress_clone(long _orig);
	// struct LDKSocketAddress SocketAddress_tcp_ip_v4(struct LDKFourBytes addr, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_tcp_ip_v4")] public static extern long SocketAddress_tcp_ip_v4(long _addr, short _port);
	// struct LDKSocketAddress SocketAddress_tcp_ip_v6(struct LDKSixteenBytes addr, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_tcp_ip_v6")] public static extern long SocketAddress_tcp_ip_v6(long _addr, short _port);
	// struct LDKSocketAddress SocketAddress_onion_v2(struct LDKTwelveBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_onion_v2")] public static extern long SocketAddress_onion_v2(long _a);
	// struct LDKSocketAddress SocketAddress_onion_v3(struct LDKThirtyTwoBytes ed25519_pubkey, uint16_t checksum, uint8_t version, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_onion_v3")] public static extern long SocketAddress_onion_v3(long _ed25519_pubkey, short _checksum, byte _version, short _port);
	// struct LDKSocketAddress SocketAddress_hostname(struct LDKHostname hostname, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_hostname")] public static extern long SocketAddress_hostname(long _hostname, short _port);
	// uint64_t SocketAddress_hash(const struct LDKSocketAddress *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_hash")] public static extern long SocketAddress_hash(long _o);
	// bool SocketAddress_eq(const struct LDKSocketAddress *NONNULL_PTR a, const struct LDKSocketAddress *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_eq")] public static extern bool SocketAddress_eq(long _a, long _b);
	// struct LDKCVec_u8Z SocketAddress_write(const struct LDKSocketAddress *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_write")] public static extern long SocketAddress_write(long _obj);
	// struct LDKCResult_SocketAddressDecodeErrorZ SocketAddress_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_read")] public static extern long SocketAddress_read(long _ser);
	// enum LDKSocketAddressParseError SocketAddressParseError_clone(const enum LDKSocketAddressParseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_clone")] public static extern SocketAddressParseError SocketAddressParseError_clone(long _orig);
	// enum LDKSocketAddressParseError SocketAddressParseError_socket_addr_parse(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_socket_addr_parse")] public static extern SocketAddressParseError SocketAddressParseError_socket_addr_parse();
	// enum LDKSocketAddressParseError SocketAddressParseError_invalid_input(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_invalid_input")] public static extern SocketAddressParseError SocketAddressParseError_invalid_input();
	// enum LDKSocketAddressParseError SocketAddressParseError_invalid_port(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_invalid_port")] public static extern SocketAddressParseError SocketAddressParseError_invalid_port();
	// enum LDKSocketAddressParseError SocketAddressParseError_invalid_onion_v3(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_invalid_onion_v3")] public static extern SocketAddressParseError SocketAddressParseError_invalid_onion_v3();
	// uint64_t SocketAddressParseError_hash(const enum LDKSocketAddressParseError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_hash")] public static extern long SocketAddressParseError_hash(long _o);
	// bool SocketAddressParseError_eq(const enum LDKSocketAddressParseError *NONNULL_PTR a, const enum LDKSocketAddressParseError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_eq")] public static extern bool SocketAddressParseError_eq(long _a, long _b);
	// struct LDKStr SocketAddressParseError_to_str(const enum LDKSocketAddressParseError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddressParseError_to_str")] public static extern long SocketAddressParseError_to_str(long _o);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ parse_onion_address(struct LDKStr host, uint16_t port);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_parse_onion_address")] public static extern long parse_onion_address(long _host, short _port);
	// struct LDKStr SocketAddress_to_str(const struct LDKSocketAddress *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_to_str")] public static extern long SocketAddress_to_str(long _o);
	// struct LDKCResult_SocketAddressSocketAddressParseErrorZ SocketAddress_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketAddress_from_str")] public static extern long SocketAddress_from_str(long _s);
	// void UnsignedGossipMessage_free(struct LDKUnsignedGossipMessage this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_free")] public static extern void UnsignedGossipMessage_free(long _this_ptr);
	// uint64_t UnsignedGossipMessage_clone_ptr(LDKUnsignedGossipMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_clone_ptr")] public static extern long UnsignedGossipMessage_clone_ptr(long _arg);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_clone(const struct LDKUnsignedGossipMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_clone")] public static extern long UnsignedGossipMessage_clone(long _orig);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_channel_announcement(struct LDKUnsignedChannelAnnouncement a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_channel_announcement")] public static extern long UnsignedGossipMessage_channel_announcement(long _a);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_channel_update(struct LDKUnsignedChannelUpdate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_channel_update")] public static extern long UnsignedGossipMessage_channel_update(long _a);
	// struct LDKUnsignedGossipMessage UnsignedGossipMessage_node_announcement(struct LDKUnsignedNodeAnnouncement a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_node_announcement")] public static extern long UnsignedGossipMessage_node_announcement(long _a);
	// struct LDKCVec_u8Z UnsignedGossipMessage_write(const struct LDKUnsignedGossipMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedGossipMessage_write")] public static extern long UnsignedGossipMessage_write(long _obj);
	// void UnsignedNodeAnnouncement_free(struct LDKUnsignedNodeAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_free")] public static extern void UnsignedNodeAnnouncement_free(long _this_obj);
	// struct LDKNodeFeatures UnsignedNodeAnnouncement_get_features(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_features")] public static extern long UnsignedNodeAnnouncement_get_features(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_features(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_features")] public static extern void UnsignedNodeAnnouncement_set_features(long _this_ptr, long _val);
	// uint32_t UnsignedNodeAnnouncement_get_timestamp(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_timestamp")] public static extern int UnsignedNodeAnnouncement_get_timestamp(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_timestamp(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_timestamp")] public static extern void UnsignedNodeAnnouncement_set_timestamp(long _this_ptr, int _val);
	// struct LDKNodeId UnsignedNodeAnnouncement_get_node_id(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_node_id")] public static extern long UnsignedNodeAnnouncement_get_node_id(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_node_id(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_node_id")] public static extern void UnsignedNodeAnnouncement_set_node_id(long _this_ptr, long _val);
	// const uint8_t (*UnsignedNodeAnnouncement_get_rgb(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr))[3];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_rgb")] public static extern long UnsignedNodeAnnouncement_get_rgb(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_rgb(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKThreeBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_rgb")] public static extern void UnsignedNodeAnnouncement_set_rgb(long _this_ptr, long _val);
	// struct LDKNodeAlias UnsignedNodeAnnouncement_get_alias(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_alias")] public static extern long UnsignedNodeAnnouncement_get_alias(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_alias(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeAlias val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_alias")] public static extern void UnsignedNodeAnnouncement_set_alias(long _this_ptr, long _val);
	// struct LDKCVec_SocketAddressZ UnsignedNodeAnnouncement_get_addresses(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_addresses")] public static extern long UnsignedNodeAnnouncement_get_addresses(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_addresses(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKCVec_SocketAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_addresses")] public static extern void UnsignedNodeAnnouncement_set_addresses(long _this_ptr, long _val);
	// struct LDKCVec_u8Z UnsignedNodeAnnouncement_get_excess_address_data(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_excess_address_data")] public static extern long UnsignedNodeAnnouncement_get_excess_address_data(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_excess_address_data(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_excess_address_data")] public static extern void UnsignedNodeAnnouncement_set_excess_address_data(long _this_ptr, long _val);
	// struct LDKCVec_u8Z UnsignedNodeAnnouncement_get_excess_data(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_get_excess_data")] public static extern long UnsignedNodeAnnouncement_get_excess_data(long _this_ptr);
	// void UnsignedNodeAnnouncement_set_excess_data(struct LDKUnsignedNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_set_excess_data")] public static extern void UnsignedNodeAnnouncement_set_excess_data(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUnsignedNodeAnnouncement UnsignedNodeAnnouncement_new(struct LDKNodeFeatures features_arg, uint32_t timestamp_arg, struct LDKNodeId node_id_arg, struct LDKThreeBytes rgb_arg, struct LDKNodeAlias alias_arg, struct LDKCVec_SocketAddressZ addresses_arg, struct LDKCVec_u8Z excess_address_data_arg, struct LDKCVec_u8Z excess_data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_new")] public static extern long UnsignedNodeAnnouncement_new(long _features_arg, int _timestamp_arg, long _node_id_arg, long _rgb_arg, long _alias_arg, long _addresses_arg, long _excess_address_data_arg, long _excess_data_arg);
	// uint64_t UnsignedNodeAnnouncement_clone_ptr(LDKUnsignedNodeAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_clone_ptr")] public static extern long UnsignedNodeAnnouncement_clone_ptr(long _arg);
	// struct LDKUnsignedNodeAnnouncement UnsignedNodeAnnouncement_clone(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_clone")] public static extern long UnsignedNodeAnnouncement_clone(long _orig);
	// uint64_t UnsignedNodeAnnouncement_hash(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_hash")] public static extern long UnsignedNodeAnnouncement_hash(long _o);
	// bool UnsignedNodeAnnouncement_eq(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR a, const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_eq")] public static extern bool UnsignedNodeAnnouncement_eq(long _a, long _b);
	// void NodeAnnouncement_free(struct LDKNodeAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_free")] public static extern void NodeAnnouncement_free(long _this_obj);
	// struct LDKECDSASignature NodeAnnouncement_get_signature(const struct LDKNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_get_signature")] public static extern long NodeAnnouncement_get_signature(long _this_ptr);
	// void NodeAnnouncement_set_signature(struct LDKNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_set_signature")] public static extern void NodeAnnouncement_set_signature(long _this_ptr, long _val);
	// struct LDKUnsignedNodeAnnouncement NodeAnnouncement_get_contents(const struct LDKNodeAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_get_contents")] public static extern long NodeAnnouncement_get_contents(long _this_ptr);
	// void NodeAnnouncement_set_contents(struct LDKNodeAnnouncement *NONNULL_PTR this_ptr, struct LDKUnsignedNodeAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_set_contents")] public static extern void NodeAnnouncement_set_contents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAnnouncement NodeAnnouncement_new(struct LDKECDSASignature signature_arg, struct LDKUnsignedNodeAnnouncement contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_new")] public static extern long NodeAnnouncement_new(long _signature_arg, long _contents_arg);
	// uint64_t NodeAnnouncement_clone_ptr(LDKNodeAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_clone_ptr")] public static extern long NodeAnnouncement_clone_ptr(long _arg);
	// struct LDKNodeAnnouncement NodeAnnouncement_clone(const struct LDKNodeAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_clone")] public static extern long NodeAnnouncement_clone(long _orig);
	// uint64_t NodeAnnouncement_hash(const struct LDKNodeAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_hash")] public static extern long NodeAnnouncement_hash(long _o);
	// bool NodeAnnouncement_eq(const struct LDKNodeAnnouncement *NONNULL_PTR a, const struct LDKNodeAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_eq")] public static extern bool NodeAnnouncement_eq(long _a, long _b);
	// void UnsignedChannelAnnouncement_free(struct LDKUnsignedChannelAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_free")] public static extern void UnsignedChannelAnnouncement_free(long _this_obj);
	// struct LDKChannelFeatures UnsignedChannelAnnouncement_get_features(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_features")] public static extern long UnsignedChannelAnnouncement_get_features(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_features(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_features")] public static extern void UnsignedChannelAnnouncement_set_features(long _this_ptr, long _val);
	// const uint8_t (*UnsignedChannelAnnouncement_get_chain_hash(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_chain_hash")] public static extern long UnsignedChannelAnnouncement_get_chain_hash(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_chain_hash(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_chain_hash")] public static extern void UnsignedChannelAnnouncement_set_chain_hash(long _this_ptr, long _val);
	// uint64_t UnsignedChannelAnnouncement_get_short_channel_id(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_short_channel_id")] public static extern long UnsignedChannelAnnouncement_get_short_channel_id(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_short_channel_id(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_short_channel_id")] public static extern void UnsignedChannelAnnouncement_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_node_id_1(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_node_id_1")] public static extern long UnsignedChannelAnnouncement_get_node_id_1(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_node_id_1(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_node_id_1")] public static extern void UnsignedChannelAnnouncement_set_node_id_1(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_node_id_2(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_node_id_2")] public static extern long UnsignedChannelAnnouncement_get_node_id_2(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_node_id_2(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_node_id_2")] public static extern void UnsignedChannelAnnouncement_set_node_id_2(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_bitcoin_key_1(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_bitcoin_key_1")] public static extern long UnsignedChannelAnnouncement_get_bitcoin_key_1(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_bitcoin_key_1(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_bitcoin_key_1")] public static extern void UnsignedChannelAnnouncement_set_bitcoin_key_1(long _this_ptr, long _val);
	// struct LDKNodeId UnsignedChannelAnnouncement_get_bitcoin_key_2(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_bitcoin_key_2")] public static extern long UnsignedChannelAnnouncement_get_bitcoin_key_2(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_bitcoin_key_2(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_bitcoin_key_2")] public static extern void UnsignedChannelAnnouncement_set_bitcoin_key_2(long _this_ptr, long _val);
	// struct LDKCVec_u8Z UnsignedChannelAnnouncement_get_excess_data(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_get_excess_data")] public static extern long UnsignedChannelAnnouncement_get_excess_data(long _this_ptr);
	// void UnsignedChannelAnnouncement_set_excess_data(struct LDKUnsignedChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_set_excess_data")] public static extern void UnsignedChannelAnnouncement_set_excess_data(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUnsignedChannelAnnouncement UnsignedChannelAnnouncement_new(struct LDKChannelFeatures features_arg, struct LDKThirtyTwoBytes chain_hash_arg, uint64_t short_channel_id_arg, struct LDKNodeId node_id_1_arg, struct LDKNodeId node_id_2_arg, struct LDKNodeId bitcoin_key_1_arg, struct LDKNodeId bitcoin_key_2_arg, struct LDKCVec_u8Z excess_data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_new")] public static extern long UnsignedChannelAnnouncement_new(long _features_arg, long _chain_hash_arg, long _short_channel_id_arg, long _node_id_1_arg, long _node_id_2_arg, long _bitcoin_key_1_arg, long _bitcoin_key_2_arg, long _excess_data_arg);
	// uint64_t UnsignedChannelAnnouncement_clone_ptr(LDKUnsignedChannelAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_clone_ptr")] public static extern long UnsignedChannelAnnouncement_clone_ptr(long _arg);
	// struct LDKUnsignedChannelAnnouncement UnsignedChannelAnnouncement_clone(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_clone")] public static extern long UnsignedChannelAnnouncement_clone(long _orig);
	// uint64_t UnsignedChannelAnnouncement_hash(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_hash")] public static extern long UnsignedChannelAnnouncement_hash(long _o);
	// bool UnsignedChannelAnnouncement_eq(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR a, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_eq")] public static extern bool UnsignedChannelAnnouncement_eq(long _a, long _b);
	// void ChannelAnnouncement_free(struct LDKChannelAnnouncement this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_free")] public static extern void ChannelAnnouncement_free(long _this_obj);
	// struct LDKECDSASignature ChannelAnnouncement_get_node_signature_1(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_node_signature_1")] public static extern long ChannelAnnouncement_get_node_signature_1(long _this_ptr);
	// void ChannelAnnouncement_set_node_signature_1(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_node_signature_1")] public static extern void ChannelAnnouncement_set_node_signature_1(long _this_ptr, long _val);
	// struct LDKECDSASignature ChannelAnnouncement_get_node_signature_2(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_node_signature_2")] public static extern long ChannelAnnouncement_get_node_signature_2(long _this_ptr);
	// void ChannelAnnouncement_set_node_signature_2(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_node_signature_2")] public static extern void ChannelAnnouncement_set_node_signature_2(long _this_ptr, long _val);
	// struct LDKECDSASignature ChannelAnnouncement_get_bitcoin_signature_1(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_bitcoin_signature_1")] public static extern long ChannelAnnouncement_get_bitcoin_signature_1(long _this_ptr);
	// void ChannelAnnouncement_set_bitcoin_signature_1(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_bitcoin_signature_1")] public static extern void ChannelAnnouncement_set_bitcoin_signature_1(long _this_ptr, long _val);
	// struct LDKECDSASignature ChannelAnnouncement_get_bitcoin_signature_2(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_bitcoin_signature_2")] public static extern long ChannelAnnouncement_get_bitcoin_signature_2(long _this_ptr);
	// void ChannelAnnouncement_set_bitcoin_signature_2(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_bitcoin_signature_2")] public static extern void ChannelAnnouncement_set_bitcoin_signature_2(long _this_ptr, long _val);
	// struct LDKUnsignedChannelAnnouncement ChannelAnnouncement_get_contents(const struct LDKChannelAnnouncement *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_get_contents")] public static extern long ChannelAnnouncement_get_contents(long _this_ptr);
	// void ChannelAnnouncement_set_contents(struct LDKChannelAnnouncement *NONNULL_PTR this_ptr, struct LDKUnsignedChannelAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_set_contents")] public static extern void ChannelAnnouncement_set_contents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelAnnouncement ChannelAnnouncement_new(struct LDKECDSASignature node_signature_1_arg, struct LDKECDSASignature node_signature_2_arg, struct LDKECDSASignature bitcoin_signature_1_arg, struct LDKECDSASignature bitcoin_signature_2_arg, struct LDKUnsignedChannelAnnouncement contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_new")] public static extern long ChannelAnnouncement_new(long _node_signature_1_arg, long _node_signature_2_arg, long _bitcoin_signature_1_arg, long _bitcoin_signature_2_arg, long _contents_arg);
	// uint64_t ChannelAnnouncement_clone_ptr(LDKChannelAnnouncement *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_clone_ptr")] public static extern long ChannelAnnouncement_clone_ptr(long _arg);
	// struct LDKChannelAnnouncement ChannelAnnouncement_clone(const struct LDKChannelAnnouncement *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_clone")] public static extern long ChannelAnnouncement_clone(long _orig);
	// uint64_t ChannelAnnouncement_hash(const struct LDKChannelAnnouncement *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_hash")] public static extern long ChannelAnnouncement_hash(long _o);
	// bool ChannelAnnouncement_eq(const struct LDKChannelAnnouncement *NONNULL_PTR a, const struct LDKChannelAnnouncement *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_eq")] public static extern bool ChannelAnnouncement_eq(long _a, long _b);
	// void UnsignedChannelUpdate_free(struct LDKUnsignedChannelUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_free")] public static extern void UnsignedChannelUpdate_free(long _this_obj);
	// const uint8_t (*UnsignedChannelUpdate_get_chain_hash(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_chain_hash")] public static extern long UnsignedChannelUpdate_get_chain_hash(long _this_ptr);
	// void UnsignedChannelUpdate_set_chain_hash(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_chain_hash")] public static extern void UnsignedChannelUpdate_set_chain_hash(long _this_ptr, long _val);
	// uint64_t UnsignedChannelUpdate_get_short_channel_id(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_short_channel_id")] public static extern long UnsignedChannelUpdate_get_short_channel_id(long _this_ptr);
	// void UnsignedChannelUpdate_set_short_channel_id(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_short_channel_id")] public static extern void UnsignedChannelUpdate_set_short_channel_id(long _this_ptr, long _val);
	// uint32_t UnsignedChannelUpdate_get_timestamp(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_timestamp")] public static extern int UnsignedChannelUpdate_get_timestamp(long _this_ptr);
	// void UnsignedChannelUpdate_set_timestamp(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_timestamp")] public static extern void UnsignedChannelUpdate_set_timestamp(long _this_ptr, int _val);
	// uint8_t UnsignedChannelUpdate_get_message_flags(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_message_flags")] public static extern byte UnsignedChannelUpdate_get_message_flags(long _this_ptr);
	// void UnsignedChannelUpdate_set_message_flags(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_message_flags")] public static extern void UnsignedChannelUpdate_set_message_flags(long _this_ptr, byte _val);
	// uint8_t UnsignedChannelUpdate_get_channel_flags(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_channel_flags")] public static extern byte UnsignedChannelUpdate_get_channel_flags(long _this_ptr);
	// void UnsignedChannelUpdate_set_channel_flags(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_channel_flags")] public static extern void UnsignedChannelUpdate_set_channel_flags(long _this_ptr, byte _val);
	// uint16_t UnsignedChannelUpdate_get_cltv_expiry_delta(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_cltv_expiry_delta")] public static extern short UnsignedChannelUpdate_get_cltv_expiry_delta(long _this_ptr);
	// void UnsignedChannelUpdate_set_cltv_expiry_delta(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_cltv_expiry_delta")] public static extern void UnsignedChannelUpdate_set_cltv_expiry_delta(long _this_ptr, short _val);
	// uint64_t UnsignedChannelUpdate_get_htlc_minimum_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_htlc_minimum_msat")] public static extern long UnsignedChannelUpdate_get_htlc_minimum_msat(long _this_ptr);
	// void UnsignedChannelUpdate_set_htlc_minimum_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_htlc_minimum_msat")] public static extern void UnsignedChannelUpdate_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t UnsignedChannelUpdate_get_htlc_maximum_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_htlc_maximum_msat")] public static extern long UnsignedChannelUpdate_get_htlc_maximum_msat(long _this_ptr);
	// void UnsignedChannelUpdate_set_htlc_maximum_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_htlc_maximum_msat")] public static extern void UnsignedChannelUpdate_set_htlc_maximum_msat(long _this_ptr, long _val);
	// uint32_t UnsignedChannelUpdate_get_fee_base_msat(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_fee_base_msat")] public static extern int UnsignedChannelUpdate_get_fee_base_msat(long _this_ptr);
	// void UnsignedChannelUpdate_set_fee_base_msat(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_fee_base_msat")] public static extern void UnsignedChannelUpdate_set_fee_base_msat(long _this_ptr, int _val);
	// uint32_t UnsignedChannelUpdate_get_fee_proportional_millionths(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_fee_proportional_millionths")] public static extern int UnsignedChannelUpdate_get_fee_proportional_millionths(long _this_ptr);
	// void UnsignedChannelUpdate_set_fee_proportional_millionths(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_fee_proportional_millionths")] public static extern void UnsignedChannelUpdate_set_fee_proportional_millionths(long _this_ptr, int _val);
	// struct LDKCVec_u8Z UnsignedChannelUpdate_get_excess_data(const struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_get_excess_data")] public static extern long UnsignedChannelUpdate_get_excess_data(long _this_ptr);
	// void UnsignedChannelUpdate_set_excess_data(struct LDKUnsignedChannelUpdate *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_set_excess_data")] public static extern void UnsignedChannelUpdate_set_excess_data(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUnsignedChannelUpdate UnsignedChannelUpdate_new(struct LDKThirtyTwoBytes chain_hash_arg, uint64_t short_channel_id_arg, uint32_t timestamp_arg, uint8_t message_flags_arg, uint8_t channel_flags_arg, uint16_t cltv_expiry_delta_arg, uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, struct LDKCVec_u8Z excess_data_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_new")] public static extern long UnsignedChannelUpdate_new(long _chain_hash_arg, long _short_channel_id_arg, int _timestamp_arg, byte _message_flags_arg, byte _channel_flags_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, int _fee_base_msat_arg, int _fee_proportional_millionths_arg, long _excess_data_arg);
	// uint64_t UnsignedChannelUpdate_clone_ptr(LDKUnsignedChannelUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_clone_ptr")] public static extern long UnsignedChannelUpdate_clone_ptr(long _arg);
	// struct LDKUnsignedChannelUpdate UnsignedChannelUpdate_clone(const struct LDKUnsignedChannelUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_clone")] public static extern long UnsignedChannelUpdate_clone(long _orig);
	// uint64_t UnsignedChannelUpdate_hash(const struct LDKUnsignedChannelUpdate *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_hash")] public static extern long UnsignedChannelUpdate_hash(long _o);
	// bool UnsignedChannelUpdate_eq(const struct LDKUnsignedChannelUpdate *NONNULL_PTR a, const struct LDKUnsignedChannelUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_eq")] public static extern bool UnsignedChannelUpdate_eq(long _a, long _b);
	// void ChannelUpdate_free(struct LDKChannelUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_free")] public static extern void ChannelUpdate_free(long _this_obj);
	// struct LDKECDSASignature ChannelUpdate_get_signature(const struct LDKChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_get_signature")] public static extern long ChannelUpdate_get_signature(long _this_ptr);
	// void ChannelUpdate_set_signature(struct LDKChannelUpdate *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_set_signature")] public static extern void ChannelUpdate_set_signature(long _this_ptr, long _val);
	// struct LDKUnsignedChannelUpdate ChannelUpdate_get_contents(const struct LDKChannelUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_get_contents")] public static extern long ChannelUpdate_get_contents(long _this_ptr);
	// void ChannelUpdate_set_contents(struct LDKChannelUpdate *NONNULL_PTR this_ptr, struct LDKUnsignedChannelUpdate val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_set_contents")] public static extern void ChannelUpdate_set_contents(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUpdate ChannelUpdate_new(struct LDKECDSASignature signature_arg, struct LDKUnsignedChannelUpdate contents_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_new")] public static extern long ChannelUpdate_new(long _signature_arg, long _contents_arg);
	// uint64_t ChannelUpdate_clone_ptr(LDKChannelUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_clone_ptr")] public static extern long ChannelUpdate_clone_ptr(long _arg);
	// struct LDKChannelUpdate ChannelUpdate_clone(const struct LDKChannelUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_clone")] public static extern long ChannelUpdate_clone(long _orig);
	// uint64_t ChannelUpdate_hash(const struct LDKChannelUpdate *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_hash")] public static extern long ChannelUpdate_hash(long _o);
	// bool ChannelUpdate_eq(const struct LDKChannelUpdate *NONNULL_PTR a, const struct LDKChannelUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_eq")] public static extern bool ChannelUpdate_eq(long _a, long _b);
	// void QueryChannelRange_free(struct LDKQueryChannelRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_free")] public static extern void QueryChannelRange_free(long _this_obj);
	// const uint8_t (*QueryChannelRange_get_chain_hash(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_chain_hash")] public static extern long QueryChannelRange_get_chain_hash(long _this_ptr);
	// void QueryChannelRange_set_chain_hash(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_chain_hash")] public static extern void QueryChannelRange_set_chain_hash(long _this_ptr, long _val);
	// uint32_t QueryChannelRange_get_first_blocknum(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_first_blocknum")] public static extern int QueryChannelRange_get_first_blocknum(long _this_ptr);
	// void QueryChannelRange_set_first_blocknum(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_first_blocknum")] public static extern void QueryChannelRange_set_first_blocknum(long _this_ptr, int _val);
	// uint32_t QueryChannelRange_get_number_of_blocks(const struct LDKQueryChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_get_number_of_blocks")] public static extern int QueryChannelRange_get_number_of_blocks(long _this_ptr);
	// void QueryChannelRange_set_number_of_blocks(struct LDKQueryChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_set_number_of_blocks")] public static extern void QueryChannelRange_set_number_of_blocks(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKQueryChannelRange QueryChannelRange_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_blocknum_arg, uint32_t number_of_blocks_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_new")] public static extern long QueryChannelRange_new(long _chain_hash_arg, int _first_blocknum_arg, int _number_of_blocks_arg);
	// uint64_t QueryChannelRange_clone_ptr(LDKQueryChannelRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_clone_ptr")] public static extern long QueryChannelRange_clone_ptr(long _arg);
	// struct LDKQueryChannelRange QueryChannelRange_clone(const struct LDKQueryChannelRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_clone")] public static extern long QueryChannelRange_clone(long _orig);
	// uint64_t QueryChannelRange_hash(const struct LDKQueryChannelRange *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_hash")] public static extern long QueryChannelRange_hash(long _o);
	// bool QueryChannelRange_eq(const struct LDKQueryChannelRange *NONNULL_PTR a, const struct LDKQueryChannelRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_eq")] public static extern bool QueryChannelRange_eq(long _a, long _b);
	// void ReplyChannelRange_free(struct LDKReplyChannelRange this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_free")] public static extern void ReplyChannelRange_free(long _this_obj);
	// const uint8_t (*ReplyChannelRange_get_chain_hash(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_chain_hash")] public static extern long ReplyChannelRange_get_chain_hash(long _this_ptr);
	// void ReplyChannelRange_set_chain_hash(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_chain_hash")] public static extern void ReplyChannelRange_set_chain_hash(long _this_ptr, long _val);
	// uint32_t ReplyChannelRange_get_first_blocknum(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_first_blocknum")] public static extern int ReplyChannelRange_get_first_blocknum(long _this_ptr);
	// void ReplyChannelRange_set_first_blocknum(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_first_blocknum")] public static extern void ReplyChannelRange_set_first_blocknum(long _this_ptr, int _val);
	// uint32_t ReplyChannelRange_get_number_of_blocks(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_number_of_blocks")] public static extern int ReplyChannelRange_get_number_of_blocks(long _this_ptr);
	// void ReplyChannelRange_set_number_of_blocks(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_number_of_blocks")] public static extern void ReplyChannelRange_set_number_of_blocks(long _this_ptr, int _val);
	// bool ReplyChannelRange_get_sync_complete(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_sync_complete")] public static extern bool ReplyChannelRange_get_sync_complete(long _this_ptr);
	// void ReplyChannelRange_set_sync_complete(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_sync_complete")] public static extern void ReplyChannelRange_set_sync_complete(long _this_ptr, bool _val);
	// struct LDKCVec_u64Z ReplyChannelRange_get_short_channel_ids(const struct LDKReplyChannelRange *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_get_short_channel_ids")] public static extern long ReplyChannelRange_get_short_channel_ids(long _this_ptr);
	// void ReplyChannelRange_set_short_channel_ids(struct LDKReplyChannelRange *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_set_short_channel_ids")] public static extern void ReplyChannelRange_set_short_channel_ids(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKReplyChannelRange ReplyChannelRange_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_blocknum_arg, uint32_t number_of_blocks_arg, bool sync_complete_arg, struct LDKCVec_u64Z short_channel_ids_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_new")] public static extern long ReplyChannelRange_new(long _chain_hash_arg, int _first_blocknum_arg, int _number_of_blocks_arg, bool _sync_complete_arg, long _short_channel_ids_arg);
	// uint64_t ReplyChannelRange_clone_ptr(LDKReplyChannelRange *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_clone_ptr")] public static extern long ReplyChannelRange_clone_ptr(long _arg);
	// struct LDKReplyChannelRange ReplyChannelRange_clone(const struct LDKReplyChannelRange *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_clone")] public static extern long ReplyChannelRange_clone(long _orig);
	// uint64_t ReplyChannelRange_hash(const struct LDKReplyChannelRange *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_hash")] public static extern long ReplyChannelRange_hash(long _o);
	// bool ReplyChannelRange_eq(const struct LDKReplyChannelRange *NONNULL_PTR a, const struct LDKReplyChannelRange *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_eq")] public static extern bool ReplyChannelRange_eq(long _a, long _b);
	// void QueryShortChannelIds_free(struct LDKQueryShortChannelIds this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_free")] public static extern void QueryShortChannelIds_free(long _this_obj);
	// const uint8_t (*QueryShortChannelIds_get_chain_hash(const struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_get_chain_hash")] public static extern long QueryShortChannelIds_get_chain_hash(long _this_ptr);
	// void QueryShortChannelIds_set_chain_hash(struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_set_chain_hash")] public static extern void QueryShortChannelIds_set_chain_hash(long _this_ptr, long _val);
	// struct LDKCVec_u64Z QueryShortChannelIds_get_short_channel_ids(const struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_get_short_channel_ids")] public static extern long QueryShortChannelIds_get_short_channel_ids(long _this_ptr);
	// void QueryShortChannelIds_set_short_channel_ids(struct LDKQueryShortChannelIds *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_set_short_channel_ids")] public static extern void QueryShortChannelIds_set_short_channel_ids(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKQueryShortChannelIds QueryShortChannelIds_new(struct LDKThirtyTwoBytes chain_hash_arg, struct LDKCVec_u64Z short_channel_ids_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_new")] public static extern long QueryShortChannelIds_new(long _chain_hash_arg, long _short_channel_ids_arg);
	// uint64_t QueryShortChannelIds_clone_ptr(LDKQueryShortChannelIds *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_clone_ptr")] public static extern long QueryShortChannelIds_clone_ptr(long _arg);
	// struct LDKQueryShortChannelIds QueryShortChannelIds_clone(const struct LDKQueryShortChannelIds *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_clone")] public static extern long QueryShortChannelIds_clone(long _orig);
	// uint64_t QueryShortChannelIds_hash(const struct LDKQueryShortChannelIds *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_hash")] public static extern long QueryShortChannelIds_hash(long _o);
	// bool QueryShortChannelIds_eq(const struct LDKQueryShortChannelIds *NONNULL_PTR a, const struct LDKQueryShortChannelIds *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_eq")] public static extern bool QueryShortChannelIds_eq(long _a, long _b);
	// void ReplyShortChannelIdsEnd_free(struct LDKReplyShortChannelIdsEnd this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_free")] public static extern void ReplyShortChannelIdsEnd_free(long _this_obj);
	// const uint8_t (*ReplyShortChannelIdsEnd_get_chain_hash(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_get_chain_hash")] public static extern long ReplyShortChannelIdsEnd_get_chain_hash(long _this_ptr);
	// void ReplyShortChannelIdsEnd_set_chain_hash(struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_set_chain_hash")] public static extern void ReplyShortChannelIdsEnd_set_chain_hash(long _this_ptr, long _val);
	// bool ReplyShortChannelIdsEnd_get_full_information(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_get_full_information")] public static extern bool ReplyShortChannelIdsEnd_get_full_information(long _this_ptr);
	// void ReplyShortChannelIdsEnd_set_full_information(struct LDKReplyShortChannelIdsEnd *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_set_full_information")] public static extern void ReplyShortChannelIdsEnd_set_full_information(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKReplyShortChannelIdsEnd ReplyShortChannelIdsEnd_new(struct LDKThirtyTwoBytes chain_hash_arg, bool full_information_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_new")] public static extern long ReplyShortChannelIdsEnd_new(long _chain_hash_arg, bool _full_information_arg);
	// uint64_t ReplyShortChannelIdsEnd_clone_ptr(LDKReplyShortChannelIdsEnd *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_clone_ptr")] public static extern long ReplyShortChannelIdsEnd_clone_ptr(long _arg);
	// struct LDKReplyShortChannelIdsEnd ReplyShortChannelIdsEnd_clone(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_clone")] public static extern long ReplyShortChannelIdsEnd_clone(long _orig);
	// uint64_t ReplyShortChannelIdsEnd_hash(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_hash")] public static extern long ReplyShortChannelIdsEnd_hash(long _o);
	// bool ReplyShortChannelIdsEnd_eq(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR a, const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_eq")] public static extern bool ReplyShortChannelIdsEnd_eq(long _a, long _b);
	// void GossipTimestampFilter_free(struct LDKGossipTimestampFilter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_free")] public static extern void GossipTimestampFilter_free(long _this_obj);
	// const uint8_t (*GossipTimestampFilter_get_chain_hash(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_chain_hash")] public static extern long GossipTimestampFilter_get_chain_hash(long _this_ptr);
	// void GossipTimestampFilter_set_chain_hash(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_chain_hash")] public static extern void GossipTimestampFilter_set_chain_hash(long _this_ptr, long _val);
	// uint32_t GossipTimestampFilter_get_first_timestamp(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_first_timestamp")] public static extern int GossipTimestampFilter_get_first_timestamp(long _this_ptr);
	// void GossipTimestampFilter_set_first_timestamp(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_first_timestamp")] public static extern void GossipTimestampFilter_set_first_timestamp(long _this_ptr, int _val);
	// uint32_t GossipTimestampFilter_get_timestamp_range(const struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_get_timestamp_range")] public static extern int GossipTimestampFilter_get_timestamp_range(long _this_ptr);
	// void GossipTimestampFilter_set_timestamp_range(struct LDKGossipTimestampFilter *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_set_timestamp_range")] public static extern void GossipTimestampFilter_set_timestamp_range(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKGossipTimestampFilter GossipTimestampFilter_new(struct LDKThirtyTwoBytes chain_hash_arg, uint32_t first_timestamp_arg, uint32_t timestamp_range_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_new")] public static extern long GossipTimestampFilter_new(long _chain_hash_arg, int _first_timestamp_arg, int _timestamp_range_arg);
	// uint64_t GossipTimestampFilter_clone_ptr(LDKGossipTimestampFilter *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_clone_ptr")] public static extern long GossipTimestampFilter_clone_ptr(long _arg);
	// struct LDKGossipTimestampFilter GossipTimestampFilter_clone(const struct LDKGossipTimestampFilter *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_clone")] public static extern long GossipTimestampFilter_clone(long _orig);
	// uint64_t GossipTimestampFilter_hash(const struct LDKGossipTimestampFilter *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_hash")] public static extern long GossipTimestampFilter_hash(long _o);
	// bool GossipTimestampFilter_eq(const struct LDKGossipTimestampFilter *NONNULL_PTR a, const struct LDKGossipTimestampFilter *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_eq")] public static extern bool GossipTimestampFilter_eq(long _a, long _b);
	// void ErrorAction_free(struct LDKErrorAction this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_free")] public static extern void ErrorAction_free(long _this_ptr);
	// uint64_t ErrorAction_clone_ptr(LDKErrorAction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_clone_ptr")] public static extern long ErrorAction_clone_ptr(long _arg);
	// struct LDKErrorAction ErrorAction_clone(const struct LDKErrorAction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_clone")] public static extern long ErrorAction_clone(long _orig);
	// struct LDKErrorAction ErrorAction_disconnect_peer(struct LDKErrorMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_disconnect_peer")] public static extern long ErrorAction_disconnect_peer(long _msg);
	// struct LDKErrorAction ErrorAction_disconnect_peer_with_warning(struct LDKWarningMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_disconnect_peer_with_warning")] public static extern long ErrorAction_disconnect_peer_with_warning(long _msg);
	// struct LDKErrorAction ErrorAction_ignore_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_error")] public static extern long ErrorAction_ignore_error();
	// struct LDKErrorAction ErrorAction_ignore_and_log(enum LDKLevel a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_and_log")] public static extern long ErrorAction_ignore_and_log(Level _a);
	// struct LDKErrorAction ErrorAction_ignore_duplicate_gossip(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_ignore_duplicate_gossip")] public static extern long ErrorAction_ignore_duplicate_gossip();
	// struct LDKErrorAction ErrorAction_send_error_message(struct LDKErrorMessage msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_send_error_message")] public static extern long ErrorAction_send_error_message(long _msg);
	// struct LDKErrorAction ErrorAction_send_warning_message(struct LDKWarningMessage msg, enum LDKLevel log_level);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_send_warning_message")] public static extern long ErrorAction_send_warning_message(long _msg, Level _log_level);
	// uint64_t ErrorAction_hash(const struct LDKErrorAction *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorAction_hash")] public static extern long ErrorAction_hash(long _o);
	// void LightningError_free(struct LDKLightningError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_free")] public static extern void LightningError_free(long _this_obj);
	// struct LDKStr LightningError_get_err(const struct LDKLightningError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_get_err")] public static extern long LightningError_get_err(long _this_ptr);
	// void LightningError_set_err(struct LDKLightningError *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_set_err")] public static extern void LightningError_set_err(long _this_ptr, long _val);
	// struct LDKErrorAction LightningError_get_action(const struct LDKLightningError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_get_action")] public static extern long LightningError_get_action(long _this_ptr);
	// void LightningError_set_action(struct LDKLightningError *NONNULL_PTR this_ptr, struct LDKErrorAction val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_set_action")] public static extern void LightningError_set_action(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLightningError LightningError_new(struct LDKStr err_arg, struct LDKErrorAction action_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_new")] public static extern long LightningError_new(long _err_arg, long _action_arg);
	// uint64_t LightningError_clone_ptr(LDKLightningError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_clone_ptr")] public static extern long LightningError_clone_ptr(long _arg);
	// struct LDKLightningError LightningError_clone(const struct LDKLightningError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LightningError_clone")] public static extern long LightningError_clone(long _orig);
	// void CommitmentUpdate_free(struct LDKCommitmentUpdate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_free")] public static extern void CommitmentUpdate_free(long _this_obj);
	// struct LDKCVec_UpdateAddHTLCZ CommitmentUpdate_get_update_add_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_add_htlcs")] public static extern long CommitmentUpdate_get_update_add_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_add_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateAddHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_add_htlcs")] public static extern void CommitmentUpdate_set_update_add_htlcs(long _this_ptr, long _val);
	// struct LDKCVec_UpdateFulfillHTLCZ CommitmentUpdate_get_update_fulfill_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fulfill_htlcs")] public static extern long CommitmentUpdate_get_update_fulfill_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fulfill_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFulfillHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fulfill_htlcs")] public static extern void CommitmentUpdate_set_update_fulfill_htlcs(long _this_ptr, long _val);
	// struct LDKCVec_UpdateFailHTLCZ CommitmentUpdate_get_update_fail_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fail_htlcs")] public static extern long CommitmentUpdate_get_update_fail_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fail_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFailHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fail_htlcs")] public static extern void CommitmentUpdate_set_update_fail_htlcs(long _this_ptr, long _val);
	// struct LDKCVec_UpdateFailMalformedHTLCZ CommitmentUpdate_get_update_fail_malformed_htlcs(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fail_malformed_htlcs")] public static extern long CommitmentUpdate_get_update_fail_malformed_htlcs(long _this_ptr);
	// void CommitmentUpdate_set_update_fail_malformed_htlcs(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCVec_UpdateFailMalformedHTLCZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fail_malformed_htlcs")] public static extern void CommitmentUpdate_set_update_fail_malformed_htlcs(long _this_ptr, long _val);
	// struct LDKUpdateFee CommitmentUpdate_get_update_fee(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_update_fee")] public static extern long CommitmentUpdate_get_update_fee(long _this_ptr);
	// void CommitmentUpdate_set_update_fee(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKUpdateFee val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_update_fee")] public static extern void CommitmentUpdate_set_update_fee(long _this_ptr, long _val);
	// struct LDKCommitmentSigned CommitmentUpdate_get_commitment_signed(const struct LDKCommitmentUpdate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_get_commitment_signed")] public static extern long CommitmentUpdate_get_commitment_signed(long _this_ptr);
	// void CommitmentUpdate_set_commitment_signed(struct LDKCommitmentUpdate *NONNULL_PTR this_ptr, struct LDKCommitmentSigned val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_set_commitment_signed")] public static extern void CommitmentUpdate_set_commitment_signed(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCommitmentUpdate CommitmentUpdate_new(struct LDKCVec_UpdateAddHTLCZ update_add_htlcs_arg, struct LDKCVec_UpdateFulfillHTLCZ update_fulfill_htlcs_arg, struct LDKCVec_UpdateFailHTLCZ update_fail_htlcs_arg, struct LDKCVec_UpdateFailMalformedHTLCZ update_fail_malformed_htlcs_arg, struct LDKUpdateFee update_fee_arg, struct LDKCommitmentSigned commitment_signed_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_new")] public static extern long CommitmentUpdate_new(long _update_add_htlcs_arg, long _update_fulfill_htlcs_arg, long _update_fail_htlcs_arg, long _update_fail_malformed_htlcs_arg, long _update_fee_arg, long _commitment_signed_arg);
	// uint64_t CommitmentUpdate_clone_ptr(LDKCommitmentUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_clone_ptr")] public static extern long CommitmentUpdate_clone_ptr(long _arg);
	// struct LDKCommitmentUpdate CommitmentUpdate_clone(const struct LDKCommitmentUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_clone")] public static extern long CommitmentUpdate_clone(long _orig);
	// uint64_t CommitmentUpdate_hash(const struct LDKCommitmentUpdate *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_hash")] public static extern long CommitmentUpdate_hash(long _o);
	// bool CommitmentUpdate_eq(const struct LDKCommitmentUpdate *NONNULL_PTR a, const struct LDKCommitmentUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentUpdate_eq")] public static extern bool CommitmentUpdate_eq(long _a, long _b);
	// void ChannelMessageHandler_free(struct LDKChannelMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelMessageHandler_free")] public static extern void ChannelMessageHandler_free(long _this_ptr);
	// void RoutingMessageHandler_free(struct LDKRoutingMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingMessageHandler_free")] public static extern void RoutingMessageHandler_free(long _this_ptr);
	// void OnionMessageHandler_free(struct LDKOnionMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageHandler_free")] public static extern void OnionMessageHandler_free(long _this_ptr);
	// void FinalOnionHopData_free(struct LDKFinalOnionHopData this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_free")] public static extern void FinalOnionHopData_free(long _this_obj);
	// const uint8_t (*FinalOnionHopData_get_payment_secret(const struct LDKFinalOnionHopData *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_get_payment_secret")] public static extern long FinalOnionHopData_get_payment_secret(long _this_ptr);
	// void FinalOnionHopData_set_payment_secret(struct LDKFinalOnionHopData *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_set_payment_secret")] public static extern void FinalOnionHopData_set_payment_secret(long _this_ptr, long _val);
	// uint64_t FinalOnionHopData_get_total_msat(const struct LDKFinalOnionHopData *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_get_total_msat")] public static extern long FinalOnionHopData_get_total_msat(long _this_ptr);
	// void FinalOnionHopData_set_total_msat(struct LDKFinalOnionHopData *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_set_total_msat")] public static extern void FinalOnionHopData_set_total_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKFinalOnionHopData FinalOnionHopData_new(struct LDKThirtyTwoBytes payment_secret_arg, uint64_t total_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_new")] public static extern long FinalOnionHopData_new(long _payment_secret_arg, long _total_msat_arg);
	// uint64_t FinalOnionHopData_clone_ptr(LDKFinalOnionHopData *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_clone_ptr")] public static extern long FinalOnionHopData_clone_ptr(long _arg);
	// struct LDKFinalOnionHopData FinalOnionHopData_clone(const struct LDKFinalOnionHopData *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_clone")] public static extern long FinalOnionHopData_clone(long _orig);
	// bool FinalOnionHopData_eq(const struct LDKFinalOnionHopData *NONNULL_PTR a, const struct LDKFinalOnionHopData *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_eq")] public static extern bool FinalOnionHopData_eq(long _a, long _b);
	// void OnionPacket_free(struct LDKOnionPacket this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_free")] public static extern void OnionPacket_free(long _this_obj);
	// uint8_t OnionPacket_get_version(const struct LDKOnionPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_get_version")] public static extern byte OnionPacket_get_version(long _this_ptr);
	// void OnionPacket_set_version(struct LDKOnionPacket *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_set_version")] public static extern void OnionPacket_set_version(long _this_ptr, byte _val);
	// struct LDKCResult_PublicKeySecp256k1ErrorZ OnionPacket_get_public_key(const struct LDKOnionPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_get_public_key")] public static extern long OnionPacket_get_public_key(long _this_ptr);
	// void OnionPacket_set_public_key(struct LDKOnionPacket *NONNULL_PTR this_ptr, struct LDKCResult_PublicKeySecp256k1ErrorZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_set_public_key")] public static extern void OnionPacket_set_public_key(long _this_ptr, long _val);
	// const uint8_t (*OnionPacket_get_hmac(const struct LDKOnionPacket *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_get_hmac")] public static extern long OnionPacket_get_hmac(long _this_ptr);
	// void OnionPacket_set_hmac(struct LDKOnionPacket *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_set_hmac")] public static extern void OnionPacket_set_hmac(long _this_ptr, long _val);
	// uint64_t OnionPacket_clone_ptr(LDKOnionPacket *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_clone_ptr")] public static extern long OnionPacket_clone_ptr(long _arg);
	// struct LDKOnionPacket OnionPacket_clone(const struct LDKOnionPacket *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_clone")] public static extern long OnionPacket_clone(long _orig);
	// uint64_t OnionPacket_hash(const struct LDKOnionPacket *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_hash")] public static extern long OnionPacket_hash(long _o);
	// bool OnionPacket_eq(const struct LDKOnionPacket *NONNULL_PTR a, const struct LDKOnionPacket *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_eq")] public static extern bool OnionPacket_eq(long _a, long _b);
	// void TrampolineOnionPacket_free(struct LDKTrampolineOnionPacket this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_free")] public static extern void TrampolineOnionPacket_free(long _this_obj);
	// uint8_t TrampolineOnionPacket_get_version(const struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_get_version")] public static extern byte TrampolineOnionPacket_get_version(long _this_ptr);
	// void TrampolineOnionPacket_set_version(struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_set_version")] public static extern void TrampolineOnionPacket_set_version(long _this_ptr, byte _val);
	// struct LDKPublicKey TrampolineOnionPacket_get_public_key(const struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_get_public_key")] public static extern long TrampolineOnionPacket_get_public_key(long _this_ptr);
	// void TrampolineOnionPacket_set_public_key(struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_set_public_key")] public static extern void TrampolineOnionPacket_set_public_key(long _this_ptr, long _val);
	// struct LDKCVec_u8Z TrampolineOnionPacket_get_hop_data(const struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_get_hop_data")] public static extern long TrampolineOnionPacket_get_hop_data(long _this_ptr);
	// void TrampolineOnionPacket_set_hop_data(struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_set_hop_data")] public static extern void TrampolineOnionPacket_set_hop_data(long _this_ptr, long _val);
	// const uint8_t (*TrampolineOnionPacket_get_hmac(const struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_get_hmac")] public static extern long TrampolineOnionPacket_get_hmac(long _this_ptr);
	// void TrampolineOnionPacket_set_hmac(struct LDKTrampolineOnionPacket *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_set_hmac")] public static extern void TrampolineOnionPacket_set_hmac(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTrampolineOnionPacket TrampolineOnionPacket_new(uint8_t version_arg, struct LDKPublicKey public_key_arg, struct LDKCVec_u8Z hop_data_arg, struct LDKThirtyTwoBytes hmac_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_new")] public static extern long TrampolineOnionPacket_new(byte _version_arg, long _public_key_arg, long _hop_data_arg, long _hmac_arg);
	// uint64_t TrampolineOnionPacket_clone_ptr(LDKTrampolineOnionPacket *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_clone_ptr")] public static extern long TrampolineOnionPacket_clone_ptr(long _arg);
	// struct LDKTrampolineOnionPacket TrampolineOnionPacket_clone(const struct LDKTrampolineOnionPacket *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_clone")] public static extern long TrampolineOnionPacket_clone(long _orig);
	// uint64_t TrampolineOnionPacket_hash(const struct LDKTrampolineOnionPacket *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_hash")] public static extern long TrampolineOnionPacket_hash(long _o);
	// bool TrampolineOnionPacket_eq(const struct LDKTrampolineOnionPacket *NONNULL_PTR a, const struct LDKTrampolineOnionPacket *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_eq")] public static extern bool TrampolineOnionPacket_eq(long _a, long _b);
	// struct LDKCVec_u8Z TrampolineOnionPacket_write(const struct LDKTrampolineOnionPacket *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrampolineOnionPacket_write")] public static extern long TrampolineOnionPacket_write(long _obj);
	// struct LDKStr DecodeError_to_str(const struct LDKDecodeError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DecodeError_to_str")] public static extern long DecodeError_to_str(long _o);
	// struct LDKCVec_u8Z AcceptChannel_write(const struct LDKAcceptChannel *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_write")] public static extern long AcceptChannel_write(long _obj);
	// struct LDKCResult_AcceptChannelDecodeErrorZ AcceptChannel_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannel_read")] public static extern long AcceptChannel_read(long _ser);
	// struct LDKCVec_u8Z AcceptChannelV2_write(const struct LDKAcceptChannelV2 *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_write")] public static extern long AcceptChannelV2_write(long _obj);
	// struct LDKCResult_AcceptChannelV2DecodeErrorZ AcceptChannelV2_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AcceptChannelV2_read")] public static extern long AcceptChannelV2_read(long _ser);
	// struct LDKCVec_u8Z Stfu_write(const struct LDKStfu *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_write")] public static extern long Stfu_write(long _obj);
	// struct LDKCResult_StfuDecodeErrorZ Stfu_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Stfu_read")] public static extern long Stfu_read(long _ser);
	// struct LDKCVec_u8Z SpliceInit_write(const struct LDKSpliceInit *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_write")] public static extern long SpliceInit_write(long _obj);
	// struct LDKCResult_SpliceInitDecodeErrorZ SpliceInit_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceInit_read")] public static extern long SpliceInit_read(long _ser);
	// struct LDKCVec_u8Z SpliceAck_write(const struct LDKSpliceAck *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_write")] public static extern long SpliceAck_write(long _obj);
	// struct LDKCResult_SpliceAckDecodeErrorZ SpliceAck_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceAck_read")] public static extern long SpliceAck_read(long _ser);
	// struct LDKCVec_u8Z SpliceLocked_write(const struct LDKSpliceLocked *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_write")] public static extern long SpliceLocked_write(long _obj);
	// struct LDKCResult_SpliceLockedDecodeErrorZ SpliceLocked_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpliceLocked_read")] public static extern long SpliceLocked_read(long _ser);
	// struct LDKCVec_u8Z TxAddInput_write(const struct LDKTxAddInput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_write")] public static extern long TxAddInput_write(long _obj);
	// struct LDKCResult_TxAddInputDecodeErrorZ TxAddInput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddInput_read")] public static extern long TxAddInput_read(long _ser);
	// struct LDKCVec_u8Z TxAddOutput_write(const struct LDKTxAddOutput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_write")] public static extern long TxAddOutput_write(long _obj);
	// struct LDKCResult_TxAddOutputDecodeErrorZ TxAddOutput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAddOutput_read")] public static extern long TxAddOutput_read(long _ser);
	// struct LDKCVec_u8Z TxRemoveInput_write(const struct LDKTxRemoveInput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_write")] public static extern long TxRemoveInput_write(long _obj);
	// struct LDKCResult_TxRemoveInputDecodeErrorZ TxRemoveInput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveInput_read")] public static extern long TxRemoveInput_read(long _ser);
	// struct LDKCVec_u8Z TxRemoveOutput_write(const struct LDKTxRemoveOutput *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_write")] public static extern long TxRemoveOutput_write(long _obj);
	// struct LDKCResult_TxRemoveOutputDecodeErrorZ TxRemoveOutput_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxRemoveOutput_read")] public static extern long TxRemoveOutput_read(long _ser);
	// struct LDKCVec_u8Z TxComplete_write(const struct LDKTxComplete *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_write")] public static extern long TxComplete_write(long _obj);
	// struct LDKCResult_TxCompleteDecodeErrorZ TxComplete_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxComplete_read")] public static extern long TxComplete_read(long _ser);
	// struct LDKCVec_u8Z TxSignatures_write(const struct LDKTxSignatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_write")] public static extern long TxSignatures_write(long _obj);
	// struct LDKCResult_TxSignaturesDecodeErrorZ TxSignatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxSignatures_read")] public static extern long TxSignatures_read(long _ser);
	// struct LDKCVec_u8Z TxInitRbf_write(const struct LDKTxInitRbf *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_write")] public static extern long TxInitRbf_write(long _obj);
	// struct LDKCResult_TxInitRbfDecodeErrorZ TxInitRbf_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxInitRbf_read")] public static extern long TxInitRbf_read(long _ser);
	// struct LDKCVec_u8Z TxAckRbf_write(const struct LDKTxAckRbf *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_write")] public static extern long TxAckRbf_write(long _obj);
	// struct LDKCResult_TxAckRbfDecodeErrorZ TxAckRbf_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAckRbf_read")] public static extern long TxAckRbf_read(long _ser);
	// struct LDKCVec_u8Z TxAbort_write(const struct LDKTxAbort *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_write")] public static extern long TxAbort_write(long _obj);
	// struct LDKCResult_TxAbortDecodeErrorZ TxAbort_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxAbort_read")] public static extern long TxAbort_read(long _ser);
	// struct LDKCVec_u8Z AnnouncementSignatures_write(const struct LDKAnnouncementSignatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_write")] public static extern long AnnouncementSignatures_write(long _obj);
	// struct LDKCResult_AnnouncementSignaturesDecodeErrorZ AnnouncementSignatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnnouncementSignatures_read")] public static extern long AnnouncementSignatures_read(long _ser);
	// struct LDKCVec_u8Z ChannelReestablish_write(const struct LDKChannelReestablish *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_write")] public static extern long ChannelReestablish_write(long _obj);
	// struct LDKCResult_ChannelReestablishDecodeErrorZ ChannelReestablish_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReestablish_read")] public static extern long ChannelReestablish_read(long _ser);
	// struct LDKCVec_u8Z ClosingSigned_write(const struct LDKClosingSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_write")] public static extern long ClosingSigned_write(long _obj);
	// struct LDKCResult_ClosingSignedDecodeErrorZ ClosingSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSigned_read")] public static extern long ClosingSigned_read(long _ser);
	// struct LDKCVec_u8Z ClosingSignedFeeRange_write(const struct LDKClosingSignedFeeRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_write")] public static extern long ClosingSignedFeeRange_write(long _obj);
	// struct LDKCResult_ClosingSignedFeeRangeDecodeErrorZ ClosingSignedFeeRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingSignedFeeRange_read")] public static extern long ClosingSignedFeeRange_read(long _ser);
	// struct LDKCVec_u8Z CommitmentSignedBatch_write(const struct LDKCommitmentSignedBatch *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_write")] public static extern long CommitmentSignedBatch_write(long _obj);
	// struct LDKCResult_CommitmentSignedBatchDecodeErrorZ CommitmentSignedBatch_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSignedBatch_read")] public static extern long CommitmentSignedBatch_read(long _ser);
	// struct LDKCVec_u8Z CommitmentSigned_write(const struct LDKCommitmentSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_write")] public static extern long CommitmentSigned_write(long _obj);
	// struct LDKCResult_CommitmentSignedDecodeErrorZ CommitmentSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentSigned_read")] public static extern long CommitmentSigned_read(long _ser);
	// struct LDKCVec_u8Z FundingCreated_write(const struct LDKFundingCreated *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_write")] public static extern long FundingCreated_write(long _obj);
	// struct LDKCResult_FundingCreatedDecodeErrorZ FundingCreated_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingCreated_read")] public static extern long FundingCreated_read(long _ser);
	// struct LDKCVec_u8Z FundingSigned_write(const struct LDKFundingSigned *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_write")] public static extern long FundingSigned_write(long _obj);
	// struct LDKCResult_FundingSignedDecodeErrorZ FundingSigned_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingSigned_read")] public static extern long FundingSigned_read(long _ser);
	// struct LDKCVec_u8Z ChannelReady_write(const struct LDKChannelReady *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_write")] public static extern long ChannelReady_write(long _obj);
	// struct LDKCResult_ChannelReadyDecodeErrorZ ChannelReady_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelReady_read")] public static extern long ChannelReady_read(long _ser);
	// struct LDKCVec_u8Z Init_write(const struct LDKInit *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_write")] public static extern long Init_write(long _obj);
	// struct LDKCResult_InitDecodeErrorZ Init_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Init_read")] public static extern long Init_read(long _ser);
	// struct LDKCVec_u8Z OpenChannel_write(const struct LDKOpenChannel *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_write")] public static extern long OpenChannel_write(long _obj);
	// struct LDKCResult_OpenChannelDecodeErrorZ OpenChannel_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannel_read")] public static extern long OpenChannel_read(long _ser);
	// struct LDKCVec_u8Z OpenChannelV2_write(const struct LDKOpenChannelV2 *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_write")] public static extern long OpenChannelV2_write(long _obj);
	// struct LDKCResult_OpenChannelV2DecodeErrorZ OpenChannelV2_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OpenChannelV2_read")] public static extern long OpenChannelV2_read(long _ser);
	// struct LDKCVec_u8Z RevokeAndACK_write(const struct LDKRevokeAndACK *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_write")] public static extern long RevokeAndACK_write(long _obj);
	// struct LDKCResult_RevokeAndACKDecodeErrorZ RevokeAndACK_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RevokeAndACK_read")] public static extern long RevokeAndACK_read(long _ser);
	// struct LDKCVec_u8Z Shutdown_write(const struct LDKShutdown *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_write")] public static extern long Shutdown_write(long _obj);
	// struct LDKCResult_ShutdownDecodeErrorZ Shutdown_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Shutdown_read")] public static extern long Shutdown_read(long _ser);
	// struct LDKCVec_u8Z UpdateFailHTLC_write(const struct LDKUpdateFailHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_write")] public static extern long UpdateFailHTLC_write(long _obj);
	// struct LDKCResult_UpdateFailHTLCDecodeErrorZ UpdateFailHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailHTLC_read")] public static extern long UpdateFailHTLC_read(long _ser);
	// struct LDKCVec_u8Z UpdateFailMalformedHTLC_write(const struct LDKUpdateFailMalformedHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_write")] public static extern long UpdateFailMalformedHTLC_write(long _obj);
	// struct LDKCResult_UpdateFailMalformedHTLCDecodeErrorZ UpdateFailMalformedHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFailMalformedHTLC_read")] public static extern long UpdateFailMalformedHTLC_read(long _ser);
	// struct LDKCVec_u8Z UpdateFee_write(const struct LDKUpdateFee *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_write")] public static extern long UpdateFee_write(long _obj);
	// struct LDKCResult_UpdateFeeDecodeErrorZ UpdateFee_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFee_read")] public static extern long UpdateFee_read(long _ser);
	// struct LDKCVec_u8Z UpdateFulfillHTLC_write(const struct LDKUpdateFulfillHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_write")] public static extern long UpdateFulfillHTLC_write(long _obj);
	// struct LDKCResult_UpdateFulfillHTLCDecodeErrorZ UpdateFulfillHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateFulfillHTLC_read")] public static extern long UpdateFulfillHTLC_read(long _ser);
	// struct LDKCVec_u8Z OnionPacket_write(const struct LDKOnionPacket *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_write")] public static extern long OnionPacket_write(long _obj);
	// struct LDKCResult_OnionPacketDecodeErrorZ OnionPacket_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionPacket_read")] public static extern long OnionPacket_read(long _ser);
	// struct LDKCVec_u8Z UpdateAddHTLC_write(const struct LDKUpdateAddHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_write")] public static extern long UpdateAddHTLC_write(long _obj);
	// struct LDKCResult_UpdateAddHTLCDecodeErrorZ UpdateAddHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UpdateAddHTLC_read")] public static extern long UpdateAddHTLC_read(long _ser);
	// struct LDKCResult_OnionMessageDecodeErrorZ OnionMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_read")] public static extern long OnionMessage_read(long _ser);
	// struct LDKCVec_u8Z OnionMessage_write(const struct LDKOnionMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessage_write")] public static extern long OnionMessage_write(long _obj);
	// struct LDKCVec_u8Z FinalOnionHopData_write(const struct LDKFinalOnionHopData *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_write")] public static extern long FinalOnionHopData_write(long _obj);
	// struct LDKCResult_FinalOnionHopDataDecodeErrorZ FinalOnionHopData_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FinalOnionHopData_read")] public static extern long FinalOnionHopData_read(long _ser);
	// struct LDKCVec_u8Z Ping_write(const struct LDKPing *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_write")] public static extern long Ping_write(long _obj);
	// struct LDKCResult_PingDecodeErrorZ Ping_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Ping_read")] public static extern long Ping_read(long _ser);
	// struct LDKCVec_u8Z Pong_write(const struct LDKPong *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_write")] public static extern long Pong_write(long _obj);
	// struct LDKCResult_PongDecodeErrorZ Pong_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Pong_read")] public static extern long Pong_read(long _ser);
	// struct LDKCVec_u8Z UnsignedChannelAnnouncement_write(const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_write")] public static extern long UnsignedChannelAnnouncement_write(long _obj);
	// struct LDKCResult_UnsignedChannelAnnouncementDecodeErrorZ UnsignedChannelAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelAnnouncement_read")] public static extern long UnsignedChannelAnnouncement_read(long _ser);
	// struct LDKCVec_u8Z ChannelAnnouncement_write(const struct LDKChannelAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_write")] public static extern long ChannelAnnouncement_write(long _obj);
	// struct LDKCResult_ChannelAnnouncementDecodeErrorZ ChannelAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelAnnouncement_read")] public static extern long ChannelAnnouncement_read(long _ser);
	// struct LDKCVec_u8Z UnsignedChannelUpdate_write(const struct LDKUnsignedChannelUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_write")] public static extern long UnsignedChannelUpdate_write(long _obj);
	// struct LDKCResult_UnsignedChannelUpdateDecodeErrorZ UnsignedChannelUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedChannelUpdate_read")] public static extern long UnsignedChannelUpdate_read(long _ser);
	// struct LDKCVec_u8Z ChannelUpdate_write(const struct LDKChannelUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_write")] public static extern long ChannelUpdate_write(long _obj);
	// struct LDKCResult_ChannelUpdateDecodeErrorZ ChannelUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdate_read")] public static extern long ChannelUpdate_read(long _ser);
	// struct LDKCVec_u8Z ErrorMessage_write(const struct LDKErrorMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_write")] public static extern long ErrorMessage_write(long _obj);
	// struct LDKCResult_ErrorMessageDecodeErrorZ ErrorMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErrorMessage_read")] public static extern long ErrorMessage_read(long _ser);
	// struct LDKCVec_u8Z WarningMessage_write(const struct LDKWarningMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_write")] public static extern long WarningMessage_write(long _obj);
	// struct LDKCResult_WarningMessageDecodeErrorZ WarningMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WarningMessage_read")] public static extern long WarningMessage_read(long _ser);
	// struct LDKCVec_u8Z UnsignedNodeAnnouncement_write(const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_write")] public static extern long UnsignedNodeAnnouncement_write(long _obj);
	// struct LDKCResult_UnsignedNodeAnnouncementDecodeErrorZ UnsignedNodeAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedNodeAnnouncement_read")] public static extern long UnsignedNodeAnnouncement_read(long _ser);
	// struct LDKCVec_u8Z NodeAnnouncement_write(const struct LDKNodeAnnouncement *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_write")] public static extern long NodeAnnouncement_write(long _obj);
	// struct LDKCResult_NodeAnnouncementDecodeErrorZ NodeAnnouncement_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncement_read")] public static extern long NodeAnnouncement_read(long _ser);
	// struct LDKCResult_QueryShortChannelIdsDecodeErrorZ QueryShortChannelIds_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_read")] public static extern long QueryShortChannelIds_read(long _ser);
	// struct LDKCVec_u8Z QueryShortChannelIds_write(const struct LDKQueryShortChannelIds *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryShortChannelIds_write")] public static extern long QueryShortChannelIds_write(long _obj);
	// struct LDKCVec_u8Z ReplyShortChannelIdsEnd_write(const struct LDKReplyShortChannelIdsEnd *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_write")] public static extern long ReplyShortChannelIdsEnd_write(long _obj);
	// struct LDKCResult_ReplyShortChannelIdsEndDecodeErrorZ ReplyShortChannelIdsEnd_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyShortChannelIdsEnd_read")] public static extern long ReplyShortChannelIdsEnd_read(long _ser);
	// MUST_USE_RES uint32_t QueryChannelRange_end_blocknum(const struct LDKQueryChannelRange *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_end_blocknum")] public static extern int QueryChannelRange_end_blocknum(long _this_arg);
	// struct LDKCVec_u8Z QueryChannelRange_write(const struct LDKQueryChannelRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_write")] public static extern long QueryChannelRange_write(long _obj);
	// struct LDKCResult_QueryChannelRangeDecodeErrorZ QueryChannelRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_QueryChannelRange_read")] public static extern long QueryChannelRange_read(long _ser);
	// struct LDKCResult_ReplyChannelRangeDecodeErrorZ ReplyChannelRange_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_read")] public static extern long ReplyChannelRange_read(long _ser);
	// struct LDKCVec_u8Z ReplyChannelRange_write(const struct LDKReplyChannelRange *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplyChannelRange_write")] public static extern long ReplyChannelRange_write(long _obj);
	// struct LDKCVec_u8Z GossipTimestampFilter_write(const struct LDKGossipTimestampFilter *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_write")] public static extern long GossipTimestampFilter_write(long _obj);
	// struct LDKCResult_GossipTimestampFilterDecodeErrorZ GossipTimestampFilter_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipTimestampFilter_read")] public static extern long GossipTimestampFilter_read(long _ser);
	// void CustomMessageHandler_free(struct LDKCustomMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageHandler_free")] public static extern void CustomMessageHandler_free(long _this_ptr);
	// void IgnoringMessageHandler_free(struct LDKIgnoringMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_free")] public static extern void IgnoringMessageHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKIgnoringMessageHandler IgnoringMessageHandler_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_new")] public static extern long IgnoringMessageHandler_new();
	// struct LDKMessageSendEventsProvider IgnoringMessageHandler_as_MessageSendEventsProvider(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_MessageSendEventsProvider")] public static extern long IgnoringMessageHandler_as_MessageSendEventsProvider(long _this_arg);
	// struct LDKRoutingMessageHandler IgnoringMessageHandler_as_RoutingMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_RoutingMessageHandler")] public static extern long IgnoringMessageHandler_as_RoutingMessageHandler(long _this_arg);
	// struct LDKOnionMessageHandler IgnoringMessageHandler_as_OnionMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_OnionMessageHandler")] public static extern long IgnoringMessageHandler_as_OnionMessageHandler(long _this_arg);
	// struct LDKOffersMessageHandler IgnoringMessageHandler_as_OffersMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_OffersMessageHandler")] public static extern long IgnoringMessageHandler_as_OffersMessageHandler(long _this_arg);
	// struct LDKAsyncPaymentsMessageHandler IgnoringMessageHandler_as_AsyncPaymentsMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_AsyncPaymentsMessageHandler")] public static extern long IgnoringMessageHandler_as_AsyncPaymentsMessageHandler(long _this_arg);
	// struct LDKDNSResolverMessageHandler IgnoringMessageHandler_as_DNSResolverMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_DNSResolverMessageHandler")] public static extern long IgnoringMessageHandler_as_DNSResolverMessageHandler(long _this_arg);
	// struct LDKCustomOnionMessageHandler IgnoringMessageHandler_as_CustomOnionMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomOnionMessageHandler")] public static extern long IgnoringMessageHandler_as_CustomOnionMessageHandler(long _this_arg);
	// struct LDKCustomMessageReader IgnoringMessageHandler_as_CustomMessageReader(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomMessageReader")] public static extern long IgnoringMessageHandler_as_CustomMessageReader(long _this_arg);
	// struct LDKCustomMessageHandler IgnoringMessageHandler_as_CustomMessageHandler(const struct LDKIgnoringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IgnoringMessageHandler_as_CustomMessageHandler")] public static extern long IgnoringMessageHandler_as_CustomMessageHandler(long _this_arg);
	// void ErroringMessageHandler_free(struct LDKErroringMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_free")] public static extern void ErroringMessageHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKErroringMessageHandler ErroringMessageHandler_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_new")] public static extern long ErroringMessageHandler_new();
	// struct LDKMessageSendEventsProvider ErroringMessageHandler_as_MessageSendEventsProvider(const struct LDKErroringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_as_MessageSendEventsProvider")] public static extern long ErroringMessageHandler_as_MessageSendEventsProvider(long _this_arg);
	// struct LDKChannelMessageHandler ErroringMessageHandler_as_ChannelMessageHandler(const struct LDKErroringMessageHandler *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroringMessageHandler_as_ChannelMessageHandler")] public static extern long ErroringMessageHandler_as_ChannelMessageHandler(long _this_arg);
	// void MessageHandler_free(struct LDKMessageHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_free")] public static extern void MessageHandler_free(long _this_obj);
	// const struct LDKChannelMessageHandler *MessageHandler_get_chan_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_chan_handler")] public static extern long MessageHandler_get_chan_handler(long _this_ptr);
	// void MessageHandler_set_chan_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKChannelMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_chan_handler")] public static extern void MessageHandler_set_chan_handler(long _this_ptr, long _val);
	// const struct LDKRoutingMessageHandler *MessageHandler_get_route_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_route_handler")] public static extern long MessageHandler_get_route_handler(long _this_ptr);
	// void MessageHandler_set_route_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKRoutingMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_route_handler")] public static extern void MessageHandler_set_route_handler(long _this_ptr, long _val);
	// const struct LDKOnionMessageHandler *MessageHandler_get_onion_message_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_onion_message_handler")] public static extern long MessageHandler_get_onion_message_handler(long _this_ptr);
	// void MessageHandler_set_onion_message_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKOnionMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_onion_message_handler")] public static extern void MessageHandler_set_onion_message_handler(long _this_ptr, long _val);
	// const struct LDKCustomMessageHandler *MessageHandler_get_custom_message_handler(const struct LDKMessageHandler *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_get_custom_message_handler")] public static extern long MessageHandler_get_custom_message_handler(long _this_ptr);
	// void MessageHandler_set_custom_message_handler(struct LDKMessageHandler *NONNULL_PTR this_ptr, struct LDKCustomMessageHandler val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_set_custom_message_handler")] public static extern void MessageHandler_set_custom_message_handler(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKMessageHandler MessageHandler_new(struct LDKChannelMessageHandler chan_handler_arg, struct LDKRoutingMessageHandler route_handler_arg, struct LDKOnionMessageHandler onion_message_handler_arg, struct LDKCustomMessageHandler custom_message_handler_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageHandler_new")] public static extern long MessageHandler_new(long _chan_handler_arg, long _route_handler_arg, long _onion_message_handler_arg, long _custom_message_handler_arg);
	// uint64_t SocketDescriptor_clone_ptr(LDKSocketDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_clone_ptr")] public static extern long SocketDescriptor_clone_ptr(long _arg);
	// struct LDKSocketDescriptor SocketDescriptor_clone(const struct LDKSocketDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_clone")] public static extern long SocketDescriptor_clone(long _orig);
	// void SocketDescriptor_free(struct LDKSocketDescriptor this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SocketDescriptor_free")] public static extern void SocketDescriptor_free(long _this_ptr);
	// void PeerDetails_free(struct LDKPeerDetails this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_free")] public static extern void PeerDetails_free(long _this_obj);
	// struct LDKPublicKey PeerDetails_get_counterparty_node_id(const struct LDKPeerDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_get_counterparty_node_id")] public static extern long PeerDetails_get_counterparty_node_id(long _this_ptr);
	// void PeerDetails_set_counterparty_node_id(struct LDKPeerDetails *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_set_counterparty_node_id")] public static extern void PeerDetails_set_counterparty_node_id(long _this_ptr, long _val);
	// struct LDKCOption_SocketAddressZ PeerDetails_get_socket_address(const struct LDKPeerDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_get_socket_address")] public static extern long PeerDetails_get_socket_address(long _this_ptr);
	// void PeerDetails_set_socket_address(struct LDKPeerDetails *NONNULL_PTR this_ptr, struct LDKCOption_SocketAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_set_socket_address")] public static extern void PeerDetails_set_socket_address(long _this_ptr, long _val);
	// struct LDKInitFeatures PeerDetails_get_init_features(const struct LDKPeerDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_get_init_features")] public static extern long PeerDetails_get_init_features(long _this_ptr);
	// void PeerDetails_set_init_features(struct LDKPeerDetails *NONNULL_PTR this_ptr, struct LDKInitFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_set_init_features")] public static extern void PeerDetails_set_init_features(long _this_ptr, long _val);
	// bool PeerDetails_get_is_inbound_connection(const struct LDKPeerDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_get_is_inbound_connection")] public static extern bool PeerDetails_get_is_inbound_connection(long _this_ptr);
	// void PeerDetails_set_is_inbound_connection(struct LDKPeerDetails *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_set_is_inbound_connection")] public static extern void PeerDetails_set_is_inbound_connection(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKPeerDetails PeerDetails_new(struct LDKPublicKey counterparty_node_id_arg, struct LDKCOption_SocketAddressZ socket_address_arg, struct LDKInitFeatures init_features_arg, bool is_inbound_connection_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerDetails_new")] public static extern long PeerDetails_new(long _counterparty_node_id_arg, long _socket_address_arg, long _init_features_arg, bool _is_inbound_connection_arg);
	// void PeerHandleError_free(struct LDKPeerHandleError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_free")] public static extern void PeerHandleError_free(long _this_obj);
	// MUST_USE_RES struct LDKPeerHandleError PeerHandleError_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_new")] public static extern long PeerHandleError_new();
	// uint64_t PeerHandleError_clone_ptr(LDKPeerHandleError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_clone_ptr")] public static extern long PeerHandleError_clone_ptr(long _arg);
	// struct LDKPeerHandleError PeerHandleError_clone(const struct LDKPeerHandleError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_clone")] public static extern long PeerHandleError_clone(long _orig);
	// struct LDKStr PeerHandleError_to_str(const struct LDKPeerHandleError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerHandleError_to_str")] public static extern long PeerHandleError_to_str(long _o);
	// void PeerManager_free(struct LDKPeerManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_free")] public static extern void PeerManager_free(long _this_obj);
	// MUST_USE_RES struct LDKPeerManager PeerManager_new(struct LDKMessageHandler message_handler, uint32_t current_time, const uint8_t (*ephemeral_random_data)[32], struct LDKLogger logger, struct LDKNodeSigner node_signer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new")] public static extern long PeerManager_new(long _message_handler, int _current_time, long _ephemeral_random_data, long _logger, long _node_signer);
	// MUST_USE_RES struct LDKCVec_PeerDetailsZ PeerManager_list_peers(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_list_peers")] public static extern long PeerManager_list_peers(long _this_arg);
	// MUST_USE_RES struct LDKPeerDetails PeerManager_peer_by_node_id(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_peer_by_node_id")] public static extern long PeerManager_peer_by_node_id(long _this_arg, long _their_node_id);
	// MUST_USE_RES struct LDKCResult_CVec_u8ZPeerHandleErrorZ PeerManager_new_outbound_connection(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKPublicKey their_node_id, struct LDKSocketDescriptor descriptor, struct LDKCOption_SocketAddressZ remote_network_address);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new_outbound_connection")] public static extern long PeerManager_new_outbound_connection(long _this_arg, long _their_node_id, long _descriptor, long _remote_network_address);
	// MUST_USE_RES struct LDKCResult_NonePeerHandleErrorZ PeerManager_new_inbound_connection(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor descriptor, struct LDKCOption_SocketAddressZ remote_network_address);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_new_inbound_connection")] public static extern long PeerManager_new_inbound_connection(long _this_arg, long _descriptor, long _remote_network_address);
	// MUST_USE_RES struct LDKCResult_NonePeerHandleErrorZ PeerManager_write_buffer_space_avail(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_write_buffer_space_avail")] public static extern long PeerManager_write_buffer_space_avail(long _this_arg, long _descriptor);
	// MUST_USE_RES struct LDKCResult_boolPeerHandleErrorZ PeerManager_read_event(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKSocketDescriptor *NONNULL_PTR peer_descriptor, struct LDKu8slice data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_read_event")] public static extern long PeerManager_read_event(long _this_arg, long _peer_descriptor, long _data);
	// void PeerManager_process_events(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_process_events")] public static extern void PeerManager_process_events(long _this_arg);
	// void PeerManager_socket_disconnected(const struct LDKPeerManager *NONNULL_PTR this_arg, const struct LDKSocketDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_socket_disconnected")] public static extern void PeerManager_socket_disconnected(long _this_arg, long _descriptor);
	// void PeerManager_disconnect_by_node_id(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKPublicKey node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_disconnect_by_node_id")] public static extern void PeerManager_disconnect_by_node_id(long _this_arg, long _node_id);
	// void PeerManager_disconnect_all_peers(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_disconnect_all_peers")] public static extern void PeerManager_disconnect_all_peers(long _this_arg);
	// void PeerManager_timer_tick_occurred(const struct LDKPeerManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_timer_tick_occurred")] public static extern void PeerManager_timer_tick_occurred(long _this_arg);
	// void PeerManager_broadcast_node_announcement(const struct LDKPeerManager *NONNULL_PTR this_arg, struct LDKThreeBytes rgb, struct LDKThirtyTwoBytes alias, struct LDKCVec_SocketAddressZ addresses);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeerManager_broadcast_node_announcement")] public static extern void PeerManager_broadcast_node_announcement(long _this_arg, long _rgb, long _alias, long _addresses);
	// uint64_t htlc_success_tx_weight(const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_htlc_success_tx_weight")] public static extern long htlc_success_tx_weight(long _channel_type_features);
	// uint64_t htlc_timeout_tx_weight(const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_htlc_timeout_tx_weight")] public static extern long htlc_timeout_tx_weight(long _channel_type_features);
	// enum LDKHTLCClaim HTLCClaim_clone(const enum LDKHTLCClaim *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_clone")] public static extern HTLCClaim HTLCClaim_clone(long _orig);
	// enum LDKHTLCClaim HTLCClaim_offered_timeout(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_offered_timeout")] public static extern HTLCClaim HTLCClaim_offered_timeout();
	// enum LDKHTLCClaim HTLCClaim_offered_preimage(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_offered_preimage")] public static extern HTLCClaim HTLCClaim_offered_preimage();
	// enum LDKHTLCClaim HTLCClaim_accepted_timeout(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_accepted_timeout")] public static extern HTLCClaim HTLCClaim_accepted_timeout();
	// enum LDKHTLCClaim HTLCClaim_accepted_preimage(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_accepted_preimage")] public static extern HTLCClaim HTLCClaim_accepted_preimage();
	// enum LDKHTLCClaim HTLCClaim_revocation(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_revocation")] public static extern HTLCClaim HTLCClaim_revocation();
	// bool HTLCClaim_eq(const enum LDKHTLCClaim *NONNULL_PTR a, const enum LDKHTLCClaim *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_eq")] public static extern bool HTLCClaim_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCOption_HTLCClaimZ HTLCClaim_from_witness(struct LDKWitness witness);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCClaim_from_witness")] public static extern long HTLCClaim_from_witness(long _witness);
	// struct LDKThirtyTwoBytes build_commitment_secret(const uint8_t (*commitment_seed)[32], uint64_t idx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_commitment_secret")] public static extern long build_commitment_secret(long _commitment_seed, long _idx);
	// struct LDKTransaction build_closing_transaction(uint64_t to_holder_value_sat, uint64_t to_counterparty_value_sat, struct LDKCVec_u8Z to_holder_script, struct LDKCVec_u8Z to_counterparty_script, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_closing_transaction")] public static extern long build_closing_transaction(long _to_holder_value_sat, long _to_counterparty_value_sat, long _to_holder_script, long _to_counterparty_script, long _funding_outpoint);
	// void CounterpartyCommitmentSecrets_free(struct LDKCounterpartyCommitmentSecrets this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_free")] public static extern void CounterpartyCommitmentSecrets_free(long _this_obj);
	// uint64_t CounterpartyCommitmentSecrets_clone_ptr(LDKCounterpartyCommitmentSecrets *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_clone_ptr")] public static extern long CounterpartyCommitmentSecrets_clone_ptr(long _arg);
	// struct LDKCounterpartyCommitmentSecrets CounterpartyCommitmentSecrets_clone(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_clone")] public static extern long CounterpartyCommitmentSecrets_clone(long _orig);
	// MUST_USE_RES struct LDKCounterpartyCommitmentSecrets CounterpartyCommitmentSecrets_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_new")] public static extern long CounterpartyCommitmentSecrets_new();
	// MUST_USE_RES uint64_t CounterpartyCommitmentSecrets_get_min_seen_secret(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_get_min_seen_secret")] public static extern long CounterpartyCommitmentSecrets_get_min_seen_secret(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ CounterpartyCommitmentSecrets_provide_secret(struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg, uint64_t idx, struct LDKThirtyTwoBytes secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_provide_secret")] public static extern long CounterpartyCommitmentSecrets_provide_secret(long _this_arg, long _idx, long _secret);
	// MUST_USE_RES struct LDKThirtyTwoBytes CounterpartyCommitmentSecrets_get_secret(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR this_arg, uint64_t idx);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_get_secret")] public static extern long CounterpartyCommitmentSecrets_get_secret(long _this_arg, long _idx);
	// struct LDKCVec_u8Z CounterpartyCommitmentSecrets_write(const struct LDKCounterpartyCommitmentSecrets *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_write")] public static extern long CounterpartyCommitmentSecrets_write(long _obj);
	// struct LDKCResult_CounterpartyCommitmentSecretsDecodeErrorZ CounterpartyCommitmentSecrets_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyCommitmentSecrets_read")] public static extern long CounterpartyCommitmentSecrets_read(long _ser);
	// struct LDKSecretKey derive_private_key(struct LDKPublicKey per_commitment_point, const uint8_t (*base_secret)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_private_key")] public static extern long derive_private_key(long _per_commitment_point, long _base_secret);
	// struct LDKSecretKey derive_private_revocation_key(const uint8_t (*per_commitment_secret)[32], const uint8_t (*countersignatory_revocation_base_secret)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_derive_private_revocation_key")] public static extern long derive_private_revocation_key(long _per_commitment_secret, long _countersignatory_revocation_base_secret);
	// void TxCreationKeys_free(struct LDKTxCreationKeys this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_free")] public static extern void TxCreationKeys_free(long _this_obj);
	// struct LDKPublicKey TxCreationKeys_get_per_commitment_point(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_per_commitment_point")] public static extern long TxCreationKeys_get_per_commitment_point(long _this_ptr);
	// void TxCreationKeys_set_per_commitment_point(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_per_commitment_point")] public static extern void TxCreationKeys_set_per_commitment_point(long _this_ptr, long _val);
	// struct LDKRevocationKey TxCreationKeys_get_revocation_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_revocation_key")] public static extern long TxCreationKeys_get_revocation_key(long _this_ptr);
	// void TxCreationKeys_set_revocation_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKRevocationKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_revocation_key")] public static extern void TxCreationKeys_set_revocation_key(long _this_ptr, long _val);
	// struct LDKHtlcKey TxCreationKeys_get_broadcaster_htlc_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_broadcaster_htlc_key")] public static extern long TxCreationKeys_get_broadcaster_htlc_key(long _this_ptr);
	// void TxCreationKeys_set_broadcaster_htlc_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKHtlcKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_broadcaster_htlc_key")] public static extern void TxCreationKeys_set_broadcaster_htlc_key(long _this_ptr, long _val);
	// struct LDKHtlcKey TxCreationKeys_get_countersignatory_htlc_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_countersignatory_htlc_key")] public static extern long TxCreationKeys_get_countersignatory_htlc_key(long _this_ptr);
	// void TxCreationKeys_set_countersignatory_htlc_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKHtlcKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_countersignatory_htlc_key")] public static extern void TxCreationKeys_set_countersignatory_htlc_key(long _this_ptr, long _val);
	// struct LDKDelayedPaymentKey TxCreationKeys_get_broadcaster_delayed_payment_key(const struct LDKTxCreationKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_get_broadcaster_delayed_payment_key")] public static extern long TxCreationKeys_get_broadcaster_delayed_payment_key(long _this_ptr);
	// void TxCreationKeys_set_broadcaster_delayed_payment_key(struct LDKTxCreationKeys *NONNULL_PTR this_ptr, struct LDKDelayedPaymentKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_set_broadcaster_delayed_payment_key")] public static extern void TxCreationKeys_set_broadcaster_delayed_payment_key(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_new(struct LDKPublicKey per_commitment_point_arg, struct LDKRevocationKey revocation_key_arg, struct LDKHtlcKey broadcaster_htlc_key_arg, struct LDKHtlcKey countersignatory_htlc_key_arg, struct LDKDelayedPaymentKey broadcaster_delayed_payment_key_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_new")] public static extern long TxCreationKeys_new(long _per_commitment_point_arg, long _revocation_key_arg, long _broadcaster_htlc_key_arg, long _countersignatory_htlc_key_arg, long _broadcaster_delayed_payment_key_arg);
	// bool TxCreationKeys_eq(const struct LDKTxCreationKeys *NONNULL_PTR a, const struct LDKTxCreationKeys *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_eq")] public static extern bool TxCreationKeys_eq(long _a, long _b);
	// uint64_t TxCreationKeys_clone_ptr(LDKTxCreationKeys *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_clone_ptr")] public static extern long TxCreationKeys_clone_ptr(long _arg);
	// struct LDKTxCreationKeys TxCreationKeys_clone(const struct LDKTxCreationKeys *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_clone")] public static extern long TxCreationKeys_clone(long _orig);
	// struct LDKCVec_u8Z TxCreationKeys_write(const struct LDKTxCreationKeys *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_write")] public static extern long TxCreationKeys_write(long _obj);
	// struct LDKCResult_TxCreationKeysDecodeErrorZ TxCreationKeys_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_read")] public static extern long TxCreationKeys_read(long _ser);
	// void ChannelPublicKeys_free(struct LDKChannelPublicKeys this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_free")] public static extern void ChannelPublicKeys_free(long _this_obj);
	// struct LDKPublicKey ChannelPublicKeys_get_funding_pubkey(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_funding_pubkey")] public static extern long ChannelPublicKeys_get_funding_pubkey(long _this_ptr);
	// void ChannelPublicKeys_set_funding_pubkey(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_funding_pubkey")] public static extern void ChannelPublicKeys_set_funding_pubkey(long _this_ptr, long _val);
	// struct LDKRevocationBasepoint ChannelPublicKeys_get_revocation_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_revocation_basepoint")] public static extern long ChannelPublicKeys_get_revocation_basepoint(long _this_ptr);
	// void ChannelPublicKeys_set_revocation_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKRevocationBasepoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_revocation_basepoint")] public static extern void ChannelPublicKeys_set_revocation_basepoint(long _this_ptr, long _val);
	// struct LDKPublicKey ChannelPublicKeys_get_payment_point(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_payment_point")] public static extern long ChannelPublicKeys_get_payment_point(long _this_ptr);
	// void ChannelPublicKeys_set_payment_point(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_payment_point")] public static extern void ChannelPublicKeys_set_payment_point(long _this_ptr, long _val);
	// struct LDKDelayedPaymentBasepoint ChannelPublicKeys_get_delayed_payment_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_delayed_payment_basepoint")] public static extern long ChannelPublicKeys_get_delayed_payment_basepoint(long _this_ptr);
	// void ChannelPublicKeys_set_delayed_payment_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKDelayedPaymentBasepoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_delayed_payment_basepoint")] public static extern void ChannelPublicKeys_set_delayed_payment_basepoint(long _this_ptr, long _val);
	// struct LDKHtlcBasepoint ChannelPublicKeys_get_htlc_basepoint(const struct LDKChannelPublicKeys *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_get_htlc_basepoint")] public static extern long ChannelPublicKeys_get_htlc_basepoint(long _this_ptr);
	// void ChannelPublicKeys_set_htlc_basepoint(struct LDKChannelPublicKeys *NONNULL_PTR this_ptr, struct LDKHtlcBasepoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_set_htlc_basepoint")] public static extern void ChannelPublicKeys_set_htlc_basepoint(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelPublicKeys ChannelPublicKeys_new(struct LDKPublicKey funding_pubkey_arg, struct LDKRevocationBasepoint revocation_basepoint_arg, struct LDKPublicKey payment_point_arg, struct LDKDelayedPaymentBasepoint delayed_payment_basepoint_arg, struct LDKHtlcBasepoint htlc_basepoint_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_new")] public static extern long ChannelPublicKeys_new(long _funding_pubkey_arg, long _revocation_basepoint_arg, long _payment_point_arg, long _delayed_payment_basepoint_arg, long _htlc_basepoint_arg);
	// uint64_t ChannelPublicKeys_clone_ptr(LDKChannelPublicKeys *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_clone_ptr")] public static extern long ChannelPublicKeys_clone_ptr(long _arg);
	// struct LDKChannelPublicKeys ChannelPublicKeys_clone(const struct LDKChannelPublicKeys *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_clone")] public static extern long ChannelPublicKeys_clone(long _orig);
	// uint64_t ChannelPublicKeys_hash(const struct LDKChannelPublicKeys *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_hash")] public static extern long ChannelPublicKeys_hash(long _o);
	// bool ChannelPublicKeys_eq(const struct LDKChannelPublicKeys *NONNULL_PTR a, const struct LDKChannelPublicKeys *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_eq")] public static extern bool ChannelPublicKeys_eq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelPublicKeys_write(const struct LDKChannelPublicKeys *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_write")] public static extern long ChannelPublicKeys_write(long _obj);
	// struct LDKCResult_ChannelPublicKeysDecodeErrorZ ChannelPublicKeys_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelPublicKeys_read")] public static extern long ChannelPublicKeys_read(long _ser);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_derive_new(struct LDKPublicKey per_commitment_point, const struct LDKDelayedPaymentBasepoint *NONNULL_PTR broadcaster_delayed_payment_base, const struct LDKHtlcBasepoint *NONNULL_PTR broadcaster_htlc_base, const struct LDKRevocationBasepoint *NONNULL_PTR countersignatory_revocation_base, const struct LDKHtlcBasepoint *NONNULL_PTR countersignatory_htlc_base);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_derive_new")] public static extern long TxCreationKeys_derive_new(long _per_commitment_point, long _broadcaster_delayed_payment_base, long _broadcaster_htlc_base, long _countersignatory_revocation_base, long _countersignatory_htlc_base);
	// MUST_USE_RES struct LDKTxCreationKeys TxCreationKeys_from_channel_static_keys(struct LDKPublicKey per_commitment_point, const struct LDKChannelPublicKeys *NONNULL_PTR broadcaster_keys, const struct LDKChannelPublicKeys *NONNULL_PTR countersignatory_keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TxCreationKeys_from_channel_static_keys")] public static extern long TxCreationKeys_from_channel_static_keys(long _per_commitment_point, long _broadcaster_keys, long _countersignatory_keys);
	// struct LDKCVec_u8Z get_revokeable_redeemscript(const struct LDKRevocationKey *NONNULL_PTR revocation_key, uint16_t contest_delay, const struct LDKDelayedPaymentKey *NONNULL_PTR broadcaster_delayed_payment_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_revokeable_redeemscript")] public static extern long get_revokeable_redeemscript(long _revocation_key, short _contest_delay, long _broadcaster_delayed_payment_key);
	// struct LDKCVec_u8Z get_counterparty_payment_script(const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features, struct LDKPublicKey payment_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_counterparty_payment_script")] public static extern long get_counterparty_payment_script(long _channel_type_features, long _payment_key);
	// void HTLCOutputInCommitment_free(struct LDKHTLCOutputInCommitment this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_free")] public static extern void HTLCOutputInCommitment_free(long _this_obj);
	// bool HTLCOutputInCommitment_get_offered(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_offered")] public static extern bool HTLCOutputInCommitment_get_offered(long _this_ptr);
	// void HTLCOutputInCommitment_set_offered(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_offered")] public static extern void HTLCOutputInCommitment_set_offered(long _this_ptr, bool _val);
	// uint64_t HTLCOutputInCommitment_get_amount_msat(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_amount_msat")] public static extern long HTLCOutputInCommitment_get_amount_msat(long _this_ptr);
	// void HTLCOutputInCommitment_set_amount_msat(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_amount_msat")] public static extern void HTLCOutputInCommitment_set_amount_msat(long _this_ptr, long _val);
	// uint32_t HTLCOutputInCommitment_get_cltv_expiry(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_cltv_expiry")] public static extern int HTLCOutputInCommitment_get_cltv_expiry(long _this_ptr);
	// void HTLCOutputInCommitment_set_cltv_expiry(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_cltv_expiry")] public static extern void HTLCOutputInCommitment_set_cltv_expiry(long _this_ptr, int _val);
	// const uint8_t (*HTLCOutputInCommitment_get_payment_hash(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_payment_hash")] public static extern long HTLCOutputInCommitment_get_payment_hash(long _this_ptr);
	// void HTLCOutputInCommitment_set_payment_hash(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_payment_hash")] public static extern void HTLCOutputInCommitment_set_payment_hash(long _this_ptr, long _val);
	// struct LDKCOption_u32Z HTLCOutputInCommitment_get_transaction_output_index(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_get_transaction_output_index")] public static extern long HTLCOutputInCommitment_get_transaction_output_index(long _this_ptr);
	// void HTLCOutputInCommitment_set_transaction_output_index(struct LDKHTLCOutputInCommitment *NONNULL_PTR this_ptr, struct LDKCOption_u32Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_set_transaction_output_index")] public static extern void HTLCOutputInCommitment_set_transaction_output_index(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHTLCOutputInCommitment HTLCOutputInCommitment_new(bool offered_arg, uint64_t amount_msat_arg, uint32_t cltv_expiry_arg, struct LDKThirtyTwoBytes payment_hash_arg, struct LDKCOption_u32Z transaction_output_index_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_new")] public static extern long HTLCOutputInCommitment_new(bool _offered_arg, long _amount_msat_arg, int _cltv_expiry_arg, long _payment_hash_arg, long _transaction_output_index_arg);
	// uint64_t HTLCOutputInCommitment_clone_ptr(LDKHTLCOutputInCommitment *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_clone_ptr")] public static extern long HTLCOutputInCommitment_clone_ptr(long _arg);
	// struct LDKHTLCOutputInCommitment HTLCOutputInCommitment_clone(const struct LDKHTLCOutputInCommitment *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_clone")] public static extern long HTLCOutputInCommitment_clone(long _orig);
	// bool HTLCOutputInCommitment_eq(const struct LDKHTLCOutputInCommitment *NONNULL_PTR a, const struct LDKHTLCOutputInCommitment *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_eq")] public static extern bool HTLCOutputInCommitment_eq(long _a, long _b);
	// MUST_USE_RES uint64_t HTLCOutputInCommitment_to_bitcoin_amount(const struct LDKHTLCOutputInCommitment *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_to_bitcoin_amount")] public static extern long HTLCOutputInCommitment_to_bitcoin_amount(long _this_arg);
	// struct LDKCVec_u8Z HTLCOutputInCommitment_write(const struct LDKHTLCOutputInCommitment *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_write")] public static extern long HTLCOutputInCommitment_write(long _obj);
	// struct LDKCResult_HTLCOutputInCommitmentDecodeErrorZ HTLCOutputInCommitment_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCOutputInCommitment_read")] public static extern long HTLCOutputInCommitment_read(long _ser);
	// struct LDKCVec_u8Z get_htlc_redeemscript(const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc, const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features, const struct LDKTxCreationKeys *NONNULL_PTR keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_htlc_redeemscript")] public static extern long get_htlc_redeemscript(long _htlc, long _channel_type_features, long _keys);
	// struct LDKCVec_u8Z make_funding_redeemscript(struct LDKPublicKey broadcaster, struct LDKPublicKey countersignatory);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_make_funding_redeemscript")] public static extern long make_funding_redeemscript(long _broadcaster, long _countersignatory);
	// struct LDKTransaction build_htlc_transaction(const uint8_t (*commitment_txid)[32], uint32_t feerate_per_kw, uint16_t contest_delay, const struct LDKHTLCOutputInCommitment *NONNULL_PTR htlc, const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features, const struct LDKDelayedPaymentKey *NONNULL_PTR broadcaster_delayed_payment_key, const struct LDKRevocationKey *NONNULL_PTR revocation_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_htlc_transaction")] public static extern long build_htlc_transaction(long _commitment_txid, int _feerate_per_kw, short _contest_delay, long _htlc, long _channel_type_features, long _broadcaster_delayed_payment_key, long _revocation_key);
	// struct LDKWitness build_htlc_input_witness(struct LDKECDSASignature local_sig, struct LDKECDSASignature remote_sig, struct LDKCOption_ThirtyTwoBytesZ preimage, struct LDKu8slice redeem_script, const struct LDKChannelTypeFeatures *NONNULL_PTR channel_type_features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_htlc_input_witness")] public static extern long build_htlc_input_witness(long _local_sig, long _remote_sig, long _preimage, long _redeem_script, long _channel_type_features);
	// struct LDKCVec_u8Z get_to_countersignatory_with_anchors_redeemscript(struct LDKPublicKey payment_point);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_to_countersignatory_with_anchors_redeemscript")] public static extern long get_to_countersignatory_with_anchors_redeemscript(long _payment_point);
	// struct LDKCVec_u8Z get_anchor_redeemscript(struct LDKPublicKey funding_pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_anchor_redeemscript")] public static extern long get_anchor_redeemscript(long _funding_pubkey);
	// struct LDKWitness build_anchor_input_witness(struct LDKPublicKey funding_key, struct LDKECDSASignature funding_sig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_anchor_input_witness")] public static extern long build_anchor_input_witness(long _funding_key, long _funding_sig);
	// void ChannelTransactionParameters_free(struct LDKChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_free")] public static extern void ChannelTransactionParameters_free(long _this_obj);
	// struct LDKChannelPublicKeys ChannelTransactionParameters_get_holder_pubkeys(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_holder_pubkeys")] public static extern long ChannelTransactionParameters_get_holder_pubkeys(long _this_ptr);
	// void ChannelTransactionParameters_set_holder_pubkeys(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelPublicKeys val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_holder_pubkeys")] public static extern void ChannelTransactionParameters_set_holder_pubkeys(long _this_ptr, long _val);
	// uint16_t ChannelTransactionParameters_get_holder_selected_contest_delay(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_holder_selected_contest_delay")] public static extern short ChannelTransactionParameters_get_holder_selected_contest_delay(long _this_ptr);
	// void ChannelTransactionParameters_set_holder_selected_contest_delay(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_holder_selected_contest_delay")] public static extern void ChannelTransactionParameters_set_holder_selected_contest_delay(long _this_ptr, short _val);
	// bool ChannelTransactionParameters_get_is_outbound_from_holder(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_is_outbound_from_holder")] public static extern bool ChannelTransactionParameters_get_is_outbound_from_holder(long _this_ptr);
	// void ChannelTransactionParameters_set_is_outbound_from_holder(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_is_outbound_from_holder")] public static extern void ChannelTransactionParameters_set_is_outbound_from_holder(long _this_ptr, bool _val);
	// struct LDKCounterpartyChannelTransactionParameters ChannelTransactionParameters_get_counterparty_parameters(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_counterparty_parameters")] public static extern long ChannelTransactionParameters_get_counterparty_parameters(long _this_ptr);
	// void ChannelTransactionParameters_set_counterparty_parameters(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKCounterpartyChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_counterparty_parameters")] public static extern void ChannelTransactionParameters_set_counterparty_parameters(long _this_ptr, long _val);
	// struct LDKOutPoint ChannelTransactionParameters_get_funding_outpoint(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_funding_outpoint")] public static extern long ChannelTransactionParameters_get_funding_outpoint(long _this_ptr);
	// void ChannelTransactionParameters_set_funding_outpoint(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_funding_outpoint")] public static extern void ChannelTransactionParameters_set_funding_outpoint(long _this_ptr, long _val);
	// struct LDKChannelTypeFeatures ChannelTransactionParameters_get_channel_type_features(const struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_get_channel_type_features")] public static extern long ChannelTransactionParameters_get_channel_type_features(long _this_ptr);
	// void ChannelTransactionParameters_set_channel_type_features(struct LDKChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelTypeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_set_channel_type_features")] public static extern void ChannelTransactionParameters_set_channel_type_features(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelTransactionParameters ChannelTransactionParameters_new(struct LDKChannelPublicKeys holder_pubkeys_arg, uint16_t holder_selected_contest_delay_arg, bool is_outbound_from_holder_arg, struct LDKCounterpartyChannelTransactionParameters counterparty_parameters_arg, struct LDKOutPoint funding_outpoint_arg, struct LDKChannelTypeFeatures channel_type_features_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_new")] public static extern long ChannelTransactionParameters_new(long _holder_pubkeys_arg, short _holder_selected_contest_delay_arg, bool _is_outbound_from_holder_arg, long _counterparty_parameters_arg, long _funding_outpoint_arg, long _channel_type_features_arg);
	// uint64_t ChannelTransactionParameters_clone_ptr(LDKChannelTransactionParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_clone_ptr")] public static extern long ChannelTransactionParameters_clone_ptr(long _arg);
	// struct LDKChannelTransactionParameters ChannelTransactionParameters_clone(const struct LDKChannelTransactionParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_clone")] public static extern long ChannelTransactionParameters_clone(long _orig);
	// uint64_t ChannelTransactionParameters_hash(const struct LDKChannelTransactionParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_hash")] public static extern long ChannelTransactionParameters_hash(long _o);
	// bool ChannelTransactionParameters_eq(const struct LDKChannelTransactionParameters *NONNULL_PTR a, const struct LDKChannelTransactionParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_eq")] public static extern bool ChannelTransactionParameters_eq(long _a, long _b);
	// void CounterpartyChannelTransactionParameters_free(struct LDKCounterpartyChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_free")] public static extern void CounterpartyChannelTransactionParameters_free(long _this_obj);
	// struct LDKChannelPublicKeys CounterpartyChannelTransactionParameters_get_pubkeys(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_get_pubkeys")] public static extern long CounterpartyChannelTransactionParameters_get_pubkeys(long _this_ptr);
	// void CounterpartyChannelTransactionParameters_set_pubkeys(struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr, struct LDKChannelPublicKeys val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_set_pubkeys")] public static extern void CounterpartyChannelTransactionParameters_set_pubkeys(long _this_ptr, long _val);
	// uint16_t CounterpartyChannelTransactionParameters_get_selected_contest_delay(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_get_selected_contest_delay")] public static extern short CounterpartyChannelTransactionParameters_get_selected_contest_delay(long _this_ptr);
	// void CounterpartyChannelTransactionParameters_set_selected_contest_delay(struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_set_selected_contest_delay")] public static extern void CounterpartyChannelTransactionParameters_set_selected_contest_delay(long _this_ptr, short _val);
	// MUST_USE_RES struct LDKCounterpartyChannelTransactionParameters CounterpartyChannelTransactionParameters_new(struct LDKChannelPublicKeys pubkeys_arg, uint16_t selected_contest_delay_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_new")] public static extern long CounterpartyChannelTransactionParameters_new(long _pubkeys_arg, short _selected_contest_delay_arg);
	// uint64_t CounterpartyChannelTransactionParameters_clone_ptr(LDKCounterpartyChannelTransactionParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_clone_ptr")] public static extern long CounterpartyChannelTransactionParameters_clone_ptr(long _arg);
	// struct LDKCounterpartyChannelTransactionParameters CounterpartyChannelTransactionParameters_clone(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_clone")] public static extern long CounterpartyChannelTransactionParameters_clone(long _orig);
	// uint64_t CounterpartyChannelTransactionParameters_hash(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_hash")] public static extern long CounterpartyChannelTransactionParameters_hash(long _o);
	// bool CounterpartyChannelTransactionParameters_eq(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR a, const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_eq")] public static extern bool CounterpartyChannelTransactionParameters_eq(long _a, long _b);
	// MUST_USE_RES bool ChannelTransactionParameters_is_populated(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_is_populated")] public static extern bool ChannelTransactionParameters_is_populated(long _this_arg);
	// MUST_USE_RES struct LDKDirectedChannelTransactionParameters ChannelTransactionParameters_as_holder_broadcastable(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_as_holder_broadcastable")] public static extern long ChannelTransactionParameters_as_holder_broadcastable(long _this_arg);
	// MUST_USE_RES struct LDKDirectedChannelTransactionParameters ChannelTransactionParameters_as_counterparty_broadcastable(const struct LDKChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_as_counterparty_broadcastable")] public static extern long ChannelTransactionParameters_as_counterparty_broadcastable(long _this_arg);
	// struct LDKCVec_u8Z CounterpartyChannelTransactionParameters_write(const struct LDKCounterpartyChannelTransactionParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_write")] public static extern long CounterpartyChannelTransactionParameters_write(long _obj);
	// struct LDKCResult_CounterpartyChannelTransactionParametersDecodeErrorZ CounterpartyChannelTransactionParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CounterpartyChannelTransactionParameters_read")] public static extern long CounterpartyChannelTransactionParameters_read(long _ser);
	// struct LDKCVec_u8Z ChannelTransactionParameters_write(const struct LDKChannelTransactionParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_write")] public static extern long ChannelTransactionParameters_write(long _obj);
	// struct LDKCResult_ChannelTransactionParametersDecodeErrorZ ChannelTransactionParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTransactionParameters_read")] public static extern long ChannelTransactionParameters_read(long _ser);
	// void DirectedChannelTransactionParameters_free(struct LDKDirectedChannelTransactionParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_free")] public static extern void DirectedChannelTransactionParameters_free(long _this_obj);
	// MUST_USE_RES struct LDKChannelPublicKeys DirectedChannelTransactionParameters_broadcaster_pubkeys(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_broadcaster_pubkeys")] public static extern long DirectedChannelTransactionParameters_broadcaster_pubkeys(long _this_arg);
	// MUST_USE_RES struct LDKChannelPublicKeys DirectedChannelTransactionParameters_countersignatory_pubkeys(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_countersignatory_pubkeys")] public static extern long DirectedChannelTransactionParameters_countersignatory_pubkeys(long _this_arg);
	// MUST_USE_RES uint16_t DirectedChannelTransactionParameters_contest_delay(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_contest_delay")] public static extern short DirectedChannelTransactionParameters_contest_delay(long _this_arg);
	// MUST_USE_RES bool DirectedChannelTransactionParameters_is_outbound(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_is_outbound")] public static extern bool DirectedChannelTransactionParameters_is_outbound(long _this_arg);
	// MUST_USE_RES struct LDKOutPoint DirectedChannelTransactionParameters_funding_outpoint(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_funding_outpoint")] public static extern long DirectedChannelTransactionParameters_funding_outpoint(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures DirectedChannelTransactionParameters_channel_type_features(const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelTransactionParameters_channel_type_features")] public static extern long DirectedChannelTransactionParameters_channel_type_features(long _this_arg);
	// void HolderCommitmentTransaction_free(struct LDKHolderCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_free")] public static extern void HolderCommitmentTransaction_free(long _this_obj);
	// struct LDKECDSASignature HolderCommitmentTransaction_get_counterparty_sig(const struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_get_counterparty_sig")] public static extern long HolderCommitmentTransaction_get_counterparty_sig(long _this_ptr);
	// void HolderCommitmentTransaction_set_counterparty_sig(struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_set_counterparty_sig")] public static extern void HolderCommitmentTransaction_set_counterparty_sig(long _this_ptr, long _val);
	// struct LDKCVec_ECDSASignatureZ HolderCommitmentTransaction_get_counterparty_htlc_sigs(const struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_get_counterparty_htlc_sigs")] public static extern long HolderCommitmentTransaction_get_counterparty_htlc_sigs(long _this_ptr);
	// void HolderCommitmentTransaction_set_counterparty_htlc_sigs(struct LDKHolderCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKCVec_ECDSASignatureZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_set_counterparty_htlc_sigs")] public static extern void HolderCommitmentTransaction_set_counterparty_htlc_sigs(long _this_ptr, long _val);
	// uint64_t HolderCommitmentTransaction_clone_ptr(LDKHolderCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_clone_ptr")] public static extern long HolderCommitmentTransaction_clone_ptr(long _arg);
	// struct LDKHolderCommitmentTransaction HolderCommitmentTransaction_clone(const struct LDKHolderCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_clone")] public static extern long HolderCommitmentTransaction_clone(long _orig);
	// struct LDKCVec_u8Z HolderCommitmentTransaction_write(const struct LDKHolderCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_write")] public static extern long HolderCommitmentTransaction_write(long _obj);
	// struct LDKCResult_HolderCommitmentTransactionDecodeErrorZ HolderCommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_read")] public static extern long HolderCommitmentTransaction_read(long _ser);
	// MUST_USE_RES struct LDKHolderCommitmentTransaction HolderCommitmentTransaction_new(struct LDKCommitmentTransaction commitment_tx, struct LDKECDSASignature counterparty_sig, struct LDKCVec_ECDSASignatureZ counterparty_htlc_sigs, struct LDKPublicKey holder_funding_key, struct LDKPublicKey counterparty_funding_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HolderCommitmentTransaction_new")] public static extern long HolderCommitmentTransaction_new(long _commitment_tx, long _counterparty_sig, long _counterparty_htlc_sigs, long _holder_funding_key, long _counterparty_funding_key);
	// void BuiltCommitmentTransaction_free(struct LDKBuiltCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_free")] public static extern void BuiltCommitmentTransaction_free(long _this_obj);
	// struct LDKTransaction BuiltCommitmentTransaction_get_transaction(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_transaction")] public static extern long BuiltCommitmentTransaction_get_transaction(long _this_ptr);
	// void BuiltCommitmentTransaction_set_transaction(struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKTransaction val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_set_transaction")] public static extern void BuiltCommitmentTransaction_set_transaction(long _this_ptr, long _val);
	// const uint8_t (*BuiltCommitmentTransaction_get_txid(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_txid")] public static extern long BuiltCommitmentTransaction_get_txid(long _this_ptr);
	// void BuiltCommitmentTransaction_set_txid(struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_set_txid")] public static extern void BuiltCommitmentTransaction_set_txid(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBuiltCommitmentTransaction BuiltCommitmentTransaction_new(struct LDKTransaction transaction_arg, struct LDKThirtyTwoBytes txid_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_new")] public static extern long BuiltCommitmentTransaction_new(long _transaction_arg, long _txid_arg);
	// uint64_t BuiltCommitmentTransaction_clone_ptr(LDKBuiltCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_clone_ptr")] public static extern long BuiltCommitmentTransaction_clone_ptr(long _arg);
	// struct LDKBuiltCommitmentTransaction BuiltCommitmentTransaction_clone(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_clone")] public static extern long BuiltCommitmentTransaction_clone(long _orig);
	// struct LDKCVec_u8Z BuiltCommitmentTransaction_write(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_write")] public static extern long BuiltCommitmentTransaction_write(long _obj);
	// struct LDKCResult_BuiltCommitmentTransactionDecodeErrorZ BuiltCommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_read")] public static extern long BuiltCommitmentTransaction_read(long _ser);
	// MUST_USE_RES struct LDKThirtyTwoBytes BuiltCommitmentTransaction_get_sighash_all(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_get_sighash_all")] public static extern long BuiltCommitmentTransaction_get_sighash_all(long _this_arg, long _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKECDSASignature BuiltCommitmentTransaction_sign_counterparty_commitment(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_sign_counterparty_commitment")] public static extern long BuiltCommitmentTransaction_sign_counterparty_commitment(long _this_arg, long _funding_key, long _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKECDSASignature BuiltCommitmentTransaction_sign_holder_commitment(const struct LDKBuiltCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BuiltCommitmentTransaction_sign_holder_commitment")] public static extern long BuiltCommitmentTransaction_sign_holder_commitment(long _this_arg, long _funding_key, long _funding_redeemscript, long _channel_value_satoshis, long _entropy_source);
	// void ClosingTransaction_free(struct LDKClosingTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_free")] public static extern void ClosingTransaction_free(long _this_obj);
	// uint64_t ClosingTransaction_clone_ptr(LDKClosingTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_clone_ptr")] public static extern long ClosingTransaction_clone_ptr(long _arg);
	// struct LDKClosingTransaction ClosingTransaction_clone(const struct LDKClosingTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_clone")] public static extern long ClosingTransaction_clone(long _orig);
	// uint64_t ClosingTransaction_hash(const struct LDKClosingTransaction *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_hash")] public static extern long ClosingTransaction_hash(long _o);
	// bool ClosingTransaction_eq(const struct LDKClosingTransaction *NONNULL_PTR a, const struct LDKClosingTransaction *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_eq")] public static extern bool ClosingTransaction_eq(long _a, long _b);
	// MUST_USE_RES struct LDKClosingTransaction ClosingTransaction_new(uint64_t to_holder_value_sat, uint64_t to_counterparty_value_sat, struct LDKCVec_u8Z to_holder_script, struct LDKCVec_u8Z to_counterparty_script, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_new")] public static extern long ClosingTransaction_new(long _to_holder_value_sat, long _to_counterparty_value_sat, long _to_holder_script, long _to_counterparty_script, long _funding_outpoint);
	// MUST_USE_RES struct LDKTrustedClosingTransaction ClosingTransaction_trust(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_trust")] public static extern long ClosingTransaction_trust(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TrustedClosingTransactionNoneZ ClosingTransaction_verify(const struct LDKClosingTransaction *NONNULL_PTR this_arg, struct LDKOutPoint funding_outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_verify")] public static extern long ClosingTransaction_verify(long _this_arg, long _funding_outpoint);
	// MUST_USE_RES uint64_t ClosingTransaction_to_holder_value_sat(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_holder_value_sat")] public static extern long ClosingTransaction_to_holder_value_sat(long _this_arg);
	// MUST_USE_RES uint64_t ClosingTransaction_to_counterparty_value_sat(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_counterparty_value_sat")] public static extern long ClosingTransaction_to_counterparty_value_sat(long _this_arg);
	// MUST_USE_RES struct LDKu8slice ClosingTransaction_to_holder_script(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_holder_script")] public static extern long ClosingTransaction_to_holder_script(long _this_arg);
	// MUST_USE_RES struct LDKu8slice ClosingTransaction_to_counterparty_script(const struct LDKClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosingTransaction_to_counterparty_script")] public static extern long ClosingTransaction_to_counterparty_script(long _this_arg);
	// void TrustedClosingTransaction_free(struct LDKTrustedClosingTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_free")] public static extern void TrustedClosingTransaction_free(long _this_obj);
	// MUST_USE_RES struct LDKTransaction TrustedClosingTransaction_built_transaction(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_built_transaction")] public static extern long TrustedClosingTransaction_built_transaction(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes TrustedClosingTransaction_get_sighash_all(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg, struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_get_sighash_all")] public static extern long TrustedClosingTransaction_get_sighash_all(long _this_arg, long _funding_redeemscript, long _channel_value_satoshis);
	// MUST_USE_RES struct LDKECDSASignature TrustedClosingTransaction_sign(const struct LDKTrustedClosingTransaction *NONNULL_PTR this_arg, const uint8_t (*funding_key)[32], struct LDKu8slice funding_redeemscript, uint64_t channel_value_satoshis);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedClosingTransaction_sign")] public static extern long TrustedClosingTransaction_sign(long _this_arg, long _funding_key, long _funding_redeemscript, long _channel_value_satoshis);
	// void CommitmentTransaction_free(struct LDKCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_free")] public static extern void CommitmentTransaction_free(long _this_obj);
	// uint64_t CommitmentTransaction_clone_ptr(LDKCommitmentTransaction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_clone_ptr")] public static extern long CommitmentTransaction_clone_ptr(long _arg);
	// struct LDKCommitmentTransaction CommitmentTransaction_clone(const struct LDKCommitmentTransaction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_clone")] public static extern long CommitmentTransaction_clone(long _orig);
	// struct LDKCVec_u8Z CommitmentTransaction_write(const struct LDKCommitmentTransaction *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_write")] public static extern long CommitmentTransaction_write(long _obj);
	// struct LDKCResult_CommitmentTransactionDecodeErrorZ CommitmentTransaction_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_read")] public static extern long CommitmentTransaction_read(long _ser);
	// MUST_USE_RES uint64_t CommitmentTransaction_commitment_number(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_commitment_number")] public static extern long CommitmentTransaction_commitment_number(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey CommitmentTransaction_per_commitment_point(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_per_commitment_point")] public static extern long CommitmentTransaction_per_commitment_point(long _this_arg);
	// MUST_USE_RES uint64_t CommitmentTransaction_to_broadcaster_value_sat(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_to_broadcaster_value_sat")] public static extern long CommitmentTransaction_to_broadcaster_value_sat(long _this_arg);
	// MUST_USE_RES uint64_t CommitmentTransaction_to_countersignatory_value_sat(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_to_countersignatory_value_sat")] public static extern long CommitmentTransaction_to_countersignatory_value_sat(long _this_arg);
	// MUST_USE_RES uint32_t CommitmentTransaction_feerate_per_kw(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_feerate_per_kw")] public static extern int CommitmentTransaction_feerate_per_kw(long _this_arg);
	// MUST_USE_RES struct LDKTrustedCommitmentTransaction CommitmentTransaction_trust(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_trust")] public static extern long CommitmentTransaction_trust(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TrustedCommitmentTransactionNoneZ CommitmentTransaction_verify(const struct LDKCommitmentTransaction *NONNULL_PTR this_arg, const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR channel_parameters, const struct LDKChannelPublicKeys *NONNULL_PTR broadcaster_keys, const struct LDKChannelPublicKeys *NONNULL_PTR countersignatory_keys);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CommitmentTransaction_verify")] public static extern long CommitmentTransaction_verify(long _this_arg, long _channel_parameters, long _broadcaster_keys, long _countersignatory_keys);
	// void TrustedCommitmentTransaction_free(struct LDKTrustedCommitmentTransaction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_free")] public static extern void TrustedCommitmentTransaction_free(long _this_obj);
	// MUST_USE_RES struct LDKThirtyTwoBytes TrustedCommitmentTransaction_txid(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_txid")] public static extern long TrustedCommitmentTransaction_txid(long _this_arg);
	// MUST_USE_RES struct LDKBuiltCommitmentTransaction TrustedCommitmentTransaction_built_transaction(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_built_transaction")] public static extern long TrustedCommitmentTransaction_built_transaction(long _this_arg);
	// MUST_USE_RES struct LDKTxCreationKeys TrustedCommitmentTransaction_keys(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_keys")] public static extern long TrustedCommitmentTransaction_keys(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures TrustedCommitmentTransaction_channel_type_features(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_channel_type_features")] public static extern long TrustedCommitmentTransaction_channel_type_features(long _this_arg);
	// MUST_USE_RES struct LDKCResult_CVec_ECDSASignatureZNoneZ TrustedCommitmentTransaction_get_htlc_sigs(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg, const uint8_t (*htlc_base_key)[32], const struct LDKDirectedChannelTransactionParameters *NONNULL_PTR channel_parameters, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_get_htlc_sigs")] public static extern long TrustedCommitmentTransaction_get_htlc_sigs(long _this_arg, long _htlc_base_key, long _channel_parameters, long _entropy_source);
	// MUST_USE_RES struct LDKCOption_usizeZ TrustedCommitmentTransaction_revokeable_output_index(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_revokeable_output_index")] public static extern long TrustedCommitmentTransaction_revokeable_output_index(long _this_arg);
	// MUST_USE_RES struct LDKCResult_TransactionNoneZ TrustedCommitmentTransaction_build_to_local_justice_tx(const struct LDKTrustedCommitmentTransaction *NONNULL_PTR this_arg, uint64_t feerate_per_kw, struct LDKCVec_u8Z destination_script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TrustedCommitmentTransaction_build_to_local_justice_tx")] public static extern long TrustedCommitmentTransaction_build_to_local_justice_tx(long _this_arg, long _feerate_per_kw, long _destination_script);
	// uint64_t get_commitment_transaction_number_obscure_factor(struct LDKPublicKey broadcaster_payment_basepoint, struct LDKPublicKey countersignatory_payment_basepoint, bool outbound_from_broadcaster);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_get_commitment_transaction_number_obscure_factor")] public static extern long get_commitment_transaction_number_obscure_factor(long _broadcaster_payment_basepoint, long _countersignatory_payment_basepoint, bool _outbound_from_broadcaster);
	// void ShutdownScript_free(struct LDKShutdownScript this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_free")] public static extern void ShutdownScript_free(long _this_obj);
	// uint64_t ShutdownScript_clone_ptr(LDKShutdownScript *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_clone_ptr")] public static extern long ShutdownScript_clone_ptr(long _arg);
	// struct LDKShutdownScript ShutdownScript_clone(const struct LDKShutdownScript *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_clone")] public static extern long ShutdownScript_clone(long _orig);
	// bool ShutdownScript_eq(const struct LDKShutdownScript *NONNULL_PTR a, const struct LDKShutdownScript *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_eq")] public static extern bool ShutdownScript_eq(long _a, long _b);
	// void InvalidShutdownScript_free(struct LDKInvalidShutdownScript this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_free")] public static extern void InvalidShutdownScript_free(long _this_obj);
	// struct LDKCVec_u8Z InvalidShutdownScript_get_script(const struct LDKInvalidShutdownScript *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_get_script")] public static extern long InvalidShutdownScript_get_script(long _this_ptr);
	// void InvalidShutdownScript_set_script(struct LDKInvalidShutdownScript *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_set_script")] public static extern void InvalidShutdownScript_set_script(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInvalidShutdownScript InvalidShutdownScript_new(struct LDKCVec_u8Z script_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_new")] public static extern long InvalidShutdownScript_new(long _script_arg);
	// uint64_t InvalidShutdownScript_clone_ptr(LDKInvalidShutdownScript *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_clone_ptr")] public static extern long InvalidShutdownScript_clone_ptr(long _arg);
	// struct LDKInvalidShutdownScript InvalidShutdownScript_clone(const struct LDKInvalidShutdownScript *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvalidShutdownScript_clone")] public static extern long InvalidShutdownScript_clone(long _orig);
	// struct LDKCVec_u8Z ShutdownScript_write(const struct LDKShutdownScript *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_write")] public static extern long ShutdownScript_write(long _obj);
	// struct LDKCResult_ShutdownScriptDecodeErrorZ ShutdownScript_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_read")] public static extern long ShutdownScript_read(long _ser);
	// MUST_USE_RES struct LDKShutdownScript ShutdownScript_new_p2wpkh(const uint8_t (*pubkey_hash)[20]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_p2wpkh")] public static extern long ShutdownScript_new_p2wpkh(long _pubkey_hash);
	// MUST_USE_RES struct LDKShutdownScript ShutdownScript_new_p2wsh(const uint8_t (*script_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_p2wsh")] public static extern long ShutdownScript_new_p2wsh(long _script_hash);
	// MUST_USE_RES struct LDKCResult_ShutdownScriptInvalidShutdownScriptZ ShutdownScript_new_witness_program(struct LDKWitnessProgram witness_program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_new_witness_program")] public static extern long ShutdownScript_new_witness_program(long _witness_program);
	// MUST_USE_RES struct LDKCVec_u8Z ShutdownScript_into_inner(struct LDKShutdownScript this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_into_inner")] public static extern long ShutdownScript_into_inner(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey ShutdownScript_as_legacy_pubkey(const struct LDKShutdownScript *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_as_legacy_pubkey")] public static extern long ShutdownScript_as_legacy_pubkey(long _this_arg);
	// MUST_USE_RES bool ShutdownScript_is_compatible(const struct LDKShutdownScript *NONNULL_PTR this_arg, const struct LDKInitFeatures *NONNULL_PTR features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_is_compatible")] public static extern bool ShutdownScript_is_compatible(long _this_arg, long _features);
	// struct LDKStr ShutdownScript_to_str(const struct LDKShutdownScript *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ShutdownScript_to_str")] public static extern long ShutdownScript_to_str(long _o);
	// void ChannelId_free(struct LDKChannelId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_free")] public static extern void ChannelId_free(long _this_obj);
	// const uint8_t (*ChannelId_get_a(const struct LDKChannelId *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_get_a")] public static extern long ChannelId_get_a(long _this_ptr);
	// void ChannelId_set_a(struct LDKChannelId *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_set_a")] public static extern void ChannelId_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelId ChannelId_new(struct LDKThirtyTwoBytes a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_new")] public static extern long ChannelId_new(long _a_arg);
	// uint64_t ChannelId_clone_ptr(LDKChannelId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_clone_ptr")] public static extern long ChannelId_clone_ptr(long _arg);
	// struct LDKChannelId ChannelId_clone(const struct LDKChannelId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_clone")] public static extern long ChannelId_clone(long _orig);
	// bool ChannelId_eq(const struct LDKChannelId *NONNULL_PTR a, const struct LDKChannelId *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_eq")] public static extern bool ChannelId_eq(long _a, long _b);
	// uint64_t ChannelId_hash(const struct LDKChannelId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_hash")] public static extern long ChannelId_hash(long _o);
	// MUST_USE_RES struct LDKChannelId ChannelId_v1_from_funding_txid(const uint8_t (*txid)[32], uint16_t output_index);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_v1_from_funding_txid")] public static extern long ChannelId_v1_from_funding_txid(long _txid, short _output_index);
	// MUST_USE_RES struct LDKChannelId ChannelId_v1_from_funding_outpoint(struct LDKOutPoint outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_v1_from_funding_outpoint")] public static extern long ChannelId_v1_from_funding_outpoint(long _outpoint);
	// MUST_USE_RES struct LDKChannelId ChannelId_temporary_from_entropy_source(const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_temporary_from_entropy_source")] public static extern long ChannelId_temporary_from_entropy_source(long _entropy_source);
	// MUST_USE_RES struct LDKChannelId ChannelId_from_bytes(struct LDKThirtyTwoBytes data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_from_bytes")] public static extern long ChannelId_from_bytes(long _data);
	// MUST_USE_RES struct LDKChannelId ChannelId_new_zero(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_new_zero")] public static extern long ChannelId_new_zero();
	// MUST_USE_RES bool ChannelId_is_zero(const struct LDKChannelId *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_is_zero")] public static extern bool ChannelId_is_zero(long _this_arg);
	// MUST_USE_RES struct LDKChannelId ChannelId_v2_from_revocation_basepoints(const struct LDKRevocationBasepoint *NONNULL_PTR ours, const struct LDKRevocationBasepoint *NONNULL_PTR theirs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_v2_from_revocation_basepoints")] public static extern long ChannelId_v2_from_revocation_basepoints(long _ours, long _theirs);
	// MUST_USE_RES struct LDKChannelId ChannelId_temporary_v2_from_revocation_basepoint(const struct LDKRevocationBasepoint *NONNULL_PTR our_revocation_basepoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_temporary_v2_from_revocation_basepoint")] public static extern long ChannelId_temporary_v2_from_revocation_basepoint(long _our_revocation_basepoint);
	// struct LDKCVec_u8Z ChannelId_write(const struct LDKChannelId *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_write")] public static extern long ChannelId_write(long _obj);
	// struct LDKCResult_ChannelIdDecodeErrorZ ChannelId_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelId_read")] public static extern long ChannelId_read(long _ser);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_phantom_invoice(struct LDKCOption_u64Z amt_msat, struct LDKCOption_ThirtyTwoBytesZ payment_hash, struct LDKStr description, uint32_t invoice_expiry_delta_secs, struct LDKCVec_PhantomRouteHintsZ phantom_route_hints, struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u16Z min_final_cltv_expiry_delta, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_phantom_invoice")] public static extern long create_phantom_invoice(long _amt_msat, long _payment_hash, long _description, int _invoice_expiry_delta_secs, long _phantom_route_hints, long _entropy_source, long _node_signer, long _logger, Currency _network, long _min_final_cltv_expiry_delta, long _duration_since_epoch);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_phantom_invoice_with_description_hash(struct LDKCOption_u64Z amt_msat, struct LDKCOption_ThirtyTwoBytesZ payment_hash, uint32_t invoice_expiry_delta_secs, struct LDKSha256 description_hash, struct LDKCVec_PhantomRouteHintsZ phantom_route_hints, struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKLogger logger, enum LDKCurrency network, struct LDKCOption_u16Z min_final_cltv_expiry_delta, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_phantom_invoice_with_description_hash")] public static extern long create_phantom_invoice_with_description_hash(long _amt_msat, long _payment_hash, int _invoice_expiry_delta_secs, long _description_hash, long _phantom_route_hints, long _entropy_source, long _node_signer, long _logger, Currency _network, long _min_final_cltv_expiry_delta, long _duration_since_epoch);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager")] public static extern long create_invoice_from_channelmanager(long _channelmanager, long _amt_msat, long _description, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_with_description_hash(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKCOption_u64Z amt_msat, struct LDKSha256 description_hash, uint32_t invoice_expiry_delta_secs, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_with_description_hash")] public static extern long create_invoice_from_channelmanager_with_description_hash(long _channelmanager, long _amt_msat, long _description_hash, int _invoice_expiry_delta_secs, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_with_description_hash_and_payment_hash(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKCOption_u64Z amt_msat, struct LDKSha256 description_hash, uint32_t invoice_expiry_delta_secs, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_with_description_hash_and_payment_hash")] public static extern long create_invoice_from_channelmanager_with_description_hash_and_payment_hash(long _channelmanager, long _amt_msat, long _description_hash, int _invoice_expiry_delta_secs, long _payment_hash, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_Bolt11InvoiceSignOrCreationErrorZ create_invoice_from_channelmanager_with_payment_hash(const struct LDKChannelManager *NONNULL_PTR channelmanager, struct LDKCOption_u64Z amt_msat, struct LDKStr description, uint32_t invoice_expiry_delta_secs, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u16Z min_final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_invoice_from_channelmanager_with_payment_hash")] public static extern long create_invoice_from_channelmanager_with_payment_hash(long _channelmanager, long _amt_msat, long _description, int _invoice_expiry_delta_secs, long _payment_hash, long _min_final_cltv_expiry_delta);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ payment_parameters_from_variable_amount_invoice(const struct LDKBolt11Invoice *NONNULL_PTR invoice, uint64_t amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_payment_parameters_from_variable_amount_invoice")] public static extern long payment_parameters_from_variable_amount_invoice(long _invoice, long _amount_msat);
	// struct LDKCResult_C3Tuple_ThirtyTwoBytesRecipientOnionFieldsRouteParametersZNoneZ payment_parameters_from_invoice(const struct LDKBolt11Invoice *NONNULL_PTR invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_payment_parameters_from_invoice")] public static extern long payment_parameters_from_invoice(long _invoice);
	// void Retry_free(struct LDKRetry this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_free")] public static extern void Retry_free(long _this_ptr);
	// uint64_t Retry_clone_ptr(LDKRetry *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_clone_ptr")] public static extern long Retry_clone_ptr(long _arg);
	// struct LDKRetry Retry_clone(const struct LDKRetry *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_clone")] public static extern long Retry_clone(long _orig);
	// struct LDKRetry Retry_attempts(uint32_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_attempts")] public static extern long Retry_attempts(int _a);
	// struct LDKRetry Retry_timeout(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_timeout")] public static extern long Retry_timeout(long _a);
	// bool Retry_eq(const struct LDKRetry *NONNULL_PTR a, const struct LDKRetry *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_eq")] public static extern bool Retry_eq(long _a, long _b);
	// uint64_t Retry_hash(const struct LDKRetry *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_hash")] public static extern long Retry_hash(long _o);
	// struct LDKCVec_u8Z Retry_write(const struct LDKRetry *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_write")] public static extern long Retry_write(long _obj);
	// struct LDKCResult_RetryDecodeErrorZ Retry_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Retry_read")] public static extern long Retry_read(long _ser);
	// enum LDKRetryableSendFailure RetryableSendFailure_clone(const enum LDKRetryableSendFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_clone")] public static extern RetryableSendFailure RetryableSendFailure_clone(long _orig);
	// enum LDKRetryableSendFailure RetryableSendFailure_payment_expired(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_payment_expired")] public static extern RetryableSendFailure RetryableSendFailure_payment_expired();
	// enum LDKRetryableSendFailure RetryableSendFailure_route_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_route_not_found")] public static extern RetryableSendFailure RetryableSendFailure_route_not_found();
	// enum LDKRetryableSendFailure RetryableSendFailure_duplicate_payment(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_duplicate_payment")] public static extern RetryableSendFailure RetryableSendFailure_duplicate_payment();
	// enum LDKRetryableSendFailure RetryableSendFailure_onion_packet_size_exceeded(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_onion_packet_size_exceeded")] public static extern RetryableSendFailure RetryableSendFailure_onion_packet_size_exceeded();
	// bool RetryableSendFailure_eq(const enum LDKRetryableSendFailure *NONNULL_PTR a, const enum LDKRetryableSendFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RetryableSendFailure_eq")] public static extern bool RetryableSendFailure_eq(long _a, long _b);
	// void Bolt12PaymentError_free(struct LDKBolt12PaymentError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_free")] public static extern void Bolt12PaymentError_free(long _this_ptr);
	// uint64_t Bolt12PaymentError_clone_ptr(LDKBolt12PaymentError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_clone_ptr")] public static extern long Bolt12PaymentError_clone_ptr(long _arg);
	// struct LDKBolt12PaymentError Bolt12PaymentError_clone(const struct LDKBolt12PaymentError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_clone")] public static extern long Bolt12PaymentError_clone(long _orig);
	// struct LDKBolt12PaymentError Bolt12PaymentError_unexpected_invoice(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_unexpected_invoice")] public static extern long Bolt12PaymentError_unexpected_invoice();
	// struct LDKBolt12PaymentError Bolt12PaymentError_duplicate_invoice(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_duplicate_invoice")] public static extern long Bolt12PaymentError_duplicate_invoice();
	// struct LDKBolt12PaymentError Bolt12PaymentError_unknown_required_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_unknown_required_features")] public static extern long Bolt12PaymentError_unknown_required_features();
	// struct LDKBolt12PaymentError Bolt12PaymentError_sending_failed(enum LDKRetryableSendFailure a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_sending_failed")] public static extern long Bolt12PaymentError_sending_failed(RetryableSendFailure _a);
	// bool Bolt12PaymentError_eq(const struct LDKBolt12PaymentError *NONNULL_PTR a, const struct LDKBolt12PaymentError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12PaymentError_eq")] public static extern bool Bolt12PaymentError_eq(long _a, long _b);
	// void ProbeSendFailure_free(struct LDKProbeSendFailure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_free")] public static extern void ProbeSendFailure_free(long _this_ptr);
	// uint64_t ProbeSendFailure_clone_ptr(LDKProbeSendFailure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_clone_ptr")] public static extern long ProbeSendFailure_clone_ptr(long _arg);
	// struct LDKProbeSendFailure ProbeSendFailure_clone(const struct LDKProbeSendFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_clone")] public static extern long ProbeSendFailure_clone(long _orig);
	// struct LDKProbeSendFailure ProbeSendFailure_route_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_route_not_found")] public static extern long ProbeSendFailure_route_not_found();
	// struct LDKProbeSendFailure ProbeSendFailure_parameter_error(struct LDKAPIError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_parameter_error")] public static extern long ProbeSendFailure_parameter_error(long _a);
	// struct LDKProbeSendFailure ProbeSendFailure_duplicate_probe(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_duplicate_probe")] public static extern long ProbeSendFailure_duplicate_probe();
	// bool ProbeSendFailure_eq(const struct LDKProbeSendFailure *NONNULL_PTR a, const struct LDKProbeSendFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbeSendFailure_eq")] public static extern bool ProbeSendFailure_eq(long _a, long _b);
	// void RecipientOnionFields_free(struct LDKRecipientOnionFields this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_free")] public static extern void RecipientOnionFields_free(long _this_obj);
	// struct LDKCOption_ThirtyTwoBytesZ RecipientOnionFields_get_payment_secret(const struct LDKRecipientOnionFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_get_payment_secret")] public static extern long RecipientOnionFields_get_payment_secret(long _this_ptr);
	// void RecipientOnionFields_set_payment_secret(struct LDKRecipientOnionFields *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_set_payment_secret")] public static extern void RecipientOnionFields_set_payment_secret(long _this_ptr, long _val);
	// struct LDKCOption_CVec_u8ZZ RecipientOnionFields_get_payment_metadata(const struct LDKRecipientOnionFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_get_payment_metadata")] public static extern long RecipientOnionFields_get_payment_metadata(long _this_ptr);
	// void RecipientOnionFields_set_payment_metadata(struct LDKRecipientOnionFields *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_set_payment_metadata")] public static extern void RecipientOnionFields_set_payment_metadata(long _this_ptr, long _val);
	// uint64_t RecipientOnionFields_clone_ptr(LDKRecipientOnionFields *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_clone_ptr")] public static extern long RecipientOnionFields_clone_ptr(long _arg);
	// struct LDKRecipientOnionFields RecipientOnionFields_clone(const struct LDKRecipientOnionFields *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_clone")] public static extern long RecipientOnionFields_clone(long _orig);
	// bool RecipientOnionFields_eq(const struct LDKRecipientOnionFields *NONNULL_PTR a, const struct LDKRecipientOnionFields *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_eq")] public static extern bool RecipientOnionFields_eq(long _a, long _b);
	// struct LDKCVec_u8Z RecipientOnionFields_write(const struct LDKRecipientOnionFields *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_write")] public static extern long RecipientOnionFields_write(long _obj);
	// struct LDKCResult_RecipientOnionFieldsDecodeErrorZ RecipientOnionFields_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_read")] public static extern long RecipientOnionFields_read(long _ser);
	// MUST_USE_RES struct LDKRecipientOnionFields RecipientOnionFields_secret_only(struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_secret_only")] public static extern long RecipientOnionFields_secret_only(long _payment_secret);
	// MUST_USE_RES struct LDKRecipientOnionFields RecipientOnionFields_spontaneous_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_spontaneous_empty")] public static extern long RecipientOnionFields_spontaneous_empty();
	// MUST_USE_RES struct LDKCResult_RecipientOnionFieldsNoneZ RecipientOnionFields_with_custom_tlvs(struct LDKRecipientOnionFields this_arg, struct LDKCVec_C2Tuple_u64CVec_u8ZZZ custom_tlvs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_with_custom_tlvs")] public static extern long RecipientOnionFields_with_custom_tlvs(long _this_arg, long _custom_tlvs);
	// MUST_USE_RES struct LDKCVec_C2Tuple_u64CVec_u8ZZZ RecipientOnionFields_custom_tlvs(const struct LDKRecipientOnionFields *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RecipientOnionFields_custom_tlvs")] public static extern long RecipientOnionFields_custom_tlvs(long _this_arg);
	// void CustomMessageReader_free(struct LDKCustomMessageReader this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomMessageReader_free")] public static extern void CustomMessageReader_free(long _this_ptr);
	// uint64_t Type_clone_ptr(LDKType *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_clone_ptr")] public static extern long Type_clone_ptr(long _arg);
	// struct LDKType Type_clone(const struct LDKType *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_clone")] public static extern long Type_clone(long _orig);
	// void Type_free(struct LDKType this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Type_free")] public static extern void Type_free(long _this_ptr);
	// struct LDKCVec_u8Z InitFeatures_write(const struct LDKInitFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_write")] public static extern long InitFeatures_write(long _obj);
	// struct LDKCResult_InitFeaturesDecodeErrorZ InitFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_read")] public static extern long InitFeatures_read(long _ser);
	// struct LDKCVec_u8Z ChannelFeatures_write(const struct LDKChannelFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_write")] public static extern long ChannelFeatures_write(long _obj);
	// struct LDKCResult_ChannelFeaturesDecodeErrorZ ChannelFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_read")] public static extern long ChannelFeatures_read(long _ser);
	// struct LDKCVec_u8Z NodeFeatures_write(const struct LDKNodeFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_write")] public static extern long NodeFeatures_write(long _obj);
	// struct LDKCResult_NodeFeaturesDecodeErrorZ NodeFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_read")] public static extern long NodeFeatures_read(long _ser);
	// struct LDKCVec_u8Z Bolt11InvoiceFeatures_write(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_write")] public static extern long Bolt11InvoiceFeatures_write(long _obj);
	// struct LDKCResult_Bolt11InvoiceFeaturesDecodeErrorZ Bolt11InvoiceFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_read")] public static extern long Bolt11InvoiceFeatures_read(long _ser);
	// struct LDKCVec_u8Z Bolt12InvoiceFeatures_write(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_write")] public static extern long Bolt12InvoiceFeatures_write(long _obj);
	// struct LDKCResult_Bolt12InvoiceFeaturesDecodeErrorZ Bolt12InvoiceFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_read")] public static extern long Bolt12InvoiceFeatures_read(long _ser);
	// struct LDKCVec_u8Z BlindedHopFeatures_write(const struct LDKBlindedHopFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_write")] public static extern long BlindedHopFeatures_write(long _obj);
	// struct LDKCResult_BlindedHopFeaturesDecodeErrorZ BlindedHopFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_read")] public static extern long BlindedHopFeatures_read(long _ser);
	// struct LDKCVec_u8Z ChannelTypeFeatures_write(const struct LDKChannelTypeFeatures *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_write")] public static extern long ChannelTypeFeatures_write(long _obj);
	// struct LDKCResult_ChannelTypeFeaturesDecodeErrorZ ChannelTypeFeatures_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_read")] public static extern long ChannelTypeFeatures_read(long _ser);
	// void OfferId_free(struct LDKOfferId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_free")] public static extern void OfferId_free(long _this_obj);
	// const uint8_t (*OfferId_get_a(const struct LDKOfferId *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_get_a")] public static extern long OfferId_get_a(long _this_ptr);
	// void OfferId_set_a(struct LDKOfferId *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_set_a")] public static extern void OfferId_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKOfferId OfferId_new(struct LDKThirtyTwoBytes a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_new")] public static extern long OfferId_new(long _a_arg);
	// uint64_t OfferId_clone_ptr(LDKOfferId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_clone_ptr")] public static extern long OfferId_clone_ptr(long _arg);
	// struct LDKOfferId OfferId_clone(const struct LDKOfferId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_clone")] public static extern long OfferId_clone(long _orig);
	// bool OfferId_eq(const struct LDKOfferId *NONNULL_PTR a, const struct LDKOfferId *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_eq")] public static extern bool OfferId_eq(long _a, long _b);
	// struct LDKCVec_u8Z OfferId_write(const struct LDKOfferId *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_write")] public static extern long OfferId_write(long _obj);
	// struct LDKCResult_OfferIdDecodeErrorZ OfferId_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferId_read")] public static extern long OfferId_read(long _ser);
	// void OfferWithExplicitMetadataBuilder_free(struct LDKOfferWithExplicitMetadataBuilder this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_free")] public static extern void OfferWithExplicitMetadataBuilder_free(long _this_obj);
	// uint64_t OfferWithExplicitMetadataBuilder_clone_ptr(LDKOfferWithExplicitMetadataBuilder *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_clone_ptr")] public static extern long OfferWithExplicitMetadataBuilder_clone_ptr(long _arg);
	// struct LDKOfferWithExplicitMetadataBuilder OfferWithExplicitMetadataBuilder_clone(const struct LDKOfferWithExplicitMetadataBuilder *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_clone")] public static extern long OfferWithExplicitMetadataBuilder_clone(long _orig);
	// void OfferWithDerivedMetadataBuilder_free(struct LDKOfferWithDerivedMetadataBuilder this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_free")] public static extern void OfferWithDerivedMetadataBuilder_free(long _this_obj);
	// uint64_t OfferWithDerivedMetadataBuilder_clone_ptr(LDKOfferWithDerivedMetadataBuilder *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_clone_ptr")] public static extern long OfferWithDerivedMetadataBuilder_clone_ptr(long _arg);
	// struct LDKOfferWithDerivedMetadataBuilder OfferWithDerivedMetadataBuilder_clone(const struct LDKOfferWithDerivedMetadataBuilder *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_clone")] public static extern long OfferWithDerivedMetadataBuilder_clone(long _orig);
	// MUST_USE_RES struct LDKOfferWithExplicitMetadataBuilder OfferWithExplicitMetadataBuilder_new(struct LDKPublicKey signing_pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_new")] public static extern long OfferWithExplicitMetadataBuilder_new(long _signing_pubkey);
	// MUST_USE_RES struct LDKCResult_NoneBolt12SemanticErrorZ OfferWithExplicitMetadataBuilder_metadata(struct LDKOfferWithExplicitMetadataBuilder this_arg, struct LDKCVec_u8Z metadata);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_metadata")] public static extern long OfferWithExplicitMetadataBuilder_metadata(long _this_arg, long _metadata);
	// MUST_USE_RES void OfferWithExplicitMetadataBuilder_chain(struct LDKOfferWithExplicitMetadataBuilder this_arg, enum LDKNetwork network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_chain")] public static extern void OfferWithExplicitMetadataBuilder_chain(long _this_arg, Network _network);
	// MUST_USE_RES void OfferWithExplicitMetadataBuilder_amount_msats(struct LDKOfferWithExplicitMetadataBuilder this_arg, uint64_t amount_msats);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_amount_msats")] public static extern void OfferWithExplicitMetadataBuilder_amount_msats(long _this_arg, long _amount_msats);
	// MUST_USE_RES void OfferWithExplicitMetadataBuilder_absolute_expiry(struct LDKOfferWithExplicitMetadataBuilder this_arg, uint64_t absolute_expiry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_absolute_expiry")] public static extern void OfferWithExplicitMetadataBuilder_absolute_expiry(long _this_arg, long _absolute_expiry);
	// MUST_USE_RES void OfferWithExplicitMetadataBuilder_description(struct LDKOfferWithExplicitMetadataBuilder this_arg, struct LDKStr description);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_description")] public static extern void OfferWithExplicitMetadataBuilder_description(long _this_arg, long _description);
	// MUST_USE_RES void OfferWithExplicitMetadataBuilder_issuer(struct LDKOfferWithExplicitMetadataBuilder this_arg, struct LDKStr issuer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_issuer")] public static extern void OfferWithExplicitMetadataBuilder_issuer(long _this_arg, long _issuer);
	// MUST_USE_RES void OfferWithExplicitMetadataBuilder_path(struct LDKOfferWithExplicitMetadataBuilder this_arg, struct LDKBlindedMessagePath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_path")] public static extern void OfferWithExplicitMetadataBuilder_path(long _this_arg, long _path);
	// MUST_USE_RES void OfferWithExplicitMetadataBuilder_supported_quantity(struct LDKOfferWithExplicitMetadataBuilder this_arg, struct LDKQuantity quantity);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_supported_quantity")] public static extern void OfferWithExplicitMetadataBuilder_supported_quantity(long _this_arg, long _quantity);
	// MUST_USE_RES struct LDKCResult_OfferBolt12SemanticErrorZ OfferWithExplicitMetadataBuilder_build(struct LDKOfferWithExplicitMetadataBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithExplicitMetadataBuilder_build")] public static extern long OfferWithExplicitMetadataBuilder_build(long _this_arg);
	// MUST_USE_RES struct LDKOfferWithDerivedMetadataBuilder OfferWithDerivedMetadataBuilder_deriving_signing_pubkey(struct LDKPublicKey node_id, const struct LDKExpandedKey *NONNULL_PTR expanded_key, struct LDKNonce nonce);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_deriving_signing_pubkey")] public static extern long OfferWithDerivedMetadataBuilder_deriving_signing_pubkey(long _node_id, long _expanded_key, long _nonce);
	// MUST_USE_RES void OfferWithDerivedMetadataBuilder_chain(struct LDKOfferWithDerivedMetadataBuilder this_arg, enum LDKNetwork network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_chain")] public static extern void OfferWithDerivedMetadataBuilder_chain(long _this_arg, Network _network);
	// MUST_USE_RES void OfferWithDerivedMetadataBuilder_amount_msats(struct LDKOfferWithDerivedMetadataBuilder this_arg, uint64_t amount_msats);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_amount_msats")] public static extern void OfferWithDerivedMetadataBuilder_amount_msats(long _this_arg, long _amount_msats);
	// MUST_USE_RES void OfferWithDerivedMetadataBuilder_absolute_expiry(struct LDKOfferWithDerivedMetadataBuilder this_arg, uint64_t absolute_expiry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_absolute_expiry")] public static extern void OfferWithDerivedMetadataBuilder_absolute_expiry(long _this_arg, long _absolute_expiry);
	// MUST_USE_RES void OfferWithDerivedMetadataBuilder_description(struct LDKOfferWithDerivedMetadataBuilder this_arg, struct LDKStr description);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_description")] public static extern void OfferWithDerivedMetadataBuilder_description(long _this_arg, long _description);
	// MUST_USE_RES void OfferWithDerivedMetadataBuilder_issuer(struct LDKOfferWithDerivedMetadataBuilder this_arg, struct LDKStr issuer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_issuer")] public static extern void OfferWithDerivedMetadataBuilder_issuer(long _this_arg, long _issuer);
	// MUST_USE_RES void OfferWithDerivedMetadataBuilder_path(struct LDKOfferWithDerivedMetadataBuilder this_arg, struct LDKBlindedMessagePath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_path")] public static extern void OfferWithDerivedMetadataBuilder_path(long _this_arg, long _path);
	// MUST_USE_RES void OfferWithDerivedMetadataBuilder_supported_quantity(struct LDKOfferWithDerivedMetadataBuilder this_arg, struct LDKQuantity quantity);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_supported_quantity")] public static extern void OfferWithDerivedMetadataBuilder_supported_quantity(long _this_arg, long _quantity);
	// MUST_USE_RES struct LDKCResult_OfferBolt12SemanticErrorZ OfferWithDerivedMetadataBuilder_build(struct LDKOfferWithDerivedMetadataBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferWithDerivedMetadataBuilder_build")] public static extern long OfferWithDerivedMetadataBuilder_build(long _this_arg);
	// void Offer_free(struct LDKOffer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_free")] public static extern void Offer_free(long _this_obj);
	// uint64_t Offer_clone_ptr(LDKOffer *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_clone_ptr")] public static extern long Offer_clone_ptr(long _arg);
	// struct LDKOffer Offer_clone(const struct LDKOffer *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_clone")] public static extern long Offer_clone(long _orig);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ Offer_chains(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_chains")] public static extern long Offer_chains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ Offer_metadata(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_metadata")] public static extern long Offer_metadata(long _this_arg);
	// MUST_USE_RES struct LDKCOption_AmountZ Offer_amount(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_amount")] public static extern long Offer_amount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Offer_description(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_description")] public static extern long Offer_description(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures Offer_offer_features(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_offer_features")] public static extern long Offer_offer_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Offer_absolute_expiry(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_absolute_expiry")] public static extern long Offer_absolute_expiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Offer_issuer(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_issuer")] public static extern long Offer_issuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedMessagePathZ Offer_paths(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_paths")] public static extern long Offer_paths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity Offer_supported_quantity(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_supported_quantity")] public static extern long Offer_supported_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Offer_issuer_signing_pubkey(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_issuer_signing_pubkey")] public static extern long Offer_issuer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKOfferId Offer_id(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_id")] public static extern long Offer_id(long _this_arg);
	// MUST_USE_RES bool Offer_supports_chain(const struct LDKOffer *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes chain);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_supports_chain")] public static extern bool Offer_supports_chain(long _this_arg, long _chain);
	// MUST_USE_RES bool Offer_is_expired(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_is_expired")] public static extern bool Offer_is_expired(long _this_arg);
	// MUST_USE_RES bool Offer_is_expired_no_std(const struct LDKOffer *NONNULL_PTR this_arg, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_is_expired_no_std")] public static extern bool Offer_is_expired_no_std(long _this_arg, long _duration_since_epoch);
	// MUST_USE_RES bool Offer_is_valid_quantity(const struct LDKOffer *NONNULL_PTR this_arg, uint64_t quantity);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_is_valid_quantity")] public static extern bool Offer_is_valid_quantity(long _this_arg, long _quantity);
	// MUST_USE_RES bool Offer_expects_quantity(const struct LDKOffer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_expects_quantity")] public static extern bool Offer_expects_quantity(long _this_arg);
	// MUST_USE_RES struct LDKCResult_InvoiceRequestWithDerivedPayerSigningPubkeyBuilderBolt12SemanticErrorZ Offer_request_invoice(const struct LDKOffer *NONNULL_PTR this_arg, const struct LDKExpandedKey *NONNULL_PTR expanded_key, struct LDKNonce nonce, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_request_invoice")] public static extern long Offer_request_invoice(long _this_arg, long _expanded_key, long _nonce, long _payment_id);
	// uint64_t Offer_hash(const struct LDKOffer *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_hash")] public static extern long Offer_hash(long _o);
	// struct LDKCResult_OfferDecodeErrorZ Offer_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_read")] public static extern long Offer_read(long _ser);
	// struct LDKCVec_u8Z Offer_write(const struct LDKOffer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_write")] public static extern long Offer_write(long _obj);
	// void Amount_free(struct LDKAmount this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_free")] public static extern void Amount_free(long _this_ptr);
	// uint64_t Amount_clone_ptr(LDKAmount *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_clone_ptr")] public static extern long Amount_clone_ptr(long _arg);
	// struct LDKAmount Amount_clone(const struct LDKAmount *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_clone")] public static extern long Amount_clone(long _orig);
	// struct LDKAmount Amount_bitcoin(uint64_t amount_msats);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_bitcoin")] public static extern long Amount_bitcoin(long _amount_msats);
	// struct LDKAmount Amount_currency(struct LDKThreeBytes iso4217_code, uint64_t amount);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Amount_currency")] public static extern long Amount_currency(long _iso4217_code, long _amount);
	// void Quantity_free(struct LDKQuantity this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_free")] public static extern void Quantity_free(long _this_ptr);
	// uint64_t Quantity_clone_ptr(LDKQuantity *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_clone_ptr")] public static extern long Quantity_clone_ptr(long _arg);
	// struct LDKQuantity Quantity_clone(const struct LDKQuantity *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_clone")] public static extern long Quantity_clone(long _orig);
	// struct LDKQuantity Quantity_bounded(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_bounded")] public static extern long Quantity_bounded(long _a);
	// struct LDKQuantity Quantity_unbounded(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_unbounded")] public static extern long Quantity_unbounded();
	// struct LDKQuantity Quantity_one(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Quantity_one")] public static extern long Quantity_one();
	// struct LDKCResult_OfferBolt12ParseErrorZ Offer_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_from_str")] public static extern long Offer_from_str(long _s);
	// struct LDKStr Offer_to_str(const struct LDKOffer *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Offer_to_str")] public static extern long Offer_to_str(long _o);
	// void InvoiceWithExplicitSigningPubkeyBuilder_free(struct LDKInvoiceWithExplicitSigningPubkeyBuilder this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithExplicitSigningPubkeyBuilder_free")] public static extern void InvoiceWithExplicitSigningPubkeyBuilder_free(long _this_obj);
	// void InvoiceWithDerivedSigningPubkeyBuilder_free(struct LDKInvoiceWithDerivedSigningPubkeyBuilder this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithDerivedSigningPubkeyBuilder_free")] public static extern void InvoiceWithDerivedSigningPubkeyBuilder_free(long _this_obj);
	// MUST_USE_RES struct LDKCResult_UnsignedBolt12InvoiceBolt12SemanticErrorZ InvoiceWithExplicitSigningPubkeyBuilder_build(struct LDKInvoiceWithExplicitSigningPubkeyBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithExplicitSigningPubkeyBuilder_build")] public static extern long InvoiceWithExplicitSigningPubkeyBuilder_build(long _this_arg);
	// MUST_USE_RES void InvoiceWithExplicitSigningPubkeyBuilder_relative_expiry(struct LDKInvoiceWithExplicitSigningPubkeyBuilder this_arg, uint32_t relative_expiry_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithExplicitSigningPubkeyBuilder_relative_expiry")] public static extern void InvoiceWithExplicitSigningPubkeyBuilder_relative_expiry(long _this_arg, int _relative_expiry_secs);
	// MUST_USE_RES void InvoiceWithExplicitSigningPubkeyBuilder_fallback_v0_p2wsh(struct LDKInvoiceWithExplicitSigningPubkeyBuilder this_arg, const uint8_t (*script_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithExplicitSigningPubkeyBuilder_fallback_v0_p2wsh")] public static extern void InvoiceWithExplicitSigningPubkeyBuilder_fallback_v0_p2wsh(long _this_arg, long _script_hash);
	// MUST_USE_RES void InvoiceWithExplicitSigningPubkeyBuilder_fallback_v0_p2wpkh(struct LDKInvoiceWithExplicitSigningPubkeyBuilder this_arg, const uint8_t (*pubkey_hash)[20]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithExplicitSigningPubkeyBuilder_fallback_v0_p2wpkh")] public static extern void InvoiceWithExplicitSigningPubkeyBuilder_fallback_v0_p2wpkh(long _this_arg, long _pubkey_hash);
	// MUST_USE_RES void InvoiceWithExplicitSigningPubkeyBuilder_fallback_v1_p2tr_tweaked(struct LDKInvoiceWithExplicitSigningPubkeyBuilder this_arg, struct LDKTweakedPublicKey output_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithExplicitSigningPubkeyBuilder_fallback_v1_p2tr_tweaked")] public static extern void InvoiceWithExplicitSigningPubkeyBuilder_fallback_v1_p2tr_tweaked(long _this_arg, long _utput_key);
	// MUST_USE_RES void InvoiceWithExplicitSigningPubkeyBuilder_allow_mpp(struct LDKInvoiceWithExplicitSigningPubkeyBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithExplicitSigningPubkeyBuilder_allow_mpp")] public static extern void InvoiceWithExplicitSigningPubkeyBuilder_allow_mpp(long _this_arg);
	// MUST_USE_RES struct LDKCResult_Bolt12InvoiceBolt12SemanticErrorZ InvoiceWithDerivedSigningPubkeyBuilder_build_and_sign(struct LDKInvoiceWithDerivedSigningPubkeyBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithDerivedSigningPubkeyBuilder_build_and_sign")] public static extern long InvoiceWithDerivedSigningPubkeyBuilder_build_and_sign(long _this_arg);
	// MUST_USE_RES void InvoiceWithDerivedSigningPubkeyBuilder_relative_expiry(struct LDKInvoiceWithDerivedSigningPubkeyBuilder this_arg, uint32_t relative_expiry_secs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithDerivedSigningPubkeyBuilder_relative_expiry")] public static extern void InvoiceWithDerivedSigningPubkeyBuilder_relative_expiry(long _this_arg, int _relative_expiry_secs);
	// MUST_USE_RES void InvoiceWithDerivedSigningPubkeyBuilder_fallback_v0_p2wsh(struct LDKInvoiceWithDerivedSigningPubkeyBuilder this_arg, const uint8_t (*script_hash)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithDerivedSigningPubkeyBuilder_fallback_v0_p2wsh")] public static extern void InvoiceWithDerivedSigningPubkeyBuilder_fallback_v0_p2wsh(long _this_arg, long _script_hash);
	// MUST_USE_RES void InvoiceWithDerivedSigningPubkeyBuilder_fallback_v0_p2wpkh(struct LDKInvoiceWithDerivedSigningPubkeyBuilder this_arg, const uint8_t (*pubkey_hash)[20]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithDerivedSigningPubkeyBuilder_fallback_v0_p2wpkh")] public static extern void InvoiceWithDerivedSigningPubkeyBuilder_fallback_v0_p2wpkh(long _this_arg, long _pubkey_hash);
	// MUST_USE_RES void InvoiceWithDerivedSigningPubkeyBuilder_fallback_v1_p2tr_tweaked(struct LDKInvoiceWithDerivedSigningPubkeyBuilder this_arg, struct LDKTweakedPublicKey output_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithDerivedSigningPubkeyBuilder_fallback_v1_p2tr_tweaked")] public static extern void InvoiceWithDerivedSigningPubkeyBuilder_fallback_v1_p2tr_tweaked(long _this_arg, long _utput_key);
	// MUST_USE_RES void InvoiceWithDerivedSigningPubkeyBuilder_allow_mpp(struct LDKInvoiceWithDerivedSigningPubkeyBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceWithDerivedSigningPubkeyBuilder_allow_mpp")] public static extern void InvoiceWithDerivedSigningPubkeyBuilder_allow_mpp(long _this_arg);
	// void UnsignedBolt12Invoice_free(struct LDKUnsignedBolt12Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_free")] public static extern void UnsignedBolt12Invoice_free(long _this_obj);
	// uint64_t UnsignedBolt12Invoice_clone_ptr(LDKUnsignedBolt12Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_clone_ptr")] public static extern long UnsignedBolt12Invoice_clone_ptr(long _arg);
	// struct LDKUnsignedBolt12Invoice UnsignedBolt12Invoice_clone(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_clone")] public static extern long UnsignedBolt12Invoice_clone(long _orig);
	// void SignBolt12InvoiceFn_free(struct LDKSignBolt12InvoiceFn this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignBolt12InvoiceFn_free")] public static extern void SignBolt12InvoiceFn_free(long _this_ptr);
	// MUST_USE_RES struct LDKTaggedHash UnsignedBolt12Invoice_tagged_hash(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_tagged_hash")] public static extern long UnsignedBolt12Invoice_tagged_hash(long _this_arg);
	// void Bolt12Invoice_free(struct LDKBolt12Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_free")] public static extern void Bolt12Invoice_free(long _this_obj);
	// uint64_t Bolt12Invoice_clone_ptr(LDKBolt12Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_clone_ptr")] public static extern long Bolt12Invoice_clone_ptr(long _arg);
	// struct LDKBolt12Invoice Bolt12Invoice_clone(const struct LDKBolt12Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_clone")] public static extern long Bolt12Invoice_clone(long _orig);
	// MUST_USE_RES struct LDKCVec_BlindedPaymentPathZ UnsignedBolt12Invoice_payment_paths(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payment_paths")] public static extern long UnsignedBolt12Invoice_payment_paths(long _this_arg);
	// MUST_USE_RES uint64_t UnsignedBolt12Invoice_created_at(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_created_at")] public static extern long UnsignedBolt12Invoice_created_at(long _this_arg);
	// MUST_USE_RES uint64_t UnsignedBolt12Invoice_relative_expiry(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_relative_expiry")] public static extern long UnsignedBolt12Invoice_relative_expiry(long _this_arg);
	// MUST_USE_RES bool UnsignedBolt12Invoice_is_expired(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_is_expired")] public static extern bool UnsignedBolt12Invoice_is_expired(long _this_arg);
	// MUST_USE_RES struct LDKCVec_AddressZ UnsignedBolt12Invoice_fallbacks(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_fallbacks")] public static extern long UnsignedBolt12Invoice_fallbacks(long _this_arg);
	// MUST_USE_RES struct LDKBolt12InvoiceFeatures UnsignedBolt12Invoice_invoice_features(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_invoice_features")] public static extern long UnsignedBolt12Invoice_invoice_features(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedBolt12Invoice_signing_pubkey(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_signing_pubkey")] public static extern long UnsignedBolt12Invoice_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_ThirtyTwoBytesZZ UnsignedBolt12Invoice_offer_chains(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_offer_chains")] public static extern long UnsignedBolt12Invoice_offer_chains(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes UnsignedBolt12Invoice_chain(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_chain")] public static extern long UnsignedBolt12Invoice_chain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ UnsignedBolt12Invoice_metadata(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_metadata")] public static extern long UnsignedBolt12Invoice_metadata(long _this_arg);
	// MUST_USE_RES struct LDKCOption_AmountZ UnsignedBolt12Invoice_amount(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_amount")] public static extern long UnsignedBolt12Invoice_amount(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures UnsignedBolt12Invoice_offer_features(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_offer_features")] public static extern long UnsignedBolt12Invoice_offer_features(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedBolt12Invoice_description(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_description")] public static extern long UnsignedBolt12Invoice_description(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedBolt12Invoice_absolute_expiry(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_absolute_expiry")] public static extern long UnsignedBolt12Invoice_absolute_expiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedBolt12Invoice_issuer(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_issuer")] public static extern long UnsignedBolt12Invoice_issuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedMessagePathZ UnsignedBolt12Invoice_message_paths(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_message_paths")] public static extern long UnsignedBolt12Invoice_message_paths(long _this_arg);
	// MUST_USE_RES struct LDKCOption_QuantityZ UnsignedBolt12Invoice_supported_quantity(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_supported_quantity")] public static extern long UnsignedBolt12Invoice_supported_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedBolt12Invoice_issuer_signing_pubkey(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_issuer_signing_pubkey")] public static extern long UnsignedBolt12Invoice_issuer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice UnsignedBolt12Invoice_payer_metadata(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payer_metadata")] public static extern long UnsignedBolt12Invoice_payer_metadata(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures UnsignedBolt12Invoice_invoice_request_features(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_invoice_request_features")] public static extern long UnsignedBolt12Invoice_invoice_request_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedBolt12Invoice_quantity(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_quantity")] public static extern long UnsignedBolt12Invoice_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedBolt12Invoice_payer_signing_pubkey(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payer_signing_pubkey")] public static extern long UnsignedBolt12Invoice_payer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedBolt12Invoice_payer_note(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payer_note")] public static extern long UnsignedBolt12Invoice_payer_note(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes UnsignedBolt12Invoice_payment_hash(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_payment_hash")] public static extern long UnsignedBolt12Invoice_payment_hash(long _this_arg);
	// MUST_USE_RES uint64_t UnsignedBolt12Invoice_amount_msats(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_amount_msats")] public static extern long UnsignedBolt12Invoice_amount_msats(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedPaymentPathZ Bolt12Invoice_payment_paths(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payment_paths")] public static extern long Bolt12Invoice_payment_paths(long _this_arg);
	// MUST_USE_RES uint64_t Bolt12Invoice_created_at(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_created_at")] public static extern long Bolt12Invoice_created_at(long _this_arg);
	// MUST_USE_RES uint64_t Bolt12Invoice_relative_expiry(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_relative_expiry")] public static extern long Bolt12Invoice_relative_expiry(long _this_arg);
	// MUST_USE_RES bool Bolt12Invoice_is_expired(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_is_expired")] public static extern bool Bolt12Invoice_is_expired(long _this_arg);
	// MUST_USE_RES struct LDKCVec_AddressZ Bolt12Invoice_fallbacks(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_fallbacks")] public static extern long Bolt12Invoice_fallbacks(long _this_arg);
	// MUST_USE_RES struct LDKBolt12InvoiceFeatures Bolt12Invoice_invoice_features(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_invoice_features")] public static extern long Bolt12Invoice_invoice_features(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt12Invoice_signing_pubkey(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_signing_pubkey")] public static extern long Bolt12Invoice_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_ThirtyTwoBytesZZ Bolt12Invoice_offer_chains(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_offer_chains")] public static extern long Bolt12Invoice_offer_chains(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt12Invoice_chain(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_chain")] public static extern long Bolt12Invoice_chain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ Bolt12Invoice_metadata(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_metadata")] public static extern long Bolt12Invoice_metadata(long _this_arg);
	// MUST_USE_RES struct LDKCOption_AmountZ Bolt12Invoice_amount(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_amount")] public static extern long Bolt12Invoice_amount(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures Bolt12Invoice_offer_features(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_offer_features")] public static extern long Bolt12Invoice_offer_features(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Bolt12Invoice_description(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_description")] public static extern long Bolt12Invoice_description(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt12Invoice_absolute_expiry(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_absolute_expiry")] public static extern long Bolt12Invoice_absolute_expiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Bolt12Invoice_issuer(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_issuer")] public static extern long Bolt12Invoice_issuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedMessagePathZ Bolt12Invoice_message_paths(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_message_paths")] public static extern long Bolt12Invoice_message_paths(long _this_arg);
	// MUST_USE_RES struct LDKCOption_QuantityZ Bolt12Invoice_supported_quantity(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_supported_quantity")] public static extern long Bolt12Invoice_supported_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt12Invoice_issuer_signing_pubkey(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_issuer_signing_pubkey")] public static extern long Bolt12Invoice_issuer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice Bolt12Invoice_payer_metadata(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payer_metadata")] public static extern long Bolt12Invoice_payer_metadata(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures Bolt12Invoice_invoice_request_features(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_invoice_request_features")] public static extern long Bolt12Invoice_invoice_request_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt12Invoice_quantity(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_quantity")] public static extern long Bolt12Invoice_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt12Invoice_payer_signing_pubkey(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payer_signing_pubkey")] public static extern long Bolt12Invoice_payer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Bolt12Invoice_payer_note(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payer_note")] public static extern long Bolt12Invoice_payer_note(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt12Invoice_payment_hash(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_payment_hash")] public static extern long Bolt12Invoice_payment_hash(long _this_arg);
	// MUST_USE_RES uint64_t Bolt12Invoice_amount_msats(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_amount_msats")] public static extern long Bolt12Invoice_amount_msats(long _this_arg);
	// MUST_USE_RES struct LDKSchnorrSignature Bolt12Invoice_signature(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_signature")] public static extern long Bolt12Invoice_signature(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt12Invoice_signable_hash(const struct LDKBolt12Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_signable_hash")] public static extern long Bolt12Invoice_signable_hash(long _this_arg);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesNoneZ Bolt12Invoice_verify_using_metadata(const struct LDKBolt12Invoice *NONNULL_PTR this_arg, const struct LDKExpandedKey *NONNULL_PTR key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_verify_using_metadata")] public static extern long Bolt12Invoice_verify_using_metadata(long _this_arg, long _key);
	// MUST_USE_RES struct LDKCResult_ThirtyTwoBytesNoneZ Bolt12Invoice_verify_using_payer_data(const struct LDKBolt12Invoice *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_id, struct LDKNonce nonce, const struct LDKExpandedKey *NONNULL_PTR key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_verify_using_payer_data")] public static extern long Bolt12Invoice_verify_using_payer_data(long _this_arg, long _payment_id, long _nonce, long _key);
	// uint64_t Bolt12Invoice_hash(const struct LDKBolt12Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_hash")] public static extern long Bolt12Invoice_hash(long _o);
	// struct LDKCVec_u8Z UnsignedBolt12Invoice_write(const struct LDKUnsignedBolt12Invoice *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedBolt12Invoice_write")] public static extern long UnsignedBolt12Invoice_write(long _obj);
	// struct LDKCVec_u8Z Bolt12Invoice_write(const struct LDKBolt12Invoice *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_write")] public static extern long Bolt12Invoice_write(long _obj);
	// struct LDKCResult_Bolt12InvoiceDecodeErrorZ Bolt12Invoice_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12Invoice_read")] public static extern long Bolt12Invoice_read(long _ser);
	// void InvoiceError_free(struct LDKInvoiceError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_free")] public static extern void InvoiceError_free(long _this_obj);
	// struct LDKErroneousField InvoiceError_get_erroneous_field(const struct LDKInvoiceError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_get_erroneous_field")] public static extern long InvoiceError_get_erroneous_field(long _this_ptr);
	// void InvoiceError_set_erroneous_field(struct LDKInvoiceError *NONNULL_PTR this_ptr, struct LDKErroneousField val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_set_erroneous_field")] public static extern void InvoiceError_set_erroneous_field(long _this_ptr, long _val);
	// struct LDKUntrustedString InvoiceError_get_message(const struct LDKInvoiceError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_get_message")] public static extern long InvoiceError_get_message(long _this_ptr);
	// void InvoiceError_set_message(struct LDKInvoiceError *NONNULL_PTR this_ptr, struct LDKUntrustedString val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_set_message")] public static extern void InvoiceError_set_message(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInvoiceError InvoiceError_new(struct LDKErroneousField erroneous_field_arg, struct LDKUntrustedString message_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_new")] public static extern long InvoiceError_new(long _erroneous_field_arg, long _message_arg);
	// uint64_t InvoiceError_clone_ptr(LDKInvoiceError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_clone_ptr")] public static extern long InvoiceError_clone_ptr(long _arg);
	// struct LDKInvoiceError InvoiceError_clone(const struct LDKInvoiceError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_clone")] public static extern long InvoiceError_clone(long _orig);
	// void ErroneousField_free(struct LDKErroneousField this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_free")] public static extern void ErroneousField_free(long _this_obj);
	// uint64_t ErroneousField_get_tlv_fieldnum(const struct LDKErroneousField *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_get_tlv_fieldnum")] public static extern long ErroneousField_get_tlv_fieldnum(long _this_ptr);
	// void ErroneousField_set_tlv_fieldnum(struct LDKErroneousField *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_set_tlv_fieldnum")] public static extern void ErroneousField_set_tlv_fieldnum(long _this_ptr, long _val);
	// struct LDKCOption_CVec_u8ZZ ErroneousField_get_suggested_value(const struct LDKErroneousField *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_get_suggested_value")] public static extern long ErroneousField_get_suggested_value(long _this_ptr);
	// void ErroneousField_set_suggested_value(struct LDKErroneousField *NONNULL_PTR this_ptr, struct LDKCOption_CVec_u8ZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_set_suggested_value")] public static extern void ErroneousField_set_suggested_value(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKErroneousField ErroneousField_new(uint64_t tlv_fieldnum_arg, struct LDKCOption_CVec_u8ZZ suggested_value_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_new")] public static extern long ErroneousField_new(long _tlv_fieldnum_arg, long _suggested_value_arg);
	// uint64_t ErroneousField_clone_ptr(LDKErroneousField *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_clone_ptr")] public static extern long ErroneousField_clone_ptr(long _arg);
	// struct LDKErroneousField ErroneousField_clone(const struct LDKErroneousField *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ErroneousField_clone")] public static extern long ErroneousField_clone(long _orig);
	// MUST_USE_RES struct LDKInvoiceError InvoiceError_from_string(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_from_string")] public static extern long InvoiceError_from_string(long _s);
	// struct LDKStr InvoiceError_to_str(const struct LDKInvoiceError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_to_str")] public static extern long InvoiceError_to_str(long _o);
	// struct LDKCVec_u8Z InvoiceError_write(const struct LDKInvoiceError *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_write")] public static extern long InvoiceError_write(long _obj);
	// struct LDKCResult_InvoiceErrorDecodeErrorZ InvoiceError_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceError_read")] public static extern long InvoiceError_read(long _ser);
	// void InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_free(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_free")] public static extern void InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_free(long _this_obj);
	// MUST_USE_RES struct LDKCResult_InvoiceRequestBolt12SemanticErrorZ InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_build_and_sign(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_build_and_sign")] public static extern long InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_build_and_sign(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneBolt12SemanticErrorZ InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_chain(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder this_arg, enum LDKNetwork network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_chain")] public static extern long InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_chain(long _this_arg, Network _network);
	// MUST_USE_RES struct LDKCResult_NoneBolt12SemanticErrorZ InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_amount_msats(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder this_arg, uint64_t amount_msats);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_amount_msats")] public static extern long InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_amount_msats(long _this_arg, long _amount_msats);
	// MUST_USE_RES struct LDKCResult_NoneBolt12SemanticErrorZ InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_quantity(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder this_arg, uint64_t quantity);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_quantity")] public static extern long InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_quantity(long _this_arg, long _quantity);
	// MUST_USE_RES void InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_payer_note(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder this_arg, struct LDKStr payer_note);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_payer_note")] public static extern void InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_payer_note(long _this_arg, long _payer_note);
	// MUST_USE_RES void InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_sourced_from_human_readable_name(struct LDKInvoiceRequestWithDerivedPayerSigningPubkeyBuilder this_arg, struct LDKHumanReadableName hrn);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_sourced_from_human_readable_name")] public static extern void InvoiceRequestWithDerivedPayerSigningPubkeyBuilder_sourced_from_human_readable_name(long _this_arg, long _hrn);
	// void UnsignedInvoiceRequest_free(struct LDKUnsignedInvoiceRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_free")] public static extern void UnsignedInvoiceRequest_free(long _this_obj);
	// uint64_t UnsignedInvoiceRequest_clone_ptr(LDKUnsignedInvoiceRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_clone_ptr")] public static extern long UnsignedInvoiceRequest_clone_ptr(long _arg);
	// struct LDKUnsignedInvoiceRequest UnsignedInvoiceRequest_clone(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_clone")] public static extern long UnsignedInvoiceRequest_clone(long _orig);
	// void SignInvoiceRequestFn_free(struct LDKSignInvoiceRequestFn this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignInvoiceRequestFn_free")] public static extern void SignInvoiceRequestFn_free(long _this_ptr);
	// MUST_USE_RES struct LDKTaggedHash UnsignedInvoiceRequest_tagged_hash(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_tagged_hash")] public static extern long UnsignedInvoiceRequest_tagged_hash(long _this_arg);
	// void InvoiceRequest_free(struct LDKInvoiceRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_free")] public static extern void InvoiceRequest_free(long _this_obj);
	// uint64_t InvoiceRequest_clone_ptr(LDKInvoiceRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_clone_ptr")] public static extern long InvoiceRequest_clone_ptr(long _arg);
	// struct LDKInvoiceRequest InvoiceRequest_clone(const struct LDKInvoiceRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_clone")] public static extern long InvoiceRequest_clone(long _orig);
	// void VerifiedInvoiceRequest_free(struct LDKVerifiedInvoiceRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_free")] public static extern void VerifiedInvoiceRequest_free(long _this_obj);
	// struct LDKOfferId VerifiedInvoiceRequest_get_offer_id(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_get_offer_id")] public static extern long VerifiedInvoiceRequest_get_offer_id(long _this_ptr);
	// void VerifiedInvoiceRequest_set_offer_id(struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_ptr, struct LDKOfferId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_set_offer_id")] public static extern void VerifiedInvoiceRequest_set_offer_id(long _this_ptr, long _val);
	// uint64_t VerifiedInvoiceRequest_clone_ptr(LDKVerifiedInvoiceRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_clone_ptr")] public static extern long VerifiedInvoiceRequest_clone_ptr(long _arg);
	// struct LDKVerifiedInvoiceRequest VerifiedInvoiceRequest_clone(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_clone")] public static extern long VerifiedInvoiceRequest_clone(long _orig);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ UnsignedInvoiceRequest_chains(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_chains")] public static extern long UnsignedInvoiceRequest_chains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ UnsignedInvoiceRequest_metadata(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_metadata")] public static extern long UnsignedInvoiceRequest_metadata(long _this_arg);
	// MUST_USE_RES struct LDKCOption_AmountZ UnsignedInvoiceRequest_amount(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_amount")] public static extern long UnsignedInvoiceRequest_amount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedInvoiceRequest_description(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_description")] public static extern long UnsignedInvoiceRequest_description(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures UnsignedInvoiceRequest_offer_features(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_offer_features")] public static extern long UnsignedInvoiceRequest_offer_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedInvoiceRequest_absolute_expiry(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_absolute_expiry")] public static extern long UnsignedInvoiceRequest_absolute_expiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedInvoiceRequest_issuer(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_issuer")] public static extern long UnsignedInvoiceRequest_issuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedMessagePathZ UnsignedInvoiceRequest_paths(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_paths")] public static extern long UnsignedInvoiceRequest_paths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity UnsignedInvoiceRequest_supported_quantity(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_supported_quantity")] public static extern long UnsignedInvoiceRequest_supported_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedInvoiceRequest_issuer_signing_pubkey(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_issuer_signing_pubkey")] public static extern long UnsignedInvoiceRequest_issuer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice UnsignedInvoiceRequest_payer_metadata(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_payer_metadata")] public static extern long UnsignedInvoiceRequest_payer_metadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes UnsignedInvoiceRequest_chain(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_chain")] public static extern long UnsignedInvoiceRequest_chain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedInvoiceRequest_amount_msats(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_amount_msats")] public static extern long UnsignedInvoiceRequest_amount_msats(long _this_arg);
	// MUST_USE_RES bool UnsignedInvoiceRequest_has_amount_msats(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_has_amount_msats")] public static extern bool UnsignedInvoiceRequest_has_amount_msats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures UnsignedInvoiceRequest_invoice_request_features(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_invoice_request_features")] public static extern long UnsignedInvoiceRequest_invoice_request_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z UnsignedInvoiceRequest_quantity(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_quantity")] public static extern long UnsignedInvoiceRequest_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey UnsignedInvoiceRequest_payer_signing_pubkey(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_payer_signing_pubkey")] public static extern long UnsignedInvoiceRequest_payer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString UnsignedInvoiceRequest_payer_note(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_payer_note")] public static extern long UnsignedInvoiceRequest_payer_note(long _this_arg);
	// MUST_USE_RES struct LDKHumanReadableName UnsignedInvoiceRequest_offer_from_hrn(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_offer_from_hrn")] public static extern long UnsignedInvoiceRequest_offer_from_hrn(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ InvoiceRequest_chains(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_chains")] public static extern long InvoiceRequest_chains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ InvoiceRequest_metadata(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_metadata")] public static extern long InvoiceRequest_metadata(long _this_arg);
	// MUST_USE_RES struct LDKCOption_AmountZ InvoiceRequest_amount(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_amount")] public static extern long InvoiceRequest_amount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString InvoiceRequest_description(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_description")] public static extern long InvoiceRequest_description(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures InvoiceRequest_offer_features(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_offer_features")] public static extern long InvoiceRequest_offer_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z InvoiceRequest_absolute_expiry(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_absolute_expiry")] public static extern long InvoiceRequest_absolute_expiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString InvoiceRequest_issuer(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_issuer")] public static extern long InvoiceRequest_issuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedMessagePathZ InvoiceRequest_paths(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_paths")] public static extern long InvoiceRequest_paths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity InvoiceRequest_supported_quantity(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_supported_quantity")] public static extern long InvoiceRequest_supported_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey InvoiceRequest_issuer_signing_pubkey(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_issuer_signing_pubkey")] public static extern long InvoiceRequest_issuer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice InvoiceRequest_payer_metadata(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_payer_metadata")] public static extern long InvoiceRequest_payer_metadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes InvoiceRequest_chain(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_chain")] public static extern long InvoiceRequest_chain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z InvoiceRequest_amount_msats(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_amount_msats")] public static extern long InvoiceRequest_amount_msats(long _this_arg);
	// MUST_USE_RES bool InvoiceRequest_has_amount_msats(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_has_amount_msats")] public static extern bool InvoiceRequest_has_amount_msats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures InvoiceRequest_invoice_request_features(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_invoice_request_features")] public static extern long InvoiceRequest_invoice_request_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z InvoiceRequest_quantity(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_quantity")] public static extern long InvoiceRequest_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey InvoiceRequest_payer_signing_pubkey(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_payer_signing_pubkey")] public static extern long InvoiceRequest_payer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString InvoiceRequest_payer_note(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_payer_note")] public static extern long InvoiceRequest_payer_note(long _this_arg);
	// MUST_USE_RES struct LDKHumanReadableName InvoiceRequest_offer_from_hrn(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_offer_from_hrn")] public static extern long InvoiceRequest_offer_from_hrn(long _this_arg);
	// MUST_USE_RES struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ InvoiceRequest_respond_with(const struct LDKInvoiceRequest *NONNULL_PTR this_arg, struct LDKCVec_BlindedPaymentPathZ payment_paths, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_respond_with")] public static extern long InvoiceRequest_respond_with(long _this_arg, long _payment_paths, long _payment_hash);
	// MUST_USE_RES struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ InvoiceRequest_respond_with_no_std(const struct LDKInvoiceRequest *NONNULL_PTR this_arg, struct LDKCVec_BlindedPaymentPathZ payment_paths, struct LDKThirtyTwoBytes payment_hash, uint64_t created_at);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_respond_with_no_std")] public static extern long InvoiceRequest_respond_with_no_std(long _this_arg, long _payment_paths, long _payment_hash, long _created_at);
	// MUST_USE_RES struct LDKCResult_VerifiedInvoiceRequestNoneZ InvoiceRequest_verify_using_metadata(struct LDKInvoiceRequest this_arg, const struct LDKExpandedKey *NONNULL_PTR key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_verify_using_metadata")] public static extern long InvoiceRequest_verify_using_metadata(long _this_arg, long _key);
	// MUST_USE_RES struct LDKCResult_VerifiedInvoiceRequestNoneZ InvoiceRequest_verify_using_recipient_data(struct LDKInvoiceRequest this_arg, struct LDKNonce nonce, const struct LDKExpandedKey *NONNULL_PTR key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_verify_using_recipient_data")] public static extern long InvoiceRequest_verify_using_recipient_data(long _this_arg, long _nonce, long _key);
	// MUST_USE_RES struct LDKSchnorrSignature InvoiceRequest_signature(const struct LDKInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_signature")] public static extern long InvoiceRequest_signature(long _this_arg);
	// MUST_USE_RES struct LDKCVec_ThirtyTwoBytesZ VerifiedInvoiceRequest_chains(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_chains")] public static extern long VerifiedInvoiceRequest_chains(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ VerifiedInvoiceRequest_metadata(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_metadata")] public static extern long VerifiedInvoiceRequest_metadata(long _this_arg);
	// MUST_USE_RES struct LDKCOption_AmountZ VerifiedInvoiceRequest_amount(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_amount")] public static extern long VerifiedInvoiceRequest_amount(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString VerifiedInvoiceRequest_description(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_description")] public static extern long VerifiedInvoiceRequest_description(long _this_arg);
	// MUST_USE_RES struct LDKOfferFeatures VerifiedInvoiceRequest_offer_features(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_offer_features")] public static extern long VerifiedInvoiceRequest_offer_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z VerifiedInvoiceRequest_absolute_expiry(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_absolute_expiry")] public static extern long VerifiedInvoiceRequest_absolute_expiry(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString VerifiedInvoiceRequest_issuer(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_issuer")] public static extern long VerifiedInvoiceRequest_issuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedMessagePathZ VerifiedInvoiceRequest_paths(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_paths")] public static extern long VerifiedInvoiceRequest_paths(long _this_arg);
	// MUST_USE_RES struct LDKQuantity VerifiedInvoiceRequest_supported_quantity(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_supported_quantity")] public static extern long VerifiedInvoiceRequest_supported_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey VerifiedInvoiceRequest_issuer_signing_pubkey(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_issuer_signing_pubkey")] public static extern long VerifiedInvoiceRequest_issuer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKu8slice VerifiedInvoiceRequest_payer_metadata(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_payer_metadata")] public static extern long VerifiedInvoiceRequest_payer_metadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes VerifiedInvoiceRequest_chain(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_chain")] public static extern long VerifiedInvoiceRequest_chain(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z VerifiedInvoiceRequest_amount_msats(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_amount_msats")] public static extern long VerifiedInvoiceRequest_amount_msats(long _this_arg);
	// MUST_USE_RES bool VerifiedInvoiceRequest_has_amount_msats(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_has_amount_msats")] public static extern bool VerifiedInvoiceRequest_has_amount_msats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures VerifiedInvoiceRequest_invoice_request_features(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_invoice_request_features")] public static extern long VerifiedInvoiceRequest_invoice_request_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z VerifiedInvoiceRequest_quantity(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_quantity")] public static extern long VerifiedInvoiceRequest_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey VerifiedInvoiceRequest_payer_signing_pubkey(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_payer_signing_pubkey")] public static extern long VerifiedInvoiceRequest_payer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString VerifiedInvoiceRequest_payer_note(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_payer_note")] public static extern long VerifiedInvoiceRequest_payer_note(long _this_arg);
	// MUST_USE_RES struct LDKHumanReadableName VerifiedInvoiceRequest_offer_from_hrn(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_offer_from_hrn")] public static extern long VerifiedInvoiceRequest_offer_from_hrn(long _this_arg);
	// MUST_USE_RES struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ VerifiedInvoiceRequest_respond_with(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg, struct LDKCVec_BlindedPaymentPathZ payment_paths, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_respond_with")] public static extern long VerifiedInvoiceRequest_respond_with(long _this_arg, long _payment_paths, long _payment_hash);
	// MUST_USE_RES struct LDKCResult_InvoiceWithExplicitSigningPubkeyBuilderBolt12SemanticErrorZ VerifiedInvoiceRequest_respond_with_no_std(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg, struct LDKCVec_BlindedPaymentPathZ payment_paths, struct LDKThirtyTwoBytes payment_hash, uint64_t created_at);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_respond_with_no_std")] public static extern long VerifiedInvoiceRequest_respond_with_no_std(long _this_arg, long _payment_paths, long _payment_hash, long _created_at);
	// MUST_USE_RES struct LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ VerifiedInvoiceRequest_respond_using_derived_keys(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg, struct LDKCVec_BlindedPaymentPathZ payment_paths, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_respond_using_derived_keys")] public static extern long VerifiedInvoiceRequest_respond_using_derived_keys(long _this_arg, long _payment_paths, long _payment_hash);
	// MUST_USE_RES struct LDKCResult_InvoiceWithDerivedSigningPubkeyBuilderBolt12SemanticErrorZ VerifiedInvoiceRequest_respond_using_derived_keys_no_std(const struct LDKVerifiedInvoiceRequest *NONNULL_PTR this_arg, struct LDKCVec_BlindedPaymentPathZ payment_paths, struct LDKThirtyTwoBytes payment_hash, uint64_t created_at);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_VerifiedInvoiceRequest_respond_using_derived_keys_no_std")] public static extern long VerifiedInvoiceRequest_respond_using_derived_keys_no_std(long _this_arg, long _payment_paths, long _payment_hash, long _created_at);
	// struct LDKCVec_u8Z UnsignedInvoiceRequest_write(const struct LDKUnsignedInvoiceRequest *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnsignedInvoiceRequest_write")] public static extern long UnsignedInvoiceRequest_write(long _obj);
	// struct LDKCVec_u8Z InvoiceRequest_write(const struct LDKInvoiceRequest *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_write")] public static extern long InvoiceRequest_write(long _obj);
	// struct LDKCResult_InvoiceRequestDecodeErrorZ InvoiceRequest_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequest_read")] public static extern long InvoiceRequest_read(long _ser);
	// void InvoiceRequestFields_free(struct LDKInvoiceRequestFields this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_free")] public static extern void InvoiceRequestFields_free(long _this_obj);
	// struct LDKPublicKey InvoiceRequestFields_get_payer_signing_pubkey(const struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_get_payer_signing_pubkey")] public static extern long InvoiceRequestFields_get_payer_signing_pubkey(long _this_ptr);
	// void InvoiceRequestFields_set_payer_signing_pubkey(struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_set_payer_signing_pubkey")] public static extern void InvoiceRequestFields_set_payer_signing_pubkey(long _this_ptr, long _val);
	// struct LDKCOption_u64Z InvoiceRequestFields_get_quantity(const struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_get_quantity")] public static extern long InvoiceRequestFields_get_quantity(long _this_ptr);
	// void InvoiceRequestFields_set_quantity(struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_set_quantity")] public static extern void InvoiceRequestFields_set_quantity(long _this_ptr, long _val);
	// struct LDKUntrustedString InvoiceRequestFields_get_payer_note_truncated(const struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_get_payer_note_truncated")] public static extern long InvoiceRequestFields_get_payer_note_truncated(long _this_ptr);
	// void InvoiceRequestFields_set_payer_note_truncated(struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr, struct LDKUntrustedString val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_set_payer_note_truncated")] public static extern void InvoiceRequestFields_set_payer_note_truncated(long _this_ptr, long _val);
	// struct LDKHumanReadableName InvoiceRequestFields_get_human_readable_name(const struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_get_human_readable_name")] public static extern long InvoiceRequestFields_get_human_readable_name(long _this_ptr);
	// void InvoiceRequestFields_set_human_readable_name(struct LDKInvoiceRequestFields *NONNULL_PTR this_ptr, struct LDKHumanReadableName val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_set_human_readable_name")] public static extern void InvoiceRequestFields_set_human_readable_name(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInvoiceRequestFields InvoiceRequestFields_new(struct LDKPublicKey payer_signing_pubkey_arg, struct LDKCOption_u64Z quantity_arg, struct LDKUntrustedString payer_note_truncated_arg, struct LDKHumanReadableName human_readable_name_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_new")] public static extern long InvoiceRequestFields_new(long _payer_signing_pubkey_arg, long _quantity_arg, long _payer_note_truncated_arg, long _human_readable_name_arg);
	// uint64_t InvoiceRequestFields_clone_ptr(LDKInvoiceRequestFields *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_clone_ptr")] public static extern long InvoiceRequestFields_clone_ptr(long _arg);
	// struct LDKInvoiceRequestFields InvoiceRequestFields_clone(const struct LDKInvoiceRequestFields *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_clone")] public static extern long InvoiceRequestFields_clone(long _orig);
	// bool InvoiceRequestFields_eq(const struct LDKInvoiceRequestFields *NONNULL_PTR a, const struct LDKInvoiceRequestFields *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_eq")] public static extern bool InvoiceRequestFields_eq(long _a, long _b);
	// struct LDKCVec_u8Z InvoiceRequestFields_write(const struct LDKInvoiceRequestFields *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_write")] public static extern long InvoiceRequestFields_write(long _obj);
	// struct LDKCResult_InvoiceRequestFieldsDecodeErrorZ InvoiceRequestFields_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFields_read")] public static extern long InvoiceRequestFields_read(long _ser);
	// void TaggedHash_free(struct LDKTaggedHash this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_free")] public static extern void TaggedHash_free(long _this_obj);
	// uint64_t TaggedHash_clone_ptr(LDKTaggedHash *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_clone_ptr")] public static extern long TaggedHash_clone_ptr(long _arg);
	// struct LDKTaggedHash TaggedHash_clone(const struct LDKTaggedHash *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_clone")] public static extern long TaggedHash_clone(long _orig);
	// MUST_USE_RES const uint8_t (*TaggedHash_as_digest(const struct LDKTaggedHash *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_as_digest")] public static extern long TaggedHash_as_digest(long _this_arg);
	// MUST_USE_RES struct LDKStr TaggedHash_tag(const struct LDKTaggedHash *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_tag")] public static extern long TaggedHash_tag(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes TaggedHash_merkle_root(const struct LDKTaggedHash *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_TaggedHash_merkle_root")] public static extern long TaggedHash_merkle_root(long _this_arg);
	// void SignError_free(struct LDKSignError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignError_free")] public static extern void SignError_free(long _this_ptr);
	// uint64_t SignError_clone_ptr(LDKSignError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignError_clone_ptr")] public static extern long SignError_clone_ptr(long _arg);
	// struct LDKSignError SignError_clone(const struct LDKSignError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignError_clone")] public static extern long SignError_clone(long _orig);
	// struct LDKSignError SignError_signing(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignError_signing")] public static extern long SignError_signing();
	// struct LDKSignError SignError_verification(enum LDKSecp256k1Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignError_verification")] public static extern long SignError_verification(Secp256k1Error _a);
	// void Nonce_free(struct LDKNonce this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_free")] public static extern void Nonce_free(long _this_obj);
	// uint64_t Nonce_clone_ptr(LDKNonce *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_clone_ptr")] public static extern long Nonce_clone_ptr(long _arg);
	// struct LDKNonce Nonce_clone(const struct LDKNonce *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_clone")] public static extern long Nonce_clone(long _orig);
	// bool Nonce_eq(const struct LDKNonce *NONNULL_PTR a, const struct LDKNonce *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_eq")] public static extern bool Nonce_eq(long _a, long _b);
	// MUST_USE_RES struct LDKNonce Nonce_from_entropy_source(struct LDKEntropySource entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_from_entropy_source")] public static extern long Nonce_from_entropy_source(long _entropy_source);
	// MUST_USE_RES struct LDKu8slice Nonce_as_slice(const struct LDKNonce *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_as_slice")] public static extern long Nonce_as_slice(long _this_arg);
	// struct LDKCVec_u8Z Nonce_write(const struct LDKNonce *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_write")] public static extern long Nonce_write(long _obj);
	// struct LDKCResult_NonceDecodeErrorZ Nonce_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Nonce_read")] public static extern long Nonce_read(long _ser);
	// void Bolt12ParseError_free(struct LDKBolt12ParseError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12ParseError_free")] public static extern void Bolt12ParseError_free(long _this_obj);
	// uint64_t Bolt12ParseError_clone_ptr(LDKBolt12ParseError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12ParseError_clone_ptr")] public static extern long Bolt12ParseError_clone_ptr(long _arg);
	// struct LDKBolt12ParseError Bolt12ParseError_clone(const struct LDKBolt12ParseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12ParseError_clone")] public static extern long Bolt12ParseError_clone(long _orig);
	// enum LDKBolt12SemanticError Bolt12SemanticError_clone(const enum LDKBolt12SemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_clone")] public static extern Bolt12SemanticError Bolt12SemanticError_clone(long _orig);
	// enum LDKBolt12SemanticError Bolt12SemanticError_already_expired(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_already_expired")] public static extern Bolt12SemanticError Bolt12SemanticError_already_expired();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unsupported_chain(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unsupported_chain")] public static extern Bolt12SemanticError Bolt12SemanticError_unsupported_chain();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_chain(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_chain")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_chain();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_amount")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_amount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_amount")] public static extern Bolt12SemanticError Bolt12SemanticError_invalid_amount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_insufficient_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_insufficient_amount")] public static extern Bolt12SemanticError Bolt12SemanticError_insufficient_amount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_amount")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_amount();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unsupported_currency(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unsupported_currency")] public static extern Bolt12SemanticError Bolt12SemanticError_unsupported_currency();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unknown_required_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unknown_required_features")] public static extern Bolt12SemanticError Bolt12SemanticError_unknown_required_features();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_features")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_features();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_description(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_description")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_description();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_issuer_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_issuer_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_issuer_signing_pubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_issuer_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_issuer_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_issuer_signing_pubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_quantity(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_quantity")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_quantity();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_quantity(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_quantity")] public static extern Bolt12SemanticError Bolt12SemanticError_invalid_quantity();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_quantity(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_quantity")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_quantity();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_metadata(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_metadata")] public static extern Bolt12SemanticError Bolt12SemanticError_invalid_metadata();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_metadata(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_metadata")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_metadata();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_payer_metadata(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_payer_metadata")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_payer_metadata();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_payer_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_payer_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_payer_signing_pubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_duplicate_payment_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_duplicate_payment_id")] public static extern Bolt12SemanticError Bolt12SemanticError_duplicate_payment_id();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_paths(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_paths")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_paths();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_paths(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_paths")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_paths();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_pay_info(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_pay_info")] public static extern Bolt12SemanticError Bolt12SemanticError_invalid_pay_info();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_creation_time(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_creation_time")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_creation_time();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_payment_hash(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_payment_hash")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_payment_hash();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_payment_hash(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_payment_hash")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_payment_hash();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_signing_pubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_invalid_signing_pubkey(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_invalid_signing_pubkey")] public static extern Bolt12SemanticError Bolt12SemanticError_invalid_signing_pubkey();
	// enum LDKBolt12SemanticError Bolt12SemanticError_missing_signature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_missing_signature")] public static extern Bolt12SemanticError Bolt12SemanticError_missing_signature();
	// enum LDKBolt12SemanticError Bolt12SemanticError_unexpected_human_readable_name(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12SemanticError_unexpected_human_readable_name")] public static extern Bolt12SemanticError Bolt12SemanticError_unexpected_human_readable_name();
	// void RefundMaybeWithDerivedMetadataBuilder_free(struct LDKRefundMaybeWithDerivedMetadataBuilder this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_free")] public static extern void RefundMaybeWithDerivedMetadataBuilder_free(long _this_obj);
	// uint64_t RefundMaybeWithDerivedMetadataBuilder_clone_ptr(LDKRefundMaybeWithDerivedMetadataBuilder *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_clone_ptr")] public static extern long RefundMaybeWithDerivedMetadataBuilder_clone_ptr(long _arg);
	// struct LDKRefundMaybeWithDerivedMetadataBuilder RefundMaybeWithDerivedMetadataBuilder_clone(const struct LDKRefundMaybeWithDerivedMetadataBuilder *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_clone")] public static extern long RefundMaybeWithDerivedMetadataBuilder_clone(long _orig);
	// MUST_USE_RES struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ RefundMaybeWithDerivedMetadataBuilder_new(struct LDKCVec_u8Z metadata, struct LDKPublicKey signing_pubkey, uint64_t amount_msats);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_new")] public static extern long RefundMaybeWithDerivedMetadataBuilder_new(long _metadata, long _signing_pubkey, long _amount_msats);
	// MUST_USE_RES struct LDKCResult_RefundMaybeWithDerivedMetadataBuilderBolt12SemanticErrorZ RefundMaybeWithDerivedMetadataBuilder_deriving_signing_pubkey(struct LDKPublicKey node_id, const struct LDKExpandedKey *NONNULL_PTR expanded_key, struct LDKNonce nonce, uint64_t amount_msats, struct LDKThirtyTwoBytes payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_deriving_signing_pubkey")] public static extern long RefundMaybeWithDerivedMetadataBuilder_deriving_signing_pubkey(long _node_id, long _expanded_key, long _nonce, long _amount_msats, long _payment_id);
	// MUST_USE_RES void RefundMaybeWithDerivedMetadataBuilder_description(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg, struct LDKStr description);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_description")] public static extern void RefundMaybeWithDerivedMetadataBuilder_description(long _this_arg, long _description);
	// MUST_USE_RES void RefundMaybeWithDerivedMetadataBuilder_absolute_expiry(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg, uint64_t absolute_expiry);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_absolute_expiry")] public static extern void RefundMaybeWithDerivedMetadataBuilder_absolute_expiry(long _this_arg, long _absolute_expiry);
	// MUST_USE_RES void RefundMaybeWithDerivedMetadataBuilder_issuer(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg, struct LDKStr issuer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_issuer")] public static extern void RefundMaybeWithDerivedMetadataBuilder_issuer(long _this_arg, long _issuer);
	// MUST_USE_RES void RefundMaybeWithDerivedMetadataBuilder_path(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg, struct LDKBlindedMessagePath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_path")] public static extern void RefundMaybeWithDerivedMetadataBuilder_path(long _this_arg, long _path);
	// MUST_USE_RES void RefundMaybeWithDerivedMetadataBuilder_chain(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg, enum LDKNetwork network);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_chain")] public static extern void RefundMaybeWithDerivedMetadataBuilder_chain(long _this_arg, Network _network);
	// MUST_USE_RES void RefundMaybeWithDerivedMetadataBuilder_quantity(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg, uint64_t quantity);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_quantity")] public static extern void RefundMaybeWithDerivedMetadataBuilder_quantity(long _this_arg, long _quantity);
	// MUST_USE_RES void RefundMaybeWithDerivedMetadataBuilder_payer_note(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg, struct LDKStr payer_note);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_payer_note")] public static extern void RefundMaybeWithDerivedMetadataBuilder_payer_note(long _this_arg, long _payer_note);
	// MUST_USE_RES struct LDKCResult_RefundBolt12SemanticErrorZ RefundMaybeWithDerivedMetadataBuilder_build(struct LDKRefundMaybeWithDerivedMetadataBuilder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RefundMaybeWithDerivedMetadataBuilder_build")] public static extern long RefundMaybeWithDerivedMetadataBuilder_build(long _this_arg);
	// void Refund_free(struct LDKRefund this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_free")] public static extern void Refund_free(long _this_obj);
	// uint64_t Refund_clone_ptr(LDKRefund *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_clone_ptr")] public static extern long Refund_clone_ptr(long _arg);
	// struct LDKRefund Refund_clone(const struct LDKRefund *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_clone")] public static extern long Refund_clone(long _orig);
	// MUST_USE_RES struct LDKPrintableString Refund_description(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_description")] public static extern long Refund_description(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Refund_absolute_expiry(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_absolute_expiry")] public static extern long Refund_absolute_expiry(long _this_arg);
	// MUST_USE_RES bool Refund_is_expired(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_is_expired")] public static extern bool Refund_is_expired(long _this_arg);
	// MUST_USE_RES bool Refund_is_expired_no_std(const struct LDKRefund *NONNULL_PTR this_arg, uint64_t duration_since_epoch);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_is_expired_no_std")] public static extern bool Refund_is_expired_no_std(long _this_arg, long _duration_since_epoch);
	// MUST_USE_RES struct LDKPrintableString Refund_issuer(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_issuer")] public static extern long Refund_issuer(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedMessagePathZ Refund_paths(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_paths")] public static extern long Refund_paths(long _this_arg);
	// MUST_USE_RES struct LDKu8slice Refund_payer_metadata(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_payer_metadata")] public static extern long Refund_payer_metadata(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Refund_chain(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_chain")] public static extern long Refund_chain(long _this_arg);
	// MUST_USE_RES uint64_t Refund_amount_msats(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_amount_msats")] public static extern long Refund_amount_msats(long _this_arg);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures Refund_features(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_features")] public static extern long Refund_features(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Refund_quantity(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_quantity")] public static extern long Refund_quantity(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Refund_payer_signing_pubkey(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_payer_signing_pubkey")] public static extern long Refund_payer_signing_pubkey(long _this_arg);
	// MUST_USE_RES struct LDKPrintableString Refund_payer_note(const struct LDKRefund *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_payer_note")] public static extern long Refund_payer_note(long _this_arg);
	// uint64_t Refund_hash(const struct LDKRefund *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_hash")] public static extern long Refund_hash(long _o);
	// struct LDKCResult_RefundDecodeErrorZ Refund_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_read")] public static extern long Refund_read(long _ser);
	// struct LDKCVec_u8Z Refund_write(const struct LDKRefund *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_write")] public static extern long Refund_write(long _obj);
	// struct LDKCResult_RefundBolt12ParseErrorZ Refund_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_from_str")] public static extern long Refund_from_str(long _s);
	// struct LDKStr Refund_to_str(const struct LDKRefund *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Refund_to_str")] public static extern long Refund_to_str(long _o);
	// enum LDKUtxoLookupError UtxoLookupError_clone(const enum LDKUtxoLookupError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookupError_clone")] public static extern UtxoLookupError UtxoLookupError_clone(long _orig);
	// enum LDKUtxoLookupError UtxoLookupError_unknown_chain(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookupError_unknown_chain")] public static extern UtxoLookupError UtxoLookupError_unknown_chain();
	// enum LDKUtxoLookupError UtxoLookupError_unknown_tx(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookupError_unknown_tx")] public static extern UtxoLookupError UtxoLookupError_unknown_tx();
	// void UtxoResult_free(struct LDKUtxoResult this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_free")] public static extern void UtxoResult_free(long _this_ptr);
	// uint64_t UtxoResult_clone_ptr(LDKUtxoResult *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_clone_ptr")] public static extern long UtxoResult_clone_ptr(long _arg);
	// struct LDKUtxoResult UtxoResult_clone(const struct LDKUtxoResult *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_clone")] public static extern long UtxoResult_clone(long _orig);
	// struct LDKUtxoResult UtxoResult_sync(struct LDKCResult_TxOutUtxoLookupErrorZ a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_sync")] public static extern long UtxoResult_sync(long _a);
	// struct LDKUtxoResult UtxoResult_async(struct LDKUtxoFuture a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoResult_async")] public static extern long UtxoResult_async(long _a);
	// void UtxoLookup_free(struct LDKUtxoLookup this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoLookup_free")] public static extern void UtxoLookup_free(long _this_ptr);
	// void UtxoFuture_free(struct LDKUtxoFuture this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_free")] public static extern void UtxoFuture_free(long _this_obj);
	// uint64_t UtxoFuture_clone_ptr(LDKUtxoFuture *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_clone_ptr")] public static extern long UtxoFuture_clone_ptr(long _arg);
	// struct LDKUtxoFuture UtxoFuture_clone(const struct LDKUtxoFuture *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_clone")] public static extern long UtxoFuture_clone(long _orig);
	// MUST_USE_RES struct LDKUtxoFuture UtxoFuture_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_new")] public static extern long UtxoFuture_new();
	// void UtxoFuture_resolve_without_forwarding(const struct LDKUtxoFuture *NONNULL_PTR this_arg, const struct LDKNetworkGraph *NONNULL_PTR graph, struct LDKCResult_TxOutUtxoLookupErrorZ result);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_resolve_without_forwarding")] public static extern void UtxoFuture_resolve_without_forwarding(long _this_arg, long _graph, long _result);
	// void UtxoFuture_resolve(const struct LDKUtxoFuture *NONNULL_PTR this_arg, const struct LDKNetworkGraph *NONNULL_PTR graph, const struct LDKP2PGossipSync *NONNULL_PTR gossip, struct LDKCResult_TxOutUtxoLookupErrorZ result);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UtxoFuture_resolve")] public static extern void UtxoFuture_resolve(long _this_arg, long _graph, long _gossip, long _result);
	// void NodeId_free(struct LDKNodeId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_free")] public static extern void NodeId_free(long _this_obj);
	// uint64_t NodeId_clone_ptr(LDKNodeId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_clone_ptr")] public static extern long NodeId_clone_ptr(long _arg);
	// struct LDKNodeId NodeId_clone(const struct LDKNodeId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_clone")] public static extern long NodeId_clone(long _orig);
	// bool NodeId_eq(const struct LDKNodeId *NONNULL_PTR a, const struct LDKNodeId *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_eq")] public static extern bool NodeId_eq(long _a, long _b);
	// MUST_USE_RES struct LDKNodeId NodeId_from_pubkey(struct LDKPublicKey pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_from_pubkey")] public static extern long NodeId_from_pubkey(long _pubkey);
	// MUST_USE_RES struct LDKCResult_NodeIdDecodeErrorZ NodeId_from_slice(struct LDKu8slice bytes);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_from_slice")] public static extern long NodeId_from_slice(long _bytes);
	// MUST_USE_RES struct LDKu8slice NodeId_as_slice(const struct LDKNodeId *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_as_slice")] public static extern long NodeId_as_slice(long _this_arg);
	// MUST_USE_RES const uint8_t (*NodeId_as_array(const struct LDKNodeId *NONNULL_PTR this_arg))[33];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_as_array")] public static extern long NodeId_as_array(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PublicKeySecp256k1ErrorZ NodeId_as_pubkey(const struct LDKNodeId *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_as_pubkey")] public static extern long NodeId_as_pubkey(long _this_arg);
	// struct LDKStr NodeId_to_str(const struct LDKNodeId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_to_str")] public static extern long NodeId_to_str(long _o);
	// uint64_t NodeId_hash(const struct LDKNodeId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_hash")] public static extern long NodeId_hash(long _o);
	// struct LDKCVec_u8Z NodeId_write(const struct LDKNodeId *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_write")] public static extern long NodeId_write(long _obj);
	// struct LDKCResult_NodeIdDecodeErrorZ NodeId_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeId_read")] public static extern long NodeId_read(long _ser);
	// void NetworkGraph_free(struct LDKNetworkGraph this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_free")] public static extern void NetworkGraph_free(long _this_obj);
	// void ReadOnlyNetworkGraph_free(struct LDKReadOnlyNetworkGraph this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_free")] public static extern void ReadOnlyNetworkGraph_free(long _this_obj);
	// void NetworkUpdate_free(struct LDKNetworkUpdate this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_free")] public static extern void NetworkUpdate_free(long _this_ptr);
	// uint64_t NetworkUpdate_clone_ptr(LDKNetworkUpdate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_clone_ptr")] public static extern long NetworkUpdate_clone_ptr(long _arg);
	// struct LDKNetworkUpdate NetworkUpdate_clone(const struct LDKNetworkUpdate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_clone")] public static extern long NetworkUpdate_clone(long _orig);
	// struct LDKNetworkUpdate NetworkUpdate_channel_failure(uint64_t short_channel_id, bool is_permanent);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_channel_failure")] public static extern long NetworkUpdate_channel_failure(long _short_channel_id, bool _is_permanent);
	// struct LDKNetworkUpdate NetworkUpdate_node_failure(struct LDKPublicKey node_id, bool is_permanent);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_node_failure")] public static extern long NetworkUpdate_node_failure(long _node_id, bool _is_permanent);
	// bool NetworkUpdate_eq(const struct LDKNetworkUpdate *NONNULL_PTR a, const struct LDKNetworkUpdate *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_eq")] public static extern bool NetworkUpdate_eq(long _a, long _b);
	// struct LDKCVec_u8Z NetworkUpdate_write(const struct LDKNetworkUpdate *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_write")] public static extern long NetworkUpdate_write(long _obj);
	// struct LDKCResult_COption_NetworkUpdateZDecodeErrorZ NetworkUpdate_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkUpdate_read")] public static extern long NetworkUpdate_read(long _ser);
	// void P2PGossipSync_free(struct LDKP2PGossipSync this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_free")] public static extern void P2PGossipSync_free(long _this_obj);
	// MUST_USE_RES struct LDKP2PGossipSync P2PGossipSync_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKCOption_UtxoLookupZ utxo_lookup, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_new")] public static extern long P2PGossipSync_new(long _network_graph, long _utxo_lookup, long _logger);
	// void P2PGossipSync_add_utxo_lookup(const struct LDKP2PGossipSync *NONNULL_PTR this_arg, struct LDKCOption_UtxoLookupZ utxo_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_add_utxo_lookup")] public static extern void P2PGossipSync_add_utxo_lookup(long _this_arg, long _utxo_lookup);
	// void NetworkGraph_handle_network_update(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKNetworkUpdate *NONNULL_PTR network_update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_handle_network_update")] public static extern void NetworkGraph_handle_network_update(long _this_arg, long _network_update);
	// MUST_USE_RES struct LDKThirtyTwoBytes NetworkGraph_get_chain_hash(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_get_chain_hash")] public static extern long NetworkGraph_get_chain_hash(long _this_arg);
	// struct LDKCResult_NoneLightningErrorZ verify_node_announcement(const struct LDKNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_verify_node_announcement")] public static extern long verify_node_announcement(long _msg);
	// struct LDKCResult_NoneLightningErrorZ verify_channel_announcement(const struct LDKChannelAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_verify_channel_announcement")] public static extern long verify_channel_announcement(long _msg);
	// struct LDKRoutingMessageHandler P2PGossipSync_as_RoutingMessageHandler(const struct LDKP2PGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_as_RoutingMessageHandler")] public static extern long P2PGossipSync_as_RoutingMessageHandler(long _this_arg);
	// struct LDKMessageSendEventsProvider P2PGossipSync_as_MessageSendEventsProvider(const struct LDKP2PGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_P2PGossipSync_as_MessageSendEventsProvider")] public static extern long P2PGossipSync_as_MessageSendEventsProvider(long _this_arg);
	// void ChannelUpdateInfo_free(struct LDKChannelUpdateInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_free")] public static extern void ChannelUpdateInfo_free(long _this_obj);
	// uint64_t ChannelUpdateInfo_get_htlc_minimum_msat(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_htlc_minimum_msat")] public static extern long ChannelUpdateInfo_get_htlc_minimum_msat(long _this_ptr);
	// void ChannelUpdateInfo_set_htlc_minimum_msat(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_htlc_minimum_msat")] public static extern void ChannelUpdateInfo_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t ChannelUpdateInfo_get_htlc_maximum_msat(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_htlc_maximum_msat")] public static extern long ChannelUpdateInfo_get_htlc_maximum_msat(long _this_ptr);
	// void ChannelUpdateInfo_set_htlc_maximum_msat(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_htlc_maximum_msat")] public static extern void ChannelUpdateInfo_set_htlc_maximum_msat(long _this_ptr, long _val);
	// struct LDKRoutingFees ChannelUpdateInfo_get_fees(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_fees")] public static extern long ChannelUpdateInfo_get_fees(long _this_ptr);
	// void ChannelUpdateInfo_set_fees(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, struct LDKRoutingFees val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_fees")] public static extern void ChannelUpdateInfo_set_fees(long _this_ptr, long _val);
	// uint32_t ChannelUpdateInfo_get_last_update(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_last_update")] public static extern int ChannelUpdateInfo_get_last_update(long _this_ptr);
	// void ChannelUpdateInfo_set_last_update(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_last_update")] public static extern void ChannelUpdateInfo_set_last_update(long _this_ptr, int _val);
	// uint16_t ChannelUpdateInfo_get_cltv_expiry_delta(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_cltv_expiry_delta")] public static extern short ChannelUpdateInfo_get_cltv_expiry_delta(long _this_ptr);
	// void ChannelUpdateInfo_set_cltv_expiry_delta(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_cltv_expiry_delta")] public static extern void ChannelUpdateInfo_set_cltv_expiry_delta(long _this_ptr, short _val);
	// bool ChannelUpdateInfo_get_enabled(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_enabled")] public static extern bool ChannelUpdateInfo_get_enabled(long _this_ptr);
	// void ChannelUpdateInfo_set_enabled(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_enabled")] public static extern void ChannelUpdateInfo_set_enabled(long _this_ptr, bool _val);
	// struct LDKChannelUpdate ChannelUpdateInfo_get_last_update_message(const struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_get_last_update_message")] public static extern long ChannelUpdateInfo_get_last_update_message(long _this_ptr);
	// void ChannelUpdateInfo_set_last_update_message(struct LDKChannelUpdateInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdate val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_set_last_update_message")] public static extern void ChannelUpdateInfo_set_last_update_message(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUpdateInfo ChannelUpdateInfo_new(uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, struct LDKRoutingFees fees_arg, uint32_t last_update_arg, uint16_t cltv_expiry_delta_arg, bool enabled_arg, struct LDKChannelUpdate last_update_message_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_new")] public static extern long ChannelUpdateInfo_new(long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, long _fees_arg, int _last_update_arg, short _cltv_expiry_delta_arg, bool _enabled_arg, long _last_update_message_arg);
	// uint64_t ChannelUpdateInfo_clone_ptr(LDKChannelUpdateInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_clone_ptr")] public static extern long ChannelUpdateInfo_clone_ptr(long _arg);
	// struct LDKChannelUpdateInfo ChannelUpdateInfo_clone(const struct LDKChannelUpdateInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_clone")] public static extern long ChannelUpdateInfo_clone(long _orig);
	// bool ChannelUpdateInfo_eq(const struct LDKChannelUpdateInfo *NONNULL_PTR a, const struct LDKChannelUpdateInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_eq")] public static extern bool ChannelUpdateInfo_eq(long _a, long _b);
	// struct LDKStr ChannelUpdateInfo_to_str(const struct LDKChannelUpdateInfo *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_to_str")] public static extern long ChannelUpdateInfo_to_str(long _o);
	// struct LDKCVec_u8Z ChannelUpdateInfo_write(const struct LDKChannelUpdateInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_write")] public static extern long ChannelUpdateInfo_write(long _obj);
	// struct LDKCResult_ChannelUpdateInfoDecodeErrorZ ChannelUpdateInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUpdateInfo_read")] public static extern long ChannelUpdateInfo_read(long _ser);
	// void ChannelInfo_free(struct LDKChannelInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_free")] public static extern void ChannelInfo_free(long _this_obj);
	// struct LDKChannelFeatures ChannelInfo_get_features(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_features")] public static extern long ChannelInfo_get_features(long _this_ptr);
	// void ChannelInfo_set_features(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_features")] public static extern void ChannelInfo_set_features(long _this_ptr, long _val);
	// struct LDKNodeId ChannelInfo_get_node_one(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_node_one")] public static extern long ChannelInfo_get_node_one(long _this_ptr);
	// void ChannelInfo_set_node_one(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_node_one")] public static extern void ChannelInfo_set_node_one(long _this_ptr, long _val);
	// struct LDKNodeId ChannelInfo_get_node_two(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_node_two")] public static extern long ChannelInfo_get_node_two(long _this_ptr);
	// void ChannelInfo_set_node_two(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKNodeId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_node_two")] public static extern void ChannelInfo_set_node_two(long _this_ptr, long _val);
	// struct LDKCOption_u64Z ChannelInfo_get_capacity_sats(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_capacity_sats")] public static extern long ChannelInfo_get_capacity_sats(long _this_ptr);
	// void ChannelInfo_set_capacity_sats(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_capacity_sats")] public static extern void ChannelInfo_set_capacity_sats(long _this_ptr, long _val);
	// struct LDKChannelUpdateInfo ChannelInfo_get_one_to_two(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_one_to_two")] public static extern long ChannelInfo_get_one_to_two(long _this_ptr);
	// void ChannelInfo_set_one_to_two(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdateInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_one_to_two")] public static extern void ChannelInfo_set_one_to_two(long _this_ptr, long _val);
	// struct LDKChannelUpdateInfo ChannelInfo_get_two_to_one(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_two_to_one")] public static extern long ChannelInfo_get_two_to_one(long _this_ptr);
	// void ChannelInfo_set_two_to_one(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelUpdateInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_two_to_one")] public static extern void ChannelInfo_set_two_to_one(long _this_ptr, long _val);
	// struct LDKChannelAnnouncement ChannelInfo_get_announcement_message(const struct LDKChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_announcement_message")] public static extern long ChannelInfo_get_announcement_message(long _this_ptr);
	// void ChannelInfo_set_announcement_message(struct LDKChannelInfo *NONNULL_PTR this_ptr, struct LDKChannelAnnouncement val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_set_announcement_message")] public static extern void ChannelInfo_set_announcement_message(long _this_ptr, long _val);
	// uint64_t ChannelInfo_clone_ptr(LDKChannelInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_clone_ptr")] public static extern long ChannelInfo_clone_ptr(long _arg);
	// struct LDKChannelInfo ChannelInfo_clone(const struct LDKChannelInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_clone")] public static extern long ChannelInfo_clone(long _orig);
	// bool ChannelInfo_eq(const struct LDKChannelInfo *NONNULL_PTR a, const struct LDKChannelInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_eq")] public static extern bool ChannelInfo_eq(long _a, long _b);
	// MUST_USE_RES struct LDKChannelUpdateInfo ChannelInfo_get_directional_info(const struct LDKChannelInfo *NONNULL_PTR this_arg, uint8_t channel_flags);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_get_directional_info")] public static extern long ChannelInfo_get_directional_info(long _this_arg, byte _channel_flags);
	// struct LDKStr ChannelInfo_to_str(const struct LDKChannelInfo *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_to_str")] public static extern long ChannelInfo_to_str(long _o);
	// struct LDKCVec_u8Z ChannelInfo_write(const struct LDKChannelInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_write")] public static extern long ChannelInfo_write(long _obj);
	// struct LDKCResult_ChannelInfoDecodeErrorZ ChannelInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelInfo_read")] public static extern long ChannelInfo_read(long _ser);
	// void DirectedChannelInfo_free(struct LDKDirectedChannelInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_free")] public static extern void DirectedChannelInfo_free(long _this_obj);
	// uint64_t DirectedChannelInfo_clone_ptr(LDKDirectedChannelInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_clone_ptr")] public static extern long DirectedChannelInfo_clone_ptr(long _arg);
	// struct LDKDirectedChannelInfo DirectedChannelInfo_clone(const struct LDKDirectedChannelInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_clone")] public static extern long DirectedChannelInfo_clone(long _orig);
	// MUST_USE_RES struct LDKChannelInfo DirectedChannelInfo_channel(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_channel")] public static extern long DirectedChannelInfo_channel(long _this_arg);
	// MUST_USE_RES struct LDKEffectiveCapacity DirectedChannelInfo_effective_capacity(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_effective_capacity")] public static extern long DirectedChannelInfo_effective_capacity(long _this_arg);
	// MUST_USE_RES struct LDKNodeId DirectedChannelInfo_source(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_source")] public static extern long DirectedChannelInfo_source(long _this_arg);
	// MUST_USE_RES struct LDKNodeId DirectedChannelInfo_target(const struct LDKDirectedChannelInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DirectedChannelInfo_target")] public static extern long DirectedChannelInfo_target(long _this_arg);
	// void EffectiveCapacity_free(struct LDKEffectiveCapacity this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_free")] public static extern void EffectiveCapacity_free(long _this_ptr);
	// uint64_t EffectiveCapacity_clone_ptr(LDKEffectiveCapacity *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_clone_ptr")] public static extern long EffectiveCapacity_clone_ptr(long _arg);
	// struct LDKEffectiveCapacity EffectiveCapacity_clone(const struct LDKEffectiveCapacity *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_clone")] public static extern long EffectiveCapacity_clone(long _orig);
	// struct LDKEffectiveCapacity EffectiveCapacity_exact_liquidity(uint64_t liquidity_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_exact_liquidity")] public static extern long EffectiveCapacity_exact_liquidity(long _liquidity_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_advertised_max_htlc(uint64_t amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_advertised_max_htlc")] public static extern long EffectiveCapacity_advertised_max_htlc(long _amount_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_total(uint64_t capacity_msat, uint64_t htlc_maximum_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_total")] public static extern long EffectiveCapacity_total(long _capacity_msat, long _htlc_maximum_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_infinite(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_infinite")] public static extern long EffectiveCapacity_infinite();
	// struct LDKEffectiveCapacity EffectiveCapacity_hint_max_htlc(uint64_t amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_hint_max_htlc")] public static extern long EffectiveCapacity_hint_max_htlc(long _amount_msat);
	// struct LDKEffectiveCapacity EffectiveCapacity_unknown(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_unknown")] public static extern long EffectiveCapacity_unknown();
	// MUST_USE_RES uint64_t EffectiveCapacity_as_msat(const struct LDKEffectiveCapacity *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EffectiveCapacity_as_msat")] public static extern long EffectiveCapacity_as_msat(long _this_arg);
	// struct LDKCVec_u8Z RoutingFees_write(const struct LDKRoutingFees *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_write")] public static extern long RoutingFees_write(long _obj);
	// struct LDKCResult_RoutingFeesDecodeErrorZ RoutingFees_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_read")] public static extern long RoutingFees_read(long _ser);
	// void NodeAnnouncementDetails_free(struct LDKNodeAnnouncementDetails this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_free")] public static extern void NodeAnnouncementDetails_free(long _this_obj);
	// struct LDKNodeFeatures NodeAnnouncementDetails_get_features(const struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_get_features")] public static extern long NodeAnnouncementDetails_get_features(long _this_ptr);
	// void NodeAnnouncementDetails_set_features(struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_set_features")] public static extern void NodeAnnouncementDetails_set_features(long _this_ptr, long _val);
	// uint32_t NodeAnnouncementDetails_get_last_update(const struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_get_last_update")] public static extern int NodeAnnouncementDetails_get_last_update(long _this_ptr);
	// void NodeAnnouncementDetails_set_last_update(struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_set_last_update")] public static extern void NodeAnnouncementDetails_set_last_update(long _this_ptr, int _val);
	// const uint8_t (*NodeAnnouncementDetails_get_rgb(const struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr))[3];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_get_rgb")] public static extern long NodeAnnouncementDetails_get_rgb(long _this_ptr);
	// void NodeAnnouncementDetails_set_rgb(struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr, struct LDKThreeBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_set_rgb")] public static extern void NodeAnnouncementDetails_set_rgb(long _this_ptr, long _val);
	// struct LDKNodeAlias NodeAnnouncementDetails_get_alias(const struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_get_alias")] public static extern long NodeAnnouncementDetails_get_alias(long _this_ptr);
	// void NodeAnnouncementDetails_set_alias(struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr, struct LDKNodeAlias val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_set_alias")] public static extern void NodeAnnouncementDetails_set_alias(long _this_ptr, long _val);
	// struct LDKCVec_SocketAddressZ NodeAnnouncementDetails_get_addresses(const struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_get_addresses")] public static extern long NodeAnnouncementDetails_get_addresses(long _this_ptr);
	// void NodeAnnouncementDetails_set_addresses(struct LDKNodeAnnouncementDetails *NONNULL_PTR this_ptr, struct LDKCVec_SocketAddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_set_addresses")] public static extern void NodeAnnouncementDetails_set_addresses(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAnnouncementDetails NodeAnnouncementDetails_new(struct LDKNodeFeatures features_arg, uint32_t last_update_arg, struct LDKThreeBytes rgb_arg, struct LDKNodeAlias alias_arg, struct LDKCVec_SocketAddressZ addresses_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_new")] public static extern long NodeAnnouncementDetails_new(long _features_arg, int _last_update_arg, long _rgb_arg, long _alias_arg, long _addresses_arg);
	// uint64_t NodeAnnouncementDetails_clone_ptr(LDKNodeAnnouncementDetails *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_clone_ptr")] public static extern long NodeAnnouncementDetails_clone_ptr(long _arg);
	// struct LDKNodeAnnouncementDetails NodeAnnouncementDetails_clone(const struct LDKNodeAnnouncementDetails *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_clone")] public static extern long NodeAnnouncementDetails_clone(long _orig);
	// bool NodeAnnouncementDetails_eq(const struct LDKNodeAnnouncementDetails *NONNULL_PTR a, const struct LDKNodeAnnouncementDetails *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementDetails_eq")] public static extern bool NodeAnnouncementDetails_eq(long _a, long _b);
	// void NodeAnnouncementInfo_free(struct LDKNodeAnnouncementInfo this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_free")] public static extern void NodeAnnouncementInfo_free(long _this_ptr);
	// uint64_t NodeAnnouncementInfo_clone_ptr(LDKNodeAnnouncementInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_clone_ptr")] public static extern long NodeAnnouncementInfo_clone_ptr(long _arg);
	// struct LDKNodeAnnouncementInfo NodeAnnouncementInfo_clone(const struct LDKNodeAnnouncementInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_clone")] public static extern long NodeAnnouncementInfo_clone(long _orig);
	// struct LDKNodeAnnouncementInfo NodeAnnouncementInfo_relayed(struct LDKNodeAnnouncement a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_relayed")] public static extern long NodeAnnouncementInfo_relayed(long _a);
	// struct LDKNodeAnnouncementInfo NodeAnnouncementInfo_local(struct LDKNodeAnnouncementDetails a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_local")] public static extern long NodeAnnouncementInfo_local(long _a);
	// bool NodeAnnouncementInfo_eq(const struct LDKNodeAnnouncementInfo *NONNULL_PTR a, const struct LDKNodeAnnouncementInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_eq")] public static extern bool NodeAnnouncementInfo_eq(long _a, long _b);
	// MUST_USE_RES struct LDKNodeFeatures NodeAnnouncementInfo_features(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_features")] public static extern long NodeAnnouncementInfo_features(long _this_arg);
	// MUST_USE_RES uint32_t NodeAnnouncementInfo_last_update(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_last_update")] public static extern int NodeAnnouncementInfo_last_update(long _this_arg);
	// MUST_USE_RES struct LDKThreeBytes NodeAnnouncementInfo_rgb(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_rgb")] public static extern long NodeAnnouncementInfo_rgb(long _this_arg);
	// MUST_USE_RES struct LDKNodeAlias NodeAnnouncementInfo_alias(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_alias")] public static extern long NodeAnnouncementInfo_alias(long _this_arg);
	// MUST_USE_RES struct LDKCVec_SocketAddressZ NodeAnnouncementInfo_addresses(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_addresses")] public static extern long NodeAnnouncementInfo_addresses(long _this_arg);
	// MUST_USE_RES struct LDKNodeAnnouncement NodeAnnouncementInfo_announcement_message(const struct LDKNodeAnnouncementInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_announcement_message")] public static extern long NodeAnnouncementInfo_announcement_message(long _this_arg);
	// struct LDKCVec_u8Z NodeAnnouncementInfo_write(const struct LDKNodeAnnouncementInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_write")] public static extern long NodeAnnouncementInfo_write(long _obj);
	// struct LDKCResult_NodeAnnouncementInfoDecodeErrorZ NodeAnnouncementInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAnnouncementInfo_read")] public static extern long NodeAnnouncementInfo_read(long _ser);
	// void NodeAlias_free(struct LDKNodeAlias this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_free")] public static extern void NodeAlias_free(long _this_obj);
	// const uint8_t (*NodeAlias_get_a(const struct LDKNodeAlias *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_get_a")] public static extern long NodeAlias_get_a(long _this_ptr);
	// void NodeAlias_set_a(struct LDKNodeAlias *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_set_a")] public static extern void NodeAlias_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKNodeAlias NodeAlias_new(struct LDKThirtyTwoBytes a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_new")] public static extern long NodeAlias_new(long _a_arg);
	// uint64_t NodeAlias_clone_ptr(LDKNodeAlias *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_clone_ptr")] public static extern long NodeAlias_clone_ptr(long _arg);
	// struct LDKNodeAlias NodeAlias_clone(const struct LDKNodeAlias *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_clone")] public static extern long NodeAlias_clone(long _orig);
	// uint64_t NodeAlias_hash(const struct LDKNodeAlias *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_hash")] public static extern long NodeAlias_hash(long _o);
	// bool NodeAlias_eq(const struct LDKNodeAlias *NONNULL_PTR a, const struct LDKNodeAlias *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_eq")] public static extern bool NodeAlias_eq(long _a, long _b);
	// struct LDKStr NodeAlias_to_str(const struct LDKNodeAlias *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_to_str")] public static extern long NodeAlias_to_str(long _o);
	// struct LDKCVec_u8Z NodeAlias_write(const struct LDKNodeAlias *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_write")] public static extern long NodeAlias_write(long _obj);
	// struct LDKCResult_NodeAliasDecodeErrorZ NodeAlias_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeAlias_read")] public static extern long NodeAlias_read(long _ser);
	// void NodeInfo_free(struct LDKNodeInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_free")] public static extern void NodeInfo_free(long _this_obj);
	// struct LDKCVec_u64Z NodeInfo_get_channels(const struct LDKNodeInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_get_channels")] public static extern long NodeInfo_get_channels(long _this_ptr);
	// void NodeInfo_set_channels(struct LDKNodeInfo *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_set_channels")] public static extern void NodeInfo_set_channels(long _this_ptr, long _val);
	// struct LDKCOption_NodeAnnouncementInfoZ NodeInfo_get_announcement_info(const struct LDKNodeInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_get_announcement_info")] public static extern long NodeInfo_get_announcement_info(long _this_ptr);
	// void NodeInfo_set_announcement_info(struct LDKNodeInfo *NONNULL_PTR this_ptr, struct LDKCOption_NodeAnnouncementInfoZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_set_announcement_info")] public static extern void NodeInfo_set_announcement_info(long _this_ptr, long _val);
	// uint64_t NodeInfo_clone_ptr(LDKNodeInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_clone_ptr")] public static extern long NodeInfo_clone_ptr(long _arg);
	// struct LDKNodeInfo NodeInfo_clone(const struct LDKNodeInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_clone")] public static extern long NodeInfo_clone(long _orig);
	// bool NodeInfo_eq(const struct LDKNodeInfo *NONNULL_PTR a, const struct LDKNodeInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_eq")] public static extern bool NodeInfo_eq(long _a, long _b);
	// MUST_USE_RES bool NodeInfo_is_tor_only(const struct LDKNodeInfo *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_is_tor_only")] public static extern bool NodeInfo_is_tor_only(long _this_arg);
	// struct LDKStr NodeInfo_to_str(const struct LDKNodeInfo *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_to_str")] public static extern long NodeInfo_to_str(long _o);
	// struct LDKCVec_u8Z NodeInfo_write(const struct LDKNodeInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_write")] public static extern long NodeInfo_write(long _obj);
	// struct LDKCResult_NodeInfoDecodeErrorZ NodeInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeInfo_read")] public static extern long NodeInfo_read(long _ser);
	// struct LDKCVec_u8Z NetworkGraph_write(const struct LDKNetworkGraph *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_write")] public static extern long NetworkGraph_write(long _obj);
	// struct LDKCResult_NetworkGraphDecodeErrorZ NetworkGraph_read(struct LDKu8slice ser, struct LDKLogger arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_read")] public static extern long NetworkGraph_read(long _ser, long _arg);
	// struct LDKStr NetworkGraph_to_str(const struct LDKNetworkGraph *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_to_str")] public static extern long NetworkGraph_to_str(long _o);
	// MUST_USE_RES struct LDKNetworkGraph NetworkGraph_new(enum LDKNetwork network, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_new")] public static extern long NetworkGraph_new(Network _network, long _logger);
	// MUST_USE_RES struct LDKReadOnlyNetworkGraph NetworkGraph_read_only(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_read_only")] public static extern long NetworkGraph_read_only(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u32Z NetworkGraph_get_last_rapid_gossip_sync_timestamp(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_get_last_rapid_gossip_sync_timestamp")] public static extern long NetworkGraph_get_last_rapid_gossip_sync_timestamp(long _this_arg);
	// void NetworkGraph_set_last_rapid_gossip_sync_timestamp(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint32_t last_rapid_gossip_sync_timestamp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_set_last_rapid_gossip_sync_timestamp")] public static extern void NetworkGraph_set_last_rapid_gossip_sync_timestamp(long _this_arg, int _last_rapid_gossip_sync_timestamp);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_node_from_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_node_from_announcement")] public static extern long NetworkGraph_update_node_from_announcement(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_node_from_unsigned_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedNodeAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_node_from_unsigned_announcement")] public static extern long NetworkGraph_update_node_from_unsigned_announcement(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelAnnouncement *NONNULL_PTR msg, struct LDKCOption_UtxoLookupZ utxo_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_announcement")] public static extern long NetworkGraph_update_channel_from_announcement(long _this_arg, long _msg, long _utxo_lookup);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_announcement_no_lookup(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelAnnouncement *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_announcement_no_lookup")] public static extern long NetworkGraph_update_channel_from_announcement_no_lookup(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_from_unsigned_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedChannelAnnouncement *NONNULL_PTR msg, struct LDKCOption_UtxoLookupZ utxo_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_from_unsigned_announcement")] public static extern long NetworkGraph_update_channel_from_unsigned_announcement(long _this_arg, long _msg, long _utxo_lookup);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_add_channel_from_partial_announcement(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id, uint64_t timestamp, struct LDKChannelFeatures features, struct LDKPublicKey node_id_1, struct LDKPublicKey node_id_2);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_add_channel_from_partial_announcement")] public static extern long NetworkGraph_add_channel_from_partial_announcement(long _this_arg, long _short_channel_id, long _timestamp, long _features, long _node_id_1, long _node_id_2);
	// void NetworkGraph_channel_failed_permanent(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_channel_failed_permanent")] public static extern void NetworkGraph_channel_failed_permanent(long _this_arg, long _short_channel_id);
	// void NetworkGraph_node_failed_permanent(const struct LDKNetworkGraph *NONNULL_PTR this_arg, struct LDKPublicKey node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_node_failed_permanent")] public static extern void NetworkGraph_node_failed_permanent(long _this_arg, long _node_id);
	// void NetworkGraph_remove_stale_channels_and_tracking(const struct LDKNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_remove_stale_channels_and_tracking")] public static extern void NetworkGraph_remove_stale_channels_and_tracking(long _this_arg);
	// void NetworkGraph_remove_stale_channels_and_tracking_with_time(const struct LDKNetworkGraph *NONNULL_PTR this_arg, uint64_t current_time_unix);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_remove_stale_channels_and_tracking_with_time")] public static extern void NetworkGraph_remove_stale_channels_and_tracking_with_time(long _this_arg, long _current_time_unix);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel")] public static extern long NetworkGraph_update_channel(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_update_channel_unsigned(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKUnsignedChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_update_channel_unsigned")] public static extern long NetworkGraph_update_channel_unsigned(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKCResult_NoneLightningErrorZ NetworkGraph_verify_channel_update(const struct LDKNetworkGraph *NONNULL_PTR this_arg, const struct LDKChannelUpdate *NONNULL_PTR msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NetworkGraph_verify_channel_update")] public static extern long NetworkGraph_verify_channel_update(long _this_arg, long _msg);
	// MUST_USE_RES struct LDKChannelInfo ReadOnlyNetworkGraph_channel(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, uint64_t short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_channel")] public static extern long ReadOnlyNetworkGraph_channel(long _this_arg, long _short_channel_id);
	// MUST_USE_RES struct LDKCVec_u64Z ReadOnlyNetworkGraph_list_channels(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_list_channels")] public static extern long ReadOnlyNetworkGraph_list_channels(long _this_arg);
	// MUST_USE_RES struct LDKNodeInfo ReadOnlyNetworkGraph_node(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_node")] public static extern long ReadOnlyNetworkGraph_node(long _this_arg, long _node_id);
	// MUST_USE_RES struct LDKCVec_NodeIdZ ReadOnlyNetworkGraph_list_nodes(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_list_nodes")] public static extern long ReadOnlyNetworkGraph_list_nodes(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_SocketAddressZZ ReadOnlyNetworkGraph_get_addresses(const struct LDKReadOnlyNetworkGraph *NONNULL_PTR this_arg, struct LDKPublicKey pubkey);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReadOnlyNetworkGraph_get_addresses")] public static extern long ReadOnlyNetworkGraph_get_addresses(long _this_arg, long _pubkey);
	// void DefaultRouter_free(struct LDKDefaultRouter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_free")] public static extern void DefaultRouter_free(long _this_obj);
	// MUST_USE_RES struct LDKDefaultRouter DefaultRouter_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger, struct LDKEntropySource entropy_source, struct LDKLockableScore scorer, struct LDKProbabilisticScoringFeeParameters score_params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_new")] public static extern long DefaultRouter_new(long _network_graph, long _logger, long _entropy_source, long _scorer, long _score_params);
	// struct LDKRouter DefaultRouter_as_Router(const struct LDKDefaultRouter *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultRouter_as_Router")] public static extern long DefaultRouter_as_Router(long _this_arg);
	// void Router_free(struct LDKRouter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Router_free")] public static extern void Router_free(long _this_ptr);
	// void ScorerAccountingForInFlightHtlcs_free(struct LDKScorerAccountingForInFlightHtlcs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_free")] public static extern void ScorerAccountingForInFlightHtlcs_free(long _this_obj);
	// MUST_USE_RES struct LDKScorerAccountingForInFlightHtlcs ScorerAccountingForInFlightHtlcs_new(struct LDKScoreLookUp scorer, const struct LDKInFlightHtlcs *NONNULL_PTR inflight_htlcs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_new")] public static extern long ScorerAccountingForInFlightHtlcs_new(long _scorer, long _inflight_htlcs);
	// struct LDKScoreLookUp ScorerAccountingForInFlightHtlcs_as_ScoreLookUp(const struct LDKScorerAccountingForInFlightHtlcs *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScorerAccountingForInFlightHtlcs_as_ScoreLookUp")] public static extern long ScorerAccountingForInFlightHtlcs_as_ScoreLookUp(long _this_arg);
	// void InFlightHtlcs_free(struct LDKInFlightHtlcs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_free")] public static extern void InFlightHtlcs_free(long _this_obj);
	// uint64_t InFlightHtlcs_clone_ptr(LDKInFlightHtlcs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_clone_ptr")] public static extern long InFlightHtlcs_clone_ptr(long _arg);
	// struct LDKInFlightHtlcs InFlightHtlcs_clone(const struct LDKInFlightHtlcs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_clone")] public static extern long InFlightHtlcs_clone(long _orig);
	// MUST_USE_RES struct LDKInFlightHtlcs InFlightHtlcs_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_new")] public static extern long InFlightHtlcs_new();
	// void InFlightHtlcs_process_path(struct LDKInFlightHtlcs *NONNULL_PTR this_arg, const struct LDKPath *NONNULL_PTR path, struct LDKPublicKey payer_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_process_path")] public static extern void InFlightHtlcs_process_path(long _this_arg, long _path, long _payer_node_id);
	// void InFlightHtlcs_add_inflight_htlc(struct LDKInFlightHtlcs *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR source, const struct LDKNodeId *NONNULL_PTR target, uint64_t channel_scid, uint64_t used_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_add_inflight_htlc")] public static extern void InFlightHtlcs_add_inflight_htlc(long _this_arg, long _source, long _target, long _channel_scid, long _used_msat);
	// MUST_USE_RES struct LDKCOption_u64Z InFlightHtlcs_used_liquidity_msat(const struct LDKInFlightHtlcs *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR source, const struct LDKNodeId *NONNULL_PTR target, uint64_t channel_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_used_liquidity_msat")] public static extern long InFlightHtlcs_used_liquidity_msat(long _this_arg, long _source, long _target, long _channel_scid);
	// struct LDKCVec_u8Z InFlightHtlcs_write(const struct LDKInFlightHtlcs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_write")] public static extern long InFlightHtlcs_write(long _obj);
	// struct LDKCResult_InFlightHtlcsDecodeErrorZ InFlightHtlcs_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InFlightHtlcs_read")] public static extern long InFlightHtlcs_read(long _ser);
	// void RouteHop_free(struct LDKRouteHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_free")] public static extern void RouteHop_free(long _this_obj);
	// struct LDKPublicKey RouteHop_get_pubkey(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_pubkey")] public static extern long RouteHop_get_pubkey(long _this_ptr);
	// void RouteHop_set_pubkey(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_pubkey")] public static extern void RouteHop_set_pubkey(long _this_ptr, long _val);
	// struct LDKNodeFeatures RouteHop_get_node_features(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_node_features")] public static extern long RouteHop_get_node_features(long _this_ptr);
	// void RouteHop_set_node_features(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKNodeFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_node_features")] public static extern void RouteHop_set_node_features(long _this_ptr, long _val);
	// uint64_t RouteHop_get_short_channel_id(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_short_channel_id")] public static extern long RouteHop_get_short_channel_id(long _this_ptr);
	// void RouteHop_set_short_channel_id(struct LDKRouteHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_short_channel_id")] public static extern void RouteHop_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKChannelFeatures RouteHop_get_channel_features(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_channel_features")] public static extern long RouteHop_get_channel_features(long _this_ptr);
	// void RouteHop_set_channel_features(struct LDKRouteHop *NONNULL_PTR this_ptr, struct LDKChannelFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_channel_features")] public static extern void RouteHop_set_channel_features(long _this_ptr, long _val);
	// uint64_t RouteHop_get_fee_msat(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_fee_msat")] public static extern long RouteHop_get_fee_msat(long _this_ptr);
	// void RouteHop_set_fee_msat(struct LDKRouteHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_fee_msat")] public static extern void RouteHop_set_fee_msat(long _this_ptr, long _val);
	// uint32_t RouteHop_get_cltv_expiry_delta(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_cltv_expiry_delta")] public static extern int RouteHop_get_cltv_expiry_delta(long _this_ptr);
	// void RouteHop_set_cltv_expiry_delta(struct LDKRouteHop *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_cltv_expiry_delta")] public static extern void RouteHop_set_cltv_expiry_delta(long _this_ptr, int _val);
	// bool RouteHop_get_maybe_announced_channel(const struct LDKRouteHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_get_maybe_announced_channel")] public static extern bool RouteHop_get_maybe_announced_channel(long _this_ptr);
	// void RouteHop_set_maybe_announced_channel(struct LDKRouteHop *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_set_maybe_announced_channel")] public static extern void RouteHop_set_maybe_announced_channel(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKRouteHop RouteHop_new(struct LDKPublicKey pubkey_arg, struct LDKNodeFeatures node_features_arg, uint64_t short_channel_id_arg, struct LDKChannelFeatures channel_features_arg, uint64_t fee_msat_arg, uint32_t cltv_expiry_delta_arg, bool maybe_announced_channel_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_new")] public static extern long RouteHop_new(long _pubkey_arg, long _node_features_arg, long _short_channel_id_arg, long _channel_features_arg, long _fee_msat_arg, int _cltv_expiry_delta_arg, bool _maybe_announced_channel_arg);
	// uint64_t RouteHop_clone_ptr(LDKRouteHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_clone_ptr")] public static extern long RouteHop_clone_ptr(long _arg);
	// struct LDKRouteHop RouteHop_clone(const struct LDKRouteHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_clone")] public static extern long RouteHop_clone(long _orig);
	// uint64_t RouteHop_hash(const struct LDKRouteHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_hash")] public static extern long RouteHop_hash(long _o);
	// bool RouteHop_eq(const struct LDKRouteHop *NONNULL_PTR a, const struct LDKRouteHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_eq")] public static extern bool RouteHop_eq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHop_write(const struct LDKRouteHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_write")] public static extern long RouteHop_write(long _obj);
	// struct LDKCResult_RouteHopDecodeErrorZ RouteHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHop_read")] public static extern long RouteHop_read(long _ser);
	// void BlindedTail_free(struct LDKBlindedTail this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_free")] public static extern void BlindedTail_free(long _this_obj);
	// struct LDKCVec_BlindedHopZ BlindedTail_get_hops(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_hops")] public static extern long BlindedTail_get_hops(long _this_ptr);
	// void BlindedTail_set_hops(struct LDKBlindedTail *NONNULL_PTR this_ptr, struct LDKCVec_BlindedHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_hops")] public static extern void BlindedTail_set_hops(long _this_ptr, long _val);
	// struct LDKPublicKey BlindedTail_get_blinding_point(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_blinding_point")] public static extern long BlindedTail_get_blinding_point(long _this_ptr);
	// void BlindedTail_set_blinding_point(struct LDKBlindedTail *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_blinding_point")] public static extern void BlindedTail_set_blinding_point(long _this_ptr, long _val);
	// uint32_t BlindedTail_get_excess_final_cltv_expiry_delta(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_excess_final_cltv_expiry_delta")] public static extern int BlindedTail_get_excess_final_cltv_expiry_delta(long _this_ptr);
	// void BlindedTail_set_excess_final_cltv_expiry_delta(struct LDKBlindedTail *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_excess_final_cltv_expiry_delta")] public static extern void BlindedTail_set_excess_final_cltv_expiry_delta(long _this_ptr, int _val);
	// uint64_t BlindedTail_get_final_value_msat(const struct LDKBlindedTail *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_get_final_value_msat")] public static extern long BlindedTail_get_final_value_msat(long _this_ptr);
	// void BlindedTail_set_final_value_msat(struct LDKBlindedTail *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_set_final_value_msat")] public static extern void BlindedTail_set_final_value_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedTail BlindedTail_new(struct LDKCVec_BlindedHopZ hops_arg, struct LDKPublicKey blinding_point_arg, uint32_t excess_final_cltv_expiry_delta_arg, uint64_t final_value_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_new")] public static extern long BlindedTail_new(long _hops_arg, long _blinding_point_arg, int _excess_final_cltv_expiry_delta_arg, long _final_value_msat_arg);
	// uint64_t BlindedTail_clone_ptr(LDKBlindedTail *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_clone_ptr")] public static extern long BlindedTail_clone_ptr(long _arg);
	// struct LDKBlindedTail BlindedTail_clone(const struct LDKBlindedTail *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_clone")] public static extern long BlindedTail_clone(long _orig);
	// uint64_t BlindedTail_hash(const struct LDKBlindedTail *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_hash")] public static extern long BlindedTail_hash(long _o);
	// bool BlindedTail_eq(const struct LDKBlindedTail *NONNULL_PTR a, const struct LDKBlindedTail *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_eq")] public static extern bool BlindedTail_eq(long _a, long _b);
	// struct LDKCVec_u8Z BlindedTail_write(const struct LDKBlindedTail *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_write")] public static extern long BlindedTail_write(long _obj);
	// struct LDKCResult_BlindedTailDecodeErrorZ BlindedTail_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedTail_read")] public static extern long BlindedTail_read(long _ser);
	// void Path_free(struct LDKPath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_free")] public static extern void Path_free(long _this_obj);
	// struct LDKCVec_RouteHopZ Path_get_hops(const struct LDKPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_get_hops")] public static extern long Path_get_hops(long _this_ptr);
	// void Path_set_hops(struct LDKPath *NONNULL_PTR this_ptr, struct LDKCVec_RouteHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_set_hops")] public static extern void Path_set_hops(long _this_ptr, long _val);
	// struct LDKBlindedTail Path_get_blinded_tail(const struct LDKPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_get_blinded_tail")] public static extern long Path_get_blinded_tail(long _this_ptr);
	// void Path_set_blinded_tail(struct LDKPath *NONNULL_PTR this_ptr, struct LDKBlindedTail val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_set_blinded_tail")] public static extern void Path_set_blinded_tail(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPath Path_new(struct LDKCVec_RouteHopZ hops_arg, struct LDKBlindedTail blinded_tail_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_new")] public static extern long Path_new(long _hops_arg, long _blinded_tail_arg);
	// uint64_t Path_clone_ptr(LDKPath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_clone_ptr")] public static extern long Path_clone_ptr(long _arg);
	// struct LDKPath Path_clone(const struct LDKPath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_clone")] public static extern long Path_clone(long _orig);
	// uint64_t Path_hash(const struct LDKPath *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_hash")] public static extern long Path_hash(long _o);
	// bool Path_eq(const struct LDKPath *NONNULL_PTR a, const struct LDKPath *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_eq")] public static extern bool Path_eq(long _a, long _b);
	// MUST_USE_RES uint64_t Path_fee_msat(const struct LDKPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_fee_msat")] public static extern long Path_fee_msat(long _this_arg);
	// MUST_USE_RES uint64_t Path_final_value_msat(const struct LDKPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_final_value_msat")] public static extern long Path_final_value_msat(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u32Z Path_final_cltv_expiry_delta(const struct LDKPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Path_final_cltv_expiry_delta")] public static extern long Path_final_cltv_expiry_delta(long _this_arg);
	// void Route_free(struct LDKRoute this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_free")] public static extern void Route_free(long _this_obj);
	// struct LDKCVec_PathZ Route_get_paths(const struct LDKRoute *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_paths")] public static extern long Route_get_paths(long _this_ptr);
	// void Route_set_paths(struct LDKRoute *NONNULL_PTR this_ptr, struct LDKCVec_PathZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_set_paths")] public static extern void Route_set_paths(long _this_ptr, long _val);
	// struct LDKRouteParameters Route_get_route_params(const struct LDKRoute *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_route_params")] public static extern long Route_get_route_params(long _this_ptr);
	// void Route_set_route_params(struct LDKRoute *NONNULL_PTR this_ptr, struct LDKRouteParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_set_route_params")] public static extern void Route_set_route_params(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRoute Route_new(struct LDKCVec_PathZ paths_arg, struct LDKRouteParameters route_params_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_new")] public static extern long Route_new(long _paths_arg, long _route_params_arg);
	// uint64_t Route_clone_ptr(LDKRoute *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_clone_ptr")] public static extern long Route_clone_ptr(long _arg);
	// struct LDKRoute Route_clone(const struct LDKRoute *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_clone")] public static extern long Route_clone(long _orig);
	// uint64_t Route_hash(const struct LDKRoute *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_hash")] public static extern long Route_hash(long _o);
	// bool Route_eq(const struct LDKRoute *NONNULL_PTR a, const struct LDKRoute *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_eq")] public static extern bool Route_eq(long _a, long _b);
	// MUST_USE_RES uint64_t Route_get_total_fees(const struct LDKRoute *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_total_fees")] public static extern long Route_get_total_fees(long _this_arg);
	// MUST_USE_RES uint64_t Route_get_total_amount(const struct LDKRoute *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_get_total_amount")] public static extern long Route_get_total_amount(long _this_arg);
	// struct LDKStr Route_to_str(const struct LDKRoute *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_to_str")] public static extern long Route_to_str(long _o);
	// struct LDKCVec_u8Z Route_write(const struct LDKRoute *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_write")] public static extern long Route_write(long _obj);
	// struct LDKCResult_RouteDecodeErrorZ Route_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Route_read")] public static extern long Route_read(long _ser);
	// void RouteParameters_free(struct LDKRouteParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_free")] public static extern void RouteParameters_free(long _this_obj);
	// struct LDKPaymentParameters RouteParameters_get_payment_params(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_payment_params")] public static extern long RouteParameters_get_payment_params(long _this_ptr);
	// void RouteParameters_set_payment_params(struct LDKRouteParameters *NONNULL_PTR this_ptr, struct LDKPaymentParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_payment_params")] public static extern void RouteParameters_set_payment_params(long _this_ptr, long _val);
	// uint64_t RouteParameters_get_final_value_msat(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_final_value_msat")] public static extern long RouteParameters_get_final_value_msat(long _this_ptr);
	// void RouteParameters_set_final_value_msat(struct LDKRouteParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_final_value_msat")] public static extern void RouteParameters_set_final_value_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z RouteParameters_get_max_total_routing_fee_msat(const struct LDKRouteParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_get_max_total_routing_fee_msat")] public static extern long RouteParameters_get_max_total_routing_fee_msat(long _this_ptr);
	// void RouteParameters_set_max_total_routing_fee_msat(struct LDKRouteParameters *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_max_total_routing_fee_msat")] public static extern void RouteParameters_set_max_total_routing_fee_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRouteParameters RouteParameters_new(struct LDKPaymentParameters payment_params_arg, uint64_t final_value_msat_arg, struct LDKCOption_u64Z max_total_routing_fee_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_new")] public static extern long RouteParameters_new(long _payment_params_arg, long _final_value_msat_arg, long _max_total_routing_fee_msat_arg);
	// uint64_t RouteParameters_clone_ptr(LDKRouteParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_clone_ptr")] public static extern long RouteParameters_clone_ptr(long _arg);
	// struct LDKRouteParameters RouteParameters_clone(const struct LDKRouteParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_clone")] public static extern long RouteParameters_clone(long _orig);
	// uint64_t RouteParameters_hash(const struct LDKRouteParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_hash")] public static extern long RouteParameters_hash(long _o);
	// bool RouteParameters_eq(const struct LDKRouteParameters *NONNULL_PTR a, const struct LDKRouteParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_eq")] public static extern bool RouteParameters_eq(long _a, long _b);
	// MUST_USE_RES struct LDKRouteParameters RouteParameters_from_payment_params_and_value(struct LDKPaymentParameters payment_params, uint64_t final_value_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_from_payment_params_and_value")] public static extern long RouteParameters_from_payment_params_and_value(long _payment_params, long _final_value_msat);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ RouteParameters_set_max_path_length(struct LDKRouteParameters *NONNULL_PTR this_arg, const struct LDKRecipientOnionFields *NONNULL_PTR recipient_onion, bool is_keysend, uint32_t best_block_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_set_max_path_length")] public static extern long RouteParameters_set_max_path_length(long _this_arg, long _recipient_onion, bool _is_keysend, int _best_block_height);
	// struct LDKCVec_u8Z RouteParameters_write(const struct LDKRouteParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_write")] public static extern long RouteParameters_write(long _obj);
	// struct LDKCResult_RouteParametersDecodeErrorZ RouteParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteParameters_read")] public static extern long RouteParameters_read(long _ser);
	// void PaymentParameters_free(struct LDKPaymentParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_free")] public static extern void PaymentParameters_free(long _this_obj);
	// struct LDKPayee PaymentParameters_get_payee(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_payee")] public static extern long PaymentParameters_get_payee(long _this_ptr);
	// void PaymentParameters_set_payee(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKPayee val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_payee")] public static extern void PaymentParameters_set_payee(long _this_ptr, long _val);
	// struct LDKCOption_u64Z PaymentParameters_get_expiry_time(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_expiry_time")] public static extern long PaymentParameters_get_expiry_time(long _this_ptr);
	// void PaymentParameters_set_expiry_time(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_expiry_time")] public static extern void PaymentParameters_set_expiry_time(long _this_ptr, long _val);
	// uint32_t PaymentParameters_get_max_total_cltv_expiry_delta(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_total_cltv_expiry_delta")] public static extern int PaymentParameters_get_max_total_cltv_expiry_delta(long _this_ptr);
	// void PaymentParameters_set_max_total_cltv_expiry_delta(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_total_cltv_expiry_delta")] public static extern void PaymentParameters_set_max_total_cltv_expiry_delta(long _this_ptr, int _val);
	// uint8_t PaymentParameters_get_max_path_count(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_path_count")] public static extern byte PaymentParameters_get_max_path_count(long _this_ptr);
	// void PaymentParameters_set_max_path_count(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_path_count")] public static extern void PaymentParameters_set_max_path_count(long _this_ptr, byte _val);
	// uint8_t PaymentParameters_get_max_path_length(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_path_length")] public static extern byte PaymentParameters_get_max_path_length(long _this_ptr);
	// void PaymentParameters_set_max_path_length(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_path_length")] public static extern void PaymentParameters_set_max_path_length(long _this_ptr, byte _val);
	// uint8_t PaymentParameters_get_max_channel_saturation_power_of_half(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_max_channel_saturation_power_of_half")] public static extern byte PaymentParameters_get_max_channel_saturation_power_of_half(long _this_ptr);
	// void PaymentParameters_set_max_channel_saturation_power_of_half(struct LDKPaymentParameters *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_max_channel_saturation_power_of_half")] public static extern void PaymentParameters_set_max_channel_saturation_power_of_half(long _this_ptr, byte _val);
	// struct LDKCVec_u64Z PaymentParameters_get_previously_failed_channels(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_previously_failed_channels")] public static extern long PaymentParameters_get_previously_failed_channels(long _this_ptr);
	// void PaymentParameters_set_previously_failed_channels(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_previously_failed_channels")] public static extern void PaymentParameters_set_previously_failed_channels(long _this_ptr, long _val);
	// struct LDKCVec_u64Z PaymentParameters_get_previously_failed_blinded_path_idxs(const struct LDKPaymentParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_get_previously_failed_blinded_path_idxs")] public static extern long PaymentParameters_get_previously_failed_blinded_path_idxs(long _this_ptr);
	// void PaymentParameters_set_previously_failed_blinded_path_idxs(struct LDKPaymentParameters *NONNULL_PTR this_ptr, struct LDKCVec_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_set_previously_failed_blinded_path_idxs")] public static extern void PaymentParameters_set_previously_failed_blinded_path_idxs(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_new(struct LDKPayee payee_arg, struct LDKCOption_u64Z expiry_time_arg, uint32_t max_total_cltv_expiry_delta_arg, uint8_t max_path_count_arg, uint8_t max_path_length_arg, uint8_t max_channel_saturation_power_of_half_arg, struct LDKCVec_u64Z previously_failed_channels_arg, struct LDKCVec_u64Z previously_failed_blinded_path_idxs_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_new")] public static extern long PaymentParameters_new(long _payee_arg, long _expiry_time_arg, int _max_total_cltv_expiry_delta_arg, byte _max_path_count_arg, byte _max_path_length_arg, byte _max_channel_saturation_power_of_half_arg, long _previously_failed_channels_arg, long _previously_failed_blinded_path_idxs_arg);
	// uint64_t PaymentParameters_clone_ptr(LDKPaymentParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_clone_ptr")] public static extern long PaymentParameters_clone_ptr(long _arg);
	// struct LDKPaymentParameters PaymentParameters_clone(const struct LDKPaymentParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_clone")] public static extern long PaymentParameters_clone(long _orig);
	// uint64_t PaymentParameters_hash(const struct LDKPaymentParameters *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_hash")] public static extern long PaymentParameters_hash(long _o);
	// bool PaymentParameters_eq(const struct LDKPaymentParameters *NONNULL_PTR a, const struct LDKPaymentParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_eq")] public static extern bool PaymentParameters_eq(long _a, long _b);
	// struct LDKCVec_u8Z PaymentParameters_write(const struct LDKPaymentParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_write")] public static extern long PaymentParameters_write(long _obj);
	// struct LDKCResult_PaymentParametersDecodeErrorZ PaymentParameters_read(struct LDKu8slice ser, uint32_t arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_read")] public static extern long PaymentParameters_read(long _ser, int _arg);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_from_node_id(struct LDKPublicKey payee_pubkey, uint32_t final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_from_node_id")] public static extern long PaymentParameters_from_node_id(long _payee_pubkey, int _final_cltv_expiry_delta);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_for_keysend(struct LDKPublicKey payee_pubkey, uint32_t final_cltv_expiry_delta, bool allow_mpp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_for_keysend")] public static extern long PaymentParameters_for_keysend(long _payee_pubkey, int _final_cltv_expiry_delta, bool _allow_mpp);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_from_bolt12_invoice(const struct LDKBolt12Invoice *NONNULL_PTR invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_from_bolt12_invoice")] public static extern long PaymentParameters_from_bolt12_invoice(long _invoice);
	// MUST_USE_RES struct LDKPaymentParameters PaymentParameters_blinded(struct LDKCVec_BlindedPaymentPathZ blinded_route_hints);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentParameters_blinded")] public static extern long PaymentParameters_blinded(long _blinded_route_hints);
	// void Payee_free(struct LDKPayee this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_free")] public static extern void Payee_free(long _this_ptr);
	// uint64_t Payee_clone_ptr(LDKPayee *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_clone_ptr")] public static extern long Payee_clone_ptr(long _arg);
	// struct LDKPayee Payee_clone(const struct LDKPayee *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_clone")] public static extern long Payee_clone(long _orig);
	// struct LDKPayee Payee_blinded(struct LDKCVec_BlindedPaymentPathZ route_hints, struct LDKBolt12InvoiceFeatures features);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_blinded")] public static extern long Payee_blinded(long _route_hints, long _features);
	// struct LDKPayee Payee_clear(struct LDKPublicKey node_id, struct LDKCVec_RouteHintZ route_hints, struct LDKBolt11InvoiceFeatures features, uint32_t final_cltv_expiry_delta);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_clear")] public static extern long Payee_clear(long _node_id, long _route_hints, long _features, int _final_cltv_expiry_delta);
	// uint64_t Payee_hash(const struct LDKPayee *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_hash")] public static extern long Payee_hash(long _o);
	// bool Payee_eq(const struct LDKPayee *NONNULL_PTR a, const struct LDKPayee *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Payee_eq")] public static extern bool Payee_eq(long _a, long _b);
	// struct LDKCVec_u8Z RouteHint_write(const struct LDKRouteHint *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_write")] public static extern long RouteHint_write(long _obj);
	// struct LDKCResult_RouteHintDecodeErrorZ RouteHint_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_read")] public static extern long RouteHint_read(long _ser);
	// struct LDKCVec_u8Z RouteHintHop_write(const struct LDKRouteHintHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_write")] public static extern long RouteHintHop_write(long _obj);
	// struct LDKCResult_RouteHintHopDecodeErrorZ RouteHintHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_read")] public static extern long RouteHintHop_read(long _ser);
	// void FirstHopCandidate_free(struct LDKFirstHopCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FirstHopCandidate_free")] public static extern void FirstHopCandidate_free(long _this_obj);
	// uint64_t FirstHopCandidate_clone_ptr(LDKFirstHopCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FirstHopCandidate_clone_ptr")] public static extern long FirstHopCandidate_clone_ptr(long _arg);
	// struct LDKFirstHopCandidate FirstHopCandidate_clone(const struct LDKFirstHopCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FirstHopCandidate_clone")] public static extern long FirstHopCandidate_clone(long _orig);
	// void PublicHopCandidate_free(struct LDKPublicHopCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_free")] public static extern void PublicHopCandidate_free(long _this_obj);
	// uint64_t PublicHopCandidate_get_short_channel_id(const struct LDKPublicHopCandidate *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_get_short_channel_id")] public static extern long PublicHopCandidate_get_short_channel_id(long _this_ptr);
	// void PublicHopCandidate_set_short_channel_id(struct LDKPublicHopCandidate *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_set_short_channel_id")] public static extern void PublicHopCandidate_set_short_channel_id(long _this_ptr, long _val);
	// uint64_t PublicHopCandidate_clone_ptr(LDKPublicHopCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_clone_ptr")] public static extern long PublicHopCandidate_clone_ptr(long _arg);
	// struct LDKPublicHopCandidate PublicHopCandidate_clone(const struct LDKPublicHopCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PublicHopCandidate_clone")] public static extern long PublicHopCandidate_clone(long _orig);
	// void PrivateHopCandidate_free(struct LDKPrivateHopCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateHopCandidate_free")] public static extern void PrivateHopCandidate_free(long _this_obj);
	// uint64_t PrivateHopCandidate_clone_ptr(LDKPrivateHopCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateHopCandidate_clone_ptr")] public static extern long PrivateHopCandidate_clone_ptr(long _arg);
	// struct LDKPrivateHopCandidate PrivateHopCandidate_clone(const struct LDKPrivateHopCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateHopCandidate_clone")] public static extern long PrivateHopCandidate_clone(long _orig);
	// void BlindedPathCandidate_free(struct LDKBlindedPathCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPathCandidate_free")] public static extern void BlindedPathCandidate_free(long _this_obj);
	// uint64_t BlindedPathCandidate_clone_ptr(LDKBlindedPathCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPathCandidate_clone_ptr")] public static extern long BlindedPathCandidate_clone_ptr(long _arg);
	// struct LDKBlindedPathCandidate BlindedPathCandidate_clone(const struct LDKBlindedPathCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPathCandidate_clone")] public static extern long BlindedPathCandidate_clone(long _orig);
	// void OneHopBlindedPathCandidate_free(struct LDKOneHopBlindedPathCandidate this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OneHopBlindedPathCandidate_free")] public static extern void OneHopBlindedPathCandidate_free(long _this_obj);
	// uint64_t OneHopBlindedPathCandidate_clone_ptr(LDKOneHopBlindedPathCandidate *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OneHopBlindedPathCandidate_clone_ptr")] public static extern long OneHopBlindedPathCandidate_clone_ptr(long _arg);
	// struct LDKOneHopBlindedPathCandidate OneHopBlindedPathCandidate_clone(const struct LDKOneHopBlindedPathCandidate *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OneHopBlindedPathCandidate_clone")] public static extern long OneHopBlindedPathCandidate_clone(long _orig);
	// void CandidateRouteHop_free(struct LDKCandidateRouteHop this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_free")] public static extern void CandidateRouteHop_free(long _this_ptr);
	// uint64_t CandidateRouteHop_clone_ptr(LDKCandidateRouteHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_clone_ptr")] public static extern long CandidateRouteHop_clone_ptr(long _arg);
	// struct LDKCandidateRouteHop CandidateRouteHop_clone(const struct LDKCandidateRouteHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_clone")] public static extern long CandidateRouteHop_clone(long _orig);
	// struct LDKCandidateRouteHop CandidateRouteHop_first_hop(struct LDKFirstHopCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_first_hop")] public static extern long CandidateRouteHop_first_hop(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_public_hop(struct LDKPublicHopCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_public_hop")] public static extern long CandidateRouteHop_public_hop(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_private_hop(struct LDKPrivateHopCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_private_hop")] public static extern long CandidateRouteHop_private_hop(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_blinded(struct LDKBlindedPathCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_blinded")] public static extern long CandidateRouteHop_blinded(long _a);
	// struct LDKCandidateRouteHop CandidateRouteHop_one_hop_blinded(struct LDKOneHopBlindedPathCandidate a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_one_hop_blinded")] public static extern long CandidateRouteHop_one_hop_blinded(long _a);
	// MUST_USE_RES struct LDKCOption_u64Z CandidateRouteHop_globally_unique_short_channel_id(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_globally_unique_short_channel_id")] public static extern long CandidateRouteHop_globally_unique_short_channel_id(long _this_arg);
	// MUST_USE_RES uint32_t CandidateRouteHop_cltv_expiry_delta(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_cltv_expiry_delta")] public static extern int CandidateRouteHop_cltv_expiry_delta(long _this_arg);
	// MUST_USE_RES uint64_t CandidateRouteHop_htlc_minimum_msat(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_htlc_minimum_msat")] public static extern long CandidateRouteHop_htlc_minimum_msat(long _this_arg);
	// MUST_USE_RES struct LDKRoutingFees CandidateRouteHop_fees(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_fees")] public static extern long CandidateRouteHop_fees(long _this_arg);
	// MUST_USE_RES struct LDKNodeId CandidateRouteHop_source(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_source")] public static extern long CandidateRouteHop_source(long _this_arg);
	// MUST_USE_RES struct LDKNodeId CandidateRouteHop_target(const struct LDKCandidateRouteHop *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CandidateRouteHop_target")] public static extern long CandidateRouteHop_target(long _this_arg);
	// struct LDKCResult_RouteLightningErrorZ find_route(struct LDKPublicKey our_node_pubkey, const struct LDKRouteParameters *NONNULL_PTR route_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKCVec_ChannelDetailsZ *first_hops, struct LDKLogger logger, const struct LDKScoreLookUp *NONNULL_PTR scorer, const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR score_params, const uint8_t (*random_seed_bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_find_route")] public static extern long find_route(long _our_node_pubkey, long _route_params, long _network_graph, long _first_hops, long _logger, long _scorer, long _score_params, long _random_seed_bytes);
	// struct LDKCResult_RouteLightningErrorZ build_route_from_hops(struct LDKPublicKey our_node_pubkey, struct LDKCVec_PublicKeyZ hops, const struct LDKRouteParameters *NONNULL_PTR route_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger, const uint8_t (*random_seed_bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_build_route_from_hops")] public static extern long build_route_from_hops(long _our_node_pubkey, long _hops, long _route_params, long _network_graph, long _logger, long _random_seed_bytes);
	// void ScoreLookUp_free(struct LDKScoreLookUp this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreLookUp_free")] public static extern void ScoreLookUp_free(long _this_ptr);
	// void ScoreUpdate_free(struct LDKScoreUpdate this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ScoreUpdate_free")] public static extern void ScoreUpdate_free(long _this_ptr);
	// void Score_free(struct LDKScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Score_free")] public static extern void Score_free(long _this_ptr);
	// void LockableScore_free(struct LDKLockableScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LockableScore_free")] public static extern void LockableScore_free(long _this_ptr);
	// void WriteableScore_free(struct LDKWriteableScore this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WriteableScore_free")] public static extern void WriteableScore_free(long _this_ptr);
	// void MultiThreadedLockableScore_free(struct LDKMultiThreadedLockableScore this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_free")] public static extern void MultiThreadedLockableScore_free(long _this_obj);
	// struct LDKLockableScore MultiThreadedLockableScore_as_LockableScore(const struct LDKMultiThreadedLockableScore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_as_LockableScore")] public static extern long MultiThreadedLockableScore_as_LockableScore(long _this_arg);
	// struct LDKCVec_u8Z MultiThreadedLockableScore_write(const struct LDKMultiThreadedLockableScore *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_write")] public static extern long MultiThreadedLockableScore_write(long _obj);
	// struct LDKWriteableScore MultiThreadedLockableScore_as_WriteableScore(const struct LDKMultiThreadedLockableScore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_as_WriteableScore")] public static extern long MultiThreadedLockableScore_as_WriteableScore(long _this_arg);
	// MUST_USE_RES struct LDKMultiThreadedLockableScore MultiThreadedLockableScore_new(struct LDKScore score);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedLockableScore_new")] public static extern long MultiThreadedLockableScore_new(long _score);
	// void MultiThreadedScoreLockRead_free(struct LDKMultiThreadedScoreLockRead this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockRead_free")] public static extern void MultiThreadedScoreLockRead_free(long _this_obj);
	// void MultiThreadedScoreLockWrite_free(struct LDKMultiThreadedScoreLockWrite this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockWrite_free")] public static extern void MultiThreadedScoreLockWrite_free(long _this_obj);
	// struct LDKScoreLookUp MultiThreadedScoreLockRead_as_ScoreLookUp(const struct LDKMultiThreadedScoreLockRead *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockRead_as_ScoreLookUp")] public static extern long MultiThreadedScoreLockRead_as_ScoreLookUp(long _this_arg);
	// struct LDKCVec_u8Z MultiThreadedScoreLockWrite_write(const struct LDKMultiThreadedScoreLockWrite *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockWrite_write")] public static extern long MultiThreadedScoreLockWrite_write(long _obj);
	// struct LDKScoreUpdate MultiThreadedScoreLockWrite_as_ScoreUpdate(const struct LDKMultiThreadedScoreLockWrite *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MultiThreadedScoreLockWrite_as_ScoreUpdate")] public static extern long MultiThreadedScoreLockWrite_as_ScoreUpdate(long _this_arg);
	// void ChannelUsage_free(struct LDKChannelUsage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_free")] public static extern void ChannelUsage_free(long _this_obj);
	// uint64_t ChannelUsage_get_amount_msat(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_amount_msat")] public static extern long ChannelUsage_get_amount_msat(long _this_ptr);
	// void ChannelUsage_set_amount_msat(struct LDKChannelUsage *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_amount_msat")] public static extern void ChannelUsage_set_amount_msat(long _this_ptr, long _val);
	// uint64_t ChannelUsage_get_inflight_htlc_msat(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_inflight_htlc_msat")] public static extern long ChannelUsage_get_inflight_htlc_msat(long _this_ptr);
	// void ChannelUsage_set_inflight_htlc_msat(struct LDKChannelUsage *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_inflight_htlc_msat")] public static extern void ChannelUsage_set_inflight_htlc_msat(long _this_ptr, long _val);
	// struct LDKEffectiveCapacity ChannelUsage_get_effective_capacity(const struct LDKChannelUsage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_get_effective_capacity")] public static extern long ChannelUsage_get_effective_capacity(long _this_ptr);
	// void ChannelUsage_set_effective_capacity(struct LDKChannelUsage *NONNULL_PTR this_ptr, struct LDKEffectiveCapacity val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_set_effective_capacity")] public static extern void ChannelUsage_set_effective_capacity(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelUsage ChannelUsage_new(uint64_t amount_msat_arg, uint64_t inflight_htlc_msat_arg, struct LDKEffectiveCapacity effective_capacity_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_new")] public static extern long ChannelUsage_new(long _amount_msat_arg, long _inflight_htlc_msat_arg, long _effective_capacity_arg);
	// uint64_t ChannelUsage_clone_ptr(LDKChannelUsage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_clone_ptr")] public static extern long ChannelUsage_clone_ptr(long _arg);
	// struct LDKChannelUsage ChannelUsage_clone(const struct LDKChannelUsage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelUsage_clone")] public static extern long ChannelUsage_clone(long _orig);
	// void FixedPenaltyScorer_free(struct LDKFixedPenaltyScorer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_free")] public static extern void FixedPenaltyScorer_free(long _this_obj);
	// uint64_t FixedPenaltyScorer_clone_ptr(LDKFixedPenaltyScorer *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_clone_ptr")] public static extern long FixedPenaltyScorer_clone_ptr(long _arg);
	// struct LDKFixedPenaltyScorer FixedPenaltyScorer_clone(const struct LDKFixedPenaltyScorer *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_clone")] public static extern long FixedPenaltyScorer_clone(long _orig);
	// MUST_USE_RES struct LDKFixedPenaltyScorer FixedPenaltyScorer_with_penalty(uint64_t penalty_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_with_penalty")] public static extern long FixedPenaltyScorer_with_penalty(long _penalty_msat);
	// struct LDKScoreLookUp FixedPenaltyScorer_as_ScoreLookUp(const struct LDKFixedPenaltyScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_as_ScoreLookUp")] public static extern long FixedPenaltyScorer_as_ScoreLookUp(long _this_arg);
	// struct LDKScoreUpdate FixedPenaltyScorer_as_ScoreUpdate(const struct LDKFixedPenaltyScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_as_ScoreUpdate")] public static extern long FixedPenaltyScorer_as_ScoreUpdate(long _this_arg);
	// struct LDKCVec_u8Z FixedPenaltyScorer_write(const struct LDKFixedPenaltyScorer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_write")] public static extern long FixedPenaltyScorer_write(long _obj);
	// struct LDKCResult_FixedPenaltyScorerDecodeErrorZ FixedPenaltyScorer_read(struct LDKu8slice ser, uint64_t arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FixedPenaltyScorer_read")] public static extern long FixedPenaltyScorer_read(long _ser, long _arg);
	// void ProbabilisticScorer_free(struct LDKProbabilisticScorer this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_free")] public static extern void ProbabilisticScorer_free(long _this_obj);
	// void ProbabilisticScoringFeeParameters_free(struct LDKProbabilisticScoringFeeParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_free")] public static extern void ProbabilisticScoringFeeParameters_free(long _this_obj);
	// uint64_t ProbabilisticScoringFeeParameters_get_base_penalty_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_base_penalty_msat")] public static extern long ProbabilisticScoringFeeParameters_get_base_penalty_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_base_penalty_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_base_penalty_msat")] public static extern void ProbabilisticScoringFeeParameters_set_base_penalty_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_base_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_base_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringFeeParameters_get_base_penalty_amount_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_base_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_base_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringFeeParameters_set_base_penalty_amount_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_liquidity_penalty_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_liquidity_penalty_multiplier_msat")] public static extern long ProbabilisticScoringFeeParameters_get_liquidity_penalty_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_liquidity_penalty_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_liquidity_penalty_multiplier_msat")] public static extern void ProbabilisticScoringFeeParameters_set_liquidity_penalty_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_liquidity_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_liquidity_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringFeeParameters_get_liquidity_penalty_amount_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_liquidity_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_liquidity_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringFeeParameters_set_liquidity_penalty_amount_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_multiplier_msat")] public static extern long ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_multiplier_msat")] public static extern void ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_amount_multiplier_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_amount_multiplier_msat")] public static extern long ProbabilisticScoringFeeParameters_get_historical_liquidity_penalty_amount_multiplier_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_amount_multiplier_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_amount_multiplier_msat")] public static extern void ProbabilisticScoringFeeParameters_set_historical_liquidity_penalty_amount_multiplier_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_anti_probing_penalty_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_anti_probing_penalty_msat")] public static extern long ProbabilisticScoringFeeParameters_get_anti_probing_penalty_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_anti_probing_penalty_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_anti_probing_penalty_msat")] public static extern void ProbabilisticScoringFeeParameters_set_anti_probing_penalty_msat(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringFeeParameters_get_considered_impossible_penalty_msat(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_considered_impossible_penalty_msat")] public static extern long ProbabilisticScoringFeeParameters_get_considered_impossible_penalty_msat(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_considered_impossible_penalty_msat(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_considered_impossible_penalty_msat")] public static extern void ProbabilisticScoringFeeParameters_set_considered_impossible_penalty_msat(long _this_ptr, long _val);
	// bool ProbabilisticScoringFeeParameters_get_linear_success_probability(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_get_linear_success_probability")] public static extern bool ProbabilisticScoringFeeParameters_get_linear_success_probability(long _this_ptr);
	// void ProbabilisticScoringFeeParameters_set_linear_success_probability(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_linear_success_probability")] public static extern void ProbabilisticScoringFeeParameters_set_linear_success_probability(long _this_ptr, bool _val);
	// uint64_t ProbabilisticScoringFeeParameters_clone_ptr(LDKProbabilisticScoringFeeParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_clone_ptr")] public static extern long ProbabilisticScoringFeeParameters_clone_ptr(long _arg);
	// struct LDKProbabilisticScoringFeeParameters ProbabilisticScoringFeeParameters_clone(const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_clone")] public static extern long ProbabilisticScoringFeeParameters_clone(long _orig);
	// MUST_USE_RES struct LDKProbabilisticScoringFeeParameters ProbabilisticScoringFeeParameters_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_default")] public static extern long ProbabilisticScoringFeeParameters_default();
	// void ProbabilisticScoringFeeParameters_add_banned(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_add_banned")] public static extern void ProbabilisticScoringFeeParameters_add_banned(long _this_arg, long _node_id);
	// void ProbabilisticScoringFeeParameters_add_banned_from_list(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, struct LDKCVec_NodeIdZ node_ids);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_add_banned_from_list")] public static extern void ProbabilisticScoringFeeParameters_add_banned_from_list(long _this_arg, long _node_ids);
	// void ProbabilisticScoringFeeParameters_remove_banned(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_remove_banned")] public static extern void ProbabilisticScoringFeeParameters_remove_banned(long _this_arg, long _node_id);
	// void ProbabilisticScoringFeeParameters_set_manual_penalty(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id, uint64_t penalty);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_set_manual_penalty")] public static extern void ProbabilisticScoringFeeParameters_set_manual_penalty(long _this_arg, long _node_id, long _penalty);
	// void ProbabilisticScoringFeeParameters_remove_manual_penalty(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg, const struct LDKNodeId *NONNULL_PTR node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_remove_manual_penalty")] public static extern void ProbabilisticScoringFeeParameters_remove_manual_penalty(long _this_arg, long _node_id);
	// void ProbabilisticScoringFeeParameters_clear_manual_penalties(struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringFeeParameters_clear_manual_penalties")] public static extern void ProbabilisticScoringFeeParameters_clear_manual_penalties(long _this_arg);
	// void ProbabilisticScoringDecayParameters_free(struct LDKProbabilisticScoringDecayParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_free")] public static extern void ProbabilisticScoringDecayParameters_free(long _this_obj);
	// uint64_t ProbabilisticScoringDecayParameters_get_historical_no_updates_half_life(const struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_get_historical_no_updates_half_life")] public static extern long ProbabilisticScoringDecayParameters_get_historical_no_updates_half_life(long _this_ptr);
	// void ProbabilisticScoringDecayParameters_set_historical_no_updates_half_life(struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_set_historical_no_updates_half_life")] public static extern void ProbabilisticScoringDecayParameters_set_historical_no_updates_half_life(long _this_ptr, long _val);
	// uint64_t ProbabilisticScoringDecayParameters_get_liquidity_offset_half_life(const struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_get_liquidity_offset_half_life")] public static extern long ProbabilisticScoringDecayParameters_get_liquidity_offset_half_life(long _this_ptr);
	// void ProbabilisticScoringDecayParameters_set_liquidity_offset_half_life(struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_set_liquidity_offset_half_life")] public static extern void ProbabilisticScoringDecayParameters_set_liquidity_offset_half_life(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKProbabilisticScoringDecayParameters ProbabilisticScoringDecayParameters_new(uint64_t historical_no_updates_half_life_arg, uint64_t liquidity_offset_half_life_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_new")] public static extern long ProbabilisticScoringDecayParameters_new(long _historical_no_updates_half_life_arg, long _liquidity_offset_half_life_arg);
	// uint64_t ProbabilisticScoringDecayParameters_clone_ptr(LDKProbabilisticScoringDecayParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_clone_ptr")] public static extern long ProbabilisticScoringDecayParameters_clone_ptr(long _arg);
	// struct LDKProbabilisticScoringDecayParameters ProbabilisticScoringDecayParameters_clone(const struct LDKProbabilisticScoringDecayParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_clone")] public static extern long ProbabilisticScoringDecayParameters_clone(long _orig);
	// MUST_USE_RES struct LDKProbabilisticScoringDecayParameters ProbabilisticScoringDecayParameters_default(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScoringDecayParameters_default")] public static extern long ProbabilisticScoringDecayParameters_default();
	// MUST_USE_RES struct LDKProbabilisticScorer ProbabilisticScorer_new(struct LDKProbabilisticScoringDecayParameters decay_params, const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_new")] public static extern long ProbabilisticScorer_new(long _decay_params, long _network_graph, long _logger);
	// void ProbabilisticScorer_debug_log_liquidity_stats(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_debug_log_liquidity_stats")] public static extern void ProbabilisticScorer_debug_log_liquidity_stats(long _this_arg);
	// MUST_USE_RES struct LDKCOption_C2Tuple_u64u64ZZ ProbabilisticScorer_estimated_channel_liquidity_range(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_estimated_channel_liquidity_range")] public static extern long ProbabilisticScorer_estimated_channel_liquidity_range(long _this_arg, long _scid, long _target);
	// MUST_USE_RES struct LDKCOption_C2Tuple_ThirtyTwoU16sThirtyTwoU16sZZ ProbabilisticScorer_historical_estimated_channel_liquidity_probabilities(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_historical_estimated_channel_liquidity_probabilities")] public static extern long ProbabilisticScorer_historical_estimated_channel_liquidity_probabilities(long _this_arg, long _scid, long _target);
	// MUST_USE_RES struct LDKCOption_f64Z ProbabilisticScorer_historical_estimated_payment_success_probability(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target, uint64_t amount_msat, const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR params, bool allow_fallback_estimation);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_historical_estimated_payment_success_probability")] public static extern long ProbabilisticScorer_historical_estimated_payment_success_probability(long _this_arg, long _scid, long _target, long _amount_msat, long _params, bool _allow_fallback_estimation);
	// MUST_USE_RES struct LDKCOption_f64Z ProbabilisticScorer_live_estimated_payment_success_probability(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg, uint64_t scid, const struct LDKNodeId *NONNULL_PTR target, uint64_t amount_msat, const struct LDKProbabilisticScoringFeeParameters *NONNULL_PTR params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_live_estimated_payment_success_probability")] public static extern long ProbabilisticScorer_live_estimated_payment_success_probability(long _this_arg, long _scid, long _target, long _amount_msat, long _params);
	// struct LDKScoreLookUp ProbabilisticScorer_as_ScoreLookUp(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_as_ScoreLookUp")] public static extern long ProbabilisticScorer_as_ScoreLookUp(long _this_arg);
	// struct LDKScoreUpdate ProbabilisticScorer_as_ScoreUpdate(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_as_ScoreUpdate")] public static extern long ProbabilisticScorer_as_ScoreUpdate(long _this_arg);
	// struct LDKScore ProbabilisticScorer_as_Score(const struct LDKProbabilisticScorer *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_as_Score")] public static extern long ProbabilisticScorer_as_Score(long _this_arg);
	// struct LDKCVec_u8Z ProbabilisticScorer_write(const struct LDKProbabilisticScorer *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_write")] public static extern long ProbabilisticScorer_write(long _obj);
	// struct LDKCResult_ProbabilisticScorerDecodeErrorZ ProbabilisticScorer_read(struct LDKu8slice ser, struct LDKProbabilisticScoringDecayParameters arg_a, const struct LDKNetworkGraph *NONNULL_PTR arg_b, struct LDKLogger arg_c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProbabilisticScorer_read")] public static extern long ProbabilisticScorer_read(long _ser, long _arg_a, long _arg_b, long _arg_c);
	// void DelayedPaymentOutputDescriptor_free(struct LDKDelayedPaymentOutputDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_free")] public static extern void DelayedPaymentOutputDescriptor_free(long _this_obj);
	// struct LDKOutPoint DelayedPaymentOutputDescriptor_get_outpoint(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_outpoint")] public static extern long DelayedPaymentOutputDescriptor_get_outpoint(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_outpoint(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_outpoint")] public static extern void DelayedPaymentOutputDescriptor_set_outpoint(long _this_ptr, long _val);
	// struct LDKPublicKey DelayedPaymentOutputDescriptor_get_per_commitment_point(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_per_commitment_point")] public static extern long DelayedPaymentOutputDescriptor_get_per_commitment_point(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_per_commitment_point(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_per_commitment_point")] public static extern void DelayedPaymentOutputDescriptor_set_per_commitment_point(long _this_ptr, long _val);
	// uint16_t DelayedPaymentOutputDescriptor_get_to_self_delay(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_to_self_delay")] public static extern short DelayedPaymentOutputDescriptor_get_to_self_delay(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_to_self_delay(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_to_self_delay")] public static extern void DelayedPaymentOutputDescriptor_set_to_self_delay(long _this_ptr, short _val);
	// struct LDKTxOut DelayedPaymentOutputDescriptor_get_output(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_output")] public static extern long DelayedPaymentOutputDescriptor_get_output(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_output(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_output")] public static extern void DelayedPaymentOutputDescriptor_set_output(long _this_ptr, long _val);
	// struct LDKRevocationKey DelayedPaymentOutputDescriptor_get_revocation_pubkey(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_revocation_pubkey")] public static extern long DelayedPaymentOutputDescriptor_get_revocation_pubkey(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_revocation_pubkey(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKRevocationKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_revocation_pubkey")] public static extern void DelayedPaymentOutputDescriptor_set_revocation_pubkey(long _this_ptr, long _val);
	// const uint8_t (*DelayedPaymentOutputDescriptor_get_channel_keys_id(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_channel_keys_id")] public static extern long DelayedPaymentOutputDescriptor_get_channel_keys_id(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_channel_keys_id(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_channel_keys_id")] public static extern void DelayedPaymentOutputDescriptor_set_channel_keys_id(long _this_ptr, long _val);
	// uint64_t DelayedPaymentOutputDescriptor_get_channel_value_satoshis(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_channel_value_satoshis")] public static extern long DelayedPaymentOutputDescriptor_get_channel_value_satoshis(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_channel_value_satoshis(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_channel_value_satoshis")] public static extern void DelayedPaymentOutputDescriptor_set_channel_value_satoshis(long _this_ptr, long _val);
	// struct LDKChannelTransactionParameters DelayedPaymentOutputDescriptor_get_channel_transaction_parameters(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_get_channel_transaction_parameters")] public static extern long DelayedPaymentOutputDescriptor_get_channel_transaction_parameters(long _this_ptr);
	// void DelayedPaymentOutputDescriptor_set_channel_transaction_parameters(struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_set_channel_transaction_parameters")] public static extern void DelayedPaymentOutputDescriptor_set_channel_transaction_parameters(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDelayedPaymentOutputDescriptor DelayedPaymentOutputDescriptor_new(struct LDKOutPoint outpoint_arg, struct LDKPublicKey per_commitment_point_arg, uint16_t to_self_delay_arg, struct LDKTxOut output_arg, struct LDKRevocationKey revocation_pubkey_arg, struct LDKThirtyTwoBytes channel_keys_id_arg, uint64_t channel_value_satoshis_arg, struct LDKChannelTransactionParameters channel_transaction_parameters_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_new")] public static extern long DelayedPaymentOutputDescriptor_new(long _outpoint_arg, long _per_commitment_point_arg, short _to_self_delay_arg, long _output_arg, long _revocation_pubkey_arg, long _channel_keys_id_arg, long _channel_value_satoshis_arg, long _channel_transaction_parameters_arg);
	// uint64_t DelayedPaymentOutputDescriptor_clone_ptr(LDKDelayedPaymentOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_clone_ptr")] public static extern long DelayedPaymentOutputDescriptor_clone_ptr(long _arg);
	// struct LDKDelayedPaymentOutputDescriptor DelayedPaymentOutputDescriptor_clone(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_clone")] public static extern long DelayedPaymentOutputDescriptor_clone(long _orig);
	// uint64_t DelayedPaymentOutputDescriptor_hash(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_hash")] public static extern long DelayedPaymentOutputDescriptor_hash(long _o);
	// bool DelayedPaymentOutputDescriptor_eq(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR a, const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_eq")] public static extern bool DelayedPaymentOutputDescriptor_eq(long _a, long _b);
	// struct LDKCVec_u8Z DelayedPaymentOutputDescriptor_write(const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_write")] public static extern long DelayedPaymentOutputDescriptor_write(long _obj);
	// struct LDKCResult_DelayedPaymentOutputDescriptorDecodeErrorZ DelayedPaymentOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DelayedPaymentOutputDescriptor_read")] public static extern long DelayedPaymentOutputDescriptor_read(long _ser);
	// void StaticPaymentOutputDescriptor_free(struct LDKStaticPaymentOutputDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_free")] public static extern void StaticPaymentOutputDescriptor_free(long _this_obj);
	// struct LDKOutPoint StaticPaymentOutputDescriptor_get_outpoint(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_outpoint")] public static extern long StaticPaymentOutputDescriptor_get_outpoint(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_outpoint(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_outpoint")] public static extern void StaticPaymentOutputDescriptor_set_outpoint(long _this_ptr, long _val);
	// struct LDKTxOut StaticPaymentOutputDescriptor_get_output(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_output")] public static extern long StaticPaymentOutputDescriptor_get_output(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_output(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_output")] public static extern void StaticPaymentOutputDescriptor_set_output(long _this_ptr, long _val);
	// const uint8_t (*StaticPaymentOutputDescriptor_get_channel_keys_id(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_keys_id")] public static extern long StaticPaymentOutputDescriptor_get_channel_keys_id(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_keys_id(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_keys_id")] public static extern void StaticPaymentOutputDescriptor_set_channel_keys_id(long _this_ptr, long _val);
	// uint64_t StaticPaymentOutputDescriptor_get_channel_value_satoshis(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_value_satoshis")] public static extern long StaticPaymentOutputDescriptor_get_channel_value_satoshis(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_value_satoshis(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_value_satoshis")] public static extern void StaticPaymentOutputDescriptor_set_channel_value_satoshis(long _this_ptr, long _val);
	// struct LDKChannelTransactionParameters StaticPaymentOutputDescriptor_get_channel_transaction_parameters(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_get_channel_transaction_parameters")] public static extern long StaticPaymentOutputDescriptor_get_channel_transaction_parameters(long _this_ptr);
	// void StaticPaymentOutputDescriptor_set_channel_transaction_parameters(struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_ptr, struct LDKChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_set_channel_transaction_parameters")] public static extern void StaticPaymentOutputDescriptor_set_channel_transaction_parameters(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKStaticPaymentOutputDescriptor StaticPaymentOutputDescriptor_new(struct LDKOutPoint outpoint_arg, struct LDKTxOut output_arg, struct LDKThirtyTwoBytes channel_keys_id_arg, uint64_t channel_value_satoshis_arg, struct LDKChannelTransactionParameters channel_transaction_parameters_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_new")] public static extern long StaticPaymentOutputDescriptor_new(long _outpoint_arg, long _output_arg, long _channel_keys_id_arg, long _channel_value_satoshis_arg, long _channel_transaction_parameters_arg);
	// uint64_t StaticPaymentOutputDescriptor_clone_ptr(LDKStaticPaymentOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_clone_ptr")] public static extern long StaticPaymentOutputDescriptor_clone_ptr(long _arg);
	// struct LDKStaticPaymentOutputDescriptor StaticPaymentOutputDescriptor_clone(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_clone")] public static extern long StaticPaymentOutputDescriptor_clone(long _orig);
	// uint64_t StaticPaymentOutputDescriptor_hash(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_hash")] public static extern long StaticPaymentOutputDescriptor_hash(long _o);
	// bool StaticPaymentOutputDescriptor_eq(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR a, const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_eq")] public static extern bool StaticPaymentOutputDescriptor_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ StaticPaymentOutputDescriptor_witness_script(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_witness_script")] public static extern long StaticPaymentOutputDescriptor_witness_script(long _this_arg);
	// MUST_USE_RES uint64_t StaticPaymentOutputDescriptor_max_witness_length(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_max_witness_length")] public static extern long StaticPaymentOutputDescriptor_max_witness_length(long _this_arg);
	// struct LDKCVec_u8Z StaticPaymentOutputDescriptor_write(const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_write")] public static extern long StaticPaymentOutputDescriptor_write(long _obj);
	// struct LDKCResult_StaticPaymentOutputDescriptorDecodeErrorZ StaticPaymentOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_StaticPaymentOutputDescriptor_read")] public static extern long StaticPaymentOutputDescriptor_read(long _ser);
	// void SpendableOutputDescriptor_free(struct LDKSpendableOutputDescriptor this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_free")] public static extern void SpendableOutputDescriptor_free(long _this_ptr);
	// uint64_t SpendableOutputDescriptor_clone_ptr(LDKSpendableOutputDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_clone_ptr")] public static extern long SpendableOutputDescriptor_clone_ptr(long _arg);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_clone(const struct LDKSpendableOutputDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_clone")] public static extern long SpendableOutputDescriptor_clone(long _orig);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_static_output(struct LDKOutPoint outpoint, struct LDKTxOut output, struct LDKThirtyTwoBytes channel_keys_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_static_output")] public static extern long SpendableOutputDescriptor_static_output(long _outpoint, long _output, long _channel_keys_id);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_delayed_payment_output(struct LDKDelayedPaymentOutputDescriptor a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_delayed_payment_output")] public static extern long SpendableOutputDescriptor_delayed_payment_output(long _a);
	// struct LDKSpendableOutputDescriptor SpendableOutputDescriptor_static_payment_output(struct LDKStaticPaymentOutputDescriptor a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_static_payment_output")] public static extern long SpendableOutputDescriptor_static_payment_output(long _a);
	// uint64_t SpendableOutputDescriptor_hash(const struct LDKSpendableOutputDescriptor *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_hash")] public static extern long SpendableOutputDescriptor_hash(long _o);
	// bool SpendableOutputDescriptor_eq(const struct LDKSpendableOutputDescriptor *NONNULL_PTR a, const struct LDKSpendableOutputDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_eq")] public static extern bool SpendableOutputDescriptor_eq(long _a, long _b);
	// struct LDKCVec_u8Z SpendableOutputDescriptor_write(const struct LDKSpendableOutputDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_write")] public static extern long SpendableOutputDescriptor_write(long _obj);
	// struct LDKCResult_SpendableOutputDescriptorDecodeErrorZ SpendableOutputDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_read")] public static extern long SpendableOutputDescriptor_read(long _ser);
	// MUST_USE_RES struct LDKCResult_C2Tuple_CVec_u8Zu64ZNoneZ SpendableOutputDescriptor_create_spendable_outputs_psbt(struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_TxOutZ outputs, struct LDKCVec_u8Z change_destination_script, uint32_t feerate_sat_per_1000_weight, struct LDKCOption_u32Z locktime);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_create_spendable_outputs_psbt")] public static extern long SpendableOutputDescriptor_create_spendable_outputs_psbt(long _descriptors, long _outputs, long _change_destination_script, int _feerate_sat_per_1000_weight, long _locktime);
	// MUST_USE_RES struct LDKOutPoint SpendableOutputDescriptor_spendable_outpoint(const struct LDKSpendableOutputDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SpendableOutputDescriptor_spendable_outpoint")] public static extern long SpendableOutputDescriptor_spendable_outpoint(long _this_arg);
	// void ChannelDerivationParameters_free(struct LDKChannelDerivationParameters this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_free")] public static extern void ChannelDerivationParameters_free(long _this_obj);
	// uint64_t ChannelDerivationParameters_get_value_satoshis(const struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_get_value_satoshis")] public static extern long ChannelDerivationParameters_get_value_satoshis(long _this_ptr);
	// void ChannelDerivationParameters_set_value_satoshis(struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_set_value_satoshis")] public static extern void ChannelDerivationParameters_set_value_satoshis(long _this_ptr, long _val);
	// const uint8_t (*ChannelDerivationParameters_get_keys_id(const struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_get_keys_id")] public static extern long ChannelDerivationParameters_get_keys_id(long _this_ptr);
	// void ChannelDerivationParameters_set_keys_id(struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_set_keys_id")] public static extern void ChannelDerivationParameters_set_keys_id(long _this_ptr, long _val);
	// struct LDKChannelTransactionParameters ChannelDerivationParameters_get_transaction_parameters(const struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_get_transaction_parameters")] public static extern long ChannelDerivationParameters_get_transaction_parameters(long _this_ptr);
	// void ChannelDerivationParameters_set_transaction_parameters(struct LDKChannelDerivationParameters *NONNULL_PTR this_ptr, struct LDKChannelTransactionParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_set_transaction_parameters")] public static extern void ChannelDerivationParameters_set_transaction_parameters(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKChannelDerivationParameters ChannelDerivationParameters_new(uint64_t value_satoshis_arg, struct LDKThirtyTwoBytes keys_id_arg, struct LDKChannelTransactionParameters transaction_parameters_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_new")] public static extern long ChannelDerivationParameters_new(long _value_satoshis_arg, long _keys_id_arg, long _transaction_parameters_arg);
	// uint64_t ChannelDerivationParameters_clone_ptr(LDKChannelDerivationParameters *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_clone_ptr")] public static extern long ChannelDerivationParameters_clone_ptr(long _arg);
	// struct LDKChannelDerivationParameters ChannelDerivationParameters_clone(const struct LDKChannelDerivationParameters *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_clone")] public static extern long ChannelDerivationParameters_clone(long _orig);
	// bool ChannelDerivationParameters_eq(const struct LDKChannelDerivationParameters *NONNULL_PTR a, const struct LDKChannelDerivationParameters *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_eq")] public static extern bool ChannelDerivationParameters_eq(long _a, long _b);
	// struct LDKCVec_u8Z ChannelDerivationParameters_write(const struct LDKChannelDerivationParameters *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_write")] public static extern long ChannelDerivationParameters_write(long _obj);
	// struct LDKCResult_ChannelDerivationParametersDecodeErrorZ ChannelDerivationParameters_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelDerivationParameters_read")] public static extern long ChannelDerivationParameters_read(long _ser);
	// void HTLCDescriptor_free(struct LDKHTLCDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_free")] public static extern void HTLCDescriptor_free(long _this_obj);
	// struct LDKChannelDerivationParameters HTLCDescriptor_get_channel_derivation_parameters(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_channel_derivation_parameters")] public static extern long HTLCDescriptor_get_channel_derivation_parameters(long _this_ptr);
	// void HTLCDescriptor_set_channel_derivation_parameters(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKChannelDerivationParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_channel_derivation_parameters")] public static extern void HTLCDescriptor_set_channel_derivation_parameters(long _this_ptr, long _val);
	// const uint8_t (*HTLCDescriptor_get_commitment_txid(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_commitment_txid")] public static extern long HTLCDescriptor_get_commitment_txid(long _this_ptr);
	// void HTLCDescriptor_set_commitment_txid(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_commitment_txid")] public static extern void HTLCDescriptor_set_commitment_txid(long _this_ptr, long _val);
	// uint64_t HTLCDescriptor_get_per_commitment_number(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_per_commitment_number")] public static extern long HTLCDescriptor_get_per_commitment_number(long _this_ptr);
	// void HTLCDescriptor_set_per_commitment_number(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_per_commitment_number")] public static extern void HTLCDescriptor_set_per_commitment_number(long _this_ptr, long _val);
	// struct LDKPublicKey HTLCDescriptor_get_per_commitment_point(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_per_commitment_point")] public static extern long HTLCDescriptor_get_per_commitment_point(long _this_ptr);
	// void HTLCDescriptor_set_per_commitment_point(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_per_commitment_point")] public static extern void HTLCDescriptor_set_per_commitment_point(long _this_ptr, long _val);
	// uint32_t HTLCDescriptor_get_feerate_per_kw(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_feerate_per_kw")] public static extern int HTLCDescriptor_get_feerate_per_kw(long _this_ptr);
	// void HTLCDescriptor_set_feerate_per_kw(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_feerate_per_kw")] public static extern void HTLCDescriptor_set_feerate_per_kw(long _this_ptr, int _val);
	// struct LDKHTLCOutputInCommitment HTLCDescriptor_get_htlc(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_htlc")] public static extern long HTLCDescriptor_get_htlc(long _this_ptr);
	// void HTLCDescriptor_set_htlc(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKHTLCOutputInCommitment val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_htlc")] public static extern void HTLCDescriptor_set_htlc(long _this_ptr, long _val);
	// struct LDKCOption_ThirtyTwoBytesZ HTLCDescriptor_get_preimage(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_preimage")] public static extern long HTLCDescriptor_get_preimage(long _this_ptr);
	// void HTLCDescriptor_set_preimage(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKCOption_ThirtyTwoBytesZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_preimage")] public static extern void HTLCDescriptor_set_preimage(long _this_ptr, long _val);
	// struct LDKECDSASignature HTLCDescriptor_get_counterparty_sig(const struct LDKHTLCDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_get_counterparty_sig")] public static extern long HTLCDescriptor_get_counterparty_sig(long _this_ptr);
	// void HTLCDescriptor_set_counterparty_sig(struct LDKHTLCDescriptor *NONNULL_PTR this_ptr, struct LDKECDSASignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_set_counterparty_sig")] public static extern void HTLCDescriptor_set_counterparty_sig(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKHTLCDescriptor HTLCDescriptor_new(struct LDKChannelDerivationParameters channel_derivation_parameters_arg, struct LDKThirtyTwoBytes commitment_txid_arg, uint64_t per_commitment_number_arg, struct LDKPublicKey per_commitment_point_arg, uint32_t feerate_per_kw_arg, struct LDKHTLCOutputInCommitment htlc_arg, struct LDKCOption_ThirtyTwoBytesZ preimage_arg, struct LDKECDSASignature counterparty_sig_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_new")] public static extern long HTLCDescriptor_new(long _channel_derivation_parameters_arg, long _commitment_txid_arg, long _per_commitment_number_arg, long _per_commitment_point_arg, int _feerate_per_kw_arg, long _htlc_arg, long _preimage_arg, long _counterparty_sig_arg);
	// uint64_t HTLCDescriptor_clone_ptr(LDKHTLCDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_clone_ptr")] public static extern long HTLCDescriptor_clone_ptr(long _arg);
	// struct LDKHTLCDescriptor HTLCDescriptor_clone(const struct LDKHTLCDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_clone")] public static extern long HTLCDescriptor_clone(long _orig);
	// bool HTLCDescriptor_eq(const struct LDKHTLCDescriptor *NONNULL_PTR a, const struct LDKHTLCDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_eq")] public static extern bool HTLCDescriptor_eq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCDescriptor_write(const struct LDKHTLCDescriptor *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_write")] public static extern long HTLCDescriptor_write(long _obj);
	// struct LDKCResult_HTLCDescriptorDecodeErrorZ HTLCDescriptor_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_read")] public static extern long HTLCDescriptor_read(long _ser);
	// MUST_USE_RES struct LDKOutPoint HTLCDescriptor_outpoint(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_outpoint")] public static extern long HTLCDescriptor_outpoint(long _this_arg);
	// MUST_USE_RES struct LDKTxOut HTLCDescriptor_previous_utxo(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_previous_utxo")] public static extern long HTLCDescriptor_previous_utxo(long _this_arg);
	// MUST_USE_RES struct LDKTxIn HTLCDescriptor_unsigned_tx_input(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_unsigned_tx_input")] public static extern long HTLCDescriptor_unsigned_tx_input(long _this_arg);
	// MUST_USE_RES struct LDKTxOut HTLCDescriptor_tx_output(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_tx_output")] public static extern long HTLCDescriptor_tx_output(long _this_arg);
	// MUST_USE_RES struct LDKCVec_u8Z HTLCDescriptor_witness_script(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_witness_script")] public static extern long HTLCDescriptor_witness_script(long _this_arg);
	// MUST_USE_RES struct LDKWitness HTLCDescriptor_tx_input_witness(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg, struct LDKECDSASignature signature, struct LDKu8slice witness_script);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_tx_input_witness")] public static extern long HTLCDescriptor_tx_input_witness(long _this_arg, long _signature, long _witness_script);
	// MUST_USE_RES struct LDKEcdsaChannelSigner HTLCDescriptor_derive_channel_signer(const struct LDKHTLCDescriptor *NONNULL_PTR this_arg, const struct LDKSignerProvider *NONNULL_PTR signer_provider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDescriptor_derive_channel_signer")] public static extern long HTLCDescriptor_derive_channel_signer(long _this_arg, long _signer_provider);
	// void ChannelSigner_free(struct LDKChannelSigner this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelSigner_free")] public static extern void ChannelSigner_free(long _this_ptr);
	// enum LDKRecipient Recipient_clone(const enum LDKRecipient *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_clone")] public static extern Recipient Recipient_clone(long _orig);
	// enum LDKRecipient Recipient_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_node")] public static extern Recipient Recipient_node();
	// enum LDKRecipient Recipient_phantom_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Recipient_phantom_node")] public static extern Recipient Recipient_phantom_node();
	// void EntropySource_free(struct LDKEntropySource this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EntropySource_free")] public static extern void EntropySource_free(long _this_ptr);
	// void NodeSigner_free(struct LDKNodeSigner this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeSigner_free")] public static extern void NodeSigner_free(long _this_ptr);
	// void OutputSpender_free(struct LDKOutputSpender this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OutputSpender_free")] public static extern void OutputSpender_free(long _this_ptr);
	// void SignerProvider_free(struct LDKSignerProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignerProvider_free")] public static extern void SignerProvider_free(long _this_ptr);
	// void ChangeDestinationSource_free(struct LDKChangeDestinationSource this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChangeDestinationSource_free")] public static extern void ChangeDestinationSource_free(long _this_ptr);
	// void InMemorySigner_free(struct LDKInMemorySigner this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_free")] public static extern void InMemorySigner_free(long _this_obj);
	// const uint8_t (*InMemorySigner_get_funding_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_funding_key")] public static extern long InMemorySigner_get_funding_key(long _this_ptr);
	// void InMemorySigner_set_funding_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_funding_key")] public static extern void InMemorySigner_set_funding_key(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_revocation_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_revocation_base_key")] public static extern long InMemorySigner_get_revocation_base_key(long _this_ptr);
	// void InMemorySigner_set_revocation_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_revocation_base_key")] public static extern void InMemorySigner_set_revocation_base_key(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_payment_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_payment_key")] public static extern long InMemorySigner_get_payment_key(long _this_ptr);
	// void InMemorySigner_set_payment_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_payment_key")] public static extern void InMemorySigner_set_payment_key(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_delayed_payment_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_delayed_payment_base_key")] public static extern long InMemorySigner_get_delayed_payment_base_key(long _this_ptr);
	// void InMemorySigner_set_delayed_payment_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_delayed_payment_base_key")] public static extern void InMemorySigner_set_delayed_payment_base_key(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_htlc_base_key(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_htlc_base_key")] public static extern long InMemorySigner_get_htlc_base_key(long _this_ptr);
	// void InMemorySigner_set_htlc_base_key(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKSecretKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_htlc_base_key")] public static extern void InMemorySigner_set_htlc_base_key(long _this_ptr, long _val);
	// const uint8_t (*InMemorySigner_get_commitment_seed(const struct LDKInMemorySigner *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_commitment_seed")] public static extern long InMemorySigner_get_commitment_seed(long _this_ptr);
	// void InMemorySigner_set_commitment_seed(struct LDKInMemorySigner *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_set_commitment_seed")] public static extern void InMemorySigner_set_commitment_seed(long _this_ptr, long _val);
	// uint64_t InMemorySigner_clone_ptr(LDKInMemorySigner *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_clone_ptr")] public static extern long InMemorySigner_clone_ptr(long _arg);
	// struct LDKInMemorySigner InMemorySigner_clone(const struct LDKInMemorySigner *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_clone")] public static extern long InMemorySigner_clone(long _orig);
	// MUST_USE_RES struct LDKInMemorySigner InMemorySigner_new(struct LDKSecretKey funding_key, struct LDKSecretKey revocation_base_key, struct LDKSecretKey payment_key, struct LDKSecretKey delayed_payment_base_key, struct LDKSecretKey htlc_base_key, struct LDKThirtyTwoBytes commitment_seed, uint64_t channel_value_satoshis, struct LDKThirtyTwoBytes channel_keys_id, struct LDKThirtyTwoBytes rand_bytes_unique_start);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_new")] public static extern long InMemorySigner_new(long _funding_key, long _revocation_base_key, long _payment_key, long _delayed_payment_base_key, long _htlc_base_key, long _commitment_seed, long _channel_value_satoshis, long _channel_keys_id, long _rand_bytes_unique_start);
	// MUST_USE_RES struct LDKChannelPublicKeys InMemorySigner_counterparty_pubkeys(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_counterparty_pubkeys")] public static extern long InMemorySigner_counterparty_pubkeys(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u16Z InMemorySigner_counterparty_selected_contest_delay(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_counterparty_selected_contest_delay")] public static extern long InMemorySigner_counterparty_selected_contest_delay(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u16Z InMemorySigner_holder_selected_contest_delay(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_holder_selected_contest_delay")] public static extern long InMemorySigner_holder_selected_contest_delay(long _this_arg);
	// MUST_USE_RES struct LDKCOption_boolZ InMemorySigner_is_outbound(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_is_outbound")] public static extern long InMemorySigner_is_outbound(long _this_arg);
	// MUST_USE_RES struct LDKOutPoint InMemorySigner_funding_outpoint(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_funding_outpoint")] public static extern long InMemorySigner_funding_outpoint(long _this_arg);
	// MUST_USE_RES struct LDKChannelTransactionParameters InMemorySigner_get_channel_parameters(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_get_channel_parameters")] public static extern long InMemorySigner_get_channel_parameters(long _this_arg);
	// MUST_USE_RES struct LDKChannelTypeFeatures InMemorySigner_channel_type_features(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_channel_type_features")] public static extern long InMemorySigner_channel_type_features(long _this_arg);
	// MUST_USE_RES struct LDKCResult_WitnessNoneZ InMemorySigner_sign_counterparty_payment_input(const struct LDKInMemorySigner *NONNULL_PTR this_arg, struct LDKTransaction spend_tx, uintptr_t input_idx, const struct LDKStaticPaymentOutputDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_sign_counterparty_payment_input")] public static extern long InMemorySigner_sign_counterparty_payment_input(long _this_arg, long _spend_tx, long _input_idx, long _descriptor);
	// MUST_USE_RES struct LDKCResult_WitnessNoneZ InMemorySigner_sign_dynamic_p2wsh_input(const struct LDKInMemorySigner *NONNULL_PTR this_arg, struct LDKTransaction spend_tx, uintptr_t input_idx, const struct LDKDelayedPaymentOutputDescriptor *NONNULL_PTR descriptor);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_sign_dynamic_p2wsh_input")] public static extern long InMemorySigner_sign_dynamic_p2wsh_input(long _this_arg, long _spend_tx, long _input_idx, long _descriptor);
	// struct LDKEntropySource InMemorySigner_as_EntropySource(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_EntropySource")] public static extern long InMemorySigner_as_EntropySource(long _this_arg);
	// struct LDKChannelSigner InMemorySigner_as_ChannelSigner(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_ChannelSigner")] public static extern long InMemorySigner_as_ChannelSigner(long _this_arg);
	// struct LDKEcdsaChannelSigner InMemorySigner_as_EcdsaChannelSigner(const struct LDKInMemorySigner *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_as_EcdsaChannelSigner")] public static extern long InMemorySigner_as_EcdsaChannelSigner(long _this_arg);
	// struct LDKCVec_u8Z InMemorySigner_write(const struct LDKInMemorySigner *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_write")] public static extern long InMemorySigner_write(long _obj);
	// struct LDKCResult_InMemorySignerDecodeErrorZ InMemorySigner_read(struct LDKu8slice ser, struct LDKEntropySource arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InMemorySigner_read")] public static extern long InMemorySigner_read(long _ser, long _arg);
	// void KeysManager_free(struct LDKKeysManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_free")] public static extern void KeysManager_free(long _this_obj);
	// MUST_USE_RES struct LDKKeysManager KeysManager_new(const uint8_t (*seed)[32], uint64_t starting_time_secs, uint32_t starting_time_nanos);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_new")] public static extern long KeysManager_new(long _seed, long _starting_time_secs, int _starting_time_nanos);
	// MUST_USE_RES struct LDKSecretKey KeysManager_get_node_secret_key(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_get_node_secret_key")] public static extern long KeysManager_get_node_secret_key(long _this_arg);
	// MUST_USE_RES struct LDKInMemorySigner KeysManager_derive_channel_keys(const struct LDKKeysManager *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, const uint8_t (*params)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_derive_channel_keys")] public static extern long KeysManager_derive_channel_keys(long _this_arg, long _channel_value_satoshis, long _params);
	// MUST_USE_RES struct LDKCResult_CVec_u8ZNoneZ KeysManager_sign_spendable_outputs_psbt(const struct LDKKeysManager *NONNULL_PTR this_arg, struct LDKCVec_SpendableOutputDescriptorZ descriptors, struct LDKCVec_u8Z psbt);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_sign_spendable_outputs_psbt")] public static extern long KeysManager_sign_spendable_outputs_psbt(long _this_arg, long _descriptors, long _psbt);
	// struct LDKEntropySource KeysManager_as_EntropySource(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_EntropySource")] public static extern long KeysManager_as_EntropySource(long _this_arg);
	// struct LDKNodeSigner KeysManager_as_NodeSigner(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_NodeSigner")] public static extern long KeysManager_as_NodeSigner(long _this_arg);
	// struct LDKOutputSpender KeysManager_as_OutputSpender(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_OutputSpender")] public static extern long KeysManager_as_OutputSpender(long _this_arg);
	// struct LDKSignerProvider KeysManager_as_SignerProvider(const struct LDKKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_KeysManager_as_SignerProvider")] public static extern long KeysManager_as_SignerProvider(long _this_arg);
	// void PhantomKeysManager_free(struct LDKPhantomKeysManager this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_free")] public static extern void PhantomKeysManager_free(long _this_obj);
	// struct LDKEntropySource PhantomKeysManager_as_EntropySource(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_EntropySource")] public static extern long PhantomKeysManager_as_EntropySource(long _this_arg);
	// struct LDKNodeSigner PhantomKeysManager_as_NodeSigner(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_NodeSigner")] public static extern long PhantomKeysManager_as_NodeSigner(long _this_arg);
	// struct LDKOutputSpender PhantomKeysManager_as_OutputSpender(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_OutputSpender")] public static extern long PhantomKeysManager_as_OutputSpender(long _this_arg);
	// struct LDKSignerProvider PhantomKeysManager_as_SignerProvider(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_as_SignerProvider")] public static extern long PhantomKeysManager_as_SignerProvider(long _this_arg);
	// MUST_USE_RES struct LDKPhantomKeysManager PhantomKeysManager_new(const uint8_t (*seed)[32], uint64_t starting_time_secs, uint32_t starting_time_nanos, const uint8_t (*cross_node_seed)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_new")] public static extern long PhantomKeysManager_new(long _seed, long _starting_time_secs, int _starting_time_nanos, long _cross_node_seed);
	// MUST_USE_RES struct LDKInMemorySigner PhantomKeysManager_derive_channel_keys(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg, uint64_t channel_value_satoshis, const uint8_t (*params)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_derive_channel_keys")] public static extern long PhantomKeysManager_derive_channel_keys(long _this_arg, long _channel_value_satoshis, long _params);
	// MUST_USE_RES struct LDKSecretKey PhantomKeysManager_get_node_secret_key(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_get_node_secret_key")] public static extern long PhantomKeysManager_get_node_secret_key(long _this_arg);
	// MUST_USE_RES struct LDKSecretKey PhantomKeysManager_get_phantom_node_secret_key(const struct LDKPhantomKeysManager *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PhantomKeysManager_get_phantom_node_secret_key")] public static extern long PhantomKeysManager_get_phantom_node_secret_key(long _this_arg);
	// void RandomBytes_free(struct LDKRandomBytes this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RandomBytes_free")] public static extern void RandomBytes_free(long _this_obj);
	// MUST_USE_RES struct LDKRandomBytes RandomBytes_new(struct LDKThirtyTwoBytes seed);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RandomBytes_new")] public static extern long RandomBytes_new(long _seed);
	// struct LDKEntropySource RandomBytes_as_EntropySource(const struct LDKRandomBytes *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RandomBytes_as_EntropySource")] public static extern long RandomBytes_as_EntropySource(long _this_arg);
	// uint64_t EcdsaChannelSigner_clone_ptr(LDKEcdsaChannelSigner *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_clone_ptr")] public static extern long EcdsaChannelSigner_clone_ptr(long _arg);
	// struct LDKEcdsaChannelSigner EcdsaChannelSigner_clone(const struct LDKEcdsaChannelSigner *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_clone")] public static extern long EcdsaChannelSigner_clone(long _orig);
	// void EcdsaChannelSigner_free(struct LDKEcdsaChannelSigner this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EcdsaChannelSigner_free")] public static extern void EcdsaChannelSigner_free(long _this_ptr);
	// void AsyncPaymentsMessageHandler_free(struct LDKAsyncPaymentsMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessageHandler_free")] public static extern void AsyncPaymentsMessageHandler_free(long _this_ptr);
	// void AsyncPaymentsMessage_free(struct LDKAsyncPaymentsMessage this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_free")] public static extern void AsyncPaymentsMessage_free(long _this_ptr);
	// uint64_t AsyncPaymentsMessage_clone_ptr(LDKAsyncPaymentsMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_clone_ptr")] public static extern long AsyncPaymentsMessage_clone_ptr(long _arg);
	// struct LDKAsyncPaymentsMessage AsyncPaymentsMessage_clone(const struct LDKAsyncPaymentsMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_clone")] public static extern long AsyncPaymentsMessage_clone(long _orig);
	// struct LDKAsyncPaymentsMessage AsyncPaymentsMessage_held_htlc_available(struct LDKHeldHtlcAvailable a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_held_htlc_available")] public static extern long AsyncPaymentsMessage_held_htlc_available(long _a);
	// struct LDKAsyncPaymentsMessage AsyncPaymentsMessage_release_held_htlc(struct LDKReleaseHeldHtlc a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_release_held_htlc")] public static extern long AsyncPaymentsMessage_release_held_htlc(long _a);
	// void HeldHtlcAvailable_free(struct LDKHeldHtlcAvailable this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HeldHtlcAvailable_free")] public static extern void HeldHtlcAvailable_free(long _this_obj);
	// MUST_USE_RES struct LDKHeldHtlcAvailable HeldHtlcAvailable_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HeldHtlcAvailable_new")] public static extern long HeldHtlcAvailable_new();
	// uint64_t HeldHtlcAvailable_clone_ptr(LDKHeldHtlcAvailable *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HeldHtlcAvailable_clone_ptr")] public static extern long HeldHtlcAvailable_clone_ptr(long _arg);
	// struct LDKHeldHtlcAvailable HeldHtlcAvailable_clone(const struct LDKHeldHtlcAvailable *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HeldHtlcAvailable_clone")] public static extern long HeldHtlcAvailable_clone(long _orig);
	// void ReleaseHeldHtlc_free(struct LDKReleaseHeldHtlc this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReleaseHeldHtlc_free")] public static extern void ReleaseHeldHtlc_free(long _this_obj);
	// MUST_USE_RES struct LDKReleaseHeldHtlc ReleaseHeldHtlc_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReleaseHeldHtlc_new")] public static extern long ReleaseHeldHtlc_new();
	// uint64_t ReleaseHeldHtlc_clone_ptr(LDKReleaseHeldHtlc *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReleaseHeldHtlc_clone_ptr")] public static extern long ReleaseHeldHtlc_clone_ptr(long _arg);
	// struct LDKReleaseHeldHtlc ReleaseHeldHtlc_clone(const struct LDKReleaseHeldHtlc *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReleaseHeldHtlc_clone")] public static extern long ReleaseHeldHtlc_clone(long _orig);
	// struct LDKOnionMessageContents ReleaseHeldHtlc_as_OnionMessageContents(const struct LDKReleaseHeldHtlc *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReleaseHeldHtlc_as_OnionMessageContents")] public static extern long ReleaseHeldHtlc_as_OnionMessageContents(long _this_arg);
	// struct LDKCVec_u8Z HeldHtlcAvailable_write(const struct LDKHeldHtlcAvailable *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HeldHtlcAvailable_write")] public static extern long HeldHtlcAvailable_write(long _obj);
	// struct LDKCResult_HeldHtlcAvailableDecodeErrorZ HeldHtlcAvailable_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HeldHtlcAvailable_read")] public static extern long HeldHtlcAvailable_read(long _ser);
	// struct LDKCVec_u8Z ReleaseHeldHtlc_write(const struct LDKReleaseHeldHtlc *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReleaseHeldHtlc_write")] public static extern long ReleaseHeldHtlc_write(long _obj);
	// struct LDKCResult_ReleaseHeldHtlcDecodeErrorZ ReleaseHeldHtlc_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReleaseHeldHtlc_read")] public static extern long ReleaseHeldHtlc_read(long _ser);
	// MUST_USE_RES bool AsyncPaymentsMessage_is_known_type(uint64_t tlv_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_is_known_type")] public static extern bool AsyncPaymentsMessage_is_known_type(long _tlv_type);
	// struct LDKOnionMessageContents AsyncPaymentsMessage_as_OnionMessageContents(const struct LDKAsyncPaymentsMessage *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_as_OnionMessageContents")] public static extern long AsyncPaymentsMessage_as_OnionMessageContents(long _this_arg);
	// struct LDKCVec_u8Z AsyncPaymentsMessage_write(const struct LDKAsyncPaymentsMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_write")] public static extern long AsyncPaymentsMessage_write(long _obj);
	// struct LDKCResult_AsyncPaymentsMessageDecodeErrorZ AsyncPaymentsMessage_read(struct LDKu8slice ser, uint64_t arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsMessage_read")] public static extern long AsyncPaymentsMessage_read(long _ser, long _arg);
	// void DNSResolverMessageHandler_free(struct LDKDNSResolverMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessageHandler_free")] public static extern void DNSResolverMessageHandler_free(long _this_ptr);
	// void DNSResolverMessage_free(struct LDKDNSResolverMessage this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_free")] public static extern void DNSResolverMessage_free(long _this_ptr);
	// uint64_t DNSResolverMessage_clone_ptr(LDKDNSResolverMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_clone_ptr")] public static extern long DNSResolverMessage_clone_ptr(long _arg);
	// struct LDKDNSResolverMessage DNSResolverMessage_clone(const struct LDKDNSResolverMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_clone")] public static extern long DNSResolverMessage_clone(long _orig);
	// struct LDKDNSResolverMessage DNSResolverMessage_dnssecquery(struct LDKDNSSECQuery a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_dnssecquery")] public static extern long DNSResolverMessage_dnssecquery(long _a);
	// struct LDKDNSResolverMessage DNSResolverMessage_dnssecproof(struct LDKDNSSECProof a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_dnssecproof")] public static extern long DNSResolverMessage_dnssecproof(long _a);
	// uint64_t DNSResolverMessage_hash(const struct LDKDNSResolverMessage *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_hash")] public static extern long DNSResolverMessage_hash(long _o);
	// bool DNSResolverMessage_eq(const struct LDKDNSResolverMessage *NONNULL_PTR a, const struct LDKDNSResolverMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_eq")] public static extern bool DNSResolverMessage_eq(long _a, long _b);
	// void DNSSECQuery_free(struct LDKDNSSECQuery this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECQuery_free")] public static extern void DNSSECQuery_free(long _this_obj);
	// uint64_t DNSSECQuery_clone_ptr(LDKDNSSECQuery *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECQuery_clone_ptr")] public static extern long DNSSECQuery_clone_ptr(long _arg);
	// struct LDKDNSSECQuery DNSSECQuery_clone(const struct LDKDNSSECQuery *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECQuery_clone")] public static extern long DNSSECQuery_clone(long _orig);
	// uint64_t DNSSECQuery_hash(const struct LDKDNSSECQuery *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECQuery_hash")] public static extern long DNSSECQuery_hash(long _o);
	// bool DNSSECQuery_eq(const struct LDKDNSSECQuery *NONNULL_PTR a, const struct LDKDNSSECQuery *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECQuery_eq")] public static extern bool DNSSECQuery_eq(long _a, long _b);
	// void DNSSECProof_free(struct LDKDNSSECProof this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECProof_free")] public static extern void DNSSECProof_free(long _this_obj);
	// struct LDKCVec_u8Z DNSSECProof_get_proof(const struct LDKDNSSECProof *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECProof_get_proof")] public static extern long DNSSECProof_get_proof(long _this_ptr);
	// void DNSSECProof_set_proof(struct LDKDNSSECProof *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECProof_set_proof")] public static extern void DNSSECProof_set_proof(long _this_ptr, long _val);
	// uint64_t DNSSECProof_clone_ptr(LDKDNSSECProof *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECProof_clone_ptr")] public static extern long DNSSECProof_clone_ptr(long _arg);
	// struct LDKDNSSECProof DNSSECProof_clone(const struct LDKDNSSECProof *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECProof_clone")] public static extern long DNSSECProof_clone(long _orig);
	// uint64_t DNSSECProof_hash(const struct LDKDNSSECProof *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECProof_hash")] public static extern long DNSSECProof_hash(long _o);
	// bool DNSSECProof_eq(const struct LDKDNSSECProof *NONNULL_PTR a, const struct LDKDNSSECProof *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSSECProof_eq")] public static extern bool DNSSECProof_eq(long _a, long _b);
	// MUST_USE_RES bool DNSResolverMessage_is_known_type(uint64_t tlv_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_is_known_type")] public static extern bool DNSResolverMessage_is_known_type(long _tlv_type);
	// struct LDKCVec_u8Z DNSResolverMessage_write(const struct LDKDNSResolverMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_write")] public static extern long DNSResolverMessage_write(long _obj);
	// struct LDKCResult_DNSResolverMessageDecodeErrorZ DNSResolverMessage_read(struct LDKu8slice ser, uint64_t arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_read")] public static extern long DNSResolverMessage_read(long _ser, long _arg);
	// struct LDKOnionMessageContents DNSResolverMessage_as_OnionMessageContents(const struct LDKDNSResolverMessage *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverMessage_as_OnionMessageContents")] public static extern long DNSResolverMessage_as_OnionMessageContents(long _this_arg);
	// void HumanReadableName_free(struct LDKHumanReadableName this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_free")] public static extern void HumanReadableName_free(long _this_obj);
	// uint64_t HumanReadableName_clone_ptr(LDKHumanReadableName *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_clone_ptr")] public static extern long HumanReadableName_clone_ptr(long _arg);
	// struct LDKHumanReadableName HumanReadableName_clone(const struct LDKHumanReadableName *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_clone")] public static extern long HumanReadableName_clone(long _orig);
	// uint64_t HumanReadableName_hash(const struct LDKHumanReadableName *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_hash")] public static extern long HumanReadableName_hash(long _o);
	// bool HumanReadableName_eq(const struct LDKHumanReadableName *NONNULL_PTR a, const struct LDKHumanReadableName *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_eq")] public static extern bool HumanReadableName_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCResult_HumanReadableNameNoneZ HumanReadableName_new(struct LDKStr user, struct LDKStr domain);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_new")] public static extern long HumanReadableName_new(long _user, long _domain);
	// MUST_USE_RES struct LDKCResult_HumanReadableNameNoneZ HumanReadableName_from_encoded(struct LDKStr encoded);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_from_encoded")] public static extern long HumanReadableName_from_encoded(long _encoded);
	// MUST_USE_RES struct LDKStr HumanReadableName_user(const struct LDKHumanReadableName *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_user")] public static extern long HumanReadableName_user(long _this_arg);
	// MUST_USE_RES struct LDKStr HumanReadableName_domain(const struct LDKHumanReadableName *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_domain")] public static extern long HumanReadableName_domain(long _this_arg);
	// struct LDKCVec_u8Z HumanReadableName_write(const struct LDKHumanReadableName *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_write")] public static extern long HumanReadableName_write(long _obj);
	// struct LDKCResult_HumanReadableNameDecodeErrorZ HumanReadableName_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HumanReadableName_read")] public static extern long HumanReadableName_read(long _ser);
	// void OMNameResolver_free(struct LDKOMNameResolver this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OMNameResolver_free")] public static extern void OMNameResolver_free(long _this_obj);
	// MUST_USE_RES struct LDKOMNameResolver OMNameResolver_new(uint32_t latest_block_time, uint32_t latest_block_height);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OMNameResolver_new")] public static extern long OMNameResolver_new(int _latest_block_time, int _latest_block_height);
	// void OMNameResolver_new_best_block(const struct LDKOMNameResolver *NONNULL_PTR this_arg, uint32_t height, uint32_t time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OMNameResolver_new_best_block")] public static extern void OMNameResolver_new_best_block(long _this_arg, int _height, int _time);
	// MUST_USE_RES struct LDKCResult_C2Tuple_DNSSECQueryDNSResolverContextZNoneZ OMNameResolver_resolve_name(const struct LDKOMNameResolver *NONNULL_PTR this_arg, struct LDKThirtyTwoBytes payment_id, struct LDKHumanReadableName name, const struct LDKEntropySource *NONNULL_PTR entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OMNameResolver_resolve_name")] public static extern long OMNameResolver_resolve_name(long _this_arg, long _payment_id, long _name, long _entropy_source);
	// MUST_USE_RES struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZOfferZZ OMNameResolver_handle_dnssec_proof_for_offer(const struct LDKOMNameResolver *NONNULL_PTR this_arg, struct LDKDNSSECProof msg, struct LDKDNSResolverContext context);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OMNameResolver_handle_dnssec_proof_for_offer")] public static extern long OMNameResolver_handle_dnssec_proof_for_offer(long _this_arg, long _msg, long _context);
	// MUST_USE_RES struct LDKCOption_C2Tuple_CVec_C2Tuple_HumanReadableNameThirtyTwoBytesZZStrZZ OMNameResolver_handle_dnssec_proof_for_uri(const struct LDKOMNameResolver *NONNULL_PTR this_arg, struct LDKDNSSECProof msg, struct LDKDNSResolverContext context);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OMNameResolver_handle_dnssec_proof_for_uri")] public static extern long OMNameResolver_handle_dnssec_proof_for_uri(long _this_arg, long _msg, long _context);
	// void OnionMessenger_free(struct LDKOnionMessenger this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_free")] public static extern void OnionMessenger_free(long _this_obj);
	// void Responder_free(struct LDKResponder this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_free")] public static extern void Responder_free(long _this_obj);
	// uint64_t Responder_clone_ptr(LDKResponder *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_clone_ptr")] public static extern long Responder_clone_ptr(long _arg);
	// struct LDKResponder Responder_clone(const struct LDKResponder *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_clone")] public static extern long Responder_clone(long _orig);
	// bool Responder_eq(const struct LDKResponder *NONNULL_PTR a, const struct LDKResponder *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_eq")] public static extern bool Responder_eq(long _a, long _b);
	// struct LDKCVec_u8Z Responder_write(const struct LDKResponder *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_write")] public static extern long Responder_write(long _obj);
	// struct LDKCResult_ResponderDecodeErrorZ Responder_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_read")] public static extern long Responder_read(long _ser);
	// MUST_USE_RES struct LDKResponseInstruction Responder_respond(struct LDKResponder this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_respond")] public static extern long Responder_respond(long _this_arg);
	// MUST_USE_RES struct LDKResponseInstruction Responder_respond_with_reply_path(struct LDKResponder this_arg, struct LDKMessageContext context);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Responder_respond_with_reply_path")] public static extern long Responder_respond_with_reply_path(long _this_arg, long _context);
	// void ResponseInstruction_free(struct LDKResponseInstruction this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ResponseInstruction_free")] public static extern void ResponseInstruction_free(long _this_obj);
	// uint64_t ResponseInstruction_clone_ptr(LDKResponseInstruction *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ResponseInstruction_clone_ptr")] public static extern long ResponseInstruction_clone_ptr(long _arg);
	// struct LDKResponseInstruction ResponseInstruction_clone(const struct LDKResponseInstruction *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ResponseInstruction_clone")] public static extern long ResponseInstruction_clone(long _orig);
	// MUST_USE_RES struct LDKMessageSendInstructions ResponseInstruction_into_instructions(struct LDKResponseInstruction this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ResponseInstruction_into_instructions")] public static extern long ResponseInstruction_into_instructions(long _this_arg);
	// void MessageSendInstructions_free(struct LDKMessageSendInstructions this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendInstructions_free")] public static extern void MessageSendInstructions_free(long _this_ptr);
	// uint64_t MessageSendInstructions_clone_ptr(LDKMessageSendInstructions *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendInstructions_clone_ptr")] public static extern long MessageSendInstructions_clone_ptr(long _arg);
	// struct LDKMessageSendInstructions MessageSendInstructions_clone(const struct LDKMessageSendInstructions *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendInstructions_clone")] public static extern long MessageSendInstructions_clone(long _orig);
	// struct LDKMessageSendInstructions MessageSendInstructions_with_specified_reply_path(struct LDKDestination destination, struct LDKBlindedMessagePath reply_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendInstructions_with_specified_reply_path")] public static extern long MessageSendInstructions_with_specified_reply_path(long _destination, long _reply_path);
	// struct LDKMessageSendInstructions MessageSendInstructions_with_reply_path(struct LDKDestination destination, struct LDKMessageContext context);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendInstructions_with_reply_path")] public static extern long MessageSendInstructions_with_reply_path(long _destination, long _context);
	// struct LDKMessageSendInstructions MessageSendInstructions_without_reply_path(struct LDKDestination destination);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendInstructions_without_reply_path")] public static extern long MessageSendInstructions_without_reply_path(long _destination);
	// struct LDKMessageSendInstructions MessageSendInstructions_for_reply(struct LDKResponseInstruction instructions);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendInstructions_for_reply")] public static extern long MessageSendInstructions_for_reply(long _instructions);
	// void MessageRouter_free(struct LDKMessageRouter this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageRouter_free")] public static extern void MessageRouter_free(long _this_ptr);
	// void DefaultMessageRouter_free(struct LDKDefaultMessageRouter this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultMessageRouter_free")] public static extern void DefaultMessageRouter_free(long _this_obj);
	// MUST_USE_RES struct LDKDefaultMessageRouter DefaultMessageRouter_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKEntropySource entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultMessageRouter_new")] public static extern long DefaultMessageRouter_new(long _network_graph, long _entropy_source);
	// struct LDKMessageRouter DefaultMessageRouter_as_MessageRouter(const struct LDKDefaultMessageRouter *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DefaultMessageRouter_as_MessageRouter")] public static extern long DefaultMessageRouter_as_MessageRouter(long _this_arg);
	// void OnionMessagePath_free(struct LDKOnionMessagePath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_free")] public static extern void OnionMessagePath_free(long _this_obj);
	// struct LDKCVec_PublicKeyZ OnionMessagePath_get_intermediate_nodes(const struct LDKOnionMessagePath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_get_intermediate_nodes")] public static extern long OnionMessagePath_get_intermediate_nodes(long _this_ptr);
	// void OnionMessagePath_set_intermediate_nodes(struct LDKOnionMessagePath *NONNULL_PTR this_ptr, struct LDKCVec_PublicKeyZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_set_intermediate_nodes")] public static extern void OnionMessagePath_set_intermediate_nodes(long _this_ptr, long _val);
	// struct LDKDestination OnionMessagePath_get_destination(const struct LDKOnionMessagePath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_get_destination")] public static extern long OnionMessagePath_get_destination(long _this_ptr);
	// void OnionMessagePath_set_destination(struct LDKOnionMessagePath *NONNULL_PTR this_ptr, struct LDKDestination val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_set_destination")] public static extern void OnionMessagePath_set_destination(long _this_ptr, long _val);
	// struct LDKCOption_CVec_SocketAddressZZ OnionMessagePath_get_first_node_addresses(const struct LDKOnionMessagePath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_get_first_node_addresses")] public static extern long OnionMessagePath_get_first_node_addresses(long _this_ptr);
	// void OnionMessagePath_set_first_node_addresses(struct LDKOnionMessagePath *NONNULL_PTR this_ptr, struct LDKCOption_CVec_SocketAddressZZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_set_first_node_addresses")] public static extern void OnionMessagePath_set_first_node_addresses(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKOnionMessagePath OnionMessagePath_new(struct LDKCVec_PublicKeyZ intermediate_nodes_arg, struct LDKDestination destination_arg, struct LDKCOption_CVec_SocketAddressZZ first_node_addresses_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_new")] public static extern long OnionMessagePath_new(long _intermediate_nodes_arg, long _destination_arg, long _first_node_addresses_arg);
	// uint64_t OnionMessagePath_clone_ptr(LDKOnionMessagePath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_clone_ptr")] public static extern long OnionMessagePath_clone_ptr(long _arg);
	// struct LDKOnionMessagePath OnionMessagePath_clone(const struct LDKOnionMessagePath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_clone")] public static extern long OnionMessagePath_clone(long _orig);
	// MUST_USE_RES struct LDKPublicKey OnionMessagePath_first_node(const struct LDKOnionMessagePath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessagePath_first_node")] public static extern long OnionMessagePath_first_node(long _this_arg);
	// void Destination_free(struct LDKDestination this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_free")] public static extern void Destination_free(long _this_ptr);
	// uint64_t Destination_clone_ptr(LDKDestination *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_clone_ptr")] public static extern long Destination_clone_ptr(long _arg);
	// struct LDKDestination Destination_clone(const struct LDKDestination *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_clone")] public static extern long Destination_clone(long _orig);
	// struct LDKDestination Destination_node(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_node")] public static extern long Destination_node(long _a);
	// struct LDKDestination Destination_blinded_path(struct LDKBlindedMessagePath a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_blinded_path")] public static extern long Destination_blinded_path(long _a);
	// uint64_t Destination_hash(const struct LDKDestination *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_hash")] public static extern long Destination_hash(long _o);
	// bool Destination_eq(const struct LDKDestination *NONNULL_PTR a, const struct LDKDestination *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_eq")] public static extern bool Destination_eq(long _a, long _b);
	// void Destination_resolve(struct LDKDestination *NONNULL_PTR this_arg, const struct LDKReadOnlyNetworkGraph *NONNULL_PTR network_graph);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Destination_resolve")] public static extern void Destination_resolve(long _this_arg, long _network_graph);
	// void SendSuccess_free(struct LDKSendSuccess this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_free")] public static extern void SendSuccess_free(long _this_ptr);
	// uint64_t SendSuccess_clone_ptr(LDKSendSuccess *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_clone_ptr")] public static extern long SendSuccess_clone_ptr(long _arg);
	// struct LDKSendSuccess SendSuccess_clone(const struct LDKSendSuccess *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_clone")] public static extern long SendSuccess_clone(long _orig);
	// struct LDKSendSuccess SendSuccess_buffered(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_buffered")] public static extern long SendSuccess_buffered();
	// struct LDKSendSuccess SendSuccess_buffered_awaiting_connection(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_buffered_awaiting_connection")] public static extern long SendSuccess_buffered_awaiting_connection(long _a);
	// uint64_t SendSuccess_hash(const struct LDKSendSuccess *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_hash")] public static extern long SendSuccess_hash(long _o);
	// bool SendSuccess_eq(const struct LDKSendSuccess *NONNULL_PTR a, const struct LDKSendSuccess *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendSuccess_eq")] public static extern bool SendSuccess_eq(long _a, long _b);
	// void SendError_free(struct LDKSendError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_free")] public static extern void SendError_free(long _this_ptr);
	// uint64_t SendError_clone_ptr(LDKSendError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_clone_ptr")] public static extern long SendError_clone_ptr(long _arg);
	// struct LDKSendError SendError_clone(const struct LDKSendError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_clone")] public static extern long SendError_clone(long _orig);
	// struct LDKSendError SendError_secp256k1(enum LDKSecp256k1Error a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_secp256k1")] public static extern long SendError_secp256k1(Secp256k1Error _a);
	// struct LDKSendError SendError_too_big_packet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_too_big_packet")] public static extern long SendError_too_big_packet();
	// struct LDKSendError SendError_too_few_blinded_hops(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_too_few_blinded_hops")] public static extern long SendError_too_few_blinded_hops();
	// struct LDKSendError SendError_invalid_first_hop(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_invalid_first_hop")] public static extern long SendError_invalid_first_hop(long _a);
	// struct LDKSendError SendError_path_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_path_not_found")] public static extern long SendError_path_not_found();
	// struct LDKSendError SendError_invalid_message(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_invalid_message")] public static extern long SendError_invalid_message();
	// struct LDKSendError SendError_buffer_full(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_buffer_full")] public static extern long SendError_buffer_full();
	// struct LDKSendError SendError_get_node_id_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_get_node_id_failed")] public static extern long SendError_get_node_id_failed();
	// struct LDKSendError SendError_unresolved_introduction_node(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_unresolved_introduction_node")] public static extern long SendError_unresolved_introduction_node();
	// struct LDKSendError SendError_blinded_path_advance_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_blinded_path_advance_failed")] public static extern long SendError_blinded_path_advance_failed();
	// uint64_t SendError_hash(const struct LDKSendError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_hash")] public static extern long SendError_hash(long _o);
	// bool SendError_eq(const struct LDKSendError *NONNULL_PTR a, const struct LDKSendError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SendError_eq")] public static extern bool SendError_eq(long _a, long _b);
	// void CustomOnionMessageHandler_free(struct LDKCustomOnionMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CustomOnionMessageHandler_free")] public static extern void CustomOnionMessageHandler_free(long _this_ptr);
	// void PeeledOnion_free(struct LDKPeeledOnion this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_free")] public static extern void PeeledOnion_free(long _this_ptr);
	// uint64_t PeeledOnion_clone_ptr(LDKPeeledOnion *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_clone_ptr")] public static extern long PeeledOnion_clone_ptr(long _arg);
	// struct LDKPeeledOnion PeeledOnion_clone(const struct LDKPeeledOnion *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_clone")] public static extern long PeeledOnion_clone(long _orig);
	// struct LDKPeeledOnion PeeledOnion_forward(struct LDKNextMessageHop a, struct LDKOnionMessage b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_forward")] public static extern long PeeledOnion_forward(long _a, long _b);
	// struct LDKPeeledOnion PeeledOnion_receive(struct LDKParsedOnionMessageContents a, struct LDKCOption_MessageContextZ b, struct LDKBlindedMessagePath c);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PeeledOnion_receive")] public static extern long PeeledOnion_receive(long _a, long _b, long _c);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ create_onion_message_resolving_destination(const struct LDKEntropySource *NONNULL_PTR entropy_source, const struct LDKNodeSigner *NONNULL_PTR node_signer, const struct LDKNodeIdLookUp *NONNULL_PTR node_id_lookup, const struct LDKReadOnlyNetworkGraph *NONNULL_PTR network_graph, struct LDKOnionMessagePath path, struct LDKOnionMessageContents contents, struct LDKBlindedMessagePath reply_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_onion_message_resolving_destination")] public static extern long create_onion_message_resolving_destination(long _entropy_source, long _node_signer, long _node_id_lookup, long _network_graph, long _path, long _contents, long _reply_path);
	// struct LDKCResult_C3Tuple_PublicKeyOnionMessageCOption_CVec_SocketAddressZZZSendErrorZ create_onion_message(const struct LDKEntropySource *NONNULL_PTR entropy_source, const struct LDKNodeSigner *NONNULL_PTR node_signer, const struct LDKNodeIdLookUp *NONNULL_PTR node_id_lookup, struct LDKOnionMessagePath path, struct LDKOnionMessageContents contents, struct LDKBlindedMessagePath reply_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_create_onion_message")] public static extern long create_onion_message(long _entropy_source, long _node_signer, long _node_id_lookup, long _path, long _contents, long _reply_path);
	// struct LDKCResult_PeeledOnionNoneZ peel_onion_message(const struct LDKOnionMessage *NONNULL_PTR msg, struct LDKNodeSigner node_signer, struct LDKLogger logger, struct LDKCustomOnionMessageHandler custom_handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_peel_onion_message")] public static extern long peel_onion_message(long _msg, long _node_signer, long _logger, long _custom_handler);
	// MUST_USE_RES struct LDKOnionMessenger OnionMessenger_new(struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKLogger logger, struct LDKNodeIdLookUp node_id_lookup, struct LDKMessageRouter message_router, struct LDKOffersMessageHandler offers_handler, struct LDKAsyncPaymentsMessageHandler async_payments_handler, struct LDKDNSResolverMessageHandler dns_resolver, struct LDKCustomOnionMessageHandler custom_handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_new")] public static extern long OnionMessenger_new(long _entropy_source, long _node_signer, long _logger, long _node_id_lookup, long _message_router, long _offers_handler, long _async_payments_handler, long _dns_resolver, long _custom_handler);
	// MUST_USE_RES struct LDKOnionMessenger OnionMessenger_new_with_offline_peer_interception(struct LDKEntropySource entropy_source, struct LDKNodeSigner node_signer, struct LDKLogger logger, struct LDKNodeIdLookUp node_id_lookup, struct LDKMessageRouter message_router, struct LDKOffersMessageHandler offers_handler, struct LDKAsyncPaymentsMessageHandler async_payments_handler, struct LDKDNSResolverMessageHandler dns_resolver, struct LDKCustomOnionMessageHandler custom_handler);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_new_with_offline_peer_interception")] public static extern long OnionMessenger_new_with_offline_peer_interception(long _entropy_source, long _node_signer, long _logger, long _node_id_lookup, long _message_router, long _offers_handler, long _async_payments_handler, long _dns_resolver, long _custom_handler);
	// MUST_USE_RES struct LDKCResult_SendSuccessSendErrorZ OnionMessenger_send_onion_message(const struct LDKOnionMessenger *NONNULL_PTR this_arg, struct LDKOnionMessageContents contents, struct LDKMessageSendInstructions instructions);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_send_onion_message")] public static extern long OnionMessenger_send_onion_message(long _this_arg, long _contents, long _instructions);
	// MUST_USE_RES struct LDKCResult_NoneSendErrorZ OnionMessenger_forward_onion_message(const struct LDKOnionMessenger *NONNULL_PTR this_arg, struct LDKOnionMessage message, struct LDKPublicKey peer_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_forward_onion_message")] public static extern long OnionMessenger_forward_onion_message(long _this_arg, long _message, long _peer_node_id);
	// MUST_USE_RES struct LDKCResult_SendSuccessSendErrorZ OnionMessenger_handle_onion_message_response(const struct LDKOnionMessenger *NONNULL_PTR this_arg, struct LDKOnionMessageContents response, struct LDKResponseInstruction instructions);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_handle_onion_message_response")] public static extern long OnionMessenger_handle_onion_message_response(long _this_arg, long _response, long _instructions);
	// MUST_USE_RES struct LDKFuture OnionMessenger_get_update_future(const struct LDKOnionMessenger *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_get_update_future")] public static extern long OnionMessenger_get_update_future(long _this_arg);
	// struct LDKEventsProvider OnionMessenger_as_EventsProvider(const struct LDKOnionMessenger *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_as_EventsProvider")] public static extern long OnionMessenger_as_EventsProvider(long _this_arg);
	// struct LDKOnionMessageHandler OnionMessenger_as_OnionMessageHandler(const struct LDKOnionMessenger *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessenger_as_OnionMessageHandler")] public static extern long OnionMessenger_as_OnionMessageHandler(long _this_arg);
	// void OffersMessageHandler_free(struct LDKOffersMessageHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessageHandler_free")] public static extern void OffersMessageHandler_free(long _this_ptr);
	// void OffersMessage_free(struct LDKOffersMessage this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_free")] public static extern void OffersMessage_free(long _this_ptr);
	// uint64_t OffersMessage_clone_ptr(LDKOffersMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_clone_ptr")] public static extern long OffersMessage_clone_ptr(long _arg);
	// struct LDKOffersMessage OffersMessage_clone(const struct LDKOffersMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_clone")] public static extern long OffersMessage_clone(long _orig);
	// struct LDKOffersMessage OffersMessage_invoice_request(struct LDKInvoiceRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_invoice_request")] public static extern long OffersMessage_invoice_request(long _a);
	// struct LDKOffersMessage OffersMessage_invoice(struct LDKBolt12Invoice a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_invoice")] public static extern long OffersMessage_invoice(long _a);
	// struct LDKOffersMessage OffersMessage_invoice_error(struct LDKInvoiceError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_invoice_error")] public static extern long OffersMessage_invoice_error(long _a);
	// MUST_USE_RES bool OffersMessage_is_known_type(uint64_t tlv_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_is_known_type")] public static extern bool OffersMessage_is_known_type(long _tlv_type);
	// struct LDKOnionMessageContents OffersMessage_as_OnionMessageContents(const struct LDKOffersMessage *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_as_OnionMessageContents")] public static extern long OffersMessage_as_OnionMessageContents(long _this_arg);
	// struct LDKCVec_u8Z OffersMessage_write(const struct LDKOffersMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_write")] public static extern long OffersMessage_write(long _obj);
	// struct LDKCResult_OffersMessageDecodeErrorZ OffersMessage_read(struct LDKu8slice ser, uint64_t arg_a, const struct LDKLogger *NONNULL_PTR arg_b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersMessage_read")] public static extern long OffersMessage_read(long _ser, long _arg_a, long _arg_b);
	// void Packet_free(struct LDKPacket this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_free")] public static extern void Packet_free(long _this_obj);
	// uint8_t Packet_get_version(const struct LDKPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_version")] public static extern byte Packet_get_version(long _this_ptr);
	// void Packet_set_version(struct LDKPacket *NONNULL_PTR this_ptr, uint8_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_version")] public static extern void Packet_set_version(long _this_ptr, byte _val);
	// struct LDKPublicKey Packet_get_public_key(const struct LDKPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_public_key")] public static extern long Packet_get_public_key(long _this_ptr);
	// void Packet_set_public_key(struct LDKPacket *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_public_key")] public static extern void Packet_set_public_key(long _this_ptr, long _val);
	// struct LDKCVec_u8Z Packet_get_hop_data(const struct LDKPacket *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_hop_data")] public static extern long Packet_get_hop_data(long _this_ptr);
	// void Packet_set_hop_data(struct LDKPacket *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_hop_data")] public static extern void Packet_set_hop_data(long _this_ptr, long _val);
	// const uint8_t (*Packet_get_hmac(const struct LDKPacket *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_get_hmac")] public static extern long Packet_get_hmac(long _this_ptr);
	// void Packet_set_hmac(struct LDKPacket *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_set_hmac")] public static extern void Packet_set_hmac(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPacket Packet_new(uint8_t version_arg, struct LDKPublicKey public_key_arg, struct LDKCVec_u8Z hop_data_arg, struct LDKThirtyTwoBytes hmac_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_new")] public static extern long Packet_new(byte _version_arg, long _public_key_arg, long _hop_data_arg, long _hmac_arg);
	// uint64_t Packet_clone_ptr(LDKPacket *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_clone_ptr")] public static extern long Packet_clone_ptr(long _arg);
	// struct LDKPacket Packet_clone(const struct LDKPacket *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_clone")] public static extern long Packet_clone(long _orig);
	// uint64_t Packet_hash(const struct LDKPacket *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_hash")] public static extern long Packet_hash(long _o);
	// bool Packet_eq(const struct LDKPacket *NONNULL_PTR a, const struct LDKPacket *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_eq")] public static extern bool Packet_eq(long _a, long _b);
	// struct LDKCVec_u8Z Packet_write(const struct LDKPacket *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Packet_write")] public static extern long Packet_write(long _obj);
	// void ParsedOnionMessageContents_free(struct LDKParsedOnionMessageContents this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_free")] public static extern void ParsedOnionMessageContents_free(long _this_ptr);
	// uint64_t ParsedOnionMessageContents_clone_ptr(LDKParsedOnionMessageContents *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_clone_ptr")] public static extern long ParsedOnionMessageContents_clone_ptr(long _arg);
	// struct LDKParsedOnionMessageContents ParsedOnionMessageContents_clone(const struct LDKParsedOnionMessageContents *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_clone")] public static extern long ParsedOnionMessageContents_clone(long _orig);
	// struct LDKParsedOnionMessageContents ParsedOnionMessageContents_offers(struct LDKOffersMessage a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_offers")] public static extern long ParsedOnionMessageContents_offers(long _a);
	// struct LDKParsedOnionMessageContents ParsedOnionMessageContents_dnsresolver(struct LDKDNSResolverMessage a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_dnsresolver")] public static extern long ParsedOnionMessageContents_dnsresolver(long _a);
	// struct LDKParsedOnionMessageContents ParsedOnionMessageContents_custom(struct LDKOnionMessageContents a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_custom")] public static extern long ParsedOnionMessageContents_custom(long _a);
	// struct LDKOnionMessageContents ParsedOnionMessageContents_as_OnionMessageContents(const struct LDKParsedOnionMessageContents *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_as_OnionMessageContents")] public static extern long ParsedOnionMessageContents_as_OnionMessageContents(long _this_arg);
	// struct LDKCVec_u8Z ParsedOnionMessageContents_write(const struct LDKParsedOnionMessageContents *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParsedOnionMessageContents_write")] public static extern long ParsedOnionMessageContents_write(long _obj);
	// uint64_t OnionMessageContents_clone_ptr(LDKOnionMessageContents *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_clone_ptr")] public static extern long OnionMessageContents_clone_ptr(long _arg);
	// struct LDKOnionMessageContents OnionMessageContents_clone(const struct LDKOnionMessageContents *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_clone")] public static extern long OnionMessageContents_clone(long _orig);
	// void OnionMessageContents_free(struct LDKOnionMessageContents this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OnionMessageContents_free")] public static extern void OnionMessageContents_free(long _this_ptr);
	// void IntroductionNode_free(struct LDKIntroductionNode this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IntroductionNode_free")] public static extern void IntroductionNode_free(long _this_ptr);
	// uint64_t IntroductionNode_clone_ptr(LDKIntroductionNode *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IntroductionNode_clone_ptr")] public static extern long IntroductionNode_clone_ptr(long _arg);
	// struct LDKIntroductionNode IntroductionNode_clone(const struct LDKIntroductionNode *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IntroductionNode_clone")] public static extern long IntroductionNode_clone(long _orig);
	// struct LDKIntroductionNode IntroductionNode_node_id(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IntroductionNode_node_id")] public static extern long IntroductionNode_node_id(long _a);
	// struct LDKIntroductionNode IntroductionNode_directed_short_channel_id(enum LDKDirection a, uint64_t b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IntroductionNode_directed_short_channel_id")] public static extern long IntroductionNode_directed_short_channel_id(Direction _a, long _b);
	// uint64_t IntroductionNode_hash(const struct LDKIntroductionNode *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IntroductionNode_hash")] public static extern long IntroductionNode_hash(long _o);
	// bool IntroductionNode_eq(const struct LDKIntroductionNode *NONNULL_PTR a, const struct LDKIntroductionNode *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_IntroductionNode_eq")] public static extern bool IntroductionNode_eq(long _a, long _b);
	// enum LDKDirection Direction_clone(const enum LDKDirection *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Direction_clone")] public static extern Direction Direction_clone(long _orig);
	// enum LDKDirection Direction_node_one(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Direction_node_one")] public static extern Direction Direction_node_one();
	// enum LDKDirection Direction_node_two(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Direction_node_two")] public static extern Direction Direction_node_two();
	// uint64_t Direction_hash(const enum LDKDirection *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Direction_hash")] public static extern long Direction_hash(long _o);
	// bool Direction_eq(const enum LDKDirection *NONNULL_PTR a, const enum LDKDirection *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Direction_eq")] public static extern bool Direction_eq(long _a, long _b);
	// void NodeIdLookUp_free(struct LDKNodeIdLookUp this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeIdLookUp_free")] public static extern void NodeIdLookUp_free(long _this_ptr);
	// void EmptyNodeIdLookUp_free(struct LDKEmptyNodeIdLookUp this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EmptyNodeIdLookUp_free")] public static extern void EmptyNodeIdLookUp_free(long _this_obj);
	// MUST_USE_RES struct LDKEmptyNodeIdLookUp EmptyNodeIdLookUp_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EmptyNodeIdLookUp_new")] public static extern long EmptyNodeIdLookUp_new();
	// struct LDKNodeIdLookUp EmptyNodeIdLookUp_as_NodeIdLookUp(const struct LDKEmptyNodeIdLookUp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EmptyNodeIdLookUp_as_NodeIdLookUp")] public static extern long EmptyNodeIdLookUp_as_NodeIdLookUp(long _this_arg);
	// void BlindedHop_free(struct LDKBlindedHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_free")] public static extern void BlindedHop_free(long _this_obj);
	// struct LDKPublicKey BlindedHop_get_blinded_node_id(const struct LDKBlindedHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_get_blinded_node_id")] public static extern long BlindedHop_get_blinded_node_id(long _this_ptr);
	// void BlindedHop_set_blinded_node_id(struct LDKBlindedHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_set_blinded_node_id")] public static extern void BlindedHop_set_blinded_node_id(long _this_ptr, long _val);
	// struct LDKCVec_u8Z BlindedHop_get_encrypted_payload(const struct LDKBlindedHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_get_encrypted_payload")] public static extern long BlindedHop_get_encrypted_payload(long _this_ptr);
	// void BlindedHop_set_encrypted_payload(struct LDKBlindedHop *NONNULL_PTR this_ptr, struct LDKCVec_u8Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_set_encrypted_payload")] public static extern void BlindedHop_set_encrypted_payload(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedHop BlindedHop_new(struct LDKPublicKey blinded_node_id_arg, struct LDKCVec_u8Z encrypted_payload_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_new")] public static extern long BlindedHop_new(long _blinded_node_id_arg, long _encrypted_payload_arg);
	// uint64_t BlindedHop_clone_ptr(LDKBlindedHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_clone_ptr")] public static extern long BlindedHop_clone_ptr(long _arg);
	// struct LDKBlindedHop BlindedHop_clone(const struct LDKBlindedHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_clone")] public static extern long BlindedHop_clone(long _orig);
	// uint64_t BlindedHop_hash(const struct LDKBlindedHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_hash")] public static extern long BlindedHop_hash(long _o);
	// bool BlindedHop_eq(const struct LDKBlindedHop *NONNULL_PTR a, const struct LDKBlindedHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_eq")] public static extern bool BlindedHop_eq(long _a, long _b);
	// struct LDKCVec_u8Z BlindedHop_write(const struct LDKBlindedHop *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_write")] public static extern long BlindedHop_write(long _obj);
	// struct LDKCResult_BlindedHopDecodeErrorZ BlindedHop_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHop_read")] public static extern long BlindedHop_read(long _ser);
	// void BlindedPayInfo_free(struct LDKBlindedPayInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_free")] public static extern void BlindedPayInfo_free(long _this_obj);
	// uint32_t BlindedPayInfo_get_fee_base_msat(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_fee_base_msat")] public static extern int BlindedPayInfo_get_fee_base_msat(long _this_ptr);
	// void BlindedPayInfo_set_fee_base_msat(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_fee_base_msat")] public static extern void BlindedPayInfo_set_fee_base_msat(long _this_ptr, int _val);
	// uint32_t BlindedPayInfo_get_fee_proportional_millionths(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_fee_proportional_millionths")] public static extern int BlindedPayInfo_get_fee_proportional_millionths(long _this_ptr);
	// void BlindedPayInfo_set_fee_proportional_millionths(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_fee_proportional_millionths")] public static extern void BlindedPayInfo_set_fee_proportional_millionths(long _this_ptr, int _val);
	// uint16_t BlindedPayInfo_get_cltv_expiry_delta(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_cltv_expiry_delta")] public static extern short BlindedPayInfo_get_cltv_expiry_delta(long _this_ptr);
	// void BlindedPayInfo_set_cltv_expiry_delta(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_cltv_expiry_delta")] public static extern void BlindedPayInfo_set_cltv_expiry_delta(long _this_ptr, short _val);
	// uint64_t BlindedPayInfo_get_htlc_minimum_msat(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_htlc_minimum_msat")] public static extern long BlindedPayInfo_get_htlc_minimum_msat(long _this_ptr);
	// void BlindedPayInfo_set_htlc_minimum_msat(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_htlc_minimum_msat")] public static extern void BlindedPayInfo_set_htlc_minimum_msat(long _this_ptr, long _val);
	// uint64_t BlindedPayInfo_get_htlc_maximum_msat(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_htlc_maximum_msat")] public static extern long BlindedPayInfo_get_htlc_maximum_msat(long _this_ptr);
	// void BlindedPayInfo_set_htlc_maximum_msat(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_htlc_maximum_msat")] public static extern void BlindedPayInfo_set_htlc_maximum_msat(long _this_ptr, long _val);
	// struct LDKBlindedHopFeatures BlindedPayInfo_get_features(const struct LDKBlindedPayInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_get_features")] public static extern long BlindedPayInfo_get_features(long _this_ptr);
	// void BlindedPayInfo_set_features(struct LDKBlindedPayInfo *NONNULL_PTR this_ptr, struct LDKBlindedHopFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_set_features")] public static extern void BlindedPayInfo_set_features(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBlindedPayInfo BlindedPayInfo_new(uint32_t fee_base_msat_arg, uint32_t fee_proportional_millionths_arg, uint16_t cltv_expiry_delta_arg, uint64_t htlc_minimum_msat_arg, uint64_t htlc_maximum_msat_arg, struct LDKBlindedHopFeatures features_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_new")] public static extern long BlindedPayInfo_new(int _fee_base_msat_arg, int _fee_proportional_millionths_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg, long _features_arg);
	// uint64_t BlindedPayInfo_clone_ptr(LDKBlindedPayInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_clone_ptr")] public static extern long BlindedPayInfo_clone_ptr(long _arg);
	// struct LDKBlindedPayInfo BlindedPayInfo_clone(const struct LDKBlindedPayInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_clone")] public static extern long BlindedPayInfo_clone(long _orig);
	// uint64_t BlindedPayInfo_hash(const struct LDKBlindedPayInfo *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_hash")] public static extern long BlindedPayInfo_hash(long _o);
	// bool BlindedPayInfo_eq(const struct LDKBlindedPayInfo *NONNULL_PTR a, const struct LDKBlindedPayInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_eq")] public static extern bool BlindedPayInfo_eq(long _a, long _b);
	// struct LDKCVec_u8Z BlindedPayInfo_write(const struct LDKBlindedPayInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_write")] public static extern long BlindedPayInfo_write(long _obj);
	// struct LDKCResult_BlindedPayInfoDecodeErrorZ BlindedPayInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPayInfo_read")] public static extern long BlindedPayInfo_read(long _ser);
	// void BlindedPaymentPath_free(struct LDKBlindedPaymentPath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_free")] public static extern void BlindedPaymentPath_free(long _this_obj);
	// struct LDKBlindedPayInfo BlindedPaymentPath_get_payinfo(const struct LDKBlindedPaymentPath *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_get_payinfo")] public static extern long BlindedPaymentPath_get_payinfo(long _this_ptr);
	// void BlindedPaymentPath_set_payinfo(struct LDKBlindedPaymentPath *NONNULL_PTR this_ptr, struct LDKBlindedPayInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_set_payinfo")] public static extern void BlindedPaymentPath_set_payinfo(long _this_ptr, long _val);
	// uint64_t BlindedPaymentPath_clone_ptr(LDKBlindedPaymentPath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_clone_ptr")] public static extern long BlindedPaymentPath_clone_ptr(long _arg);
	// struct LDKBlindedPaymentPath BlindedPaymentPath_clone(const struct LDKBlindedPaymentPath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_clone")] public static extern long BlindedPaymentPath_clone(long _orig);
	// uint64_t BlindedPaymentPath_hash(const struct LDKBlindedPaymentPath *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_hash")] public static extern long BlindedPaymentPath_hash(long _o);
	// bool BlindedPaymentPath_eq(const struct LDKBlindedPaymentPath *NONNULL_PTR a, const struct LDKBlindedPaymentPath *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_eq")] public static extern bool BlindedPaymentPath_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCResult_BlindedPaymentPathNoneZ BlindedPaymentPath_one_hop(struct LDKPublicKey payee_node_id, struct LDKReceiveTlvs payee_tlvs, uint16_t min_final_cltv_expiry_delta, struct LDKEntropySource entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_one_hop")] public static extern long BlindedPaymentPath_one_hop(long _payee_node_id, long _payee_tlvs, short _min_final_cltv_expiry_delta, long _entropy_source);
	// MUST_USE_RES struct LDKCResult_BlindedPaymentPathNoneZ BlindedPaymentPath_new(struct LDKCVec_PaymentForwardNodeZ intermediate_nodes, struct LDKPublicKey payee_node_id, struct LDKReceiveTlvs payee_tlvs, uint64_t htlc_maximum_msat, uint16_t min_final_cltv_expiry_delta, struct LDKEntropySource entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_new")] public static extern long BlindedPaymentPath_new(long _intermediate_nodes, long _payee_node_id, long _payee_tlvs, long _htlc_maximum_msat, short _min_final_cltv_expiry_delta, long _entropy_source);
	// MUST_USE_RES struct LDKNodeId BlindedPaymentPath_public_introduction_node_id(const struct LDKBlindedPaymentPath *NONNULL_PTR this_arg, const struct LDKReadOnlyNetworkGraph *NONNULL_PTR network_graph);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_public_introduction_node_id")] public static extern long BlindedPaymentPath_public_introduction_node_id(long _this_arg, long _network_graph);
	// MUST_USE_RES struct LDKIntroductionNode BlindedPaymentPath_introduction_node(const struct LDKBlindedPaymentPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_introduction_node")] public static extern long BlindedPaymentPath_introduction_node(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey BlindedPaymentPath_blinding_point(const struct LDKBlindedPaymentPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_blinding_point")] public static extern long BlindedPaymentPath_blinding_point(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedHopZ BlindedPaymentPath_blinded_hops(const struct LDKBlindedPaymentPath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_blinded_hops")] public static extern long BlindedPaymentPath_blinded_hops(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedPaymentPath_advance_path_by_one(struct LDKBlindedPaymentPath *NONNULL_PTR this_arg, const struct LDKNodeSigner *NONNULL_PTR node_signer, const struct LDKNodeIdLookUp *NONNULL_PTR node_id_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedPaymentPath_advance_path_by_one")] public static extern long BlindedPaymentPath_advance_path_by_one(long _this_arg, long _node_signer, long _node_id_lookup);
	// void PaymentForwardNode_free(struct LDKPaymentForwardNode this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_free")] public static extern void PaymentForwardNode_free(long _this_obj);
	// struct LDKForwardTlvs PaymentForwardNode_get_tlvs(const struct LDKPaymentForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_get_tlvs")] public static extern long PaymentForwardNode_get_tlvs(long _this_ptr);
	// void PaymentForwardNode_set_tlvs(struct LDKPaymentForwardNode *NONNULL_PTR this_ptr, struct LDKForwardTlvs val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_set_tlvs")] public static extern void PaymentForwardNode_set_tlvs(long _this_ptr, long _val);
	// struct LDKPublicKey PaymentForwardNode_get_node_id(const struct LDKPaymentForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_get_node_id")] public static extern long PaymentForwardNode_get_node_id(long _this_ptr);
	// void PaymentForwardNode_set_node_id(struct LDKPaymentForwardNode *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_set_node_id")] public static extern void PaymentForwardNode_set_node_id(long _this_ptr, long _val);
	// uint64_t PaymentForwardNode_get_htlc_maximum_msat(const struct LDKPaymentForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_get_htlc_maximum_msat")] public static extern long PaymentForwardNode_get_htlc_maximum_msat(long _this_ptr);
	// void PaymentForwardNode_set_htlc_maximum_msat(struct LDKPaymentForwardNode *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_set_htlc_maximum_msat")] public static extern void PaymentForwardNode_set_htlc_maximum_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPaymentForwardNode PaymentForwardNode_new(struct LDKForwardTlvs tlvs_arg, struct LDKPublicKey node_id_arg, uint64_t htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_new")] public static extern long PaymentForwardNode_new(long _tlvs_arg, long _node_id_arg, long _htlc_maximum_msat_arg);
	// uint64_t PaymentForwardNode_clone_ptr(LDKPaymentForwardNode *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_clone_ptr")] public static extern long PaymentForwardNode_clone_ptr(long _arg);
	// struct LDKPaymentForwardNode PaymentForwardNode_clone(const struct LDKPaymentForwardNode *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentForwardNode_clone")] public static extern long PaymentForwardNode_clone(long _orig);
	// void ForwardTlvs_free(struct LDKForwardTlvs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_free")] public static extern void ForwardTlvs_free(long _this_obj);
	// uint64_t ForwardTlvs_get_short_channel_id(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_short_channel_id")] public static extern long ForwardTlvs_get_short_channel_id(long _this_ptr);
	// void ForwardTlvs_set_short_channel_id(struct LDKForwardTlvs *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_short_channel_id")] public static extern void ForwardTlvs_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKPaymentRelay ForwardTlvs_get_payment_relay(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_payment_relay")] public static extern long ForwardTlvs_get_payment_relay(long _this_ptr);
	// void ForwardTlvs_set_payment_relay(struct LDKForwardTlvs *NONNULL_PTR this_ptr, struct LDKPaymentRelay val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_payment_relay")] public static extern void ForwardTlvs_set_payment_relay(long _this_ptr, long _val);
	// struct LDKPaymentConstraints ForwardTlvs_get_payment_constraints(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_payment_constraints")] public static extern long ForwardTlvs_get_payment_constraints(long _this_ptr);
	// void ForwardTlvs_set_payment_constraints(struct LDKForwardTlvs *NONNULL_PTR this_ptr, struct LDKPaymentConstraints val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_payment_constraints")] public static extern void ForwardTlvs_set_payment_constraints(long _this_ptr, long _val);
	// struct LDKBlindedHopFeatures ForwardTlvs_get_features(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_features")] public static extern long ForwardTlvs_get_features(long _this_ptr);
	// void ForwardTlvs_set_features(struct LDKForwardTlvs *NONNULL_PTR this_ptr, struct LDKBlindedHopFeatures val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_features")] public static extern void ForwardTlvs_set_features(long _this_ptr, long _val);
	// struct LDKPublicKey ForwardTlvs_get_next_blinding_override(const struct LDKForwardTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_get_next_blinding_override")] public static extern long ForwardTlvs_get_next_blinding_override(long _this_ptr);
	// void ForwardTlvs_set_next_blinding_override(struct LDKForwardTlvs *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_set_next_blinding_override")] public static extern void ForwardTlvs_set_next_blinding_override(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKForwardTlvs ForwardTlvs_new(uint64_t short_channel_id_arg, struct LDKPaymentRelay payment_relay_arg, struct LDKPaymentConstraints payment_constraints_arg, struct LDKBlindedHopFeatures features_arg, struct LDKPublicKey next_blinding_override_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_new")] public static extern long ForwardTlvs_new(long _short_channel_id_arg, long _payment_relay_arg, long _payment_constraints_arg, long _features_arg, long _next_blinding_override_arg);
	// uint64_t ForwardTlvs_clone_ptr(LDKForwardTlvs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_clone_ptr")] public static extern long ForwardTlvs_clone_ptr(long _arg);
	// struct LDKForwardTlvs ForwardTlvs_clone(const struct LDKForwardTlvs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_clone")] public static extern long ForwardTlvs_clone(long _orig);
	// void ReceiveTlvs_free(struct LDKReceiveTlvs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_free")] public static extern void ReceiveTlvs_free(long _this_obj);
	// uint64_t ReceiveTlvs_clone_ptr(LDKReceiveTlvs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_clone_ptr")] public static extern long ReceiveTlvs_clone_ptr(long _arg);
	// struct LDKReceiveTlvs ReceiveTlvs_clone(const struct LDKReceiveTlvs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_clone")] public static extern long ReceiveTlvs_clone(long _orig);
	// MUST_USE_RES struct LDKUnauthenticatedReceiveTlvs ReceiveTlvs_tlvs(const struct LDKReceiveTlvs *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_tlvs")] public static extern long ReceiveTlvs_tlvs(long _this_arg);
	// void UnauthenticatedReceiveTlvs_free(struct LDKUnauthenticatedReceiveTlvs this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_free")] public static extern void UnauthenticatedReceiveTlvs_free(long _this_obj);
	// const uint8_t (*UnauthenticatedReceiveTlvs_get_payment_secret(const struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_get_payment_secret")] public static extern long UnauthenticatedReceiveTlvs_get_payment_secret(long _this_ptr);
	// void UnauthenticatedReceiveTlvs_set_payment_secret(struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_set_payment_secret")] public static extern void UnauthenticatedReceiveTlvs_set_payment_secret(long _this_ptr, long _val);
	// struct LDKPaymentConstraints UnauthenticatedReceiveTlvs_get_payment_constraints(const struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_get_payment_constraints")] public static extern long UnauthenticatedReceiveTlvs_get_payment_constraints(long _this_ptr);
	// void UnauthenticatedReceiveTlvs_set_payment_constraints(struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR this_ptr, struct LDKPaymentConstraints val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_set_payment_constraints")] public static extern void UnauthenticatedReceiveTlvs_set_payment_constraints(long _this_ptr, long _val);
	// struct LDKPaymentContext UnauthenticatedReceiveTlvs_get_payment_context(const struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_get_payment_context")] public static extern long UnauthenticatedReceiveTlvs_get_payment_context(long _this_ptr);
	// void UnauthenticatedReceiveTlvs_set_payment_context(struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR this_ptr, struct LDKPaymentContext val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_set_payment_context")] public static extern void UnauthenticatedReceiveTlvs_set_payment_context(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUnauthenticatedReceiveTlvs UnauthenticatedReceiveTlvs_new(struct LDKThirtyTwoBytes payment_secret_arg, struct LDKPaymentConstraints payment_constraints_arg, struct LDKPaymentContext payment_context_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_new")] public static extern long UnauthenticatedReceiveTlvs_new(long _payment_secret_arg, long _payment_constraints_arg, long _payment_context_arg);
	// uint64_t UnauthenticatedReceiveTlvs_clone_ptr(LDKUnauthenticatedReceiveTlvs *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_clone_ptr")] public static extern long UnauthenticatedReceiveTlvs_clone_ptr(long _arg);
	// struct LDKUnauthenticatedReceiveTlvs UnauthenticatedReceiveTlvs_clone(const struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_clone")] public static extern long UnauthenticatedReceiveTlvs_clone(long _orig);
	// MUST_USE_RES struct LDKReceiveTlvs UnauthenticatedReceiveTlvs_authenticate(struct LDKUnauthenticatedReceiveTlvs this_arg, struct LDKNonce nonce, const struct LDKExpandedKey *NONNULL_PTR expanded_key);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_authenticate")] public static extern long UnauthenticatedReceiveTlvs_authenticate(long _this_arg, long _nonce, long _expanded_key);
	// void PaymentRelay_free(struct LDKPaymentRelay this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_free")] public static extern void PaymentRelay_free(long _this_obj);
	// uint16_t PaymentRelay_get_cltv_expiry_delta(const struct LDKPaymentRelay *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_get_cltv_expiry_delta")] public static extern short PaymentRelay_get_cltv_expiry_delta(long _this_ptr);
	// void PaymentRelay_set_cltv_expiry_delta(struct LDKPaymentRelay *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_set_cltv_expiry_delta")] public static extern void PaymentRelay_set_cltv_expiry_delta(long _this_ptr, short _val);
	// uint32_t PaymentRelay_get_fee_proportional_millionths(const struct LDKPaymentRelay *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_get_fee_proportional_millionths")] public static extern int PaymentRelay_get_fee_proportional_millionths(long _this_ptr);
	// void PaymentRelay_set_fee_proportional_millionths(struct LDKPaymentRelay *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_set_fee_proportional_millionths")] public static extern void PaymentRelay_set_fee_proportional_millionths(long _this_ptr, int _val);
	// uint32_t PaymentRelay_get_fee_base_msat(const struct LDKPaymentRelay *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_get_fee_base_msat")] public static extern int PaymentRelay_get_fee_base_msat(long _this_ptr);
	// void PaymentRelay_set_fee_base_msat(struct LDKPaymentRelay *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_set_fee_base_msat")] public static extern void PaymentRelay_set_fee_base_msat(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKPaymentRelay PaymentRelay_new(uint16_t cltv_expiry_delta_arg, uint32_t fee_proportional_millionths_arg, uint32_t fee_base_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_new")] public static extern long PaymentRelay_new(short _cltv_expiry_delta_arg, int _fee_proportional_millionths_arg, int _fee_base_msat_arg);
	// uint64_t PaymentRelay_clone_ptr(LDKPaymentRelay *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_clone_ptr")] public static extern long PaymentRelay_clone_ptr(long _arg);
	// struct LDKPaymentRelay PaymentRelay_clone(const struct LDKPaymentRelay *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_clone")] public static extern long PaymentRelay_clone(long _orig);
	// void PaymentConstraints_free(struct LDKPaymentConstraints this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_free")] public static extern void PaymentConstraints_free(long _this_obj);
	// uint32_t PaymentConstraints_get_max_cltv_expiry(const struct LDKPaymentConstraints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_get_max_cltv_expiry")] public static extern int PaymentConstraints_get_max_cltv_expiry(long _this_ptr);
	// void PaymentConstraints_set_max_cltv_expiry(struct LDKPaymentConstraints *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_set_max_cltv_expiry")] public static extern void PaymentConstraints_set_max_cltv_expiry(long _this_ptr, int _val);
	// uint64_t PaymentConstraints_get_htlc_minimum_msat(const struct LDKPaymentConstraints *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_get_htlc_minimum_msat")] public static extern long PaymentConstraints_get_htlc_minimum_msat(long _this_ptr);
	// void PaymentConstraints_set_htlc_minimum_msat(struct LDKPaymentConstraints *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_set_htlc_minimum_msat")] public static extern void PaymentConstraints_set_htlc_minimum_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPaymentConstraints PaymentConstraints_new(uint32_t max_cltv_expiry_arg, uint64_t htlc_minimum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_new")] public static extern long PaymentConstraints_new(int _max_cltv_expiry_arg, long _htlc_minimum_msat_arg);
	// uint64_t PaymentConstraints_clone_ptr(LDKPaymentConstraints *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_clone_ptr")] public static extern long PaymentConstraints_clone_ptr(long _arg);
	// struct LDKPaymentConstraints PaymentConstraints_clone(const struct LDKPaymentConstraints *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_clone")] public static extern long PaymentConstraints_clone(long _orig);
	// void PaymentContext_free(struct LDKPaymentContext this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_free")] public static extern void PaymentContext_free(long _this_ptr);
	// uint64_t PaymentContext_clone_ptr(LDKPaymentContext *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_clone_ptr")] public static extern long PaymentContext_clone_ptr(long _arg);
	// struct LDKPaymentContext PaymentContext_clone(const struct LDKPaymentContext *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_clone")] public static extern long PaymentContext_clone(long _orig);
	// struct LDKPaymentContext PaymentContext_bolt12_offer(struct LDKBolt12OfferContext a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_bolt12_offer")] public static extern long PaymentContext_bolt12_offer(long _a);
	// struct LDKPaymentContext PaymentContext_bolt12_refund(struct LDKBolt12RefundContext a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_bolt12_refund")] public static extern long PaymentContext_bolt12_refund(long _a);
	// bool PaymentContext_eq(const struct LDKPaymentContext *NONNULL_PTR a, const struct LDKPaymentContext *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_eq")] public static extern bool PaymentContext_eq(long _a, long _b);
	// void Bolt12OfferContext_free(struct LDKBolt12OfferContext this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_free")] public static extern void Bolt12OfferContext_free(long _this_obj);
	// struct LDKOfferId Bolt12OfferContext_get_offer_id(const struct LDKBolt12OfferContext *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_get_offer_id")] public static extern long Bolt12OfferContext_get_offer_id(long _this_ptr);
	// void Bolt12OfferContext_set_offer_id(struct LDKBolt12OfferContext *NONNULL_PTR this_ptr, struct LDKOfferId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_set_offer_id")] public static extern void Bolt12OfferContext_set_offer_id(long _this_ptr, long _val);
	// struct LDKInvoiceRequestFields Bolt12OfferContext_get_invoice_request(const struct LDKBolt12OfferContext *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_get_invoice_request")] public static extern long Bolt12OfferContext_get_invoice_request(long _this_ptr);
	// void Bolt12OfferContext_set_invoice_request(struct LDKBolt12OfferContext *NONNULL_PTR this_ptr, struct LDKInvoiceRequestFields val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_set_invoice_request")] public static extern void Bolt12OfferContext_set_invoice_request(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBolt12OfferContext Bolt12OfferContext_new(struct LDKOfferId offer_id_arg, struct LDKInvoiceRequestFields invoice_request_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_new")] public static extern long Bolt12OfferContext_new(long _offer_id_arg, long _invoice_request_arg);
	// uint64_t Bolt12OfferContext_clone_ptr(LDKBolt12OfferContext *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_clone_ptr")] public static extern long Bolt12OfferContext_clone_ptr(long _arg);
	// struct LDKBolt12OfferContext Bolt12OfferContext_clone(const struct LDKBolt12OfferContext *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_clone")] public static extern long Bolt12OfferContext_clone(long _orig);
	// bool Bolt12OfferContext_eq(const struct LDKBolt12OfferContext *NONNULL_PTR a, const struct LDKBolt12OfferContext *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_eq")] public static extern bool Bolt12OfferContext_eq(long _a, long _b);
	// void Bolt12RefundContext_free(struct LDKBolt12RefundContext this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12RefundContext_free")] public static extern void Bolt12RefundContext_free(long _this_obj);
	// MUST_USE_RES struct LDKBolt12RefundContext Bolt12RefundContext_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12RefundContext_new")] public static extern long Bolt12RefundContext_new();
	// uint64_t Bolt12RefundContext_clone_ptr(LDKBolt12RefundContext *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12RefundContext_clone_ptr")] public static extern long Bolt12RefundContext_clone_ptr(long _arg);
	// struct LDKBolt12RefundContext Bolt12RefundContext_clone(const struct LDKBolt12RefundContext *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12RefundContext_clone")] public static extern long Bolt12RefundContext_clone(long _orig);
	// bool Bolt12RefundContext_eq(const struct LDKBolt12RefundContext *NONNULL_PTR a, const struct LDKBolt12RefundContext *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12RefundContext_eq")] public static extern bool Bolt12RefundContext_eq(long _a, long _b);
	// struct LDKCVec_u8Z ForwardTlvs_write(const struct LDKForwardTlvs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ForwardTlvs_write")] public static extern long ForwardTlvs_write(long _obj);
	// struct LDKCVec_u8Z ReceiveTlvs_write(const struct LDKReceiveTlvs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReceiveTlvs_write")] public static extern long ReceiveTlvs_write(long _obj);
	// struct LDKCVec_u8Z UnauthenticatedReceiveTlvs_write(const struct LDKUnauthenticatedReceiveTlvs *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UnauthenticatedReceiveTlvs_write")] public static extern long UnauthenticatedReceiveTlvs_write(long _obj);
	// struct LDKCVec_u8Z PaymentRelay_write(const struct LDKPaymentRelay *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_write")] public static extern long PaymentRelay_write(long _obj);
	// struct LDKCResult_PaymentRelayDecodeErrorZ PaymentRelay_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentRelay_read")] public static extern long PaymentRelay_read(long _ser);
	// struct LDKCVec_u8Z PaymentConstraints_write(const struct LDKPaymentConstraints *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_write")] public static extern long PaymentConstraints_write(long _obj);
	// struct LDKCResult_PaymentConstraintsDecodeErrorZ PaymentConstraints_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentConstraints_read")] public static extern long PaymentConstraints_read(long _ser);
	// struct LDKCVec_u8Z PaymentContext_write(const struct LDKPaymentContext *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_write")] public static extern long PaymentContext_write(long _obj);
	// struct LDKCResult_PaymentContextDecodeErrorZ PaymentContext_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentContext_read")] public static extern long PaymentContext_read(long _ser);
	// struct LDKCVec_u8Z Bolt12OfferContext_write(const struct LDKBolt12OfferContext *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_write")] public static extern long Bolt12OfferContext_write(long _obj);
	// struct LDKCResult_Bolt12OfferContextDecodeErrorZ Bolt12OfferContext_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12OfferContext_read")] public static extern long Bolt12OfferContext_read(long _ser);
	// struct LDKCVec_u8Z Bolt12RefundContext_write(const struct LDKBolt12RefundContext *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12RefundContext_write")] public static extern long Bolt12RefundContext_write(long _obj);
	// struct LDKCResult_Bolt12RefundContextDecodeErrorZ Bolt12RefundContext_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12RefundContext_read")] public static extern long Bolt12RefundContext_read(long _ser);
	// void BlindedMessagePath_free(struct LDKBlindedMessagePath this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_free")] public static extern void BlindedMessagePath_free(long _this_obj);
	// uint64_t BlindedMessagePath_clone_ptr(LDKBlindedMessagePath *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_clone_ptr")] public static extern long BlindedMessagePath_clone_ptr(long _arg);
	// struct LDKBlindedMessagePath BlindedMessagePath_clone(const struct LDKBlindedMessagePath *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_clone")] public static extern long BlindedMessagePath_clone(long _orig);
	// uint64_t BlindedMessagePath_hash(const struct LDKBlindedMessagePath *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_hash")] public static extern long BlindedMessagePath_hash(long _o);
	// bool BlindedMessagePath_eq(const struct LDKBlindedMessagePath *NONNULL_PTR a, const struct LDKBlindedMessagePath *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_eq")] public static extern bool BlindedMessagePath_eq(long _a, long _b);
	// struct LDKCVec_u8Z BlindedMessagePath_write(const struct LDKBlindedMessagePath *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_write")] public static extern long BlindedMessagePath_write(long _obj);
	// struct LDKCResult_BlindedMessagePathDecodeErrorZ BlindedMessagePath_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_read")] public static extern long BlindedMessagePath_read(long _ser);
	// MUST_USE_RES struct LDKCResult_BlindedMessagePathNoneZ BlindedMessagePath_one_hop(struct LDKPublicKey recipient_node_id, struct LDKMessageContext context, struct LDKEntropySource entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_one_hop")] public static extern long BlindedMessagePath_one_hop(long _recipient_node_id, long _context, long _entropy_source);
	// MUST_USE_RES struct LDKCResult_BlindedMessagePathNoneZ BlindedMessagePath_new(struct LDKCVec_MessageForwardNodeZ intermediate_nodes, struct LDKPublicKey recipient_node_id, struct LDKMessageContext context, struct LDKEntropySource entropy_source);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_new")] public static extern long BlindedMessagePath_new(long _intermediate_nodes, long _recipient_node_id, long _context, long _entropy_source);
	// void BlindedMessagePath_use_compact_introduction_node(struct LDKBlindedMessagePath *NONNULL_PTR this_arg, const struct LDKReadOnlyNetworkGraph *NONNULL_PTR network_graph);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_use_compact_introduction_node")] public static extern void BlindedMessagePath_use_compact_introduction_node(long _this_arg, long _network_graph);
	// MUST_USE_RES struct LDKNodeId BlindedMessagePath_public_introduction_node_id(const struct LDKBlindedMessagePath *NONNULL_PTR this_arg, const struct LDKReadOnlyNetworkGraph *NONNULL_PTR network_graph);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_public_introduction_node_id")] public static extern long BlindedMessagePath_public_introduction_node_id(long _this_arg, long _network_graph);
	// MUST_USE_RES struct LDKIntroductionNode BlindedMessagePath_introduction_node(const struct LDKBlindedMessagePath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_introduction_node")] public static extern long BlindedMessagePath_introduction_node(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey BlindedMessagePath_blinding_point(const struct LDKBlindedMessagePath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_blinding_point")] public static extern long BlindedMessagePath_blinding_point(long _this_arg);
	// MUST_USE_RES struct LDKCVec_BlindedHopZ BlindedMessagePath_blinded_hops(const struct LDKBlindedMessagePath *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_blinded_hops")] public static extern long BlindedMessagePath_blinded_hops(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedMessagePath_advance_path_by_one(struct LDKBlindedMessagePath *NONNULL_PTR this_arg, const struct LDKNodeSigner *NONNULL_PTR node_signer, const struct LDKNodeIdLookUp *NONNULL_PTR node_id_lookup);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedMessagePath_advance_path_by_one")] public static extern long BlindedMessagePath_advance_path_by_one(long _this_arg, long _node_signer, long _node_id_lookup);
	// void NextMessageHop_free(struct LDKNextMessageHop this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NextMessageHop_free")] public static extern void NextMessageHop_free(long _this_ptr);
	// uint64_t NextMessageHop_clone_ptr(LDKNextMessageHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NextMessageHop_clone_ptr")] public static extern long NextMessageHop_clone_ptr(long _arg);
	// struct LDKNextMessageHop NextMessageHop_clone(const struct LDKNextMessageHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NextMessageHop_clone")] public static extern long NextMessageHop_clone(long _orig);
	// struct LDKNextMessageHop NextMessageHop_node_id(struct LDKPublicKey a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NextMessageHop_node_id")] public static extern long NextMessageHop_node_id(long _a);
	// struct LDKNextMessageHop NextMessageHop_short_channel_id(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NextMessageHop_short_channel_id")] public static extern long NextMessageHop_short_channel_id(long _a);
	// uint64_t NextMessageHop_hash(const struct LDKNextMessageHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NextMessageHop_hash")] public static extern long NextMessageHop_hash(long _o);
	// bool NextMessageHop_eq(const struct LDKNextMessageHop *NONNULL_PTR a, const struct LDKNextMessageHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NextMessageHop_eq")] public static extern bool NextMessageHop_eq(long _a, long _b);
	// void MessageForwardNode_free(struct LDKMessageForwardNode this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_free")] public static extern void MessageForwardNode_free(long _this_obj);
	// struct LDKPublicKey MessageForwardNode_get_node_id(const struct LDKMessageForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_get_node_id")] public static extern long MessageForwardNode_get_node_id(long _this_ptr);
	// void MessageForwardNode_set_node_id(struct LDKMessageForwardNode *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_set_node_id")] public static extern void MessageForwardNode_set_node_id(long _this_ptr, long _val);
	// struct LDKCOption_u64Z MessageForwardNode_get_short_channel_id(const struct LDKMessageForwardNode *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_get_short_channel_id")] public static extern long MessageForwardNode_get_short_channel_id(long _this_ptr);
	// void MessageForwardNode_set_short_channel_id(struct LDKMessageForwardNode *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_set_short_channel_id")] public static extern void MessageForwardNode_set_short_channel_id(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKMessageForwardNode MessageForwardNode_new(struct LDKPublicKey node_id_arg, struct LDKCOption_u64Z short_channel_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_new")] public static extern long MessageForwardNode_new(long _node_id_arg, long _short_channel_id_arg);
	// uint64_t MessageForwardNode_clone_ptr(LDKMessageForwardNode *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_clone_ptr")] public static extern long MessageForwardNode_clone_ptr(long _arg);
	// struct LDKMessageForwardNode MessageForwardNode_clone(const struct LDKMessageForwardNode *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_clone")] public static extern long MessageForwardNode_clone(long _orig);
	// uint64_t MessageForwardNode_hash(const struct LDKMessageForwardNode *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_hash")] public static extern long MessageForwardNode_hash(long _o);
	// bool MessageForwardNode_eq(const struct LDKMessageForwardNode *NONNULL_PTR a, const struct LDKMessageForwardNode *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageForwardNode_eq")] public static extern bool MessageForwardNode_eq(long _a, long _b);
	// void MessageContext_free(struct LDKMessageContext this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_free")] public static extern void MessageContext_free(long _this_ptr);
	// uint64_t MessageContext_clone_ptr(LDKMessageContext *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_clone_ptr")] public static extern long MessageContext_clone_ptr(long _arg);
	// struct LDKMessageContext MessageContext_clone(const struct LDKMessageContext *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_clone")] public static extern long MessageContext_clone(long _orig);
	// struct LDKMessageContext MessageContext_offers(struct LDKOffersContext a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_offers")] public static extern long MessageContext_offers(long _a);
	// struct LDKMessageContext MessageContext_async_payments(struct LDKAsyncPaymentsContext a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_async_payments")] public static extern long MessageContext_async_payments(long _a);
	// struct LDKMessageContext MessageContext_dnsresolver(struct LDKDNSResolverContext a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_dnsresolver")] public static extern long MessageContext_dnsresolver(long _a);
	// struct LDKMessageContext MessageContext_custom(struct LDKCVec_u8Z a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_custom")] public static extern long MessageContext_custom(long _a);
	// void OffersContext_free(struct LDKOffersContext this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_free")] public static extern void OffersContext_free(long _this_ptr);
	// uint64_t OffersContext_clone_ptr(LDKOffersContext *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_clone_ptr")] public static extern long OffersContext_clone_ptr(long _arg);
	// struct LDKOffersContext OffersContext_clone(const struct LDKOffersContext *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_clone")] public static extern long OffersContext_clone(long _orig);
	// struct LDKOffersContext OffersContext_invoice_request(struct LDKNonce nonce);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_invoice_request")] public static extern long OffersContext_invoice_request(long _nonce);
	// struct LDKOffersContext OffersContext_outbound_payment(struct LDKThirtyTwoBytes payment_id, struct LDKNonce nonce, struct LDKThirtyTwoBytes hmac);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_outbound_payment")] public static extern long OffersContext_outbound_payment(long _payment_id, long _nonce, long _hmac);
	// struct LDKOffersContext OffersContext_inbound_payment(struct LDKThirtyTwoBytes payment_hash, struct LDKNonce nonce, struct LDKThirtyTwoBytes hmac);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_inbound_payment")] public static extern long OffersContext_inbound_payment(long _payment_hash, long _nonce, long _hmac);
	// bool OffersContext_eq(const struct LDKOffersContext *NONNULL_PTR a, const struct LDKOffersContext *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_eq")] public static extern bool OffersContext_eq(long _a, long _b);
	// void AsyncPaymentsContext_free(struct LDKAsyncPaymentsContext this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsContext_free")] public static extern void AsyncPaymentsContext_free(long _this_ptr);
	// uint64_t AsyncPaymentsContext_clone_ptr(LDKAsyncPaymentsContext *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsContext_clone_ptr")] public static extern long AsyncPaymentsContext_clone_ptr(long _arg);
	// struct LDKAsyncPaymentsContext AsyncPaymentsContext_clone(const struct LDKAsyncPaymentsContext *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsContext_clone")] public static extern long AsyncPaymentsContext_clone(long _orig);
	// struct LDKAsyncPaymentsContext AsyncPaymentsContext_outbound_payment(struct LDKThirtyTwoBytes payment_id, struct LDKNonce nonce, struct LDKThirtyTwoBytes hmac);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsContext_outbound_payment")] public static extern long AsyncPaymentsContext_outbound_payment(long _payment_id, long _nonce, long _hmac);
	// struct LDKCVec_u8Z MessageContext_write(const struct LDKMessageContext *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_write")] public static extern long MessageContext_write(long _obj);
	// struct LDKCResult_MessageContextDecodeErrorZ MessageContext_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageContext_read")] public static extern long MessageContext_read(long _ser);
	// struct LDKCVec_u8Z OffersContext_write(const struct LDKOffersContext *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_write")] public static extern long OffersContext_write(long _obj);
	// struct LDKCResult_OffersContextDecodeErrorZ OffersContext_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OffersContext_read")] public static extern long OffersContext_read(long _ser);
	// struct LDKCVec_u8Z AsyncPaymentsContext_write(const struct LDKAsyncPaymentsContext *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsContext_write")] public static extern long AsyncPaymentsContext_write(long _obj);
	// struct LDKCResult_AsyncPaymentsContextDecodeErrorZ AsyncPaymentsContext_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AsyncPaymentsContext_read")] public static extern long AsyncPaymentsContext_read(long _ser);
	// void DNSResolverContext_free(struct LDKDNSResolverContext this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_free")] public static extern void DNSResolverContext_free(long _this_obj);
	// const uint8_t (*DNSResolverContext_get_nonce(const struct LDKDNSResolverContext *NONNULL_PTR this_ptr))[16];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_get_nonce")] public static extern long DNSResolverContext_get_nonce(long _this_ptr);
	// void DNSResolverContext_set_nonce(struct LDKDNSResolverContext *NONNULL_PTR this_ptr, struct LDKSixteenBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_set_nonce")] public static extern void DNSResolverContext_set_nonce(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKDNSResolverContext DNSResolverContext_new(struct LDKSixteenBytes nonce_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_new")] public static extern long DNSResolverContext_new(long _nonce_arg);
	// uint64_t DNSResolverContext_clone_ptr(LDKDNSResolverContext *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_clone_ptr")] public static extern long DNSResolverContext_clone_ptr(long _arg);
	// struct LDKDNSResolverContext DNSResolverContext_clone(const struct LDKDNSResolverContext *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_clone")] public static extern long DNSResolverContext_clone(long _orig);
	// uint64_t DNSResolverContext_hash(const struct LDKDNSResolverContext *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_hash")] public static extern long DNSResolverContext_hash(long _o);
	// bool DNSResolverContext_eq(const struct LDKDNSResolverContext *NONNULL_PTR a, const struct LDKDNSResolverContext *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_eq")] public static extern bool DNSResolverContext_eq(long _a, long _b);
	// struct LDKCVec_u8Z DNSResolverContext_write(const struct LDKDNSResolverContext *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_write")] public static extern long DNSResolverContext_write(long _obj);
	// struct LDKCResult_DNSResolverContextDecodeErrorZ DNSResolverContext_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_DNSResolverContext_read")] public static extern long DNSResolverContext_read(long _ser);
	// void FundingInfo_free(struct LDKFundingInfo this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_free")] public static extern void FundingInfo_free(long _this_ptr);
	// uint64_t FundingInfo_clone_ptr(LDKFundingInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_clone_ptr")] public static extern long FundingInfo_clone_ptr(long _arg);
	// struct LDKFundingInfo FundingInfo_clone(const struct LDKFundingInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_clone")] public static extern long FundingInfo_clone(long _orig);
	// struct LDKFundingInfo FundingInfo_tx(struct LDKTransaction transaction);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_tx")] public static extern long FundingInfo_tx(long _transaction);
	// struct LDKFundingInfo FundingInfo_out_point(struct LDKOutPoint outpoint);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_out_point")] public static extern long FundingInfo_out_point(long _outpoint);
	// bool FundingInfo_eq(const struct LDKFundingInfo *NONNULL_PTR a, const struct LDKFundingInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_eq")] public static extern bool FundingInfo_eq(long _a, long _b);
	// struct LDKCVec_u8Z FundingInfo_write(const struct LDKFundingInfo *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_write")] public static extern long FundingInfo_write(long _obj);
	// struct LDKCResult_FundingInfoDecodeErrorZ FundingInfo_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FundingInfo_read")] public static extern long FundingInfo_read(long _ser);
	// void PaymentPurpose_free(struct LDKPaymentPurpose this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_free")] public static extern void PaymentPurpose_free(long _this_ptr);
	// uint64_t PaymentPurpose_clone_ptr(LDKPaymentPurpose *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_clone_ptr")] public static extern long PaymentPurpose_clone_ptr(long _arg);
	// struct LDKPaymentPurpose PaymentPurpose_clone(const struct LDKPaymentPurpose *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_clone")] public static extern long PaymentPurpose_clone(long _orig);
	// struct LDKPaymentPurpose PaymentPurpose_bolt11_invoice_payment(struct LDKCOption_ThirtyTwoBytesZ payment_preimage, struct LDKThirtyTwoBytes payment_secret);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_bolt11_invoice_payment")] public static extern long PaymentPurpose_bolt11_invoice_payment(long _payment_preimage, long _payment_secret);
	// struct LDKPaymentPurpose PaymentPurpose_bolt12_offer_payment(struct LDKCOption_ThirtyTwoBytesZ payment_preimage, struct LDKThirtyTwoBytes payment_secret, struct LDKBolt12OfferContext payment_context);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_bolt12_offer_payment")] public static extern long PaymentPurpose_bolt12_offer_payment(long _payment_preimage, long _payment_secret, long _payment_context);
	// struct LDKPaymentPurpose PaymentPurpose_bolt12_refund_payment(struct LDKCOption_ThirtyTwoBytesZ payment_preimage, struct LDKThirtyTwoBytes payment_secret, struct LDKBolt12RefundContext payment_context);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_bolt12_refund_payment")] public static extern long PaymentPurpose_bolt12_refund_payment(long _payment_preimage, long _payment_secret, long _payment_context);
	// struct LDKPaymentPurpose PaymentPurpose_spontaneous_payment(struct LDKThirtyTwoBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_spontaneous_payment")] public static extern long PaymentPurpose_spontaneous_payment(long _a);
	// bool PaymentPurpose_eq(const struct LDKPaymentPurpose *NONNULL_PTR a, const struct LDKPaymentPurpose *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_eq")] public static extern bool PaymentPurpose_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCOption_ThirtyTwoBytesZ PaymentPurpose_preimage(const struct LDKPaymentPurpose *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_preimage")] public static extern long PaymentPurpose_preimage(long _this_arg);
	// struct LDKCVec_u8Z PaymentPurpose_write(const struct LDKPaymentPurpose *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_write")] public static extern long PaymentPurpose_write(long _obj);
	// struct LDKCResult_PaymentPurposeDecodeErrorZ PaymentPurpose_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentPurpose_read")] public static extern long PaymentPurpose_read(long _ser);
	// void ClaimedHTLC_free(struct LDKClaimedHTLC this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_free")] public static extern void ClaimedHTLC_free(long _this_obj);
	// struct LDKChannelId ClaimedHTLC_get_channel_id(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_channel_id")] public static extern long ClaimedHTLC_get_channel_id(long _this_ptr);
	// void ClaimedHTLC_set_channel_id(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, struct LDKChannelId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_channel_id")] public static extern void ClaimedHTLC_set_channel_id(long _this_ptr, long _val);
	// struct LDKU128 ClaimedHTLC_get_user_channel_id(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_user_channel_id")] public static extern long ClaimedHTLC_get_user_channel_id(long _this_ptr);
	// void ClaimedHTLC_set_user_channel_id(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, struct LDKU128 val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_user_channel_id")] public static extern void ClaimedHTLC_set_user_channel_id(long _this_ptr, long _val);
	// uint32_t ClaimedHTLC_get_cltv_expiry(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_cltv_expiry")] public static extern int ClaimedHTLC_get_cltv_expiry(long _this_ptr);
	// void ClaimedHTLC_set_cltv_expiry(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_cltv_expiry")] public static extern void ClaimedHTLC_set_cltv_expiry(long _this_ptr, int _val);
	// uint64_t ClaimedHTLC_get_value_msat(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_value_msat")] public static extern long ClaimedHTLC_get_value_msat(long _this_ptr);
	// void ClaimedHTLC_set_value_msat(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_value_msat")] public static extern void ClaimedHTLC_set_value_msat(long _this_ptr, long _val);
	// uint64_t ClaimedHTLC_get_counterparty_skimmed_fee_msat(const struct LDKClaimedHTLC *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_get_counterparty_skimmed_fee_msat")] public static extern long ClaimedHTLC_get_counterparty_skimmed_fee_msat(long _this_ptr);
	// void ClaimedHTLC_set_counterparty_skimmed_fee_msat(struct LDKClaimedHTLC *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_set_counterparty_skimmed_fee_msat")] public static extern void ClaimedHTLC_set_counterparty_skimmed_fee_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKClaimedHTLC ClaimedHTLC_new(struct LDKChannelId channel_id_arg, struct LDKU128 user_channel_id_arg, uint32_t cltv_expiry_arg, uint64_t value_msat_arg, uint64_t counterparty_skimmed_fee_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_new")] public static extern long ClaimedHTLC_new(long _channel_id_arg, long _user_channel_id_arg, int _cltv_expiry_arg, long _value_msat_arg, long _counterparty_skimmed_fee_msat_arg);
	// uint64_t ClaimedHTLC_clone_ptr(LDKClaimedHTLC *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_clone_ptr")] public static extern long ClaimedHTLC_clone_ptr(long _arg);
	// struct LDKClaimedHTLC ClaimedHTLC_clone(const struct LDKClaimedHTLC *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_clone")] public static extern long ClaimedHTLC_clone(long _orig);
	// bool ClaimedHTLC_eq(const struct LDKClaimedHTLC *NONNULL_PTR a, const struct LDKClaimedHTLC *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_eq")] public static extern bool ClaimedHTLC_eq(long _a, long _b);
	// struct LDKCVec_u8Z ClaimedHTLC_write(const struct LDKClaimedHTLC *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_write")] public static extern long ClaimedHTLC_write(long _obj);
	// struct LDKCResult_ClaimedHTLCDecodeErrorZ ClaimedHTLC_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClaimedHTLC_read")] public static extern long ClaimedHTLC_read(long _ser);
	// void PathFailure_free(struct LDKPathFailure this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_free")] public static extern void PathFailure_free(long _this_ptr);
	// uint64_t PathFailure_clone_ptr(LDKPathFailure *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_clone_ptr")] public static extern long PathFailure_clone_ptr(long _arg);
	// struct LDKPathFailure PathFailure_clone(const struct LDKPathFailure *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_clone")] public static extern long PathFailure_clone(long _orig);
	// struct LDKPathFailure PathFailure_initial_send(struct LDKAPIError err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_initial_send")] public static extern long PathFailure_initial_send(long _err);
	// struct LDKPathFailure PathFailure_on_path(struct LDKCOption_NetworkUpdateZ network_update);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_on_path")] public static extern long PathFailure_on_path(long _network_update);
	// bool PathFailure_eq(const struct LDKPathFailure *NONNULL_PTR a, const struct LDKPathFailure *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_eq")] public static extern bool PathFailure_eq(long _a, long _b);
	// struct LDKCVec_u8Z PathFailure_write(const struct LDKPathFailure *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_write")] public static extern long PathFailure_write(long _obj);
	// struct LDKCResult_COption_PathFailureZDecodeErrorZ PathFailure_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PathFailure_read")] public static extern long PathFailure_read(long _ser);
	// void ClosureReason_free(struct LDKClosureReason this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_free")] public static extern void ClosureReason_free(long _this_ptr);
	// uint64_t ClosureReason_clone_ptr(LDKClosureReason *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_clone_ptr")] public static extern long ClosureReason_clone_ptr(long _arg);
	// struct LDKClosureReason ClosureReason_clone(const struct LDKClosureReason *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_clone")] public static extern long ClosureReason_clone(long _orig);
	// struct LDKClosureReason ClosureReason_counterparty_force_closed(struct LDKUntrustedString peer_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_counterparty_force_closed")] public static extern long ClosureReason_counterparty_force_closed(long _peer_msg);
	// struct LDKClosureReason ClosureReason_holder_force_closed(struct LDKCOption_boolZ broadcasted_latest_txn);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_holder_force_closed")] public static extern long ClosureReason_holder_force_closed(long _broadcasted_latest_txn);
	// struct LDKClosureReason ClosureReason_legacy_cooperative_closure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_legacy_cooperative_closure")] public static extern long ClosureReason_legacy_cooperative_closure();
	// struct LDKClosureReason ClosureReason_counterparty_initiated_cooperative_closure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_counterparty_initiated_cooperative_closure")] public static extern long ClosureReason_counterparty_initiated_cooperative_closure();
	// struct LDKClosureReason ClosureReason_locally_initiated_cooperative_closure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_locally_initiated_cooperative_closure")] public static extern long ClosureReason_locally_initiated_cooperative_closure();
	// struct LDKClosureReason ClosureReason_commitment_tx_confirmed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_commitment_tx_confirmed")] public static extern long ClosureReason_commitment_tx_confirmed();
	// struct LDKClosureReason ClosureReason_funding_timed_out(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_funding_timed_out")] public static extern long ClosureReason_funding_timed_out();
	// struct LDKClosureReason ClosureReason_processing_error(struct LDKStr err);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_processing_error")] public static extern long ClosureReason_processing_error(long _err);
	// struct LDKClosureReason ClosureReason_disconnected_peer(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_disconnected_peer")] public static extern long ClosureReason_disconnected_peer();
	// struct LDKClosureReason ClosureReason_outdated_channel_manager(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_outdated_channel_manager")] public static extern long ClosureReason_outdated_channel_manager();
	// struct LDKClosureReason ClosureReason_counterparty_coop_closed_unfunded_channel(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_counterparty_coop_closed_unfunded_channel")] public static extern long ClosureReason_counterparty_coop_closed_unfunded_channel();
	// struct LDKClosureReason ClosureReason_funding_batch_closure(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_funding_batch_closure")] public static extern long ClosureReason_funding_batch_closure();
	// struct LDKClosureReason ClosureReason_htlcs_timed_out(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_htlcs_timed_out")] public static extern long ClosureReason_htlcs_timed_out();
	// struct LDKClosureReason ClosureReason_peer_feerate_too_low(uint32_t peer_feerate_sat_per_kw, uint32_t required_feerate_sat_per_kw);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_peer_feerate_too_low")] public static extern long ClosureReason_peer_feerate_too_low(int _peer_feerate_sat_per_kw, int _required_feerate_sat_per_kw);
	// bool ClosureReason_eq(const struct LDKClosureReason *NONNULL_PTR a, const struct LDKClosureReason *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_eq")] public static extern bool ClosureReason_eq(long _a, long _b);
	// struct LDKStr ClosureReason_to_str(const struct LDKClosureReason *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_to_str")] public static extern long ClosureReason_to_str(long _o);
	// struct LDKCVec_u8Z ClosureReason_write(const struct LDKClosureReason *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_write")] public static extern long ClosureReason_write(long _obj);
	// struct LDKCResult_COption_ClosureReasonZDecodeErrorZ ClosureReason_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ClosureReason_read")] public static extern long ClosureReason_read(long _ser);
	// void HTLCDestination_free(struct LDKHTLCDestination this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_free")] public static extern void HTLCDestination_free(long _this_ptr);
	// uint64_t HTLCDestination_clone_ptr(LDKHTLCDestination *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_clone_ptr")] public static extern long HTLCDestination_clone_ptr(long _arg);
	// struct LDKHTLCDestination HTLCDestination_clone(const struct LDKHTLCDestination *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_clone")] public static extern long HTLCDestination_clone(long _orig);
	// struct LDKHTLCDestination HTLCDestination_next_hop_channel(struct LDKPublicKey node_id, struct LDKChannelId channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_next_hop_channel")] public static extern long HTLCDestination_next_hop_channel(long _node_id, long _channel_id);
	// struct LDKHTLCDestination HTLCDestination_unknown_next_hop(uint64_t requested_forward_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_unknown_next_hop")] public static extern long HTLCDestination_unknown_next_hop(long _requested_forward_scid);
	// struct LDKHTLCDestination HTLCDestination_invalid_forward(uint64_t requested_forward_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_invalid_forward")] public static extern long HTLCDestination_invalid_forward(long _requested_forward_scid);
	// struct LDKHTLCDestination HTLCDestination_invalid_onion(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_invalid_onion")] public static extern long HTLCDestination_invalid_onion();
	// struct LDKHTLCDestination HTLCDestination_failed_payment(struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_failed_payment")] public static extern long HTLCDestination_failed_payment(long _payment_hash);
	// bool HTLCDestination_eq(const struct LDKHTLCDestination *NONNULL_PTR a, const struct LDKHTLCDestination *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_eq")] public static extern bool HTLCDestination_eq(long _a, long _b);
	// struct LDKCVec_u8Z HTLCDestination_write(const struct LDKHTLCDestination *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_write")] public static extern long HTLCDestination_write(long _obj);
	// struct LDKCResult_COption_HTLCDestinationZDecodeErrorZ HTLCDestination_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_HTLCDestination_read")] public static extern long HTLCDestination_read(long _ser);
	// enum LDKPaymentFailureReason PaymentFailureReason_clone(const enum LDKPaymentFailureReason *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_clone")] public static extern PaymentFailureReason PaymentFailureReason_clone(long _orig);
	// enum LDKPaymentFailureReason PaymentFailureReason_recipient_rejected(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_recipient_rejected")] public static extern PaymentFailureReason PaymentFailureReason_recipient_rejected();
	// enum LDKPaymentFailureReason PaymentFailureReason_user_abandoned(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_user_abandoned")] public static extern PaymentFailureReason PaymentFailureReason_user_abandoned();
	// enum LDKPaymentFailureReason PaymentFailureReason_retries_exhausted(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_retries_exhausted")] public static extern PaymentFailureReason PaymentFailureReason_retries_exhausted();
	// enum LDKPaymentFailureReason PaymentFailureReason_payment_expired(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_payment_expired")] public static extern PaymentFailureReason PaymentFailureReason_payment_expired();
	// enum LDKPaymentFailureReason PaymentFailureReason_route_not_found(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_route_not_found")] public static extern PaymentFailureReason PaymentFailureReason_route_not_found();
	// enum LDKPaymentFailureReason PaymentFailureReason_unexpected_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_unexpected_error")] public static extern PaymentFailureReason PaymentFailureReason_unexpected_error();
	// enum LDKPaymentFailureReason PaymentFailureReason_unknown_required_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_unknown_required_features")] public static extern PaymentFailureReason PaymentFailureReason_unknown_required_features();
	// enum LDKPaymentFailureReason PaymentFailureReason_invoice_request_expired(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_invoice_request_expired")] public static extern PaymentFailureReason PaymentFailureReason_invoice_request_expired();
	// enum LDKPaymentFailureReason PaymentFailureReason_invoice_request_rejected(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_invoice_request_rejected")] public static extern PaymentFailureReason PaymentFailureReason_invoice_request_rejected();
	// enum LDKPaymentFailureReason PaymentFailureReason_blinded_path_creation_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_blinded_path_creation_failed")] public static extern PaymentFailureReason PaymentFailureReason_blinded_path_creation_failed();
	// bool PaymentFailureReason_eq(const enum LDKPaymentFailureReason *NONNULL_PTR a, const enum LDKPaymentFailureReason *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_eq")] public static extern bool PaymentFailureReason_eq(long _a, long _b);
	// struct LDKCVec_u8Z PaymentFailureReason_write(const enum LDKPaymentFailureReason *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_write")] public static extern long PaymentFailureReason_write(long _obj);
	// struct LDKCResult_COption_PaymentFailureReasonZDecodeErrorZ PaymentFailureReason_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PaymentFailureReason_read")] public static extern long PaymentFailureReason_read(long _ser);
	// void InboundChannelFunds_free(struct LDKInboundChannelFunds this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundChannelFunds_free")] public static extern void InboundChannelFunds_free(long _this_ptr);
	// uint64_t InboundChannelFunds_clone_ptr(LDKInboundChannelFunds *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundChannelFunds_clone_ptr")] public static extern long InboundChannelFunds_clone_ptr(long _arg);
	// struct LDKInboundChannelFunds InboundChannelFunds_clone(const struct LDKInboundChannelFunds *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundChannelFunds_clone")] public static extern long InboundChannelFunds_clone(long _orig);
	// struct LDKInboundChannelFunds InboundChannelFunds_push_msat(uint64_t a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundChannelFunds_push_msat")] public static extern long InboundChannelFunds_push_msat(long _a);
	// struct LDKInboundChannelFunds InboundChannelFunds_dual_funded(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundChannelFunds_dual_funded")] public static extern long InboundChannelFunds_dual_funded();
	// bool InboundChannelFunds_eq(const struct LDKInboundChannelFunds *NONNULL_PTR a, const struct LDKInboundChannelFunds *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InboundChannelFunds_eq")] public static extern bool InboundChannelFunds_eq(long _a, long _b);
	// void Event_free(struct LDKEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_free")] public static extern void Event_free(long _this_ptr);
	// uint64_t Event_clone_ptr(LDKEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_clone_ptr")] public static extern long Event_clone_ptr(long _arg);
	// struct LDKEvent Event_clone(const struct LDKEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_clone")] public static extern long Event_clone(long _orig);
	// struct LDKEvent Event_funding_generation_ready(struct LDKChannelId temporary_channel_id, struct LDKPublicKey counterparty_node_id, uint64_t channel_value_satoshis, struct LDKCVec_u8Z output_script, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_funding_generation_ready")] public static extern long Event_funding_generation_ready(long _temporary_channel_id, long _counterparty_node_id, long _channel_value_satoshis, long _output_script, long _user_channel_id);
	// struct LDKEvent Event_funding_tx_broadcast_safe(struct LDKChannelId channel_id, struct LDKU128 user_channel_id, struct LDKOutPoint funding_txo, struct LDKPublicKey counterparty_node_id, struct LDKChannelId former_temporary_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_funding_tx_broadcast_safe")] public static extern long Event_funding_tx_broadcast_safe(long _channel_id, long _user_channel_id, long _funding_txo, long _counterparty_node_id, long _former_temporary_channel_id);
	// struct LDKEvent Event_payment_claimable(struct LDKPublicKey receiver_node_id, struct LDKThirtyTwoBytes payment_hash, struct LDKRecipientOnionFields onion_fields, uint64_t amount_msat, uint64_t counterparty_skimmed_fee_msat, struct LDKPaymentPurpose purpose, struct LDKChannelId via_channel_id, struct LDKCOption_U128Z via_user_channel_id, struct LDKCOption_u32Z claim_deadline, struct LDKCOption_ThirtyTwoBytesZ payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_claimable")] public static extern long Event_payment_claimable(long _receiver_node_id, long _payment_hash, long _onion_fields, long _amount_msat, long _counterparty_skimmed_fee_msat, long _purpose, long _via_channel_id, long _via_user_channel_id, long _claim_deadline, long _payment_id);
	// struct LDKEvent Event_payment_claimed(struct LDKPublicKey receiver_node_id, struct LDKThirtyTwoBytes payment_hash, uint64_t amount_msat, struct LDKPaymentPurpose purpose, struct LDKCVec_ClaimedHTLCZ htlcs, struct LDKCOption_u64Z sender_intended_total_msat, struct LDKRecipientOnionFields onion_fields, struct LDKCOption_ThirtyTwoBytesZ payment_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_claimed")] public static extern long Event_payment_claimed(long _receiver_node_id, long _payment_hash, long _amount_msat, long _purpose, long _htlcs, long _sender_intended_total_msat, long _onion_fields, long _payment_id);
	// struct LDKEvent Event_connection_needed(struct LDKPublicKey node_id, struct LDKCVec_SocketAddressZ addresses);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_connection_needed")] public static extern long Event_connection_needed(long _node_id, long _addresses);
	// struct LDKEvent Event_invoice_received(struct LDKThirtyTwoBytes payment_id, struct LDKBolt12Invoice invoice, struct LDKCOption_OffersContextZ context, struct LDKResponder responder);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_invoice_received")] public static extern long Event_invoice_received(long _payment_id, long _invoice, long _context, long _responder);
	// struct LDKEvent Event_payment_sent(struct LDKCOption_ThirtyTwoBytesZ payment_id, struct LDKThirtyTwoBytes payment_preimage, struct LDKThirtyTwoBytes payment_hash, struct LDKCOption_u64Z fee_paid_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_sent")] public static extern long Event_payment_sent(long _payment_id, long _payment_preimage, long _payment_hash, long _fee_paid_msat);
	// struct LDKEvent Event_payment_failed(struct LDKThirtyTwoBytes payment_id, struct LDKCOption_ThirtyTwoBytesZ payment_hash, struct LDKCOption_PaymentFailureReasonZ reason);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_failed")] public static extern long Event_payment_failed(long _payment_id, long _payment_hash, long _reason);
	// struct LDKEvent Event_payment_path_successful(struct LDKThirtyTwoBytes payment_id, struct LDKCOption_ThirtyTwoBytesZ payment_hash, struct LDKPath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_path_successful")] public static extern long Event_payment_path_successful(long _payment_id, long _payment_hash, long _path);
	// struct LDKEvent Event_payment_path_failed(struct LDKCOption_ThirtyTwoBytesZ payment_id, struct LDKThirtyTwoBytes payment_hash, bool payment_failed_permanently, struct LDKPathFailure failure, struct LDKPath path, struct LDKCOption_u64Z short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_path_failed")] public static extern long Event_payment_path_failed(long _payment_id, long _payment_hash, bool _payment_failed_permanently, long _failure, long _path, long _short_channel_id);
	// struct LDKEvent Event_probe_successful(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKPath path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_probe_successful")] public static extern long Event_probe_successful(long _payment_id, long _payment_hash, long _path);
	// struct LDKEvent Event_probe_failed(struct LDKThirtyTwoBytes payment_id, struct LDKThirtyTwoBytes payment_hash, struct LDKPath path, struct LDKCOption_u64Z short_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_probe_failed")] public static extern long Event_probe_failed(long _payment_id, long _payment_hash, long _path, long _short_channel_id);
	// struct LDKEvent Event_pending_htlcs_forwardable(uint64_t time_forwardable);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_pending_htlcs_forwardable")] public static extern long Event_pending_htlcs_forwardable(long _time_forwardable);
	// struct LDKEvent Event_htlcintercepted(struct LDKThirtyTwoBytes intercept_id, uint64_t requested_next_hop_scid, struct LDKThirtyTwoBytes payment_hash, uint64_t inbound_amount_msat, uint64_t expected_outbound_amount_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_htlcintercepted")] public static extern long Event_htlcintercepted(long _intercept_id, long _requested_next_hop_scid, long _payment_hash, long _inbound_amount_msat, long _expected_outbound_amount_msat);
	// struct LDKEvent Event_spendable_outputs(struct LDKCVec_SpendableOutputDescriptorZ outputs, struct LDKChannelId channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_spendable_outputs")] public static extern long Event_spendable_outputs(long _outputs, long _channel_id);
	// struct LDKEvent Event_payment_forwarded(struct LDKChannelId prev_channel_id, struct LDKChannelId next_channel_id, struct LDKCOption_U128Z prev_user_channel_id, struct LDKCOption_U128Z next_user_channel_id, struct LDKPublicKey prev_node_id, struct LDKPublicKey next_node_id, struct LDKCOption_u64Z total_fee_earned_msat, struct LDKCOption_u64Z skimmed_fee_msat, bool claim_from_onchain_tx, struct LDKCOption_u64Z outbound_amount_forwarded_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_payment_forwarded")] public static extern long Event_payment_forwarded(long _prev_channel_id, long _next_channel_id, long _prev_user_channel_id, long _next_user_channel_id, long _prev_node_id, long _next_node_id, long _total_fee_earned_msat, long _skimmed_fee_msat, bool _claim_from_onchain_tx, long _outbound_amount_forwarded_msat);
	// struct LDKEvent Event_channel_pending(struct LDKChannelId channel_id, struct LDKU128 user_channel_id, struct LDKChannelId former_temporary_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKOutPoint funding_txo, struct LDKChannelTypeFeatures channel_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_pending")] public static extern long Event_channel_pending(long _channel_id, long _user_channel_id, long _former_temporary_channel_id, long _counterparty_node_id, long _funding_txo, long _channel_type);
	// struct LDKEvent Event_channel_ready(struct LDKChannelId channel_id, struct LDKU128 user_channel_id, struct LDKPublicKey counterparty_node_id, struct LDKChannelTypeFeatures channel_type);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_ready")] public static extern long Event_channel_ready(long _channel_id, long _user_channel_id, long _counterparty_node_id, long _channel_type);
	// struct LDKEvent Event_channel_closed(struct LDKChannelId channel_id, struct LDKU128 user_channel_id, struct LDKClosureReason reason, struct LDKPublicKey counterparty_node_id, struct LDKCOption_u64Z channel_capacity_sats, struct LDKOutPoint channel_funding_txo, struct LDKCOption_u64Z last_local_balance_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_channel_closed")] public static extern long Event_channel_closed(long _channel_id, long _user_channel_id, long _reason, long _counterparty_node_id, long _channel_capacity_sats, long _channel_funding_txo, long _last_local_balance_msat);
	// struct LDKEvent Event_discard_funding(struct LDKChannelId channel_id, struct LDKFundingInfo funding_info);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_discard_funding")] public static extern long Event_discard_funding(long _channel_id, long _funding_info);
	// struct LDKEvent Event_open_channel_request(struct LDKChannelId temporary_channel_id, struct LDKPublicKey counterparty_node_id, uint64_t funding_satoshis, struct LDKInboundChannelFunds channel_negotiation_type, struct LDKChannelTypeFeatures channel_type, bool is_announced, struct LDKChannelParameters params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_open_channel_request")] public static extern long Event_open_channel_request(long _temporary_channel_id, long _counterparty_node_id, long _funding_satoshis, long _channel_negotiation_type, long _channel_type, bool _is_announced, long _params);
	// struct LDKEvent Event_htlchandling_failed(struct LDKChannelId prev_channel_id, struct LDKHTLCDestination failed_next_destination);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_htlchandling_failed")] public static extern long Event_htlchandling_failed(long _prev_channel_id, long _failed_next_destination);
	// struct LDKEvent Event_bump_transaction(struct LDKBumpTransactionEvent a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_bump_transaction")] public static extern long Event_bump_transaction(long _a);
	// struct LDKEvent Event_onion_message_intercepted(struct LDKPublicKey peer_node_id, struct LDKOnionMessage message);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_onion_message_intercepted")] public static extern long Event_onion_message_intercepted(long _peer_node_id, long _message);
	// struct LDKEvent Event_onion_message_peer_connected(struct LDKPublicKey peer_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_onion_message_peer_connected")] public static extern long Event_onion_message_peer_connected(long _peer_node_id);
	// bool Event_eq(const struct LDKEvent *NONNULL_PTR a, const struct LDKEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_eq")] public static extern bool Event_eq(long _a, long _b);
	// struct LDKCVec_u8Z Event_write(const struct LDKEvent *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_write")] public static extern long Event_write(long _obj);
	// struct LDKCResult_COption_EventZDecodeErrorZ Event_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Event_read")] public static extern long Event_read(long _ser);
	// void MessageSendEvent_free(struct LDKMessageSendEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_free")] public static extern void MessageSendEvent_free(long _this_ptr);
	// uint64_t MessageSendEvent_clone_ptr(LDKMessageSendEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_clone_ptr")] public static extern long MessageSendEvent_clone_ptr(long _arg);
	// struct LDKMessageSendEvent MessageSendEvent_clone(const struct LDKMessageSendEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_clone")] public static extern long MessageSendEvent_clone(long _orig);
	// struct LDKMessageSendEvent MessageSendEvent_send_accept_channel(struct LDKPublicKey node_id, struct LDKAcceptChannel msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_accept_channel")] public static extern long MessageSendEvent_send_accept_channel(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_accept_channel_v2(struct LDKPublicKey node_id, struct LDKAcceptChannelV2 msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_accept_channel_v2")] public static extern long MessageSendEvent_send_accept_channel_v2(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_open_channel(struct LDKPublicKey node_id, struct LDKOpenChannel msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_open_channel")] public static extern long MessageSendEvent_send_open_channel(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_open_channel_v2(struct LDKPublicKey node_id, struct LDKOpenChannelV2 msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_open_channel_v2")] public static extern long MessageSendEvent_send_open_channel_v2(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_funding_created(struct LDKPublicKey node_id, struct LDKFundingCreated msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_funding_created")] public static extern long MessageSendEvent_send_funding_created(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_funding_signed(struct LDKPublicKey node_id, struct LDKFundingSigned msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_funding_signed")] public static extern long MessageSendEvent_send_funding_signed(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_stfu(struct LDKPublicKey node_id, struct LDKStfu msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_stfu")] public static extern long MessageSendEvent_send_stfu(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_splice_init(struct LDKPublicKey node_id, struct LDKSpliceInit msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_splice_init")] public static extern long MessageSendEvent_send_splice_init(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_splice_ack(struct LDKPublicKey node_id, struct LDKSpliceAck msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_splice_ack")] public static extern long MessageSendEvent_send_splice_ack(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_splice_locked(struct LDKPublicKey node_id, struct LDKSpliceLocked msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_splice_locked")] public static extern long MessageSendEvent_send_splice_locked(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_add_input(struct LDKPublicKey node_id, struct LDKTxAddInput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_add_input")] public static extern long MessageSendEvent_send_tx_add_input(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_add_output(struct LDKPublicKey node_id, struct LDKTxAddOutput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_add_output")] public static extern long MessageSendEvent_send_tx_add_output(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_remove_input(struct LDKPublicKey node_id, struct LDKTxRemoveInput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_remove_input")] public static extern long MessageSendEvent_send_tx_remove_input(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_remove_output(struct LDKPublicKey node_id, struct LDKTxRemoveOutput msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_remove_output")] public static extern long MessageSendEvent_send_tx_remove_output(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_complete(struct LDKPublicKey node_id, struct LDKTxComplete msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_complete")] public static extern long MessageSendEvent_send_tx_complete(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_signatures(struct LDKPublicKey node_id, struct LDKTxSignatures msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_signatures")] public static extern long MessageSendEvent_send_tx_signatures(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_init_rbf(struct LDKPublicKey node_id, struct LDKTxInitRbf msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_init_rbf")] public static extern long MessageSendEvent_send_tx_init_rbf(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_ack_rbf(struct LDKPublicKey node_id, struct LDKTxAckRbf msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_ack_rbf")] public static extern long MessageSendEvent_send_tx_ack_rbf(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_tx_abort(struct LDKPublicKey node_id, struct LDKTxAbort msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_tx_abort")] public static extern long MessageSendEvent_send_tx_abort(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_ready(struct LDKPublicKey node_id, struct LDKChannelReady msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_ready")] public static extern long MessageSendEvent_send_channel_ready(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_announcement_signatures(struct LDKPublicKey node_id, struct LDKAnnouncementSignatures msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_announcement_signatures")] public static extern long MessageSendEvent_send_announcement_signatures(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_update_htlcs(struct LDKPublicKey node_id, struct LDKCommitmentUpdate updates);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_update_htlcs")] public static extern long MessageSendEvent_update_htlcs(long _node_id, long _updates);
	// struct LDKMessageSendEvent MessageSendEvent_send_revoke_and_ack(struct LDKPublicKey node_id, struct LDKRevokeAndACK msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_revoke_and_ack")] public static extern long MessageSendEvent_send_revoke_and_ack(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_closing_signed(struct LDKPublicKey node_id, struct LDKClosingSigned msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_closing_signed")] public static extern long MessageSendEvent_send_closing_signed(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_shutdown(struct LDKPublicKey node_id, struct LDKShutdown msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_shutdown")] public static extern long MessageSendEvent_send_shutdown(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_reestablish(struct LDKPublicKey node_id, struct LDKChannelReestablish msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_reestablish")] public static extern long MessageSendEvent_send_channel_reestablish(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_announcement(struct LDKPublicKey node_id, struct LDKChannelAnnouncement msg, struct LDKChannelUpdate update_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_announcement")] public static extern long MessageSendEvent_send_channel_announcement(long _node_id, long _msg, long _update_msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_channel_announcement(struct LDKChannelAnnouncement msg, struct LDKChannelUpdate update_msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_channel_announcement")] public static extern long MessageSendEvent_broadcast_channel_announcement(long _msg, long _update_msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_channel_update(struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_channel_update")] public static extern long MessageSendEvent_broadcast_channel_update(long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_broadcast_node_announcement(struct LDKNodeAnnouncement msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_broadcast_node_announcement")] public static extern long MessageSendEvent_broadcast_node_announcement(long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_update(struct LDKPublicKey node_id, struct LDKChannelUpdate msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_update")] public static extern long MessageSendEvent_send_channel_update(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_handle_error(struct LDKPublicKey node_id, struct LDKErrorAction action);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_handle_error")] public static extern long MessageSendEvent_handle_error(long _node_id, long _action);
	// struct LDKMessageSendEvent MessageSendEvent_send_channel_range_query(struct LDKPublicKey node_id, struct LDKQueryChannelRange msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_channel_range_query")] public static extern long MessageSendEvent_send_channel_range_query(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_short_ids_query(struct LDKPublicKey node_id, struct LDKQueryShortChannelIds msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_short_ids_query")] public static extern long MessageSendEvent_send_short_ids_query(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_reply_channel_range(struct LDKPublicKey node_id, struct LDKReplyChannelRange msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_reply_channel_range")] public static extern long MessageSendEvent_send_reply_channel_range(long _node_id, long _msg);
	// struct LDKMessageSendEvent MessageSendEvent_send_gossip_timestamp_filter(struct LDKPublicKey node_id, struct LDKGossipTimestampFilter msg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEvent_send_gossip_timestamp_filter")] public static extern long MessageSendEvent_send_gossip_timestamp_filter(long _node_id, long _msg);
	// void MessageSendEventsProvider_free(struct LDKMessageSendEventsProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageSendEventsProvider_free")] public static extern void MessageSendEventsProvider_free(long _this_ptr);
	// void EventsProvider_free(struct LDKEventsProvider this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventsProvider_free")] public static extern void EventsProvider_free(long _this_ptr);
	// void ReplayEvent_free(struct LDKReplayEvent this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplayEvent_free")] public static extern void ReplayEvent_free(long _this_obj);
	// MUST_USE_RES struct LDKReplayEvent ReplayEvent_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplayEvent_new")] public static extern long ReplayEvent_new();
	// uint64_t ReplayEvent_clone_ptr(LDKReplayEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplayEvent_clone_ptr")] public static extern long ReplayEvent_clone_ptr(long _arg);
	// struct LDKReplayEvent ReplayEvent_clone(const struct LDKReplayEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ReplayEvent_clone")] public static extern long ReplayEvent_clone(long _orig);
	// void EventHandler_free(struct LDKEventHandler this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_EventHandler_free")] public static extern void EventHandler_free(long _this_ptr);
	// void AnchorDescriptor_free(struct LDKAnchorDescriptor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_free")] public static extern void AnchorDescriptor_free(long _this_obj);
	// struct LDKChannelDerivationParameters AnchorDescriptor_get_channel_derivation_parameters(const struct LDKAnchorDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_get_channel_derivation_parameters")] public static extern long AnchorDescriptor_get_channel_derivation_parameters(long _this_ptr);
	// void AnchorDescriptor_set_channel_derivation_parameters(struct LDKAnchorDescriptor *NONNULL_PTR this_ptr, struct LDKChannelDerivationParameters val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_set_channel_derivation_parameters")] public static extern void AnchorDescriptor_set_channel_derivation_parameters(long _this_ptr, long _val);
	// struct LDKOutPoint AnchorDescriptor_get_outpoint(const struct LDKAnchorDescriptor *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_get_outpoint")] public static extern long AnchorDescriptor_get_outpoint(long _this_ptr);
	// void AnchorDescriptor_set_outpoint(struct LDKAnchorDescriptor *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_set_outpoint")] public static extern void AnchorDescriptor_set_outpoint(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKAnchorDescriptor AnchorDescriptor_new(struct LDKChannelDerivationParameters channel_derivation_parameters_arg, struct LDKOutPoint outpoint_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_new")] public static extern long AnchorDescriptor_new(long _channel_derivation_parameters_arg, long _outpoint_arg);
	// uint64_t AnchorDescriptor_clone_ptr(LDKAnchorDescriptor *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_clone_ptr")] public static extern long AnchorDescriptor_clone_ptr(long _arg);
	// struct LDKAnchorDescriptor AnchorDescriptor_clone(const struct LDKAnchorDescriptor *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_clone")] public static extern long AnchorDescriptor_clone(long _orig);
	// bool AnchorDescriptor_eq(const struct LDKAnchorDescriptor *NONNULL_PTR a, const struct LDKAnchorDescriptor *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_eq")] public static extern bool AnchorDescriptor_eq(long _a, long _b);
	// MUST_USE_RES struct LDKTxOut AnchorDescriptor_previous_utxo(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_previous_utxo")] public static extern long AnchorDescriptor_previous_utxo(long _this_arg);
	// MUST_USE_RES struct LDKTxIn AnchorDescriptor_unsigned_tx_input(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_unsigned_tx_input")] public static extern long AnchorDescriptor_unsigned_tx_input(long _this_arg);
	// MUST_USE_RES struct LDKCVec_u8Z AnchorDescriptor_witness_script(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_witness_script")] public static extern long AnchorDescriptor_witness_script(long _this_arg);
	// MUST_USE_RES struct LDKWitness AnchorDescriptor_tx_input_witness(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg, struct LDKECDSASignature signature);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_tx_input_witness")] public static extern long AnchorDescriptor_tx_input_witness(long _this_arg, long _signature);
	// MUST_USE_RES struct LDKEcdsaChannelSigner AnchorDescriptor_derive_channel_signer(const struct LDKAnchorDescriptor *NONNULL_PTR this_arg, const struct LDKSignerProvider *NONNULL_PTR signer_provider);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_AnchorDescriptor_derive_channel_signer")] public static extern long AnchorDescriptor_derive_channel_signer(long _this_arg, long _signer_provider);
	// void BumpTransactionEvent_free(struct LDKBumpTransactionEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_free")] public static extern void BumpTransactionEvent_free(long _this_ptr);
	// uint64_t BumpTransactionEvent_clone_ptr(LDKBumpTransactionEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_clone_ptr")] public static extern long BumpTransactionEvent_clone_ptr(long _arg);
	// struct LDKBumpTransactionEvent BumpTransactionEvent_clone(const struct LDKBumpTransactionEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_clone")] public static extern long BumpTransactionEvent_clone(long _orig);
	// struct LDKBumpTransactionEvent BumpTransactionEvent_channel_close(struct LDKChannelId channel_id, struct LDKPublicKey counterparty_node_id, struct LDKThirtyTwoBytes claim_id, uint32_t package_target_feerate_sat_per_1000_weight, struct LDKTransaction commitment_tx, uint64_t commitment_tx_fee_satoshis, struct LDKAnchorDescriptor anchor_descriptor, struct LDKCVec_HTLCOutputInCommitmentZ pending_htlcs);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_channel_close")] public static extern long BumpTransactionEvent_channel_close(long _channel_id, long _counterparty_node_id, long _claim_id, int _package_target_feerate_sat_per_1000_weight, long _commitment_tx, long _commitment_tx_fee_satoshis, long _anchor_descriptor, long _pending_htlcs);
	// struct LDKBumpTransactionEvent BumpTransactionEvent_htlcresolution(struct LDKChannelId channel_id, struct LDKPublicKey counterparty_node_id, struct LDKThirtyTwoBytes claim_id, uint32_t target_feerate_sat_per_1000_weight, struct LDKCVec_HTLCDescriptorZ htlc_descriptors, uint32_t tx_lock_time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_htlcresolution")] public static extern long BumpTransactionEvent_htlcresolution(long _channel_id, long _counterparty_node_id, long _claim_id, int _target_feerate_sat_per_1000_weight, long _htlc_descriptors, int _tx_lock_time);
	// bool BumpTransactionEvent_eq(const struct LDKBumpTransactionEvent *NONNULL_PTR a, const struct LDKBumpTransactionEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEvent_eq")] public static extern bool BumpTransactionEvent_eq(long _a, long _b);
	// void Input_free(struct LDKInput this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_free")] public static extern void Input_free(long _this_obj);
	// struct LDKOutPoint Input_get_outpoint(const struct LDKInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_get_outpoint")] public static extern long Input_get_outpoint(long _this_ptr);
	// void Input_set_outpoint(struct LDKInput *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_set_outpoint")] public static extern void Input_set_outpoint(long _this_ptr, long _val);
	// struct LDKTxOut Input_get_previous_utxo(const struct LDKInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_get_previous_utxo")] public static extern long Input_get_previous_utxo(long _this_ptr);
	// void Input_set_previous_utxo(struct LDKInput *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_set_previous_utxo")] public static extern void Input_set_previous_utxo(long _this_ptr, long _val);
	// uint64_t Input_get_satisfaction_weight(const struct LDKInput *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_get_satisfaction_weight")] public static extern long Input_get_satisfaction_weight(long _this_ptr);
	// void Input_set_satisfaction_weight(struct LDKInput *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_set_satisfaction_weight")] public static extern void Input_set_satisfaction_weight(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKInput Input_new(struct LDKOutPoint outpoint_arg, struct LDKTxOut previous_utxo_arg, uint64_t satisfaction_weight_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_new")] public static extern long Input_new(long _outpoint_arg, long _previous_utxo_arg, long _satisfaction_weight_arg);
	// uint64_t Input_clone_ptr(LDKInput *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_clone_ptr")] public static extern long Input_clone_ptr(long _arg);
	// struct LDKInput Input_clone(const struct LDKInput *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_clone")] public static extern long Input_clone(long _orig);
	// uint64_t Input_hash(const struct LDKInput *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_hash")] public static extern long Input_hash(long _o);
	// bool Input_eq(const struct LDKInput *NONNULL_PTR a, const struct LDKInput *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Input_eq")] public static extern bool Input_eq(long _a, long _b);
	// void Utxo_free(struct LDKUtxo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_free")] public static extern void Utxo_free(long _this_obj);
	// struct LDKOutPoint Utxo_get_outpoint(const struct LDKUtxo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_get_outpoint")] public static extern long Utxo_get_outpoint(long _this_ptr);
	// void Utxo_set_outpoint(struct LDKUtxo *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_set_outpoint")] public static extern void Utxo_set_outpoint(long _this_ptr, long _val);
	// struct LDKTxOut Utxo_get_output(const struct LDKUtxo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_get_output")] public static extern long Utxo_get_output(long _this_ptr);
	// void Utxo_set_output(struct LDKUtxo *NONNULL_PTR this_ptr, struct LDKTxOut val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_set_output")] public static extern void Utxo_set_output(long _this_ptr, long _val);
	// uint64_t Utxo_get_satisfaction_weight(const struct LDKUtxo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_get_satisfaction_weight")] public static extern long Utxo_get_satisfaction_weight(long _this_ptr);
	// void Utxo_set_satisfaction_weight(struct LDKUtxo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_set_satisfaction_weight")] public static extern void Utxo_set_satisfaction_weight(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUtxo Utxo_new(struct LDKOutPoint outpoint_arg, struct LDKTxOut output_arg, uint64_t satisfaction_weight_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_new")] public static extern long Utxo_new(long _outpoint_arg, long _output_arg, long _satisfaction_weight_arg);
	// uint64_t Utxo_clone_ptr(LDKUtxo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_clone_ptr")] public static extern long Utxo_clone_ptr(long _arg);
	// struct LDKUtxo Utxo_clone(const struct LDKUtxo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_clone")] public static extern long Utxo_clone(long _orig);
	// uint64_t Utxo_hash(const struct LDKUtxo *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_hash")] public static extern long Utxo_hash(long _o);
	// bool Utxo_eq(const struct LDKUtxo *NONNULL_PTR a, const struct LDKUtxo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_eq")] public static extern bool Utxo_eq(long _a, long _b);
	// MUST_USE_RES struct LDKUtxo Utxo_new_p2pkh(struct LDKOutPoint outpoint, uint64_t value, const uint8_t (*pubkey_hash)[20]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Utxo_new_p2pkh")] public static extern long Utxo_new_p2pkh(long _outpoint, long _value, long _pubkey_hash);
	// void CoinSelection_free(struct LDKCoinSelection this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_free")] public static extern void CoinSelection_free(long _this_obj);
	// struct LDKCVec_UtxoZ CoinSelection_get_confirmed_utxos(const struct LDKCoinSelection *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_get_confirmed_utxos")] public static extern long CoinSelection_get_confirmed_utxos(long _this_ptr);
	// void CoinSelection_set_confirmed_utxos(struct LDKCoinSelection *NONNULL_PTR this_ptr, struct LDKCVec_UtxoZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_set_confirmed_utxos")] public static extern void CoinSelection_set_confirmed_utxos(long _this_ptr, long _val);
	// struct LDKCOption_TxOutZ CoinSelection_get_change_output(const struct LDKCoinSelection *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_get_change_output")] public static extern long CoinSelection_get_change_output(long _this_ptr);
	// void CoinSelection_set_change_output(struct LDKCoinSelection *NONNULL_PTR this_ptr, struct LDKCOption_TxOutZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_set_change_output")] public static extern void CoinSelection_set_change_output(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKCoinSelection CoinSelection_new(struct LDKCVec_UtxoZ confirmed_utxos_arg, struct LDKCOption_TxOutZ change_output_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_new")] public static extern long CoinSelection_new(long _confirmed_utxos_arg, long _change_output_arg);
	// uint64_t CoinSelection_clone_ptr(LDKCoinSelection *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_clone_ptr")] public static extern long CoinSelection_clone_ptr(long _arg);
	// struct LDKCoinSelection CoinSelection_clone(const struct LDKCoinSelection *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelection_clone")] public static extern long CoinSelection_clone(long _orig);
	// void CoinSelectionSource_free(struct LDKCoinSelectionSource this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CoinSelectionSource_free")] public static extern void CoinSelectionSource_free(long _this_ptr);
	// void WalletSource_free(struct LDKWalletSource this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_WalletSource_free")] public static extern void WalletSource_free(long _this_ptr);
	// void Wallet_free(struct LDKWallet this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Wallet_free")] public static extern void Wallet_free(long _this_obj);
	// MUST_USE_RES struct LDKWallet Wallet_new(struct LDKWalletSource source, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Wallet_new")] public static extern long Wallet_new(long _source, long _logger);
	// struct LDKCoinSelectionSource Wallet_as_CoinSelectionSource(const struct LDKWallet *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Wallet_as_CoinSelectionSource")] public static extern long Wallet_as_CoinSelectionSource(long _this_arg);
	// void BumpTransactionEventHandler_free(struct LDKBumpTransactionEventHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEventHandler_free")] public static extern void BumpTransactionEventHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKBumpTransactionEventHandler BumpTransactionEventHandler_new(struct LDKBroadcasterInterface broadcaster, struct LDKCoinSelectionSource utxo_source, struct LDKSignerProvider signer_provider, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEventHandler_new")] public static extern long BumpTransactionEventHandler_new(long _broadcaster, long _utxo_source, long _signer_provider, long _logger);
	// void BumpTransactionEventHandler_handle_event(const struct LDKBumpTransactionEventHandler *NONNULL_PTR this_arg, const struct LDKBumpTransactionEvent *NONNULL_PTR event);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BumpTransactionEventHandler_handle_event")] public static extern void BumpTransactionEventHandler_handle_event(long _this_arg, long _event);
	// bool InitFeatures_eq(const struct LDKInitFeatures *NONNULL_PTR a, const struct LDKInitFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_eq")] public static extern bool InitFeatures_eq(long _a, long _b);
	// bool NodeFeatures_eq(const struct LDKNodeFeatures *NONNULL_PTR a, const struct LDKNodeFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_eq")] public static extern bool NodeFeatures_eq(long _a, long _b);
	// bool ChannelFeatures_eq(const struct LDKChannelFeatures *NONNULL_PTR a, const struct LDKChannelFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_eq")] public static extern bool ChannelFeatures_eq(long _a, long _b);
	// bool Bolt11InvoiceFeatures_eq(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR a, const struct LDKBolt11InvoiceFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_eq")] public static extern bool Bolt11InvoiceFeatures_eq(long _a, long _b);
	// bool OfferFeatures_eq(const struct LDKOfferFeatures *NONNULL_PTR a, const struct LDKOfferFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_eq")] public static extern bool OfferFeatures_eq(long _a, long _b);
	// bool InvoiceRequestFeatures_eq(const struct LDKInvoiceRequestFeatures *NONNULL_PTR a, const struct LDKInvoiceRequestFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_eq")] public static extern bool InvoiceRequestFeatures_eq(long _a, long _b);
	// bool Bolt12InvoiceFeatures_eq(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR a, const struct LDKBolt12InvoiceFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_eq")] public static extern bool Bolt12InvoiceFeatures_eq(long _a, long _b);
	// bool BlindedHopFeatures_eq(const struct LDKBlindedHopFeatures *NONNULL_PTR a, const struct LDKBlindedHopFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_eq")] public static extern bool BlindedHopFeatures_eq(long _a, long _b);
	// bool ChannelTypeFeatures_eq(const struct LDKChannelTypeFeatures *NONNULL_PTR a, const struct LDKChannelTypeFeatures *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_eq")] public static extern bool ChannelTypeFeatures_eq(long _a, long _b);
	// uint64_t InitFeatures_clone_ptr(LDKInitFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clone_ptr")] public static extern long InitFeatures_clone_ptr(long _arg);
	// struct LDKInitFeatures InitFeatures_clone(const struct LDKInitFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clone")] public static extern long InitFeatures_clone(long _orig);
	// uint64_t NodeFeatures_clone_ptr(LDKNodeFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clone_ptr")] public static extern long NodeFeatures_clone_ptr(long _arg);
	// struct LDKNodeFeatures NodeFeatures_clone(const struct LDKNodeFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clone")] public static extern long NodeFeatures_clone(long _orig);
	// uint64_t ChannelFeatures_clone_ptr(LDKChannelFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_clone_ptr")] public static extern long ChannelFeatures_clone_ptr(long _arg);
	// struct LDKChannelFeatures ChannelFeatures_clone(const struct LDKChannelFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_clone")] public static extern long ChannelFeatures_clone(long _orig);
	// uint64_t Bolt11InvoiceFeatures_clone_ptr(LDKBolt11InvoiceFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_clone_ptr")] public static extern long Bolt11InvoiceFeatures_clone_ptr(long _arg);
	// struct LDKBolt11InvoiceFeatures Bolt11InvoiceFeatures_clone(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_clone")] public static extern long Bolt11InvoiceFeatures_clone(long _orig);
	// uint64_t OfferFeatures_clone_ptr(LDKOfferFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_clone_ptr")] public static extern long OfferFeatures_clone_ptr(long _arg);
	// struct LDKOfferFeatures OfferFeatures_clone(const struct LDKOfferFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_clone")] public static extern long OfferFeatures_clone(long _orig);
	// uint64_t InvoiceRequestFeatures_clone_ptr(LDKInvoiceRequestFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_clone_ptr")] public static extern long InvoiceRequestFeatures_clone_ptr(long _arg);
	// struct LDKInvoiceRequestFeatures InvoiceRequestFeatures_clone(const struct LDKInvoiceRequestFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_clone")] public static extern long InvoiceRequestFeatures_clone(long _orig);
	// uint64_t Bolt12InvoiceFeatures_clone_ptr(LDKBolt12InvoiceFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_clone_ptr")] public static extern long Bolt12InvoiceFeatures_clone_ptr(long _arg);
	// struct LDKBolt12InvoiceFeatures Bolt12InvoiceFeatures_clone(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_clone")] public static extern long Bolt12InvoiceFeatures_clone(long _orig);
	// uint64_t BlindedHopFeatures_clone_ptr(LDKBlindedHopFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_clone_ptr")] public static extern long BlindedHopFeatures_clone_ptr(long _arg);
	// struct LDKBlindedHopFeatures BlindedHopFeatures_clone(const struct LDKBlindedHopFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_clone")] public static extern long BlindedHopFeatures_clone(long _orig);
	// uint64_t ChannelTypeFeatures_clone_ptr(LDKChannelTypeFeatures *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clone_ptr")] public static extern long ChannelTypeFeatures_clone_ptr(long _arg);
	// struct LDKChannelTypeFeatures ChannelTypeFeatures_clone(const struct LDKChannelTypeFeatures *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clone")] public static extern long ChannelTypeFeatures_clone(long _orig);
	// uint64_t InitFeatures_hash(const struct LDKInitFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_hash")] public static extern long InitFeatures_hash(long _o);
	// uint64_t NodeFeatures_hash(const struct LDKNodeFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_hash")] public static extern long NodeFeatures_hash(long _o);
	// uint64_t ChannelFeatures_hash(const struct LDKChannelFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_hash")] public static extern long ChannelFeatures_hash(long _o);
	// uint64_t Bolt11InvoiceFeatures_hash(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_hash")] public static extern long Bolt11InvoiceFeatures_hash(long _o);
	// uint64_t OfferFeatures_hash(const struct LDKOfferFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_hash")] public static extern long OfferFeatures_hash(long _o);
	// uint64_t InvoiceRequestFeatures_hash(const struct LDKInvoiceRequestFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_hash")] public static extern long InvoiceRequestFeatures_hash(long _o);
	// uint64_t Bolt12InvoiceFeatures_hash(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_hash")] public static extern long Bolt12InvoiceFeatures_hash(long _o);
	// uint64_t BlindedHopFeatures_hash(const struct LDKBlindedHopFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_hash")] public static extern long BlindedHopFeatures_hash(long _o);
	// uint64_t ChannelTypeFeatures_hash(const struct LDKChannelTypeFeatures *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_hash")] public static extern long ChannelTypeFeatures_hash(long _o);
	// void InitFeatures_free(struct LDKInitFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_free")] public static extern void InitFeatures_free(long _this_obj);
	// void NodeFeatures_free(struct LDKNodeFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_free")] public static extern void NodeFeatures_free(long _this_obj);
	// void ChannelFeatures_free(struct LDKChannelFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_free")] public static extern void ChannelFeatures_free(long _this_obj);
	// void Bolt11InvoiceFeatures_free(struct LDKBolt11InvoiceFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_free")] public static extern void Bolt11InvoiceFeatures_free(long _this_obj);
	// void OfferFeatures_free(struct LDKOfferFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_free")] public static extern void OfferFeatures_free(long _this_obj);
	// void InvoiceRequestFeatures_free(struct LDKInvoiceRequestFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_free")] public static extern void InvoiceRequestFeatures_free(long _this_obj);
	// void Bolt12InvoiceFeatures_free(struct LDKBolt12InvoiceFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_free")] public static extern void Bolt12InvoiceFeatures_free(long _this_obj);
	// void BlindedHopFeatures_free(struct LDKBlindedHopFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_free")] public static extern void BlindedHopFeatures_free(long _this_obj);
	// void ChannelTypeFeatures_free(struct LDKChannelTypeFeatures this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_free")] public static extern void ChannelTypeFeatures_free(long _this_obj);
	// MUST_USE_RES struct LDKBolt11InvoiceFeatures Bolt11InvoiceFeatures_for_keysend(bool allow_mpp);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_for_keysend")] public static extern long Bolt11InvoiceFeatures_for_keysend(bool _allow_mpp);
	// MUST_USE_RES struct LDKChannelTypeFeatures ChannelTypeFeatures_only_static_remote_key(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_only_static_remote_key")] public static extern long ChannelTypeFeatures_only_static_remote_key();
	// MUST_USE_RES struct LDKChannelTypeFeatures ChannelTypeFeatures_anchors_zero_htlc_fee_and_dependencies(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_anchors_zero_htlc_fee_and_dependencies")] public static extern long ChannelTypeFeatures_anchors_zero_htlc_fee_and_dependencies();
	// MUST_USE_RES struct LDKInitFeatures InitFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_empty")] public static extern long InitFeatures_empty();
	// MUST_USE_RES struct LDKu8slice InitFeatures_le_flags(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_le_flags")] public static extern long InitFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_any_optional_bits(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_any_optional_bits")] public static extern bool InitFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_unknown_bits_from(const struct LDKInitFeatures *NONNULL_PTR this_arg, const struct LDKInitFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_unknown_bits_from")] public static extern bool InitFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z InitFeatures_required_unknown_bits_from(const struct LDKInitFeatures *NONNULL_PTR this_arg, const struct LDKInitFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_required_unknown_bits_from")] public static extern long InitFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool InitFeatures_requires_unknown_bits(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_unknown_bits")] public static extern bool InitFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_unknown_bits(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_unknown_bits")] public static extern bool InitFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_required_feature_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_required_feature_bit")] public static extern long InitFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_optional_feature_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_optional_feature_bit")] public static extern long InitFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_required_custom_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_required_custom_bit")] public static extern long InitFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InitFeatures_set_optional_custom_bit(struct LDKInitFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_optional_custom_bit")] public static extern long InitFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKNodeFeatures NodeFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_empty")] public static extern long NodeFeatures_empty();
	// MUST_USE_RES struct LDKu8slice NodeFeatures_le_flags(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_le_flags")] public static extern long NodeFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_any_optional_bits(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_any_optional_bits")] public static extern bool NodeFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_unknown_bits_from(const struct LDKNodeFeatures *NONNULL_PTR this_arg, const struct LDKNodeFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_unknown_bits_from")] public static extern bool NodeFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z NodeFeatures_required_unknown_bits_from(const struct LDKNodeFeatures *NONNULL_PTR this_arg, const struct LDKNodeFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_required_unknown_bits_from")] public static extern long NodeFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool NodeFeatures_requires_unknown_bits(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_unknown_bits")] public static extern bool NodeFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_unknown_bits(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_unknown_bits")] public static extern bool NodeFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_required_feature_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_required_feature_bit")] public static extern long NodeFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_optional_feature_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_optional_feature_bit")] public static extern long NodeFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_required_custom_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_required_custom_bit")] public static extern long NodeFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ NodeFeatures_set_optional_custom_bit(struct LDKNodeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_optional_custom_bit")] public static extern long NodeFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKChannelFeatures ChannelFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_empty")] public static extern long ChannelFeatures_empty();
	// MUST_USE_RES struct LDKu8slice ChannelFeatures_le_flags(const struct LDKChannelFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_le_flags")] public static extern long ChannelFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool ChannelFeatures_supports_any_optional_bits(const struct LDKChannelFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_supports_any_optional_bits")] public static extern bool ChannelFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool ChannelFeatures_requires_unknown_bits_from(const struct LDKChannelFeatures *NONNULL_PTR this_arg, const struct LDKChannelFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_requires_unknown_bits_from")] public static extern bool ChannelFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z ChannelFeatures_required_unknown_bits_from(const struct LDKChannelFeatures *NONNULL_PTR this_arg, const struct LDKChannelFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_required_unknown_bits_from")] public static extern long ChannelFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool ChannelFeatures_requires_unknown_bits(const struct LDKChannelFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_requires_unknown_bits")] public static extern bool ChannelFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool ChannelFeatures_supports_unknown_bits(const struct LDKChannelFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_supports_unknown_bits")] public static extern bool ChannelFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_required_feature_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_required_feature_bit")] public static extern long ChannelFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_optional_feature_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_optional_feature_bit")] public static extern long ChannelFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_required_custom_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_required_custom_bit")] public static extern long ChannelFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelFeatures_set_optional_custom_bit(struct LDKChannelFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelFeatures_set_optional_custom_bit")] public static extern long ChannelFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKBolt11InvoiceFeatures Bolt11InvoiceFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_empty")] public static extern long Bolt11InvoiceFeatures_empty();
	// MUST_USE_RES struct LDKu8slice Bolt11InvoiceFeatures_le_flags(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_le_flags")] public static extern long Bolt11InvoiceFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_any_optional_bits(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_any_optional_bits")] public static extern bool Bolt11InvoiceFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_unknown_bits_from(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, const struct LDKBolt11InvoiceFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_unknown_bits_from")] public static extern bool Bolt11InvoiceFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z Bolt11InvoiceFeatures_required_unknown_bits_from(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, const struct LDKBolt11InvoiceFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_required_unknown_bits_from")] public static extern long Bolt11InvoiceFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_unknown_bits(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_unknown_bits")] public static extern bool Bolt11InvoiceFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_unknown_bits(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_unknown_bits")] public static extern bool Bolt11InvoiceFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_required_feature_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_required_feature_bit")] public static extern long Bolt11InvoiceFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_optional_feature_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_optional_feature_bit")] public static extern long Bolt11InvoiceFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_required_custom_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_required_custom_bit")] public static extern long Bolt11InvoiceFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt11InvoiceFeatures_set_optional_custom_bit(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_optional_custom_bit")] public static extern long Bolt11InvoiceFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKOfferFeatures OfferFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_empty")] public static extern long OfferFeatures_empty();
	// MUST_USE_RES struct LDKu8slice OfferFeatures_le_flags(const struct LDKOfferFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_le_flags")] public static extern long OfferFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool OfferFeatures_supports_any_optional_bits(const struct LDKOfferFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_supports_any_optional_bits")] public static extern bool OfferFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool OfferFeatures_requires_unknown_bits_from(const struct LDKOfferFeatures *NONNULL_PTR this_arg, const struct LDKOfferFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_requires_unknown_bits_from")] public static extern bool OfferFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z OfferFeatures_required_unknown_bits_from(const struct LDKOfferFeatures *NONNULL_PTR this_arg, const struct LDKOfferFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_required_unknown_bits_from")] public static extern long OfferFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool OfferFeatures_requires_unknown_bits(const struct LDKOfferFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_requires_unknown_bits")] public static extern bool OfferFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool OfferFeatures_supports_unknown_bits(const struct LDKOfferFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_supports_unknown_bits")] public static extern bool OfferFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_required_feature_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_required_feature_bit")] public static extern long OfferFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_optional_feature_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_optional_feature_bit")] public static extern long OfferFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_required_custom_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_required_custom_bit")] public static extern long OfferFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ OfferFeatures_set_optional_custom_bit(struct LDKOfferFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_OfferFeatures_set_optional_custom_bit")] public static extern long OfferFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKInvoiceRequestFeatures InvoiceRequestFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_empty")] public static extern long InvoiceRequestFeatures_empty();
	// MUST_USE_RES struct LDKu8slice InvoiceRequestFeatures_le_flags(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_le_flags")] public static extern long InvoiceRequestFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool InvoiceRequestFeatures_supports_any_optional_bits(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_supports_any_optional_bits")] public static extern bool InvoiceRequestFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool InvoiceRequestFeatures_requires_unknown_bits_from(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, const struct LDKInvoiceRequestFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_requires_unknown_bits_from")] public static extern bool InvoiceRequestFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z InvoiceRequestFeatures_required_unknown_bits_from(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, const struct LDKInvoiceRequestFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_required_unknown_bits_from")] public static extern long InvoiceRequestFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool InvoiceRequestFeatures_requires_unknown_bits(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_requires_unknown_bits")] public static extern bool InvoiceRequestFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool InvoiceRequestFeatures_supports_unknown_bits(const struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_supports_unknown_bits")] public static extern bool InvoiceRequestFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_required_feature_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_required_feature_bit")] public static extern long InvoiceRequestFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_optional_feature_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_optional_feature_bit")] public static extern long InvoiceRequestFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_required_custom_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_required_custom_bit")] public static extern long InvoiceRequestFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ InvoiceRequestFeatures_set_optional_custom_bit(struct LDKInvoiceRequestFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InvoiceRequestFeatures_set_optional_custom_bit")] public static extern long InvoiceRequestFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKBolt12InvoiceFeatures Bolt12InvoiceFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_empty")] public static extern long Bolt12InvoiceFeatures_empty();
	// MUST_USE_RES struct LDKu8slice Bolt12InvoiceFeatures_le_flags(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_le_flags")] public static extern long Bolt12InvoiceFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_supports_any_optional_bits(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_supports_any_optional_bits")] public static extern bool Bolt12InvoiceFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_requires_unknown_bits_from(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, const struct LDKBolt12InvoiceFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_requires_unknown_bits_from")] public static extern bool Bolt12InvoiceFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z Bolt12InvoiceFeatures_required_unknown_bits_from(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, const struct LDKBolt12InvoiceFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_required_unknown_bits_from")] public static extern long Bolt12InvoiceFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_requires_unknown_bits(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_requires_unknown_bits")] public static extern bool Bolt12InvoiceFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_supports_unknown_bits(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_supports_unknown_bits")] public static extern bool Bolt12InvoiceFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_required_feature_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_required_feature_bit")] public static extern long Bolt12InvoiceFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_optional_feature_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_optional_feature_bit")] public static extern long Bolt12InvoiceFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_required_custom_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_required_custom_bit")] public static extern long Bolt12InvoiceFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ Bolt12InvoiceFeatures_set_optional_custom_bit(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_optional_custom_bit")] public static extern long Bolt12InvoiceFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKBlindedHopFeatures BlindedHopFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_empty")] public static extern long BlindedHopFeatures_empty();
	// MUST_USE_RES struct LDKu8slice BlindedHopFeatures_le_flags(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_le_flags")] public static extern long BlindedHopFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool BlindedHopFeatures_supports_any_optional_bits(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_supports_any_optional_bits")] public static extern bool BlindedHopFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool BlindedHopFeatures_requires_unknown_bits_from(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, const struct LDKBlindedHopFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_requires_unknown_bits_from")] public static extern bool BlindedHopFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z BlindedHopFeatures_required_unknown_bits_from(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, const struct LDKBlindedHopFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_required_unknown_bits_from")] public static extern long BlindedHopFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool BlindedHopFeatures_requires_unknown_bits(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_requires_unknown_bits")] public static extern bool BlindedHopFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool BlindedHopFeatures_supports_unknown_bits(const struct LDKBlindedHopFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_supports_unknown_bits")] public static extern bool BlindedHopFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_required_feature_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_required_feature_bit")] public static extern long BlindedHopFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_optional_feature_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_optional_feature_bit")] public static extern long BlindedHopFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_required_custom_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_required_custom_bit")] public static extern long BlindedHopFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ BlindedHopFeatures_set_optional_custom_bit(struct LDKBlindedHopFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BlindedHopFeatures_set_optional_custom_bit")] public static extern long BlindedHopFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKChannelTypeFeatures ChannelTypeFeatures_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_empty")] public static extern long ChannelTypeFeatures_empty();
	// MUST_USE_RES struct LDKu8slice ChannelTypeFeatures_le_flags(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_le_flags")] public static extern long ChannelTypeFeatures_le_flags(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_any_optional_bits(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_any_optional_bits")] public static extern bool ChannelTypeFeatures_supports_any_optional_bits(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_unknown_bits_from(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, const struct LDKChannelTypeFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_unknown_bits_from")] public static extern bool ChannelTypeFeatures_requires_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES struct LDKCVec_u64Z ChannelTypeFeatures_required_unknown_bits_from(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, const struct LDKChannelTypeFeatures *NONNULL_PTR other);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_required_unknown_bits_from")] public static extern long ChannelTypeFeatures_required_unknown_bits_from(long _this_arg, long _other);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_unknown_bits(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_unknown_bits")] public static extern bool ChannelTypeFeatures_requires_unknown_bits(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_unknown_bits(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_unknown_bits")] public static extern bool ChannelTypeFeatures_supports_unknown_bits(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_required_feature_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_required_feature_bit")] public static extern long ChannelTypeFeatures_set_required_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_optional_feature_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_optional_feature_bit")] public static extern long ChannelTypeFeatures_set_optional_feature_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_required_custom_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_required_custom_bit")] public static extern long ChannelTypeFeatures_set_required_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKCResult_NoneNoneZ ChannelTypeFeatures_set_optional_custom_bit(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg, uintptr_t bit);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_optional_custom_bit")] public static extern long ChannelTypeFeatures_set_optional_custom_bit(long _this_arg, long _bit);
	// MUST_USE_RES struct LDKInitFeatures InitFeatures_clear_upfront_shutdown_script(struct LDKInitFeatures this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clear_upfront_shutdown_script")] public static extern long InitFeatures_clear_upfront_shutdown_script(long _this_arg);
	// MUST_USE_RES struct LDKNodeFeatures NodeFeatures_clear_upfront_shutdown_script(struct LDKNodeFeatures this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clear_upfront_shutdown_script")] public static extern long NodeFeatures_clear_upfront_shutdown_script(long _this_arg);
	// MUST_USE_RES struct LDKInitFeatures InitFeatures_clear_shutdown_anysegwit(struct LDKInitFeatures this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clear_shutdown_anysegwit")] public static extern long InitFeatures_clear_shutdown_anysegwit(long _this_arg);
	// MUST_USE_RES struct LDKNodeFeatures NodeFeatures_clear_shutdown_anysegwit(struct LDKNodeFeatures this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clear_shutdown_anysegwit")] public static extern long NodeFeatures_clear_shutdown_anysegwit(long _this_arg);
	// MUST_USE_RES struct LDKInitFeatures InitFeatures_clear_wumbo(struct LDKInitFeatures this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clear_wumbo")] public static extern long InitFeatures_clear_wumbo(long _this_arg);
	// MUST_USE_RES struct LDKNodeFeatures NodeFeatures_clear_wumbo(struct LDKNodeFeatures this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clear_wumbo")] public static extern long NodeFeatures_clear_wumbo(long _this_arg);
	// void InitFeatures_clear_scid_privacy(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clear_scid_privacy")] public static extern void InitFeatures_clear_scid_privacy(long _this_arg);
	// void NodeFeatures_clear_scid_privacy(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clear_scid_privacy")] public static extern void NodeFeatures_clear_scid_privacy(long _this_arg);
	// void ChannelTypeFeatures_clear_scid_privacy(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clear_scid_privacy")] public static extern void ChannelTypeFeatures_clear_scid_privacy(long _this_arg);
	// void InitFeatures_clear_anchors_zero_fee_htlc_tx(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clear_anchors_zero_fee_htlc_tx")] public static extern void InitFeatures_clear_anchors_zero_fee_htlc_tx(long _this_arg);
	// void NodeFeatures_clear_anchors_zero_fee_htlc_tx(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clear_anchors_zero_fee_htlc_tx")] public static extern void NodeFeatures_clear_anchors_zero_fee_htlc_tx(long _this_arg);
	// void ChannelTypeFeatures_clear_anchors_zero_fee_htlc_tx(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_clear_anchors_zero_fee_htlc_tx")] public static extern void ChannelTypeFeatures_clear_anchors_zero_fee_htlc_tx(long _this_arg);
	// void InitFeatures_clear_route_blinding(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_clear_route_blinding")] public static extern void InitFeatures_clear_route_blinding(long _this_arg);
	// void NodeFeatures_clear_route_blinding(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_clear_route_blinding")] public static extern void NodeFeatures_clear_route_blinding(long _this_arg);
	// void InitFeatures_set_data_loss_protect_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_data_loss_protect_optional")] public static extern void InitFeatures_set_data_loss_protect_optional(long _this_arg);
	// void InitFeatures_set_data_loss_protect_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_data_loss_protect_required")] public static extern void InitFeatures_set_data_loss_protect_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_data_loss_protect(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_data_loss_protect")] public static extern bool InitFeatures_supports_data_loss_protect(long _this_arg);
	// void NodeFeatures_set_data_loss_protect_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_data_loss_protect_optional")] public static extern void NodeFeatures_set_data_loss_protect_optional(long _this_arg);
	// void NodeFeatures_set_data_loss_protect_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_data_loss_protect_required")] public static extern void NodeFeatures_set_data_loss_protect_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_data_loss_protect(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_data_loss_protect")] public static extern bool NodeFeatures_supports_data_loss_protect(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_data_loss_protect(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_data_loss_protect")] public static extern bool InitFeatures_requires_data_loss_protect(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_data_loss_protect(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_data_loss_protect")] public static extern bool NodeFeatures_requires_data_loss_protect(long _this_arg);
	// void InitFeatures_set_initial_routing_sync_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_initial_routing_sync_optional")] public static extern void InitFeatures_set_initial_routing_sync_optional(long _this_arg);
	// void InitFeatures_set_initial_routing_sync_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_initial_routing_sync_required")] public static extern void InitFeatures_set_initial_routing_sync_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_initial_routing_sync(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_initial_routing_sync")] public static extern bool InitFeatures_initial_routing_sync(long _this_arg);
	// void InitFeatures_set_upfront_shutdown_script_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_upfront_shutdown_script_optional")] public static extern void InitFeatures_set_upfront_shutdown_script_optional(long _this_arg);
	// void InitFeatures_set_upfront_shutdown_script_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_upfront_shutdown_script_required")] public static extern void InitFeatures_set_upfront_shutdown_script_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_upfront_shutdown_script(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_upfront_shutdown_script")] public static extern bool InitFeatures_supports_upfront_shutdown_script(long _this_arg);
	// void NodeFeatures_set_upfront_shutdown_script_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_upfront_shutdown_script_optional")] public static extern void NodeFeatures_set_upfront_shutdown_script_optional(long _this_arg);
	// void NodeFeatures_set_upfront_shutdown_script_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_upfront_shutdown_script_required")] public static extern void NodeFeatures_set_upfront_shutdown_script_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_upfront_shutdown_script(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_upfront_shutdown_script")] public static extern bool NodeFeatures_supports_upfront_shutdown_script(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_upfront_shutdown_script(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_upfront_shutdown_script")] public static extern bool InitFeatures_requires_upfront_shutdown_script(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_upfront_shutdown_script(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_upfront_shutdown_script")] public static extern bool NodeFeatures_requires_upfront_shutdown_script(long _this_arg);
	// void InitFeatures_set_gossip_queries_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_gossip_queries_optional")] public static extern void InitFeatures_set_gossip_queries_optional(long _this_arg);
	// void InitFeatures_set_gossip_queries_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_gossip_queries_required")] public static extern void InitFeatures_set_gossip_queries_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_gossip_queries(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_gossip_queries")] public static extern bool InitFeatures_supports_gossip_queries(long _this_arg);
	// void NodeFeatures_set_gossip_queries_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_gossip_queries_optional")] public static extern void NodeFeatures_set_gossip_queries_optional(long _this_arg);
	// void NodeFeatures_set_gossip_queries_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_gossip_queries_required")] public static extern void NodeFeatures_set_gossip_queries_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_gossip_queries(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_gossip_queries")] public static extern bool NodeFeatures_supports_gossip_queries(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_gossip_queries(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_gossip_queries")] public static extern bool InitFeatures_requires_gossip_queries(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_gossip_queries(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_gossip_queries")] public static extern bool NodeFeatures_requires_gossip_queries(long _this_arg);
	// void InitFeatures_set_variable_length_onion_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_variable_length_onion_optional")] public static extern void InitFeatures_set_variable_length_onion_optional(long _this_arg);
	// void InitFeatures_set_variable_length_onion_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_variable_length_onion_required")] public static extern void InitFeatures_set_variable_length_onion_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_variable_length_onion(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_variable_length_onion")] public static extern bool InitFeatures_supports_variable_length_onion(long _this_arg);
	// void NodeFeatures_set_variable_length_onion_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_variable_length_onion_optional")] public static extern void NodeFeatures_set_variable_length_onion_optional(long _this_arg);
	// void NodeFeatures_set_variable_length_onion_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_variable_length_onion_required")] public static extern void NodeFeatures_set_variable_length_onion_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_variable_length_onion(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_variable_length_onion")] public static extern bool NodeFeatures_supports_variable_length_onion(long _this_arg);
	// void Bolt11InvoiceFeatures_set_variable_length_onion_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_variable_length_onion_optional")] public static extern void Bolt11InvoiceFeatures_set_variable_length_onion_optional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_variable_length_onion_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_variable_length_onion_required")] public static extern void Bolt11InvoiceFeatures_set_variable_length_onion_required(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_variable_length_onion(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_variable_length_onion")] public static extern bool Bolt11InvoiceFeatures_supports_variable_length_onion(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_variable_length_onion(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_variable_length_onion")] public static extern bool InitFeatures_requires_variable_length_onion(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_variable_length_onion(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_variable_length_onion")] public static extern bool NodeFeatures_requires_variable_length_onion(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_variable_length_onion(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_variable_length_onion")] public static extern bool Bolt11InvoiceFeatures_requires_variable_length_onion(long _this_arg);
	// void InitFeatures_set_static_remote_key_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_static_remote_key_optional")] public static extern void InitFeatures_set_static_remote_key_optional(long _this_arg);
	// void InitFeatures_set_static_remote_key_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_static_remote_key_required")] public static extern void InitFeatures_set_static_remote_key_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_static_remote_key(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_static_remote_key")] public static extern bool InitFeatures_supports_static_remote_key(long _this_arg);
	// void NodeFeatures_set_static_remote_key_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_static_remote_key_optional")] public static extern void NodeFeatures_set_static_remote_key_optional(long _this_arg);
	// void NodeFeatures_set_static_remote_key_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_static_remote_key_required")] public static extern void NodeFeatures_set_static_remote_key_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_static_remote_key(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_static_remote_key")] public static extern bool NodeFeatures_supports_static_remote_key(long _this_arg);
	// void ChannelTypeFeatures_set_static_remote_key_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_static_remote_key_optional")] public static extern void ChannelTypeFeatures_set_static_remote_key_optional(long _this_arg);
	// void ChannelTypeFeatures_set_static_remote_key_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_static_remote_key_required")] public static extern void ChannelTypeFeatures_set_static_remote_key_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_static_remote_key(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_static_remote_key")] public static extern bool ChannelTypeFeatures_supports_static_remote_key(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_static_remote_key(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_static_remote_key")] public static extern bool InitFeatures_requires_static_remote_key(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_static_remote_key(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_static_remote_key")] public static extern bool NodeFeatures_requires_static_remote_key(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_static_remote_key(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_static_remote_key")] public static extern bool ChannelTypeFeatures_requires_static_remote_key(long _this_arg);
	// void InitFeatures_set_payment_secret_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_payment_secret_optional")] public static extern void InitFeatures_set_payment_secret_optional(long _this_arg);
	// void InitFeatures_set_payment_secret_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_payment_secret_required")] public static extern void InitFeatures_set_payment_secret_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_payment_secret(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_payment_secret")] public static extern bool InitFeatures_supports_payment_secret(long _this_arg);
	// void NodeFeatures_set_payment_secret_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_payment_secret_optional")] public static extern void NodeFeatures_set_payment_secret_optional(long _this_arg);
	// void NodeFeatures_set_payment_secret_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_payment_secret_required")] public static extern void NodeFeatures_set_payment_secret_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_payment_secret(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_payment_secret")] public static extern bool NodeFeatures_supports_payment_secret(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_secret_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_secret_optional")] public static extern void Bolt11InvoiceFeatures_set_payment_secret_optional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_secret_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_secret_required")] public static extern void Bolt11InvoiceFeatures_set_payment_secret_required(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_payment_secret(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_payment_secret")] public static extern bool Bolt11InvoiceFeatures_supports_payment_secret(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_payment_secret(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_payment_secret")] public static extern bool InitFeatures_requires_payment_secret(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_payment_secret(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_payment_secret")] public static extern bool NodeFeatures_requires_payment_secret(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_payment_secret(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_payment_secret")] public static extern bool Bolt11InvoiceFeatures_requires_payment_secret(long _this_arg);
	// void InitFeatures_set_basic_mpp_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_basic_mpp_optional")] public static extern void InitFeatures_set_basic_mpp_optional(long _this_arg);
	// void InitFeatures_set_basic_mpp_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_basic_mpp_required")] public static extern void InitFeatures_set_basic_mpp_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_basic_mpp(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_basic_mpp")] public static extern bool InitFeatures_supports_basic_mpp(long _this_arg);
	// void NodeFeatures_set_basic_mpp_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_basic_mpp_optional")] public static extern void NodeFeatures_set_basic_mpp_optional(long _this_arg);
	// void NodeFeatures_set_basic_mpp_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_basic_mpp_required")] public static extern void NodeFeatures_set_basic_mpp_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_basic_mpp(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_basic_mpp")] public static extern bool NodeFeatures_supports_basic_mpp(long _this_arg);
	// void Bolt11InvoiceFeatures_set_basic_mpp_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_basic_mpp_optional")] public static extern void Bolt11InvoiceFeatures_set_basic_mpp_optional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_basic_mpp_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_basic_mpp_required")] public static extern void Bolt11InvoiceFeatures_set_basic_mpp_required(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_basic_mpp(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_basic_mpp")] public static extern bool Bolt11InvoiceFeatures_supports_basic_mpp(long _this_arg);
	// void Bolt12InvoiceFeatures_set_basic_mpp_optional(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_basic_mpp_optional")] public static extern void Bolt12InvoiceFeatures_set_basic_mpp_optional(long _this_arg);
	// void Bolt12InvoiceFeatures_set_basic_mpp_required(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_basic_mpp_required")] public static extern void Bolt12InvoiceFeatures_set_basic_mpp_required(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_supports_basic_mpp(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_supports_basic_mpp")] public static extern bool Bolt12InvoiceFeatures_supports_basic_mpp(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_basic_mpp(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_basic_mpp")] public static extern bool InitFeatures_requires_basic_mpp(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_basic_mpp(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_basic_mpp")] public static extern bool NodeFeatures_requires_basic_mpp(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_basic_mpp(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_basic_mpp")] public static extern bool Bolt11InvoiceFeatures_requires_basic_mpp(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_requires_basic_mpp(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_requires_basic_mpp")] public static extern bool Bolt12InvoiceFeatures_requires_basic_mpp(long _this_arg);
	// void InitFeatures_set_wumbo_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_wumbo_optional")] public static extern void InitFeatures_set_wumbo_optional(long _this_arg);
	// void InitFeatures_set_wumbo_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_wumbo_required")] public static extern void InitFeatures_set_wumbo_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_wumbo(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_wumbo")] public static extern bool InitFeatures_supports_wumbo(long _this_arg);
	// void NodeFeatures_set_wumbo_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_wumbo_optional")] public static extern void NodeFeatures_set_wumbo_optional(long _this_arg);
	// void NodeFeatures_set_wumbo_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_wumbo_required")] public static extern void NodeFeatures_set_wumbo_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_wumbo(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_wumbo")] public static extern bool NodeFeatures_supports_wumbo(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_wumbo(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_wumbo")] public static extern bool InitFeatures_requires_wumbo(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_wumbo(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_wumbo")] public static extern bool NodeFeatures_requires_wumbo(long _this_arg);
	// void InitFeatures_set_anchors_nonzero_fee_htlc_tx_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_nonzero_fee_htlc_tx_optional")] public static extern void InitFeatures_set_anchors_nonzero_fee_htlc_tx_optional(long _this_arg);
	// void InitFeatures_set_anchors_nonzero_fee_htlc_tx_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_nonzero_fee_htlc_tx_required")] public static extern void InitFeatures_set_anchors_nonzero_fee_htlc_tx_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_anchors_nonzero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_anchors_nonzero_fee_htlc_tx")] public static extern bool InitFeatures_supports_anchors_nonzero_fee_htlc_tx(long _this_arg);
	// void NodeFeatures_set_anchors_nonzero_fee_htlc_tx_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_nonzero_fee_htlc_tx_optional")] public static extern void NodeFeatures_set_anchors_nonzero_fee_htlc_tx_optional(long _this_arg);
	// void NodeFeatures_set_anchors_nonzero_fee_htlc_tx_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_nonzero_fee_htlc_tx_required")] public static extern void NodeFeatures_set_anchors_nonzero_fee_htlc_tx_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_anchors_nonzero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_anchors_nonzero_fee_htlc_tx")] public static extern bool NodeFeatures_supports_anchors_nonzero_fee_htlc_tx(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_optional")] public static extern void ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_optional(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_required")] public static extern void ChannelTypeFeatures_set_anchors_nonzero_fee_htlc_tx_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_anchors_nonzero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_anchors_nonzero_fee_htlc_tx")] public static extern bool ChannelTypeFeatures_supports_anchors_nonzero_fee_htlc_tx(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_anchors_nonzero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_anchors_nonzero_fee_htlc_tx")] public static extern bool InitFeatures_requires_anchors_nonzero_fee_htlc_tx(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_anchors_nonzero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_anchors_nonzero_fee_htlc_tx")] public static extern bool NodeFeatures_requires_anchors_nonzero_fee_htlc_tx(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_anchors_nonzero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_anchors_nonzero_fee_htlc_tx")] public static extern bool ChannelTypeFeatures_requires_anchors_nonzero_fee_htlc_tx(long _this_arg);
	// void InitFeatures_set_anchors_zero_fee_htlc_tx_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_zero_fee_htlc_tx_optional")] public static extern void InitFeatures_set_anchors_zero_fee_htlc_tx_optional(long _this_arg);
	// void InitFeatures_set_anchors_zero_fee_htlc_tx_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_anchors_zero_fee_htlc_tx_required")] public static extern void InitFeatures_set_anchors_zero_fee_htlc_tx_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_anchors_zero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_anchors_zero_fee_htlc_tx")] public static extern bool InitFeatures_supports_anchors_zero_fee_htlc_tx(long _this_arg);
	// void NodeFeatures_set_anchors_zero_fee_htlc_tx_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_zero_fee_htlc_tx_optional")] public static extern void NodeFeatures_set_anchors_zero_fee_htlc_tx_optional(long _this_arg);
	// void NodeFeatures_set_anchors_zero_fee_htlc_tx_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_anchors_zero_fee_htlc_tx_required")] public static extern void NodeFeatures_set_anchors_zero_fee_htlc_tx_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_anchors_zero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_anchors_zero_fee_htlc_tx")] public static extern bool NodeFeatures_supports_anchors_zero_fee_htlc_tx(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_optional")] public static extern void ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_optional(long _this_arg);
	// void ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_required")] public static extern void ChannelTypeFeatures_set_anchors_zero_fee_htlc_tx_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_anchors_zero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_anchors_zero_fee_htlc_tx")] public static extern bool ChannelTypeFeatures_supports_anchors_zero_fee_htlc_tx(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_anchors_zero_fee_htlc_tx(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_anchors_zero_fee_htlc_tx")] public static extern bool InitFeatures_requires_anchors_zero_fee_htlc_tx(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_anchors_zero_fee_htlc_tx(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_anchors_zero_fee_htlc_tx")] public static extern bool NodeFeatures_requires_anchors_zero_fee_htlc_tx(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_anchors_zero_fee_htlc_tx(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_anchors_zero_fee_htlc_tx")] public static extern bool ChannelTypeFeatures_requires_anchors_zero_fee_htlc_tx(long _this_arg);
	// void InitFeatures_set_route_blinding_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_route_blinding_optional")] public static extern void InitFeatures_set_route_blinding_optional(long _this_arg);
	// void InitFeatures_set_route_blinding_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_route_blinding_required")] public static extern void InitFeatures_set_route_blinding_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_route_blinding(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_route_blinding")] public static extern bool InitFeatures_supports_route_blinding(long _this_arg);
	// void NodeFeatures_set_route_blinding_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_route_blinding_optional")] public static extern void NodeFeatures_set_route_blinding_optional(long _this_arg);
	// void NodeFeatures_set_route_blinding_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_route_blinding_required")] public static extern void NodeFeatures_set_route_blinding_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_route_blinding(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_route_blinding")] public static extern bool NodeFeatures_supports_route_blinding(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_route_blinding(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_route_blinding")] public static extern bool InitFeatures_requires_route_blinding(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_route_blinding(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_route_blinding")] public static extern bool NodeFeatures_requires_route_blinding(long _this_arg);
	// void InitFeatures_set_shutdown_any_segwit_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_shutdown_any_segwit_optional")] public static extern void InitFeatures_set_shutdown_any_segwit_optional(long _this_arg);
	// void InitFeatures_set_shutdown_any_segwit_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_shutdown_any_segwit_required")] public static extern void InitFeatures_set_shutdown_any_segwit_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_shutdown_anysegwit(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_shutdown_anysegwit")] public static extern bool InitFeatures_supports_shutdown_anysegwit(long _this_arg);
	// void NodeFeatures_set_shutdown_any_segwit_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_shutdown_any_segwit_optional")] public static extern void NodeFeatures_set_shutdown_any_segwit_optional(long _this_arg);
	// void NodeFeatures_set_shutdown_any_segwit_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_shutdown_any_segwit_required")] public static extern void NodeFeatures_set_shutdown_any_segwit_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_shutdown_anysegwit(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_shutdown_anysegwit")] public static extern bool NodeFeatures_supports_shutdown_anysegwit(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_shutdown_anysegwit(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_shutdown_anysegwit")] public static extern bool InitFeatures_requires_shutdown_anysegwit(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_shutdown_anysegwit(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_shutdown_anysegwit")] public static extern bool NodeFeatures_requires_shutdown_anysegwit(long _this_arg);
	// void InitFeatures_set_dual_fund_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_dual_fund_optional")] public static extern void InitFeatures_set_dual_fund_optional(long _this_arg);
	// void InitFeatures_set_dual_fund_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_dual_fund_required")] public static extern void InitFeatures_set_dual_fund_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_dual_fund(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_dual_fund")] public static extern bool InitFeatures_supports_dual_fund(long _this_arg);
	// void NodeFeatures_set_dual_fund_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_dual_fund_optional")] public static extern void NodeFeatures_set_dual_fund_optional(long _this_arg);
	// void NodeFeatures_set_dual_fund_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_dual_fund_required")] public static extern void NodeFeatures_set_dual_fund_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_dual_fund(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_dual_fund")] public static extern bool NodeFeatures_supports_dual_fund(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_dual_fund(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_dual_fund")] public static extern bool InitFeatures_requires_dual_fund(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_dual_fund(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_dual_fund")] public static extern bool NodeFeatures_requires_dual_fund(long _this_arg);
	// void InitFeatures_set_taproot_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_taproot_optional")] public static extern void InitFeatures_set_taproot_optional(long _this_arg);
	// void InitFeatures_set_taproot_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_taproot_required")] public static extern void InitFeatures_set_taproot_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_taproot(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_taproot")] public static extern bool InitFeatures_supports_taproot(long _this_arg);
	// void NodeFeatures_set_taproot_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_taproot_optional")] public static extern void NodeFeatures_set_taproot_optional(long _this_arg);
	// void NodeFeatures_set_taproot_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_taproot_required")] public static extern void NodeFeatures_set_taproot_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_taproot(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_taproot")] public static extern bool NodeFeatures_supports_taproot(long _this_arg);
	// void ChannelTypeFeatures_set_taproot_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_taproot_optional")] public static extern void ChannelTypeFeatures_set_taproot_optional(long _this_arg);
	// void ChannelTypeFeatures_set_taproot_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_taproot_required")] public static extern void ChannelTypeFeatures_set_taproot_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_taproot(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_taproot")] public static extern bool ChannelTypeFeatures_supports_taproot(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_taproot(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_taproot")] public static extern bool InitFeatures_requires_taproot(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_taproot(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_taproot")] public static extern bool NodeFeatures_requires_taproot(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_taproot(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_taproot")] public static extern bool ChannelTypeFeatures_requires_taproot(long _this_arg);
	// void InitFeatures_set_onion_messages_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_onion_messages_optional")] public static extern void InitFeatures_set_onion_messages_optional(long _this_arg);
	// void InitFeatures_set_onion_messages_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_onion_messages_required")] public static extern void InitFeatures_set_onion_messages_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_onion_messages(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_onion_messages")] public static extern bool InitFeatures_supports_onion_messages(long _this_arg);
	// void NodeFeatures_set_onion_messages_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_onion_messages_optional")] public static extern void NodeFeatures_set_onion_messages_optional(long _this_arg);
	// void NodeFeatures_set_onion_messages_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_onion_messages_required")] public static extern void NodeFeatures_set_onion_messages_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_onion_messages(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_onion_messages")] public static extern bool NodeFeatures_supports_onion_messages(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_onion_messages(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_onion_messages")] public static extern bool InitFeatures_requires_onion_messages(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_onion_messages(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_onion_messages")] public static extern bool NodeFeatures_requires_onion_messages(long _this_arg);
	// void InitFeatures_set_channel_type_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_channel_type_optional")] public static extern void InitFeatures_set_channel_type_optional(long _this_arg);
	// void InitFeatures_set_channel_type_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_channel_type_required")] public static extern void InitFeatures_set_channel_type_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_channel_type(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_channel_type")] public static extern bool InitFeatures_supports_channel_type(long _this_arg);
	// void NodeFeatures_set_channel_type_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_channel_type_optional")] public static extern void NodeFeatures_set_channel_type_optional(long _this_arg);
	// void NodeFeatures_set_channel_type_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_channel_type_required")] public static extern void NodeFeatures_set_channel_type_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_channel_type(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_channel_type")] public static extern bool NodeFeatures_supports_channel_type(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_channel_type(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_channel_type")] public static extern bool InitFeatures_requires_channel_type(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_channel_type(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_channel_type")] public static extern bool NodeFeatures_requires_channel_type(long _this_arg);
	// void InitFeatures_set_scid_privacy_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_scid_privacy_optional")] public static extern void InitFeatures_set_scid_privacy_optional(long _this_arg);
	// void InitFeatures_set_scid_privacy_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_scid_privacy_required")] public static extern void InitFeatures_set_scid_privacy_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_scid_privacy(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_scid_privacy")] public static extern bool InitFeatures_supports_scid_privacy(long _this_arg);
	// void NodeFeatures_set_scid_privacy_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_scid_privacy_optional")] public static extern void NodeFeatures_set_scid_privacy_optional(long _this_arg);
	// void NodeFeatures_set_scid_privacy_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_scid_privacy_required")] public static extern void NodeFeatures_set_scid_privacy_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_scid_privacy(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_scid_privacy")] public static extern bool NodeFeatures_supports_scid_privacy(long _this_arg);
	// void ChannelTypeFeatures_set_scid_privacy_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_scid_privacy_optional")] public static extern void ChannelTypeFeatures_set_scid_privacy_optional(long _this_arg);
	// void ChannelTypeFeatures_set_scid_privacy_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_scid_privacy_required")] public static extern void ChannelTypeFeatures_set_scid_privacy_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_scid_privacy(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_scid_privacy")] public static extern bool ChannelTypeFeatures_supports_scid_privacy(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_scid_privacy(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_scid_privacy")] public static extern bool InitFeatures_requires_scid_privacy(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_scid_privacy(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_scid_privacy")] public static extern bool NodeFeatures_requires_scid_privacy(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_scid_privacy(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_scid_privacy")] public static extern bool ChannelTypeFeatures_requires_scid_privacy(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_metadata_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_metadata_optional")] public static extern void Bolt11InvoiceFeatures_set_payment_metadata_optional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_payment_metadata_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_payment_metadata_required")] public static extern void Bolt11InvoiceFeatures_set_payment_metadata_required(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_payment_metadata(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_payment_metadata")] public static extern bool Bolt11InvoiceFeatures_supports_payment_metadata(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_payment_metadata(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_payment_metadata")] public static extern bool Bolt11InvoiceFeatures_requires_payment_metadata(long _this_arg);
	// void InitFeatures_set_zero_conf_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_zero_conf_optional")] public static extern void InitFeatures_set_zero_conf_optional(long _this_arg);
	// void InitFeatures_set_zero_conf_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_zero_conf_required")] public static extern void InitFeatures_set_zero_conf_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_zero_conf(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_zero_conf")] public static extern bool InitFeatures_supports_zero_conf(long _this_arg);
	// void NodeFeatures_set_zero_conf_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_zero_conf_optional")] public static extern void NodeFeatures_set_zero_conf_optional(long _this_arg);
	// void NodeFeatures_set_zero_conf_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_zero_conf_required")] public static extern void NodeFeatures_set_zero_conf_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_zero_conf(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_zero_conf")] public static extern bool NodeFeatures_supports_zero_conf(long _this_arg);
	// void ChannelTypeFeatures_set_zero_conf_optional(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_zero_conf_optional")] public static extern void ChannelTypeFeatures_set_zero_conf_optional(long _this_arg);
	// void ChannelTypeFeatures_set_zero_conf_required(struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_set_zero_conf_required")] public static extern void ChannelTypeFeatures_set_zero_conf_required(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_supports_zero_conf(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_supports_zero_conf")] public static extern bool ChannelTypeFeatures_supports_zero_conf(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_zero_conf(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_zero_conf")] public static extern bool InitFeatures_requires_zero_conf(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_zero_conf(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_zero_conf")] public static extern bool NodeFeatures_requires_zero_conf(long _this_arg);
	// MUST_USE_RES bool ChannelTypeFeatures_requires_zero_conf(const struct LDKChannelTypeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ChannelTypeFeatures_requires_zero_conf")] public static extern bool ChannelTypeFeatures_requires_zero_conf(long _this_arg);
	// void NodeFeatures_set_keysend_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_keysend_optional")] public static extern void NodeFeatures_set_keysend_optional(long _this_arg);
	// void NodeFeatures_set_keysend_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_keysend_required")] public static extern void NodeFeatures_set_keysend_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_keysend(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_keysend")] public static extern bool NodeFeatures_supports_keysend(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_keysend(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_keysend")] public static extern bool NodeFeatures_requires_keysend(long _this_arg);
	// void InitFeatures_set_trampoline_routing_optional(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_trampoline_routing_optional")] public static extern void InitFeatures_set_trampoline_routing_optional(long _this_arg);
	// void InitFeatures_set_trampoline_routing_required(struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_set_trampoline_routing_required")] public static extern void InitFeatures_set_trampoline_routing_required(long _this_arg);
	// MUST_USE_RES bool InitFeatures_supports_trampoline_routing(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_supports_trampoline_routing")] public static extern bool InitFeatures_supports_trampoline_routing(long _this_arg);
	// void NodeFeatures_set_trampoline_routing_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_trampoline_routing_optional")] public static extern void NodeFeatures_set_trampoline_routing_optional(long _this_arg);
	// void NodeFeatures_set_trampoline_routing_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_trampoline_routing_required")] public static extern void NodeFeatures_set_trampoline_routing_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_trampoline_routing(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_trampoline_routing")] public static extern bool NodeFeatures_supports_trampoline_routing(long _this_arg);
	// void Bolt11InvoiceFeatures_set_trampoline_routing_optional(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_trampoline_routing_optional")] public static extern void Bolt11InvoiceFeatures_set_trampoline_routing_optional(long _this_arg);
	// void Bolt11InvoiceFeatures_set_trampoline_routing_required(struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_set_trampoline_routing_required")] public static extern void Bolt11InvoiceFeatures_set_trampoline_routing_required(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_supports_trampoline_routing(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_supports_trampoline_routing")] public static extern bool Bolt11InvoiceFeatures_supports_trampoline_routing(long _this_arg);
	// void Bolt12InvoiceFeatures_set_trampoline_routing_optional(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_trampoline_routing_optional")] public static extern void Bolt12InvoiceFeatures_set_trampoline_routing_optional(long _this_arg);
	// void Bolt12InvoiceFeatures_set_trampoline_routing_required(struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_set_trampoline_routing_required")] public static extern void Bolt12InvoiceFeatures_set_trampoline_routing_required(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_supports_trampoline_routing(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_supports_trampoline_routing")] public static extern bool Bolt12InvoiceFeatures_supports_trampoline_routing(long _this_arg);
	// MUST_USE_RES bool InitFeatures_requires_trampoline_routing(const struct LDKInitFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_InitFeatures_requires_trampoline_routing")] public static extern bool InitFeatures_requires_trampoline_routing(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_trampoline_routing(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_trampoline_routing")] public static extern bool NodeFeatures_requires_trampoline_routing(long _this_arg);
	// MUST_USE_RES bool Bolt11InvoiceFeatures_requires_trampoline_routing(const struct LDKBolt11InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceFeatures_requires_trampoline_routing")] public static extern bool Bolt11InvoiceFeatures_requires_trampoline_routing(long _this_arg);
	// MUST_USE_RES bool Bolt12InvoiceFeatures_requires_trampoline_routing(const struct LDKBolt12InvoiceFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt12InvoiceFeatures_requires_trampoline_routing")] public static extern bool Bolt12InvoiceFeatures_requires_trampoline_routing(long _this_arg);
	// void NodeFeatures_set_dns_resolution_optional(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_dns_resolution_optional")] public static extern void NodeFeatures_set_dns_resolution_optional(long _this_arg);
	// void NodeFeatures_set_dns_resolution_required(struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_set_dns_resolution_required")] public static extern void NodeFeatures_set_dns_resolution_required(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_supports_dns_resolution(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_supports_dns_resolution")] public static extern bool NodeFeatures_supports_dns_resolution(long _this_arg);
	// MUST_USE_RES bool NodeFeatures_requires_dns_resolution(const struct LDKNodeFeatures *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_NodeFeatures_requires_dns_resolution")] public static extern bool NodeFeatures_requires_dns_resolution(long _this_arg);
	// void RoutingFees_free(struct LDKRoutingFees this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_free")] public static extern void RoutingFees_free(long _this_obj);
	// uint32_t RoutingFees_get_base_msat(const struct LDKRoutingFees *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_get_base_msat")] public static extern int RoutingFees_get_base_msat(long _this_ptr);
	// void RoutingFees_set_base_msat(struct LDKRoutingFees *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_set_base_msat")] public static extern void RoutingFees_set_base_msat(long _this_ptr, int _val);
	// uint32_t RoutingFees_get_proportional_millionths(const struct LDKRoutingFees *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_get_proportional_millionths")] public static extern int RoutingFees_get_proportional_millionths(long _this_ptr);
	// void RoutingFees_set_proportional_millionths(struct LDKRoutingFees *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_set_proportional_millionths")] public static extern void RoutingFees_set_proportional_millionths(long _this_ptr, int _val);
	// MUST_USE_RES struct LDKRoutingFees RoutingFees_new(uint32_t base_msat_arg, uint32_t proportional_millionths_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_new")] public static extern long RoutingFees_new(int _base_msat_arg, int _proportional_millionths_arg);
	// bool RoutingFees_eq(const struct LDKRoutingFees *NONNULL_PTR a, const struct LDKRoutingFees *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_eq")] public static extern bool RoutingFees_eq(long _a, long _b);
	// uint64_t RoutingFees_clone_ptr(LDKRoutingFees *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_clone_ptr")] public static extern long RoutingFees_clone_ptr(long _arg);
	// struct LDKRoutingFees RoutingFees_clone(const struct LDKRoutingFees *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_clone")] public static extern long RoutingFees_clone(long _orig);
	// uint64_t RoutingFees_hash(const struct LDKRoutingFees *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RoutingFees_hash")] public static extern long RoutingFees_hash(long _o);
	// void RouteHint_free(struct LDKRouteHint this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_free")] public static extern void RouteHint_free(long _this_obj);
	// struct LDKCVec_RouteHintHopZ RouteHint_get_a(const struct LDKRouteHint *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_get_a")] public static extern long RouteHint_get_a(long _this_ptr);
	// void RouteHint_set_a(struct LDKRouteHint *NONNULL_PTR this_ptr, struct LDKCVec_RouteHintHopZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_set_a")] public static extern void RouteHint_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRouteHint RouteHint_new(struct LDKCVec_RouteHintHopZ a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_new")] public static extern long RouteHint_new(long _a_arg);
	// uint64_t RouteHint_clone_ptr(LDKRouteHint *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_clone_ptr")] public static extern long RouteHint_clone_ptr(long _arg);
	// struct LDKRouteHint RouteHint_clone(const struct LDKRouteHint *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_clone")] public static extern long RouteHint_clone(long _orig);
	// uint64_t RouteHint_hash(const struct LDKRouteHint *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_hash")] public static extern long RouteHint_hash(long _o);
	// bool RouteHint_eq(const struct LDKRouteHint *NONNULL_PTR a, const struct LDKRouteHint *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHint_eq")] public static extern bool RouteHint_eq(long _a, long _b);
	// void RouteHintHop_free(struct LDKRouteHintHop this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_free")] public static extern void RouteHintHop_free(long _this_obj);
	// struct LDKPublicKey RouteHintHop_get_src_node_id(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_src_node_id")] public static extern long RouteHintHop_get_src_node_id(long _this_ptr);
	// void RouteHintHop_set_src_node_id(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_src_node_id")] public static extern void RouteHintHop_set_src_node_id(long _this_ptr, long _val);
	// uint64_t RouteHintHop_get_short_channel_id(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_short_channel_id")] public static extern long RouteHintHop_get_short_channel_id(long _this_ptr);
	// void RouteHintHop_set_short_channel_id(struct LDKRouteHintHop *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_short_channel_id")] public static extern void RouteHintHop_set_short_channel_id(long _this_ptr, long _val);
	// struct LDKRoutingFees RouteHintHop_get_fees(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_fees")] public static extern long RouteHintHop_get_fees(long _this_ptr);
	// void RouteHintHop_set_fees(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKRoutingFees val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_fees")] public static extern void RouteHintHop_set_fees(long _this_ptr, long _val);
	// uint16_t RouteHintHop_get_cltv_expiry_delta(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_cltv_expiry_delta")] public static extern short RouteHintHop_get_cltv_expiry_delta(long _this_ptr);
	// void RouteHintHop_set_cltv_expiry_delta(struct LDKRouteHintHop *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_cltv_expiry_delta")] public static extern void RouteHintHop_set_cltv_expiry_delta(long _this_ptr, short _val);
	// struct LDKCOption_u64Z RouteHintHop_get_htlc_minimum_msat(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_htlc_minimum_msat")] public static extern long RouteHintHop_get_htlc_minimum_msat(long _this_ptr);
	// void RouteHintHop_set_htlc_minimum_msat(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_htlc_minimum_msat")] public static extern void RouteHintHop_set_htlc_minimum_msat(long _this_ptr, long _val);
	// struct LDKCOption_u64Z RouteHintHop_get_htlc_maximum_msat(const struct LDKRouteHintHop *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_get_htlc_maximum_msat")] public static extern long RouteHintHop_get_htlc_maximum_msat(long _this_ptr);
	// void RouteHintHop_set_htlc_maximum_msat(struct LDKRouteHintHop *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_set_htlc_maximum_msat")] public static extern void RouteHintHop_set_htlc_maximum_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRouteHintHop RouteHintHop_new(struct LDKPublicKey src_node_id_arg, uint64_t short_channel_id_arg, struct LDKRoutingFees fees_arg, uint16_t cltv_expiry_delta_arg, struct LDKCOption_u64Z htlc_minimum_msat_arg, struct LDKCOption_u64Z htlc_maximum_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_new")] public static extern long RouteHintHop_new(long _src_node_id_arg, long _short_channel_id_arg, long _fees_arg, short _cltv_expiry_delta_arg, long _htlc_minimum_msat_arg, long _htlc_maximum_msat_arg);
	// uint64_t RouteHintHop_clone_ptr(LDKRouteHintHop *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_clone_ptr")] public static extern long RouteHintHop_clone_ptr(long _arg);
	// struct LDKRouteHintHop RouteHintHop_clone(const struct LDKRouteHintHop *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_clone")] public static extern long RouteHintHop_clone(long _orig);
	// uint64_t RouteHintHop_hash(const struct LDKRouteHintHop *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_hash")] public static extern long RouteHintHop_hash(long _o);
	// bool RouteHintHop_eq(const struct LDKRouteHintHop *NONNULL_PTR a, const struct LDKRouteHintHop *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RouteHintHop_eq")] public static extern bool RouteHintHop_eq(long _a, long _b);
	// void UntrustedString_free(struct LDKUntrustedString this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_free")] public static extern void UntrustedString_free(long _this_obj);
	// struct LDKStr UntrustedString_get_a(const struct LDKUntrustedString *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_get_a")] public static extern long UntrustedString_get_a(long _this_ptr);
	// void UntrustedString_set_a(struct LDKUntrustedString *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_set_a")] public static extern void UntrustedString_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKUntrustedString UntrustedString_new(struct LDKStr a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_new")] public static extern long UntrustedString_new(long _a_arg);
	// uint64_t UntrustedString_clone_ptr(LDKUntrustedString *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_clone_ptr")] public static extern long UntrustedString_clone_ptr(long _arg);
	// struct LDKUntrustedString UntrustedString_clone(const struct LDKUntrustedString *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_clone")] public static extern long UntrustedString_clone(long _orig);
	// bool UntrustedString_eq(const struct LDKUntrustedString *NONNULL_PTR a, const struct LDKUntrustedString *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_eq")] public static extern bool UntrustedString_eq(long _a, long _b);
	// uint64_t UntrustedString_hash(const struct LDKUntrustedString *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_hash")] public static extern long UntrustedString_hash(long _o);
	// struct LDKStr UntrustedString_to_str(const struct LDKUntrustedString *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_UntrustedString_to_str")] public static extern long UntrustedString_to_str(long _o);
	// void PrintableString_free(struct LDKPrintableString this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_free")] public static extern void PrintableString_free(long _this_obj);
	// struct LDKStr PrintableString_get_a(const struct LDKPrintableString *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_get_a")] public static extern long PrintableString_get_a(long _this_ptr);
	// void PrintableString_set_a(struct LDKPrintableString *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_set_a")] public static extern void PrintableString_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPrintableString PrintableString_new(struct LDKStr a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_new")] public static extern long PrintableString_new(long _a_arg);
	// struct LDKStr PrintableString_to_str(const struct LDKPrintableString *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrintableString_to_str")] public static extern long PrintableString_to_str(long _o);
	// void FilesystemStore_free(struct LDKFilesystemStore this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_free")] public static extern void FilesystemStore_free(long _this_obj);
	// MUST_USE_RES struct LDKFilesystemStore FilesystemStore_new(struct LDKStr data_dir);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_new")] public static extern long FilesystemStore_new(long _data_dir);
	// MUST_USE_RES struct LDKStr FilesystemStore_get_data_dir(const struct LDKFilesystemStore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_get_data_dir")] public static extern long FilesystemStore_get_data_dir(long _this_arg);
	// struct LDKKVStore FilesystemStore_as_KVStore(const struct LDKFilesystemStore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_as_KVStore")] public static extern long FilesystemStore_as_KVStore(long _this_arg);
	// struct LDKMigratableKVStore FilesystemStore_as_MigratableKVStore(const struct LDKFilesystemStore *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_FilesystemStore_as_MigratableKVStore")] public static extern long FilesystemStore_as_MigratableKVStore(long _this_arg);
	// void BackgroundProcessor_free(struct LDKBackgroundProcessor this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_free")] public static extern void BackgroundProcessor_free(long _this_obj);
	// void GossipSync_free(struct LDKGossipSync this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_free")] public static extern void GossipSync_free(long _this_ptr);
	// struct LDKGossipSync GossipSync_p2_p(const struct LDKP2PGossipSync *NONNULL_PTR a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_p2_p")] public static extern long GossipSync_p2_p(long _a);
	// struct LDKGossipSync GossipSync_rapid(const struct LDKRapidGossipSync *NONNULL_PTR a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_rapid")] public static extern long GossipSync_rapid(long _a);
	// struct LDKGossipSync GossipSync_none(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GossipSync_none")] public static extern long GossipSync_none();
	// MUST_USE_RES struct LDKBackgroundProcessor BackgroundProcessor_start(struct LDKPersister persister, struct LDKEventHandler event_handler, const struct LDKChainMonitor *NONNULL_PTR chain_monitor, const struct LDKChannelManager *NONNULL_PTR channel_manager, const struct LDKOnionMessenger *NONNULL_PTR onion_messenger, struct LDKGossipSync gossip_sync, const struct LDKPeerManager *NONNULL_PTR peer_manager, struct LDKLogger logger, struct LDKCOption_WriteableScoreZ scorer);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_start")] public static extern long BackgroundProcessor_start(long _persister, long _event_handler, long _chain_monitor, long _channel_manager, long _onion_messenger, long _gossip_sync, long _peer_manager, long _logger, long _scorer);
	// MUST_USE_RES struct LDKCResult_NoneIOErrorZ BackgroundProcessor_join(struct LDKBackgroundProcessor this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_join")] public static extern long BackgroundProcessor_join(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneIOErrorZ BackgroundProcessor_stop(struct LDKBackgroundProcessor this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_BackgroundProcessor_stop")] public static extern long BackgroundProcessor_stop(long _this_arg);
	// void Bolt11ParseError_free(struct LDKBolt11ParseError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_free")] public static extern void Bolt11ParseError_free(long _this_obj);
	// bool Bolt11ParseError_eq(const struct LDKBolt11ParseError *NONNULL_PTR a, const struct LDKBolt11ParseError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_eq")] public static extern bool Bolt11ParseError_eq(long _a, long _b);
	// uint64_t Bolt11ParseError_clone_ptr(LDKBolt11ParseError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_clone_ptr")] public static extern long Bolt11ParseError_clone_ptr(long _arg);
	// struct LDKBolt11ParseError Bolt11ParseError_clone(const struct LDKBolt11ParseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_clone")] public static extern long Bolt11ParseError_clone(long _orig);
	// void ParseOrSemanticError_free(struct LDKParseOrSemanticError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_free")] public static extern void ParseOrSemanticError_free(long _this_ptr);
	// uint64_t ParseOrSemanticError_clone_ptr(LDKParseOrSemanticError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_clone_ptr")] public static extern long ParseOrSemanticError_clone_ptr(long _arg);
	// struct LDKParseOrSemanticError ParseOrSemanticError_clone(const struct LDKParseOrSemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_clone")] public static extern long ParseOrSemanticError_clone(long _orig);
	// struct LDKParseOrSemanticError ParseOrSemanticError_parse_error(struct LDKBolt11ParseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_parse_error")] public static extern long ParseOrSemanticError_parse_error(long _a);
	// struct LDKParseOrSemanticError ParseOrSemanticError_semantic_error(enum LDKBolt11SemanticError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_semantic_error")] public static extern long ParseOrSemanticError_semantic_error(Bolt11SemanticError _a);
	// bool ParseOrSemanticError_eq(const struct LDKParseOrSemanticError *NONNULL_PTR a, const struct LDKParseOrSemanticError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_eq")] public static extern bool ParseOrSemanticError_eq(long _a, long _b);
	// void Bolt11Invoice_free(struct LDKBolt11Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_free")] public static extern void Bolt11Invoice_free(long _this_obj);
	// bool Bolt11Invoice_eq(const struct LDKBolt11Invoice *NONNULL_PTR a, const struct LDKBolt11Invoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_eq")] public static extern bool Bolt11Invoice_eq(long _a, long _b);
	// uint64_t Bolt11Invoice_clone_ptr(LDKBolt11Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_clone_ptr")] public static extern long Bolt11Invoice_clone_ptr(long _arg);
	// struct LDKBolt11Invoice Bolt11Invoice_clone(const struct LDKBolt11Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_clone")] public static extern long Bolt11Invoice_clone(long _orig);
	// uint64_t Bolt11Invoice_hash(const struct LDKBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_hash")] public static extern long Bolt11Invoice_hash(long _o);
	// void Bolt11InvoiceDescription_free(struct LDKBolt11InvoiceDescription this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceDescription_free")] public static extern void Bolt11InvoiceDescription_free(long _this_ptr);
	// uint64_t Bolt11InvoiceDescription_clone_ptr(LDKBolt11InvoiceDescription *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceDescription_clone_ptr")] public static extern long Bolt11InvoiceDescription_clone_ptr(long _arg);
	// struct LDKBolt11InvoiceDescription Bolt11InvoiceDescription_clone(const struct LDKBolt11InvoiceDescription *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceDescription_clone")] public static extern long Bolt11InvoiceDescription_clone(long _orig);
	// struct LDKBolt11InvoiceDescription Bolt11InvoiceDescription_direct(struct LDKDescription a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceDescription_direct")] public static extern long Bolt11InvoiceDescription_direct(long _a);
	// struct LDKBolt11InvoiceDescription Bolt11InvoiceDescription_hash(struct LDKSha256 a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceDescription_hash")] public static extern long Bolt11InvoiceDescription_hash(long _a);
	// bool Bolt11InvoiceDescription_eq(const struct LDKBolt11InvoiceDescription *NONNULL_PTR a, const struct LDKBolt11InvoiceDescription *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceDescription_eq")] public static extern bool Bolt11InvoiceDescription_eq(long _a, long _b);
	// struct LDKStr Bolt11InvoiceDescription_to_str(const struct LDKBolt11InvoiceDescription *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceDescription_to_str")] public static extern long Bolt11InvoiceDescription_to_str(long _o);
	// void SignedRawBolt11Invoice_free(struct LDKSignedRawBolt11Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_free")] public static extern void SignedRawBolt11Invoice_free(long _this_obj);
	// bool SignedRawBolt11Invoice_eq(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR a, const struct LDKSignedRawBolt11Invoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_eq")] public static extern bool SignedRawBolt11Invoice_eq(long _a, long _b);
	// uint64_t SignedRawBolt11Invoice_clone_ptr(LDKSignedRawBolt11Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_clone_ptr")] public static extern long SignedRawBolt11Invoice_clone_ptr(long _arg);
	// struct LDKSignedRawBolt11Invoice SignedRawBolt11Invoice_clone(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_clone")] public static extern long SignedRawBolt11Invoice_clone(long _orig);
	// uint64_t SignedRawBolt11Invoice_hash(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_hash")] public static extern long SignedRawBolt11Invoice_hash(long _o);
	// void RawBolt11Invoice_free(struct LDKRawBolt11Invoice this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_free")] public static extern void RawBolt11Invoice_free(long _this_obj);
	// struct LDKRawDataPart RawBolt11Invoice_get_data(const struct LDKRawBolt11Invoice *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_get_data")] public static extern long RawBolt11Invoice_get_data(long _this_ptr);
	// void RawBolt11Invoice_set_data(struct LDKRawBolt11Invoice *NONNULL_PTR this_ptr, struct LDKRawDataPart val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_set_data")] public static extern void RawBolt11Invoice_set_data(long _this_ptr, long _val);
	// bool RawBolt11Invoice_eq(const struct LDKRawBolt11Invoice *NONNULL_PTR a, const struct LDKRawBolt11Invoice *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_eq")] public static extern bool RawBolt11Invoice_eq(long _a, long _b);
	// uint64_t RawBolt11Invoice_clone_ptr(LDKRawBolt11Invoice *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_clone_ptr")] public static extern long RawBolt11Invoice_clone_ptr(long _arg);
	// struct LDKRawBolt11Invoice RawBolt11Invoice_clone(const struct LDKRawBolt11Invoice *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_clone")] public static extern long RawBolt11Invoice_clone(long _orig);
	// uint64_t RawBolt11Invoice_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_hash")] public static extern long RawBolt11Invoice_hash(long _o);
	// void RawDataPart_free(struct LDKRawDataPart this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_free")] public static extern void RawDataPart_free(long _this_obj);
	// struct LDKPositiveTimestamp RawDataPart_get_timestamp(const struct LDKRawDataPart *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_get_timestamp")] public static extern long RawDataPart_get_timestamp(long _this_ptr);
	// void RawDataPart_set_timestamp(struct LDKRawDataPart *NONNULL_PTR this_ptr, struct LDKPositiveTimestamp val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_set_timestamp")] public static extern void RawDataPart_set_timestamp(long _this_ptr, long _val);
	// bool RawDataPart_eq(const struct LDKRawDataPart *NONNULL_PTR a, const struct LDKRawDataPart *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_eq")] public static extern bool RawDataPart_eq(long _a, long _b);
	// uint64_t RawDataPart_clone_ptr(LDKRawDataPart *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_clone_ptr")] public static extern long RawDataPart_clone_ptr(long _arg);
	// struct LDKRawDataPart RawDataPart_clone(const struct LDKRawDataPart *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_clone")] public static extern long RawDataPart_clone(long _orig);
	// uint64_t RawDataPart_hash(const struct LDKRawDataPart *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawDataPart_hash")] public static extern long RawDataPart_hash(long _o);
	// void PositiveTimestamp_free(struct LDKPositiveTimestamp this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_free")] public static extern void PositiveTimestamp_free(long _this_obj);
	// bool PositiveTimestamp_eq(const struct LDKPositiveTimestamp *NONNULL_PTR a, const struct LDKPositiveTimestamp *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_eq")] public static extern bool PositiveTimestamp_eq(long _a, long _b);
	// uint64_t PositiveTimestamp_clone_ptr(LDKPositiveTimestamp *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_clone_ptr")] public static extern long PositiveTimestamp_clone_ptr(long _arg);
	// struct LDKPositiveTimestamp PositiveTimestamp_clone(const struct LDKPositiveTimestamp *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_clone")] public static extern long PositiveTimestamp_clone(long _orig);
	// uint64_t PositiveTimestamp_hash(const struct LDKPositiveTimestamp *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_hash")] public static extern long PositiveTimestamp_hash(long _o);
	// enum LDKSiPrefix SiPrefix_clone(const enum LDKSiPrefix *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_clone")] public static extern SiPrefix SiPrefix_clone(long _orig);
	// enum LDKSiPrefix SiPrefix_milli(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_milli")] public static extern SiPrefix SiPrefix_milli();
	// enum LDKSiPrefix SiPrefix_micro(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_micro")] public static extern SiPrefix SiPrefix_micro();
	// enum LDKSiPrefix SiPrefix_nano(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_nano")] public static extern SiPrefix SiPrefix_nano();
	// enum LDKSiPrefix SiPrefix_pico(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_pico")] public static extern SiPrefix SiPrefix_pico();
	// bool SiPrefix_eq(const enum LDKSiPrefix *NONNULL_PTR a, const enum LDKSiPrefix *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_eq")] public static extern bool SiPrefix_eq(long _a, long _b);
	// uint64_t SiPrefix_hash(const enum LDKSiPrefix *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_hash")] public static extern long SiPrefix_hash(long _o);
	// MUST_USE_RES uint64_t SiPrefix_multiplier(const enum LDKSiPrefix *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_multiplier")] public static extern long SiPrefix_multiplier(long _this_arg);
	// enum LDKCurrency Currency_clone(const enum LDKCurrency *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_clone")] public static extern Currency Currency_clone(long _orig);
	// enum LDKCurrency Currency_bitcoin(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_bitcoin")] public static extern Currency Currency_bitcoin();
	// enum LDKCurrency Currency_bitcoin_testnet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_bitcoin_testnet")] public static extern Currency Currency_bitcoin_testnet();
	// enum LDKCurrency Currency_regtest(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_regtest")] public static extern Currency Currency_regtest();
	// enum LDKCurrency Currency_simnet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_simnet")] public static extern Currency Currency_simnet();
	// enum LDKCurrency Currency_signet(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_signet")] public static extern Currency Currency_signet();
	// uint64_t Currency_hash(const enum LDKCurrency *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_hash")] public static extern long Currency_hash(long _o);
	// bool Currency_eq(const enum LDKCurrency *NONNULL_PTR a, const enum LDKCurrency *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_eq")] public static extern bool Currency_eq(long _a, long _b);
	// void Sha256_free(struct LDKSha256 this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_free")] public static extern void Sha256_free(long _this_obj);
	// uint64_t Sha256_clone_ptr(LDKSha256 *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_clone_ptr")] public static extern long Sha256_clone_ptr(long _arg);
	// struct LDKSha256 Sha256_clone(const struct LDKSha256 *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_clone")] public static extern long Sha256_clone(long _orig);
	// uint64_t Sha256_hash(const struct LDKSha256 *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_hash")] public static extern long Sha256_hash(long _o);
	// bool Sha256_eq(const struct LDKSha256 *NONNULL_PTR a, const struct LDKSha256 *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_eq")] public static extern bool Sha256_eq(long _a, long _b);
	// MUST_USE_RES struct LDKSha256 Sha256_from_bytes(const uint8_t (*bytes)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Sha256_from_bytes")] public static extern long Sha256_from_bytes(long _bytes);
	// void Description_free(struct LDKDescription this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_free")] public static extern void Description_free(long _this_obj);
	// uint64_t Description_clone_ptr(LDKDescription *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_clone_ptr")] public static extern long Description_clone_ptr(long _arg);
	// struct LDKDescription Description_clone(const struct LDKDescription *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_clone")] public static extern long Description_clone(long _orig);
	// uint64_t Description_hash(const struct LDKDescription *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_hash")] public static extern long Description_hash(long _o);
	// bool Description_eq(const struct LDKDescription *NONNULL_PTR a, const struct LDKDescription *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_eq")] public static extern bool Description_eq(long _a, long _b);
	// void PayeePubKey_free(struct LDKPayeePubKey this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_free")] public static extern void PayeePubKey_free(long _this_obj);
	// struct LDKPublicKey PayeePubKey_get_a(const struct LDKPayeePubKey *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_get_a")] public static extern long PayeePubKey_get_a(long _this_ptr);
	// void PayeePubKey_set_a(struct LDKPayeePubKey *NONNULL_PTR this_ptr, struct LDKPublicKey val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_set_a")] public static extern void PayeePubKey_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKPayeePubKey PayeePubKey_new(struct LDKPublicKey a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_new")] public static extern long PayeePubKey_new(long _a_arg);
	// uint64_t PayeePubKey_clone_ptr(LDKPayeePubKey *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_clone_ptr")] public static extern long PayeePubKey_clone_ptr(long _arg);
	// struct LDKPayeePubKey PayeePubKey_clone(const struct LDKPayeePubKey *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_clone")] public static extern long PayeePubKey_clone(long _orig);
	// uint64_t PayeePubKey_hash(const struct LDKPayeePubKey *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_hash")] public static extern long PayeePubKey_hash(long _o);
	// bool PayeePubKey_eq(const struct LDKPayeePubKey *NONNULL_PTR a, const struct LDKPayeePubKey *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PayeePubKey_eq")] public static extern bool PayeePubKey_eq(long _a, long _b);
	// void ExpiryTime_free(struct LDKExpiryTime this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_free")] public static extern void ExpiryTime_free(long _this_obj);
	// uint64_t ExpiryTime_clone_ptr(LDKExpiryTime *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_clone_ptr")] public static extern long ExpiryTime_clone_ptr(long _arg);
	// struct LDKExpiryTime ExpiryTime_clone(const struct LDKExpiryTime *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_clone")] public static extern long ExpiryTime_clone(long _orig);
	// uint64_t ExpiryTime_hash(const struct LDKExpiryTime *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_hash")] public static extern long ExpiryTime_hash(long _o);
	// bool ExpiryTime_eq(const struct LDKExpiryTime *NONNULL_PTR a, const struct LDKExpiryTime *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_eq")] public static extern bool ExpiryTime_eq(long _a, long _b);
	// void MinFinalCltvExpiryDelta_free(struct LDKMinFinalCltvExpiryDelta this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_free")] public static extern void MinFinalCltvExpiryDelta_free(long _this_obj);
	// uint64_t MinFinalCltvExpiryDelta_get_a(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_get_a")] public static extern long MinFinalCltvExpiryDelta_get_a(long _this_ptr);
	// void MinFinalCltvExpiryDelta_set_a(struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_set_a")] public static extern void MinFinalCltvExpiryDelta_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKMinFinalCltvExpiryDelta MinFinalCltvExpiryDelta_new(uint64_t a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_new")] public static extern long MinFinalCltvExpiryDelta_new(long _a_arg);
	// uint64_t MinFinalCltvExpiryDelta_clone_ptr(LDKMinFinalCltvExpiryDelta *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_clone_ptr")] public static extern long MinFinalCltvExpiryDelta_clone_ptr(long _arg);
	// struct LDKMinFinalCltvExpiryDelta MinFinalCltvExpiryDelta_clone(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_clone")] public static extern long MinFinalCltvExpiryDelta_clone(long _orig);
	// uint64_t MinFinalCltvExpiryDelta_hash(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_hash")] public static extern long MinFinalCltvExpiryDelta_hash(long _o);
	// bool MinFinalCltvExpiryDelta_eq(const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR a, const struct LDKMinFinalCltvExpiryDelta *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MinFinalCltvExpiryDelta_eq")] public static extern bool MinFinalCltvExpiryDelta_eq(long _a, long _b);
	// void Fallback_free(struct LDKFallback this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_free")] public static extern void Fallback_free(long _this_ptr);
	// uint64_t Fallback_clone_ptr(LDKFallback *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_clone_ptr")] public static extern long Fallback_clone_ptr(long _arg);
	// struct LDKFallback Fallback_clone(const struct LDKFallback *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_clone")] public static extern long Fallback_clone(long _orig);
	// struct LDKFallback Fallback_seg_wit_program(struct LDKWitnessVersion version, struct LDKCVec_u8Z program);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_seg_wit_program")] public static extern long Fallback_seg_wit_program(byte _version, long _program);
	// struct LDKFallback Fallback_pub_key_hash(struct LDKTwentyBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_pub_key_hash")] public static extern long Fallback_pub_key_hash(long _a);
	// struct LDKFallback Fallback_script_hash(struct LDKTwentyBytes a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_script_hash")] public static extern long Fallback_script_hash(long _a);
	// uint64_t Fallback_hash(const struct LDKFallback *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_hash")] public static extern long Fallback_hash(long _o);
	// bool Fallback_eq(const struct LDKFallback *NONNULL_PTR a, const struct LDKFallback *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Fallback_eq")] public static extern bool Fallback_eq(long _a, long _b);
	// void Bolt11InvoiceSignature_free(struct LDKBolt11InvoiceSignature this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_free")] public static extern void Bolt11InvoiceSignature_free(long _this_obj);
	// struct LDKRecoverableSignature Bolt11InvoiceSignature_get_a(const struct LDKBolt11InvoiceSignature *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_get_a")] public static extern long Bolt11InvoiceSignature_get_a(long _this_ptr);
	// void Bolt11InvoiceSignature_set_a(struct LDKBolt11InvoiceSignature *NONNULL_PTR this_ptr, struct LDKRecoverableSignature val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_set_a")] public static extern void Bolt11InvoiceSignature_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKBolt11InvoiceSignature Bolt11InvoiceSignature_new(struct LDKRecoverableSignature a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_new")] public static extern long Bolt11InvoiceSignature_new(long _a_arg);
	// uint64_t Bolt11InvoiceSignature_clone_ptr(LDKBolt11InvoiceSignature *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_clone_ptr")] public static extern long Bolt11InvoiceSignature_clone_ptr(long _arg);
	// struct LDKBolt11InvoiceSignature Bolt11InvoiceSignature_clone(const struct LDKBolt11InvoiceSignature *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_clone")] public static extern long Bolt11InvoiceSignature_clone(long _orig);
	// uint64_t Bolt11InvoiceSignature_hash(const struct LDKBolt11InvoiceSignature *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_hash")] public static extern long Bolt11InvoiceSignature_hash(long _o);
	// bool Bolt11InvoiceSignature_eq(const struct LDKBolt11InvoiceSignature *NONNULL_PTR a, const struct LDKBolt11InvoiceSignature *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11InvoiceSignature_eq")] public static extern bool Bolt11InvoiceSignature_eq(long _a, long _b);
	// void PrivateRoute_free(struct LDKPrivateRoute this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_free")] public static extern void PrivateRoute_free(long _this_obj);
	// uint64_t PrivateRoute_clone_ptr(LDKPrivateRoute *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_clone_ptr")] public static extern long PrivateRoute_clone_ptr(long _arg);
	// struct LDKPrivateRoute PrivateRoute_clone(const struct LDKPrivateRoute *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_clone")] public static extern long PrivateRoute_clone(long _orig);
	// uint64_t PrivateRoute_hash(const struct LDKPrivateRoute *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_hash")] public static extern long PrivateRoute_hash(long _o);
	// bool PrivateRoute_eq(const struct LDKPrivateRoute *NONNULL_PTR a, const struct LDKPrivateRoute *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_eq")] public static extern bool PrivateRoute_eq(long _a, long _b);
	// MUST_USE_RES struct LDKC3Tuple_RawBolt11Invoice_u832Bolt11InvoiceSignatureZ SignedRawBolt11Invoice_into_parts(struct LDKSignedRawBolt11Invoice this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_into_parts")] public static extern long SignedRawBolt11Invoice_into_parts(long _this_arg);
	// MUST_USE_RES struct LDKRawBolt11Invoice SignedRawBolt11Invoice_raw_invoice(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_raw_invoice")] public static extern long SignedRawBolt11Invoice_raw_invoice(long _this_arg);
	// MUST_USE_RES const uint8_t (*SignedRawBolt11Invoice_signable_hash(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_signable_hash")] public static extern long SignedRawBolt11Invoice_signable_hash(long _this_arg);
	// MUST_USE_RES struct LDKBolt11InvoiceSignature SignedRawBolt11Invoice_signature(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_signature")] public static extern long SignedRawBolt11Invoice_signature(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PayeePubKeySecp256k1ErrorZ SignedRawBolt11Invoice_recover_payee_pub_key(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_recover_payee_pub_key")] public static extern long SignedRawBolt11Invoice_recover_payee_pub_key(long _this_arg);
	// MUST_USE_RES bool SignedRawBolt11Invoice_check_signature(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_check_signature")] public static extern bool SignedRawBolt11Invoice_check_signature(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes RawBolt11Invoice_signable_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_signable_hash")] public static extern long RawBolt11Invoice_signable_hash(long _this_arg);
	// MUST_USE_RES struct LDKSha256 RawBolt11Invoice_payment_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payment_hash")] public static extern long RawBolt11Invoice_payment_hash(long _this_arg);
	// MUST_USE_RES struct LDKDescription RawBolt11Invoice_description(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_description")] public static extern long RawBolt11Invoice_description(long _this_arg);
	// MUST_USE_RES struct LDKPayeePubKey RawBolt11Invoice_payee_pub_key(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payee_pub_key")] public static extern long RawBolt11Invoice_payee_pub_key(long _this_arg);
	// MUST_USE_RES struct LDKSha256 RawBolt11Invoice_description_hash(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_description_hash")] public static extern long RawBolt11Invoice_description_hash(long _this_arg);
	// MUST_USE_RES struct LDKExpiryTime RawBolt11Invoice_expiry_time(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_expiry_time")] public static extern long RawBolt11Invoice_expiry_time(long _this_arg);
	// MUST_USE_RES struct LDKMinFinalCltvExpiryDelta RawBolt11Invoice_min_final_cltv_expiry_delta(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_min_final_cltv_expiry_delta")] public static extern long RawBolt11Invoice_min_final_cltv_expiry_delta(long _this_arg);
	// MUST_USE_RES struct LDKCOption_ThirtyTwoBytesZ RawBolt11Invoice_payment_secret(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payment_secret")] public static extern long RawBolt11Invoice_payment_secret(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ RawBolt11Invoice_payment_metadata(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_payment_metadata")] public static extern long RawBolt11Invoice_payment_metadata(long _this_arg);
	// MUST_USE_RES struct LDKBolt11InvoiceFeatures RawBolt11Invoice_features(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_features")] public static extern long RawBolt11Invoice_features(long _this_arg);
	// MUST_USE_RES struct LDKCVec_PrivateRouteZ RawBolt11Invoice_private_routes(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_private_routes")] public static extern long RawBolt11Invoice_private_routes(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z RawBolt11Invoice_amount_pico_btc(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_amount_pico_btc")] public static extern long RawBolt11Invoice_amount_pico_btc(long _this_arg);
	// MUST_USE_RES enum LDKCurrency RawBolt11Invoice_currency(const struct LDKRawBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawBolt11Invoice_currency")] public static extern Currency RawBolt11Invoice_currency(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_unix_timestamp(uint64_t unix_seconds);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_unix_timestamp")] public static extern long PositiveTimestamp_from_unix_timestamp(long _unix_seconds);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_system_time(uint64_t time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_system_time")] public static extern long PositiveTimestamp_from_system_time(long _time);
	// MUST_USE_RES struct LDKCResult_PositiveTimestampCreationErrorZ PositiveTimestamp_from_duration_since_epoch(uint64_t duration);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_from_duration_since_epoch")] public static extern long PositiveTimestamp_from_duration_since_epoch(long _duration);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_unix_timestamp(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_unix_timestamp")] public static extern long PositiveTimestamp_as_unix_timestamp(long _this_arg);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_duration_since_epoch(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_duration_since_epoch")] public static extern long PositiveTimestamp_as_duration_since_epoch(long _this_arg);
	// MUST_USE_RES uint64_t PositiveTimestamp_as_time(const struct LDKPositiveTimestamp *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PositiveTimestamp_as_time")] public static extern long PositiveTimestamp_as_time(long _this_arg);
	// MUST_USE_RES struct LDKThirtyTwoBytes Bolt11Invoice_signable_hash(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_signable_hash")] public static extern long Bolt11Invoice_signable_hash(long _this_arg);
	// MUST_USE_RES struct LDKSignedRawBolt11Invoice Bolt11Invoice_into_signed_raw(struct LDKBolt11Invoice this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_into_signed_raw")] public static extern long Bolt11Invoice_into_signed_raw(long _this_arg);
	// MUST_USE_RES struct LDKCResult_NoneBolt11SemanticErrorZ Bolt11Invoice_check_signature(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_check_signature")] public static extern long Bolt11Invoice_check_signature(long _this_arg);
	// MUST_USE_RES struct LDKCResult_Bolt11InvoiceBolt11SemanticErrorZ Bolt11Invoice_from_signed(struct LDKSignedRawBolt11Invoice signed_invoice);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_from_signed")] public static extern long Bolt11Invoice_from_signed(long _signed_invoice);
	// MUST_USE_RES uint64_t Bolt11Invoice_timestamp(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_timestamp")] public static extern long Bolt11Invoice_timestamp(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_duration_since_epoch(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_duration_since_epoch")] public static extern long Bolt11Invoice_duration_since_epoch(long _this_arg);
	// MUST_USE_RES const uint8_t (*Bolt11Invoice_payment_hash(const struct LDKBolt11Invoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payment_hash")] public static extern long Bolt11Invoice_payment_hash(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt11Invoice_payee_pub_key(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payee_pub_key")] public static extern long Bolt11Invoice_payee_pub_key(long _this_arg);
	// MUST_USE_RES const uint8_t (*Bolt11Invoice_payment_secret(const struct LDKBolt11Invoice *NONNULL_PTR this_arg))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payment_secret")] public static extern long Bolt11Invoice_payment_secret(long _this_arg);
	// MUST_USE_RES struct LDKCOption_CVec_u8ZZ Bolt11Invoice_payment_metadata(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_payment_metadata")] public static extern long Bolt11Invoice_payment_metadata(long _this_arg);
	// MUST_USE_RES struct LDKBolt11InvoiceFeatures Bolt11Invoice_features(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_features")] public static extern long Bolt11Invoice_features(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt11Invoice_recover_payee_pub_key(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_recover_payee_pub_key")] public static extern long Bolt11Invoice_recover_payee_pub_key(long _this_arg);
	// MUST_USE_RES struct LDKPublicKey Bolt11Invoice_get_payee_pub_key(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_get_payee_pub_key")] public static extern long Bolt11Invoice_get_payee_pub_key(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt11Invoice_expires_at(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_expires_at")] public static extern long Bolt11Invoice_expires_at(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_expiry_time(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_expiry_time")] public static extern long Bolt11Invoice_expiry_time(long _this_arg);
	// MUST_USE_RES bool Bolt11Invoice_is_expired(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_is_expired")] public static extern bool Bolt11Invoice_is_expired(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_duration_until_expiry(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_duration_until_expiry")] public static extern long Bolt11Invoice_duration_until_expiry(long _this_arg);
	// MUST_USE_RES uint64_t Bolt11Invoice_expiration_remaining_from_epoch(const struct LDKBolt11Invoice *NONNULL_PTR this_arg, uint64_t time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_expiration_remaining_from_epoch")] public static extern long Bolt11Invoice_expiration_remaining_from_epoch(long _this_arg, long _time);
	// MUST_USE_RES bool Bolt11Invoice_would_expire(const struct LDKBolt11Invoice *NONNULL_PTR this_arg, uint64_t at_time);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_would_expire")] public static extern bool Bolt11Invoice_would_expire(long _this_arg, long _at_time);
	// MUST_USE_RES uint64_t Bolt11Invoice_min_final_cltv_expiry_delta(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_min_final_cltv_expiry_delta")] public static extern long Bolt11Invoice_min_final_cltv_expiry_delta(long _this_arg);
	// MUST_USE_RES struct LDKCVec_AddressZ Bolt11Invoice_fallback_addresses(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_fallback_addresses")] public static extern long Bolt11Invoice_fallback_addresses(long _this_arg);
	// MUST_USE_RES struct LDKCVec_PrivateRouteZ Bolt11Invoice_private_routes(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_private_routes")] public static extern long Bolt11Invoice_private_routes(long _this_arg);
	// MUST_USE_RES struct LDKCVec_RouteHintZ Bolt11Invoice_route_hints(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_route_hints")] public static extern long Bolt11Invoice_route_hints(long _this_arg);
	// MUST_USE_RES enum LDKCurrency Bolt11Invoice_currency(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_currency")] public static extern Currency Bolt11Invoice_currency(long _this_arg);
	// MUST_USE_RES struct LDKCOption_u64Z Bolt11Invoice_amount_milli_satoshis(const struct LDKBolt11Invoice *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_amount_milli_satoshis")] public static extern long Bolt11Invoice_amount_milli_satoshis(long _this_arg);
	// MUST_USE_RES struct LDKCResult_DescriptionCreationErrorZ Description_new(struct LDKStr description);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_new")] public static extern long Description_new(long _description);
	// MUST_USE_RES struct LDKDescription Description_empty(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_empty")] public static extern long Description_empty();
	// MUST_USE_RES struct LDKUntrustedString Description_into_inner(struct LDKDescription this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_into_inner")] public static extern long Description_into_inner(long _this_arg);
	// MUST_USE_RES struct LDKUntrustedString Description_as_inner(const struct LDKDescription *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_as_inner")] public static extern long Description_as_inner(long _this_arg);
	// struct LDKStr Description_to_str(const struct LDKDescription *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Description_to_str")] public static extern long Description_to_str(long _o);
	// MUST_USE_RES struct LDKExpiryTime ExpiryTime_from_seconds(uint64_t seconds);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_from_seconds")] public static extern long ExpiryTime_from_seconds(long _seconds);
	// MUST_USE_RES struct LDKExpiryTime ExpiryTime_from_duration(uint64_t duration);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_from_duration")] public static extern long ExpiryTime_from_duration(long _duration);
	// MUST_USE_RES uint64_t ExpiryTime_as_seconds(const struct LDKExpiryTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_as_seconds")] public static extern long ExpiryTime_as_seconds(long _this_arg);
	// MUST_USE_RES uint64_t ExpiryTime_as_duration(const struct LDKExpiryTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ExpiryTime_as_duration")] public static extern long ExpiryTime_as_duration(long _this_arg);
	// MUST_USE_RES struct LDKCResult_PrivateRouteCreationErrorZ PrivateRoute_new(struct LDKRouteHint hops);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_new")] public static extern long PrivateRoute_new(long _hops);
	// MUST_USE_RES struct LDKRouteHint PrivateRoute_into_inner(struct LDKPrivateRoute this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_PrivateRoute_into_inner")] public static extern long PrivateRoute_into_inner(long _this_arg);
	// enum LDKCreationError CreationError_clone(const enum LDKCreationError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_clone")] public static extern CreationError CreationError_clone(long _orig);
	// enum LDKCreationError CreationError_description_too_long(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_description_too_long")] public static extern CreationError CreationError_description_too_long();
	// enum LDKCreationError CreationError_route_too_long(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_route_too_long")] public static extern CreationError CreationError_route_too_long();
	// enum LDKCreationError CreationError_timestamp_out_of_bounds(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_timestamp_out_of_bounds")] public static extern CreationError CreationError_timestamp_out_of_bounds();
	// enum LDKCreationError CreationError_invalid_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_invalid_amount")] public static extern CreationError CreationError_invalid_amount();
	// enum LDKCreationError CreationError_missing_route_hints(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_missing_route_hints")] public static extern CreationError CreationError_missing_route_hints();
	// enum LDKCreationError CreationError_min_final_cltv_expiry_delta_too_short(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_min_final_cltv_expiry_delta_too_short")] public static extern CreationError CreationError_min_final_cltv_expiry_delta_too_short();
	// bool CreationError_eq(const enum LDKCreationError *NONNULL_PTR a, const enum LDKCreationError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_eq")] public static extern bool CreationError_eq(long _a, long _b);
	// struct LDKStr CreationError_to_str(const enum LDKCreationError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_CreationError_to_str")] public static extern long CreationError_to_str(long _o);
	// enum LDKBolt11SemanticError Bolt11SemanticError_clone(const enum LDKBolt11SemanticError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_clone")] public static extern Bolt11SemanticError Bolt11SemanticError_clone(long _orig);
	// enum LDKBolt11SemanticError Bolt11SemanticError_no_payment_hash(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_no_payment_hash")] public static extern Bolt11SemanticError Bolt11SemanticError_no_payment_hash();
	// enum LDKBolt11SemanticError Bolt11SemanticError_multiple_payment_hashes(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_multiple_payment_hashes")] public static extern Bolt11SemanticError Bolt11SemanticError_multiple_payment_hashes();
	// enum LDKBolt11SemanticError Bolt11SemanticError_no_description(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_no_description")] public static extern Bolt11SemanticError Bolt11SemanticError_no_description();
	// enum LDKBolt11SemanticError Bolt11SemanticError_multiple_descriptions(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_multiple_descriptions")] public static extern Bolt11SemanticError Bolt11SemanticError_multiple_descriptions();
	// enum LDKBolt11SemanticError Bolt11SemanticError_no_payment_secret(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_no_payment_secret")] public static extern Bolt11SemanticError Bolt11SemanticError_no_payment_secret();
	// enum LDKBolt11SemanticError Bolt11SemanticError_multiple_payment_secrets(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_multiple_payment_secrets")] public static extern Bolt11SemanticError Bolt11SemanticError_multiple_payment_secrets();
	// enum LDKBolt11SemanticError Bolt11SemanticError_invalid_features(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_invalid_features")] public static extern Bolt11SemanticError Bolt11SemanticError_invalid_features();
	// enum LDKBolt11SemanticError Bolt11SemanticError_invalid_recovery_id(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_invalid_recovery_id")] public static extern Bolt11SemanticError Bolt11SemanticError_invalid_recovery_id();
	// enum LDKBolt11SemanticError Bolt11SemanticError_invalid_signature(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_invalid_signature")] public static extern Bolt11SemanticError Bolt11SemanticError_invalid_signature();
	// enum LDKBolt11SemanticError Bolt11SemanticError_imprecise_amount(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_imprecise_amount")] public static extern Bolt11SemanticError Bolt11SemanticError_imprecise_amount();
	// bool Bolt11SemanticError_eq(const enum LDKBolt11SemanticError *NONNULL_PTR a, const enum LDKBolt11SemanticError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_eq")] public static extern bool Bolt11SemanticError_eq(long _a, long _b);
	// struct LDKStr Bolt11SemanticError_to_str(const enum LDKBolt11SemanticError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11SemanticError_to_str")] public static extern long Bolt11SemanticError_to_str(long _o);
	// void SignOrCreationError_free(struct LDKSignOrCreationError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_free")] public static extern void SignOrCreationError_free(long _this_ptr);
	// uint64_t SignOrCreationError_clone_ptr(LDKSignOrCreationError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_clone_ptr")] public static extern long SignOrCreationError_clone_ptr(long _arg);
	// struct LDKSignOrCreationError SignOrCreationError_clone(const struct LDKSignOrCreationError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_clone")] public static extern long SignOrCreationError_clone(long _orig);
	// struct LDKSignOrCreationError SignOrCreationError_sign_error(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_sign_error")] public static extern long SignOrCreationError_sign_error();
	// struct LDKSignOrCreationError SignOrCreationError_creation_error(enum LDKCreationError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_creation_error")] public static extern long SignOrCreationError_creation_error(CreationError _a);
	// bool SignOrCreationError_eq(const struct LDKSignOrCreationError *NONNULL_PTR a, const struct LDKSignOrCreationError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_eq")] public static extern bool SignOrCreationError_eq(long _a, long _b);
	// struct LDKStr SignOrCreationError_to_str(const struct LDKSignOrCreationError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignOrCreationError_to_str")] public static extern long SignOrCreationError_to_str(long _o);
	// struct LDKCResult_SiPrefixBolt11ParseErrorZ SiPrefix_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_from_str")] public static extern long SiPrefix_from_str(long _s);
	// struct LDKCResult_Bolt11InvoiceParseOrSemanticErrorZ Bolt11Invoice_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_from_str")] public static extern long Bolt11Invoice_from_str(long _s);
	// struct LDKCResult_SignedRawBolt11InvoiceBolt11ParseErrorZ SignedRawBolt11Invoice_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_from_str")] public static extern long SignedRawBolt11Invoice_from_str(long _s);
	// struct LDKStr Bolt11ParseError_to_str(const struct LDKBolt11ParseError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11ParseError_to_str")] public static extern long Bolt11ParseError_to_str(long _o);
	// struct LDKStr ParseOrSemanticError_to_str(const struct LDKParseOrSemanticError *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ParseOrSemanticError_to_str")] public static extern long ParseOrSemanticError_to_str(long _o);
	// struct LDKStr Bolt11Invoice_to_str(const struct LDKBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Bolt11Invoice_to_str")] public static extern long Bolt11Invoice_to_str(long _o);
	// struct LDKStr SignedRawBolt11Invoice_to_str(const struct LDKSignedRawBolt11Invoice *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SignedRawBolt11Invoice_to_str")] public static extern long SignedRawBolt11Invoice_to_str(long _o);
	// struct LDKStr Currency_to_str(const enum LDKCurrency *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_Currency_to_str")] public static extern long Currency_to_str(long _o);
	// struct LDKStr SiPrefix_to_str(const enum LDKSiPrefix *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_SiPrefix_to_str")] public static extern long SiPrefix_to_str(long _o);
	// void GraphSyncError_free(struct LDKGraphSyncError this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_free")] public static extern void GraphSyncError_free(long _this_ptr);
	// uint64_t GraphSyncError_clone_ptr(LDKGraphSyncError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_clone_ptr")] public static extern long GraphSyncError_clone_ptr(long _arg);
	// struct LDKGraphSyncError GraphSyncError_clone(const struct LDKGraphSyncError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_clone")] public static extern long GraphSyncError_clone(long _orig);
	// struct LDKGraphSyncError GraphSyncError_decode_error(struct LDKDecodeError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_decode_error")] public static extern long GraphSyncError_decode_error(long _a);
	// struct LDKGraphSyncError GraphSyncError_lightning_error(struct LDKLightningError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_GraphSyncError_lightning_error")] public static extern long GraphSyncError_lightning_error(long _a);
	// void RapidGossipSync_free(struct LDKRapidGossipSync this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_free")] public static extern void RapidGossipSync_free(long _this_obj);
	// MUST_USE_RES struct LDKRapidGossipSync RapidGossipSync_new(const struct LDKNetworkGraph *NONNULL_PTR network_graph, struct LDKLogger logger);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_new")] public static extern long RapidGossipSync_new(long _network_graph, long _logger);
	// MUST_USE_RES struct LDKCResult_u32GraphSyncErrorZ RapidGossipSync_sync_network_graph_with_file_path(const struct LDKRapidGossipSync *NONNULL_PTR this_arg, struct LDKStr sync_path);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_sync_network_graph_with_file_path")] public static extern long RapidGossipSync_sync_network_graph_with_file_path(long _this_arg, long _sync_path);
	// MUST_USE_RES struct LDKCResult_u32GraphSyncErrorZ RapidGossipSync_update_network_graph(const struct LDKRapidGossipSync *NONNULL_PTR this_arg, struct LDKu8slice update_data);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_update_network_graph")] public static extern long RapidGossipSync_update_network_graph(long _this_arg, long _update_data);
	// MUST_USE_RES struct LDKCResult_u32GraphSyncErrorZ RapidGossipSync_update_network_graph_no_std(const struct LDKRapidGossipSync *NONNULL_PTR this_arg, struct LDKu8slice update_data, struct LDKCOption_u64Z current_time_unix);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_update_network_graph_no_std")] public static extern long RapidGossipSync_update_network_graph_no_std(long _this_arg, long _update_data, long _current_time_unix);
	// MUST_USE_RES bool RapidGossipSync_is_initial_sync_complete(const struct LDKRapidGossipSync *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RapidGossipSync_is_initial_sync_complete")] public static extern bool RapidGossipSync_is_initial_sync_complete(long _this_arg);
	// void LiquidityEvent_free(struct LDKLiquidityEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_free")] public static extern void LiquidityEvent_free(long _this_ptr);
	// uint64_t LiquidityEvent_clone_ptr(LDKLiquidityEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_clone_ptr")] public static extern long LiquidityEvent_clone_ptr(long _arg);
	// struct LDKLiquidityEvent LiquidityEvent_clone(const struct LDKLiquidityEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_clone")] public static extern long LiquidityEvent_clone(long _orig);
	// struct LDKLiquidityEvent LiquidityEvent_lsps0_client(struct LDKLSPS0ClientEvent a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_lsps0_client")] public static extern long LiquidityEvent_lsps0_client(long _a);
	// struct LDKLiquidityEvent LiquidityEvent_lsps1_client(struct LDKLSPS1ClientEvent a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_lsps1_client")] public static extern long LiquidityEvent_lsps1_client(long _a);
	// struct LDKLiquidityEvent LiquidityEvent_lsps2_client(struct LDKLSPS2ClientEvent a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_lsps2_client")] public static extern long LiquidityEvent_lsps2_client(long _a);
	// struct LDKLiquidityEvent LiquidityEvent_lsps2_service(struct LDKLSPS2ServiceEvent a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_lsps2_service")] public static extern long LiquidityEvent_lsps2_service(long _a);
	// bool LiquidityEvent_eq(const struct LDKLiquidityEvent *NONNULL_PTR a, const struct LDKLiquidityEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LiquidityEvent_eq")] public static extern bool LiquidityEvent_eq(long _a, long _b);
	// void LSPS0ClientHandler_free(struct LDKLSPS0ClientHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ClientHandler_free")] public static extern void LSPS0ClientHandler_free(long _this_obj);
	// void LSPS0ClientHandler_list_protocols(const struct LDKLSPS0ClientHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ClientHandler_list_protocols")] public static extern void LSPS0ClientHandler_list_protocols(long _this_arg, long _counterparty_node_id);
	// void LSPS0ClientEvent_free(struct LDKLSPS0ClientEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ClientEvent_free")] public static extern void LSPS0ClientEvent_free(long _this_ptr);
	// uint64_t LSPS0ClientEvent_clone_ptr(LDKLSPS0ClientEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ClientEvent_clone_ptr")] public static extern long LSPS0ClientEvent_clone_ptr(long _arg);
	// struct LDKLSPS0ClientEvent LSPS0ClientEvent_clone(const struct LDKLSPS0ClientEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ClientEvent_clone")] public static extern long LSPS0ClientEvent_clone(long _orig);
	// struct LDKLSPS0ClientEvent LSPS0ClientEvent_list_protocols_response(struct LDKPublicKey counterparty_node_id, struct LDKCVec_u16Z protocols);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ClientEvent_list_protocols_response")] public static extern long LSPS0ClientEvent_list_protocols_response(long _counterparty_node_id, long _protocols);
	// bool LSPS0ClientEvent_eq(const struct LDKLSPS0ClientEvent *NONNULL_PTR a, const struct LDKLSPS0ClientEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ClientEvent_eq")] public static extern bool LSPS0ClientEvent_eq(long _a, long _b);
	// void LSPS0ListProtocolsRequest_free(struct LDKLSPS0ListProtocolsRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsRequest_free")] public static extern void LSPS0ListProtocolsRequest_free(long _this_obj);
	// MUST_USE_RES struct LDKLSPS0ListProtocolsRequest LSPS0ListProtocolsRequest_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsRequest_new")] public static extern long LSPS0ListProtocolsRequest_new();
	// uint64_t LSPS0ListProtocolsRequest_clone_ptr(LDKLSPS0ListProtocolsRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsRequest_clone_ptr")] public static extern long LSPS0ListProtocolsRequest_clone_ptr(long _arg);
	// struct LDKLSPS0ListProtocolsRequest LSPS0ListProtocolsRequest_clone(const struct LDKLSPS0ListProtocolsRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsRequest_clone")] public static extern long LSPS0ListProtocolsRequest_clone(long _orig);
	// bool LSPS0ListProtocolsRequest_eq(const struct LDKLSPS0ListProtocolsRequest *NONNULL_PTR a, const struct LDKLSPS0ListProtocolsRequest *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsRequest_eq")] public static extern bool LSPS0ListProtocolsRequest_eq(long _a, long _b);
	// void LSPS0ListProtocolsResponse_free(struct LDKLSPS0ListProtocolsResponse this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsResponse_free")] public static extern void LSPS0ListProtocolsResponse_free(long _this_obj);
	// struct LDKCVec_u16Z LSPS0ListProtocolsResponse_get_protocols(const struct LDKLSPS0ListProtocolsResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsResponse_get_protocols")] public static extern long LSPS0ListProtocolsResponse_get_protocols(long _this_ptr);
	// void LSPS0ListProtocolsResponse_set_protocols(struct LDKLSPS0ListProtocolsResponse *NONNULL_PTR this_ptr, struct LDKCVec_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsResponse_set_protocols")] public static extern void LSPS0ListProtocolsResponse_set_protocols(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS0ListProtocolsResponse LSPS0ListProtocolsResponse_new(struct LDKCVec_u16Z protocols_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsResponse_new")] public static extern long LSPS0ListProtocolsResponse_new(long _protocols_arg);
	// uint64_t LSPS0ListProtocolsResponse_clone_ptr(LDKLSPS0ListProtocolsResponse *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsResponse_clone_ptr")] public static extern long LSPS0ListProtocolsResponse_clone_ptr(long _arg);
	// struct LDKLSPS0ListProtocolsResponse LSPS0ListProtocolsResponse_clone(const struct LDKLSPS0ListProtocolsResponse *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsResponse_clone")] public static extern long LSPS0ListProtocolsResponse_clone(long _orig);
	// bool LSPS0ListProtocolsResponse_eq(const struct LDKLSPS0ListProtocolsResponse *NONNULL_PTR a, const struct LDKLSPS0ListProtocolsResponse *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ListProtocolsResponse_eq")] public static extern bool LSPS0ListProtocolsResponse_eq(long _a, long _b);
	// void LSPS0Request_free(struct LDKLSPS0Request this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Request_free")] public static extern void LSPS0Request_free(long _this_ptr);
	// uint64_t LSPS0Request_clone_ptr(LDKLSPS0Request *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Request_clone_ptr")] public static extern long LSPS0Request_clone_ptr(long _arg);
	// struct LDKLSPS0Request LSPS0Request_clone(const struct LDKLSPS0Request *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Request_clone")] public static extern long LSPS0Request_clone(long _orig);
	// struct LDKLSPS0Request LSPS0Request_list_protocols(struct LDKLSPS0ListProtocolsRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Request_list_protocols")] public static extern long LSPS0Request_list_protocols(long _a);
	// bool LSPS0Request_eq(const struct LDKLSPS0Request *NONNULL_PTR a, const struct LDKLSPS0Request *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Request_eq")] public static extern bool LSPS0Request_eq(long _a, long _b);
	// MUST_USE_RES struct LDKStr LSPS0Request_method(const struct LDKLSPS0Request *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Request_method")] public static extern long LSPS0Request_method(long _this_arg);
	// void LSPS0Response_free(struct LDKLSPS0Response this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Response_free")] public static extern void LSPS0Response_free(long _this_ptr);
	// uint64_t LSPS0Response_clone_ptr(LDKLSPS0Response *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Response_clone_ptr")] public static extern long LSPS0Response_clone_ptr(long _arg);
	// struct LDKLSPS0Response LSPS0Response_clone(const struct LDKLSPS0Response *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Response_clone")] public static extern long LSPS0Response_clone(long _orig);
	// struct LDKLSPS0Response LSPS0Response_list_protocols(struct LDKLSPS0ListProtocolsResponse a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Response_list_protocols")] public static extern long LSPS0Response_list_protocols(long _a);
	// struct LDKLSPS0Response LSPS0Response_list_protocols_error(struct LDKLSPSResponseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Response_list_protocols_error")] public static extern long LSPS0Response_list_protocols_error(long _a);
	// bool LSPS0Response_eq(const struct LDKLSPS0Response *NONNULL_PTR a, const struct LDKLSPS0Response *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Response_eq")] public static extern bool LSPS0Response_eq(long _a, long _b);
	// void LSPS0Message_free(struct LDKLSPS0Message this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Message_free")] public static extern void LSPS0Message_free(long _this_ptr);
	// uint64_t LSPS0Message_clone_ptr(LDKLSPS0Message *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Message_clone_ptr")] public static extern long LSPS0Message_clone_ptr(long _arg);
	// struct LDKLSPS0Message LSPS0Message_clone(const struct LDKLSPS0Message *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Message_clone")] public static extern long LSPS0Message_clone(long _orig);
	// struct LDKLSPS0Message LSPS0Message_request(struct LDKLSPSRequestId a, struct LDKLSPS0Request b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Message_request")] public static extern long LSPS0Message_request(long _a, long _b);
	// struct LDKLSPS0Message LSPS0Message_response(struct LDKLSPSRequestId a, struct LDKLSPS0Response b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Message_response")] public static extern long LSPS0Message_response(long _a, long _b);
	// bool LSPS0Message_eq(const struct LDKLSPS0Message *NONNULL_PTR a, const struct LDKLSPS0Message *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0Message_eq")] public static extern bool LSPS0Message_eq(long _a, long _b);
	// void RawLSPSMessage_free(struct LDKRawLSPSMessage this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_free")] public static extern void RawLSPSMessage_free(long _this_obj);
	// struct LDKStr RawLSPSMessage_get_payload(const struct LDKRawLSPSMessage *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_get_payload")] public static extern long RawLSPSMessage_get_payload(long _this_ptr);
	// void RawLSPSMessage_set_payload(struct LDKRawLSPSMessage *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_set_payload")] public static extern void RawLSPSMessage_set_payload(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKRawLSPSMessage RawLSPSMessage_new(struct LDKStr payload_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_new")] public static extern long RawLSPSMessage_new(long _payload_arg);
	// uint64_t RawLSPSMessage_clone_ptr(LDKRawLSPSMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_clone_ptr")] public static extern long RawLSPSMessage_clone_ptr(long _arg);
	// struct LDKRawLSPSMessage RawLSPSMessage_clone(const struct LDKRawLSPSMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_clone")] public static extern long RawLSPSMessage_clone(long _orig);
	// bool RawLSPSMessage_eq(const struct LDKRawLSPSMessage *NONNULL_PTR a, const struct LDKRawLSPSMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_eq")] public static extern bool RawLSPSMessage_eq(long _a, long _b);
	// struct LDKCVec_u8Z RawLSPSMessage_write(const struct LDKRawLSPSMessage *NONNULL_PTR obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_write")] public static extern long RawLSPSMessage_write(long _obj);
	// struct LDKCResult_RawLSPSMessageDecodeErrorZ RawLSPSMessage_read(struct LDKu8slice ser);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_read")] public static extern long RawLSPSMessage_read(long _ser);
	// struct LDKType RawLSPSMessage_as_Type(const struct LDKRawLSPSMessage *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_RawLSPSMessage_as_Type")] public static extern long RawLSPSMessage_as_Type(long _this_arg);
	// void LSPSRequestId_free(struct LDKLSPSRequestId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_free")] public static extern void LSPSRequestId_free(long _this_obj);
	// struct LDKStr LSPSRequestId_get_a(const struct LDKLSPSRequestId *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_get_a")] public static extern long LSPSRequestId_get_a(long _this_ptr);
	// void LSPSRequestId_set_a(struct LDKLSPSRequestId *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_set_a")] public static extern void LSPSRequestId_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPSRequestId LSPSRequestId_new(struct LDKStr a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_new")] public static extern long LSPSRequestId_new(long _a_arg);
	// uint64_t LSPSRequestId_clone_ptr(LDKLSPSRequestId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_clone_ptr")] public static extern long LSPSRequestId_clone_ptr(long _arg);
	// struct LDKLSPSRequestId LSPSRequestId_clone(const struct LDKLSPSRequestId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_clone")] public static extern long LSPSRequestId_clone(long _orig);
	// bool LSPSRequestId_eq(const struct LDKLSPSRequestId *NONNULL_PTR a, const struct LDKLSPSRequestId *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_eq")] public static extern bool LSPSRequestId_eq(long _a, long _b);
	// uint64_t LSPSRequestId_hash(const struct LDKLSPSRequestId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSRequestId_hash")] public static extern long LSPSRequestId_hash(long _o);
	// void LSPSDateTime_free(struct LDKLSPSDateTime this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_free")] public static extern void LSPSDateTime_free(long _this_obj);
	// uint64_t LSPSDateTime_clone_ptr(LDKLSPSDateTime *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_clone_ptr")] public static extern long LSPSDateTime_clone_ptr(long _arg);
	// struct LDKLSPSDateTime LSPSDateTime_clone(const struct LDKLSPSDateTime *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_clone")] public static extern long LSPSDateTime_clone(long _orig);
	// bool LSPSDateTime_eq(const struct LDKLSPSDateTime *NONNULL_PTR a, const struct LDKLSPSDateTime *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_eq")] public static extern bool LSPSDateTime_eq(long _a, long _b);
	// uint64_t LSPSDateTime_hash(const struct LDKLSPSDateTime *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_hash")] public static extern long LSPSDateTime_hash(long _o);
	// MUST_USE_RES struct LDKStr LSPSDateTime_to_rfc3339(const struct LDKLSPSDateTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_to_rfc3339")] public static extern long LSPSDateTime_to_rfc3339(long _this_arg);
	// MUST_USE_RES bool LSPSDateTime_is_past(const struct LDKLSPSDateTime *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_is_past")] public static extern bool LSPSDateTime_is_past(long _this_arg);
	// struct LDKCResult_LSPSDateTimeNoneZ LSPSDateTime_from_str(struct LDKStr s);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_from_str")] public static extern long LSPSDateTime_from_str(long _s);
	// struct LDKStr LSPSDateTime_to_str(const struct LDKLSPSDateTime *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSDateTime_to_str")] public static extern long LSPSDateTime_to_str(long _o);
	// void LSPSResponseError_free(struct LDKLSPSResponseError this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_free")] public static extern void LSPSResponseError_free(long _this_obj);
	// struct LDKStr LSPSResponseError_get_message(const struct LDKLSPSResponseError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_get_message")] public static extern long LSPSResponseError_get_message(long _this_ptr);
	// void LSPSResponseError_set_message(struct LDKLSPSResponseError *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_set_message")] public static extern void LSPSResponseError_set_message(long _this_ptr, long _val);
	// struct LDKCOption_StrZ LSPSResponseError_get_data(const struct LDKLSPSResponseError *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_get_data")] public static extern long LSPSResponseError_get_data(long _this_ptr);
	// void LSPSResponseError_set_data(struct LDKLSPSResponseError *NONNULL_PTR this_ptr, struct LDKCOption_StrZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_set_data")] public static extern void LSPSResponseError_set_data(long _this_ptr, long _val);
	// uint64_t LSPSResponseError_clone_ptr(LDKLSPSResponseError *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_clone_ptr")] public static extern long LSPSResponseError_clone_ptr(long _arg);
	// struct LDKLSPSResponseError LSPSResponseError_clone(const struct LDKLSPSResponseError *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_clone")] public static extern long LSPSResponseError_clone(long _orig);
	// bool LSPSResponseError_eq(const struct LDKLSPSResponseError *NONNULL_PTR a, const struct LDKLSPSResponseError *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSResponseError_eq")] public static extern bool LSPSResponseError_eq(long _a, long _b);
	// void LSPSMessage_free(struct LDKLSPSMessage this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_free")] public static extern void LSPSMessage_free(long _this_ptr);
	// uint64_t LSPSMessage_clone_ptr(LDKLSPSMessage *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_clone_ptr")] public static extern long LSPSMessage_clone_ptr(long _arg);
	// struct LDKLSPSMessage LSPSMessage_clone(const struct LDKLSPSMessage *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_clone")] public static extern long LSPSMessage_clone(long _orig);
	// struct LDKLSPSMessage LSPSMessage_invalid(struct LDKLSPSResponseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_invalid")] public static extern long LSPSMessage_invalid(long _a);
	// struct LDKLSPSMessage LSPSMessage_lsps0(struct LDKLSPS0Message a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_lsps0")] public static extern long LSPSMessage_lsps0(long _a);
	// struct LDKLSPSMessage LSPSMessage_lsps1(struct LDKLSPS1Message a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_lsps1")] public static extern long LSPSMessage_lsps1(long _a);
	// struct LDKLSPSMessage LSPSMessage_lsps2(struct LDKLSPS2Message a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_lsps2")] public static extern long LSPSMessage_lsps2(long _a);
	// bool LSPSMessage_eq(const struct LDKLSPSMessage *NONNULL_PTR a, const struct LDKLSPSMessage *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPSMessage_eq")] public static extern bool LSPSMessage_eq(long _a, long _b);
	// void LSPS0ServiceHandler_free(struct LDKLSPS0ServiceHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS0ServiceHandler_free")] public static extern void LSPS0ServiceHandler_free(long _this_obj);
	// void LSPS1ClientConfig_free(struct LDKLSPS1ClientConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientConfig_free")] public static extern void LSPS1ClientConfig_free(long _this_obj);
	// struct LDKCOption_u64Z LSPS1ClientConfig_get_max_channel_fees_msat(const struct LDKLSPS1ClientConfig *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientConfig_get_max_channel_fees_msat")] public static extern long LSPS1ClientConfig_get_max_channel_fees_msat(long _this_ptr);
	// void LSPS1ClientConfig_set_max_channel_fees_msat(struct LDKLSPS1ClientConfig *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientConfig_set_max_channel_fees_msat")] public static extern void LSPS1ClientConfig_set_max_channel_fees_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1ClientConfig LSPS1ClientConfig_new(struct LDKCOption_u64Z max_channel_fees_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientConfig_new")] public static extern long LSPS1ClientConfig_new(long _max_channel_fees_msat_arg);
	// uint64_t LSPS1ClientConfig_clone_ptr(LDKLSPS1ClientConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientConfig_clone_ptr")] public static extern long LSPS1ClientConfig_clone_ptr(long _arg);
	// struct LDKLSPS1ClientConfig LSPS1ClientConfig_clone(const struct LDKLSPS1ClientConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientConfig_clone")] public static extern long LSPS1ClientConfig_clone(long _orig);
	// void LSPS1ClientHandler_free(struct LDKLSPS1ClientHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientHandler_free")] public static extern void LSPS1ClientHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKLSPSRequestId LSPS1ClientHandler_request_supported_options(const struct LDKLSPS1ClientHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientHandler_request_supported_options")] public static extern long LSPS1ClientHandler_request_supported_options(long _this_arg, long _counterparty_node_id);
	// MUST_USE_RES struct LDKLSPSRequestId LSPS1ClientHandler_create_order(const struct LDKLSPS1ClientHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKLSPS1OrderParams order, struct LDKCOption_AddressZ refund_onchain_address);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientHandler_create_order")] public static extern long LSPS1ClientHandler_create_order(long _this_arg, long _counterparty_node_id, long _order, long _refund_onchain_address);
	// MUST_USE_RES struct LDKLSPSRequestId LSPS1ClientHandler_check_order_status(const struct LDKLSPS1ClientHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKLSPS1OrderId order_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientHandler_check_order_status")] public static extern long LSPS1ClientHandler_check_order_status(long _this_arg, long _counterparty_node_id, long _order_id);
	// void LSPS1ClientEvent_free(struct LDKLSPS1ClientEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_free")] public static extern void LSPS1ClientEvent_free(long _this_ptr);
	// uint64_t LSPS1ClientEvent_clone_ptr(LDKLSPS1ClientEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_clone_ptr")] public static extern long LSPS1ClientEvent_clone_ptr(long _arg);
	// struct LDKLSPS1ClientEvent LSPS1ClientEvent_clone(const struct LDKLSPS1ClientEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_clone")] public static extern long LSPS1ClientEvent_clone(long _orig);
	// struct LDKLSPS1ClientEvent LSPS1ClientEvent_supported_options_ready(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKLSPS1Options supported_options);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_supported_options_ready")] public static extern long LSPS1ClientEvent_supported_options_ready(long _request_id, long _counterparty_node_id, long _supported_options);
	// struct LDKLSPS1ClientEvent LSPS1ClientEvent_supported_options_request_failed(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKLSPSResponseError error);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_supported_options_request_failed")] public static extern long LSPS1ClientEvent_supported_options_request_failed(long _request_id, long _counterparty_node_id, long _error);
	// struct LDKLSPS1ClientEvent LSPS1ClientEvent_order_created(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKLSPS1OrderId order_id, struct LDKLSPS1OrderParams order, struct LDKLSPS1PaymentInfo payment, struct LDKLSPS1ChannelInfo channel);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_order_created")] public static extern long LSPS1ClientEvent_order_created(long _request_id, long _counterparty_node_id, long _order_id, long _order, long _payment, long _channel);
	// struct LDKLSPS1ClientEvent LSPS1ClientEvent_order_status(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKLSPS1OrderId order_id, struct LDKLSPS1OrderParams order, struct LDKLSPS1PaymentInfo payment, struct LDKLSPS1ChannelInfo channel);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_order_status")] public static extern long LSPS1ClientEvent_order_status(long _request_id, long _counterparty_node_id, long _order_id, long _order, long _payment, long _channel);
	// struct LDKLSPS1ClientEvent LSPS1ClientEvent_order_request_failed(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKLSPSResponseError error);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_order_request_failed")] public static extern long LSPS1ClientEvent_order_request_failed(long _request_id, long _counterparty_node_id, long _error);
	// bool LSPS1ClientEvent_eq(const struct LDKLSPS1ClientEvent *NONNULL_PTR a, const struct LDKLSPS1ClientEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ClientEvent_eq")] public static extern bool LSPS1ClientEvent_eq(long _a, long _b);
	// void LSPS1OrderId_free(struct LDKLSPS1OrderId this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_free")] public static extern void LSPS1OrderId_free(long _this_obj);
	// struct LDKStr LSPS1OrderId_get_a(const struct LDKLSPS1OrderId *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_get_a")] public static extern long LSPS1OrderId_get_a(long _this_ptr);
	// void LSPS1OrderId_set_a(struct LDKLSPS1OrderId *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_set_a")] public static extern void LSPS1OrderId_set_a(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1OrderId LSPS1OrderId_new(struct LDKStr a_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_new")] public static extern long LSPS1OrderId_new(long _a_arg);
	// uint64_t LSPS1OrderId_clone_ptr(LDKLSPS1OrderId *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_clone_ptr")] public static extern long LSPS1OrderId_clone_ptr(long _arg);
	// struct LDKLSPS1OrderId LSPS1OrderId_clone(const struct LDKLSPS1OrderId *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_clone")] public static extern long LSPS1OrderId_clone(long _orig);
	// bool LSPS1OrderId_eq(const struct LDKLSPS1OrderId *NONNULL_PTR a, const struct LDKLSPS1OrderId *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_eq")] public static extern bool LSPS1OrderId_eq(long _a, long _b);
	// uint64_t LSPS1OrderId_hash(const struct LDKLSPS1OrderId *NONNULL_PTR o);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderId_hash")] public static extern long LSPS1OrderId_hash(long _o);
	// void LSPS1GetInfoRequest_free(struct LDKLSPS1GetInfoRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoRequest_free")] public static extern void LSPS1GetInfoRequest_free(long _this_obj);
	// MUST_USE_RES struct LDKLSPS1GetInfoRequest LSPS1GetInfoRequest_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoRequest_new")] public static extern long LSPS1GetInfoRequest_new();
	// uint64_t LSPS1GetInfoRequest_clone_ptr(LDKLSPS1GetInfoRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoRequest_clone_ptr")] public static extern long LSPS1GetInfoRequest_clone_ptr(long _arg);
	// struct LDKLSPS1GetInfoRequest LSPS1GetInfoRequest_clone(const struct LDKLSPS1GetInfoRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoRequest_clone")] public static extern long LSPS1GetInfoRequest_clone(long _orig);
	// bool LSPS1GetInfoRequest_eq(const struct LDKLSPS1GetInfoRequest *NONNULL_PTR a, const struct LDKLSPS1GetInfoRequest *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoRequest_eq")] public static extern bool LSPS1GetInfoRequest_eq(long _a, long _b);
	// void LSPS1Options_free(struct LDKLSPS1Options this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_free")] public static extern void LSPS1Options_free(long _this_obj);
	// uint16_t LSPS1Options_get_min_required_channel_confirmations(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_min_required_channel_confirmations")] public static extern short LSPS1Options_get_min_required_channel_confirmations(long _this_ptr);
	// void LSPS1Options_set_min_required_channel_confirmations(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_min_required_channel_confirmations")] public static extern void LSPS1Options_set_min_required_channel_confirmations(long _this_ptr, short _val);
	// uint16_t LSPS1Options_get_min_funding_confirms_within_blocks(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_min_funding_confirms_within_blocks")] public static extern short LSPS1Options_get_min_funding_confirms_within_blocks(long _this_ptr);
	// void LSPS1Options_set_min_funding_confirms_within_blocks(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_min_funding_confirms_within_blocks")] public static extern void LSPS1Options_set_min_funding_confirms_within_blocks(long _this_ptr, short _val);
	// bool LSPS1Options_get_supports_zero_channel_reserve(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_supports_zero_channel_reserve")] public static extern bool LSPS1Options_get_supports_zero_channel_reserve(long _this_ptr);
	// void LSPS1Options_set_supports_zero_channel_reserve(struct LDKLSPS1Options *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_supports_zero_channel_reserve")] public static extern void LSPS1Options_set_supports_zero_channel_reserve(long _this_ptr, bool _val);
	// uint32_t LSPS1Options_get_max_channel_expiry_blocks(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_max_channel_expiry_blocks")] public static extern int LSPS1Options_get_max_channel_expiry_blocks(long _this_ptr);
	// void LSPS1Options_set_max_channel_expiry_blocks(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_max_channel_expiry_blocks")] public static extern void LSPS1Options_set_max_channel_expiry_blocks(long _this_ptr, int _val);
	// uint64_t LSPS1Options_get_min_initial_client_balance_sat(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_min_initial_client_balance_sat")] public static extern long LSPS1Options_get_min_initial_client_balance_sat(long _this_ptr);
	// void LSPS1Options_set_min_initial_client_balance_sat(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_min_initial_client_balance_sat")] public static extern void LSPS1Options_set_min_initial_client_balance_sat(long _this_ptr, long _val);
	// uint64_t LSPS1Options_get_max_initial_client_balance_sat(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_max_initial_client_balance_sat")] public static extern long LSPS1Options_get_max_initial_client_balance_sat(long _this_ptr);
	// void LSPS1Options_set_max_initial_client_balance_sat(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_max_initial_client_balance_sat")] public static extern void LSPS1Options_set_max_initial_client_balance_sat(long _this_ptr, long _val);
	// uint64_t LSPS1Options_get_min_initial_lsp_balance_sat(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_min_initial_lsp_balance_sat")] public static extern long LSPS1Options_get_min_initial_lsp_balance_sat(long _this_ptr);
	// void LSPS1Options_set_min_initial_lsp_balance_sat(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_min_initial_lsp_balance_sat")] public static extern void LSPS1Options_set_min_initial_lsp_balance_sat(long _this_ptr, long _val);
	// uint64_t LSPS1Options_get_max_initial_lsp_balance_sat(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_max_initial_lsp_balance_sat")] public static extern long LSPS1Options_get_max_initial_lsp_balance_sat(long _this_ptr);
	// void LSPS1Options_set_max_initial_lsp_balance_sat(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_max_initial_lsp_balance_sat")] public static extern void LSPS1Options_set_max_initial_lsp_balance_sat(long _this_ptr, long _val);
	// uint64_t LSPS1Options_get_min_channel_balance_sat(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_min_channel_balance_sat")] public static extern long LSPS1Options_get_min_channel_balance_sat(long _this_ptr);
	// void LSPS1Options_set_min_channel_balance_sat(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_min_channel_balance_sat")] public static extern void LSPS1Options_set_min_channel_balance_sat(long _this_ptr, long _val);
	// uint64_t LSPS1Options_get_max_channel_balance_sat(const struct LDKLSPS1Options *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_get_max_channel_balance_sat")] public static extern long LSPS1Options_get_max_channel_balance_sat(long _this_ptr);
	// void LSPS1Options_set_max_channel_balance_sat(struct LDKLSPS1Options *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_set_max_channel_balance_sat")] public static extern void LSPS1Options_set_max_channel_balance_sat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1Options LSPS1Options_new(uint16_t min_required_channel_confirmations_arg, uint16_t min_funding_confirms_within_blocks_arg, bool supports_zero_channel_reserve_arg, uint32_t max_channel_expiry_blocks_arg, uint64_t min_initial_client_balance_sat_arg, uint64_t max_initial_client_balance_sat_arg, uint64_t min_initial_lsp_balance_sat_arg, uint64_t max_initial_lsp_balance_sat_arg, uint64_t min_channel_balance_sat_arg, uint64_t max_channel_balance_sat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_new")] public static extern long LSPS1Options_new(short _min_required_channel_confirmations_arg, short _min_funding_confirms_within_blocks_arg, bool _supports_zero_channel_reserve_arg, int _max_channel_expiry_blocks_arg, long _min_initial_client_balance_sat_arg, long _max_initial_client_balance_sat_arg, long _min_initial_lsp_balance_sat_arg, long _max_initial_lsp_balance_sat_arg, long _min_channel_balance_sat_arg, long _max_channel_balance_sat_arg);
	// uint64_t LSPS1Options_clone_ptr(LDKLSPS1Options *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_clone_ptr")] public static extern long LSPS1Options_clone_ptr(long _arg);
	// struct LDKLSPS1Options LSPS1Options_clone(const struct LDKLSPS1Options *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_clone")] public static extern long LSPS1Options_clone(long _orig);
	// bool LSPS1Options_eq(const struct LDKLSPS1Options *NONNULL_PTR a, const struct LDKLSPS1Options *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Options_eq")] public static extern bool LSPS1Options_eq(long _a, long _b);
	// void LSPS1GetInfoResponse_free(struct LDKLSPS1GetInfoResponse this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoResponse_free")] public static extern void LSPS1GetInfoResponse_free(long _this_obj);
	// struct LDKLSPS1Options LSPS1GetInfoResponse_get_options(const struct LDKLSPS1GetInfoResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoResponse_get_options")] public static extern long LSPS1GetInfoResponse_get_options(long _this_ptr);
	// void LSPS1GetInfoResponse_set_options(struct LDKLSPS1GetInfoResponse *NONNULL_PTR this_ptr, struct LDKLSPS1Options val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoResponse_set_options")] public static extern void LSPS1GetInfoResponse_set_options(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1GetInfoResponse LSPS1GetInfoResponse_new(struct LDKLSPS1Options options_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoResponse_new")] public static extern long LSPS1GetInfoResponse_new(long _options_arg);
	// uint64_t LSPS1GetInfoResponse_clone_ptr(LDKLSPS1GetInfoResponse *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoResponse_clone_ptr")] public static extern long LSPS1GetInfoResponse_clone_ptr(long _arg);
	// struct LDKLSPS1GetInfoResponse LSPS1GetInfoResponse_clone(const struct LDKLSPS1GetInfoResponse *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoResponse_clone")] public static extern long LSPS1GetInfoResponse_clone(long _orig);
	// bool LSPS1GetInfoResponse_eq(const struct LDKLSPS1GetInfoResponse *NONNULL_PTR a, const struct LDKLSPS1GetInfoResponse *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetInfoResponse_eq")] public static extern bool LSPS1GetInfoResponse_eq(long _a, long _b);
	// void LSPS1CreateOrderRequest_free(struct LDKLSPS1CreateOrderRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_free")] public static extern void LSPS1CreateOrderRequest_free(long _this_obj);
	// struct LDKLSPS1OrderParams LSPS1CreateOrderRequest_get_order(const struct LDKLSPS1CreateOrderRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_get_order")] public static extern long LSPS1CreateOrderRequest_get_order(long _this_ptr);
	// void LSPS1CreateOrderRequest_set_order(struct LDKLSPS1CreateOrderRequest *NONNULL_PTR this_ptr, struct LDKLSPS1OrderParams val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_set_order")] public static extern void LSPS1CreateOrderRequest_set_order(long _this_ptr, long _val);
	// struct LDKCOption_AddressZ LSPS1CreateOrderRequest_get_refund_onchain_address(const struct LDKLSPS1CreateOrderRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_get_refund_onchain_address")] public static extern long LSPS1CreateOrderRequest_get_refund_onchain_address(long _this_ptr);
	// void LSPS1CreateOrderRequest_set_refund_onchain_address(struct LDKLSPS1CreateOrderRequest *NONNULL_PTR this_ptr, struct LDKCOption_AddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_set_refund_onchain_address")] public static extern void LSPS1CreateOrderRequest_set_refund_onchain_address(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1CreateOrderRequest LSPS1CreateOrderRequest_new(struct LDKLSPS1OrderParams order_arg, struct LDKCOption_AddressZ refund_onchain_address_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_new")] public static extern long LSPS1CreateOrderRequest_new(long _order_arg, long _refund_onchain_address_arg);
	// uint64_t LSPS1CreateOrderRequest_clone_ptr(LDKLSPS1CreateOrderRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_clone_ptr")] public static extern long LSPS1CreateOrderRequest_clone_ptr(long _arg);
	// struct LDKLSPS1CreateOrderRequest LSPS1CreateOrderRequest_clone(const struct LDKLSPS1CreateOrderRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_clone")] public static extern long LSPS1CreateOrderRequest_clone(long _orig);
	// bool LSPS1CreateOrderRequest_eq(const struct LDKLSPS1CreateOrderRequest *NONNULL_PTR a, const struct LDKLSPS1CreateOrderRequest *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderRequest_eq")] public static extern bool LSPS1CreateOrderRequest_eq(long _a, long _b);
	// void LSPS1OrderParams_free(struct LDKLSPS1OrderParams this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_free")] public static extern void LSPS1OrderParams_free(long _this_obj);
	// uint64_t LSPS1OrderParams_get_lsp_balance_sat(const struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_get_lsp_balance_sat")] public static extern long LSPS1OrderParams_get_lsp_balance_sat(long _this_ptr);
	// void LSPS1OrderParams_set_lsp_balance_sat(struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_set_lsp_balance_sat")] public static extern void LSPS1OrderParams_set_lsp_balance_sat(long _this_ptr, long _val);
	// uint64_t LSPS1OrderParams_get_client_balance_sat(const struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_get_client_balance_sat")] public static extern long LSPS1OrderParams_get_client_balance_sat(long _this_ptr);
	// void LSPS1OrderParams_set_client_balance_sat(struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_set_client_balance_sat")] public static extern void LSPS1OrderParams_set_client_balance_sat(long _this_ptr, long _val);
	// uint16_t LSPS1OrderParams_get_required_channel_confirmations(const struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_get_required_channel_confirmations")] public static extern short LSPS1OrderParams_get_required_channel_confirmations(long _this_ptr);
	// void LSPS1OrderParams_set_required_channel_confirmations(struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_set_required_channel_confirmations")] public static extern void LSPS1OrderParams_set_required_channel_confirmations(long _this_ptr, short _val);
	// uint16_t LSPS1OrderParams_get_funding_confirms_within_blocks(const struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_get_funding_confirms_within_blocks")] public static extern short LSPS1OrderParams_get_funding_confirms_within_blocks(long _this_ptr);
	// void LSPS1OrderParams_set_funding_confirms_within_blocks(struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr, uint16_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_set_funding_confirms_within_blocks")] public static extern void LSPS1OrderParams_set_funding_confirms_within_blocks(long _this_ptr, short _val);
	// uint32_t LSPS1OrderParams_get_channel_expiry_blocks(const struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_get_channel_expiry_blocks")] public static extern int LSPS1OrderParams_get_channel_expiry_blocks(long _this_ptr);
	// void LSPS1OrderParams_set_channel_expiry_blocks(struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_set_channel_expiry_blocks")] public static extern void LSPS1OrderParams_set_channel_expiry_blocks(long _this_ptr, int _val);
	// struct LDKCOption_StrZ LSPS1OrderParams_get_token(const struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_get_token")] public static extern long LSPS1OrderParams_get_token(long _this_ptr);
	// void LSPS1OrderParams_set_token(struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr, struct LDKCOption_StrZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_set_token")] public static extern void LSPS1OrderParams_set_token(long _this_ptr, long _val);
	// bool LSPS1OrderParams_get_announce_channel(const struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_get_announce_channel")] public static extern bool LSPS1OrderParams_get_announce_channel(long _this_ptr);
	// void LSPS1OrderParams_set_announce_channel(struct LDKLSPS1OrderParams *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_set_announce_channel")] public static extern void LSPS1OrderParams_set_announce_channel(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKLSPS1OrderParams LSPS1OrderParams_new(uint64_t lsp_balance_sat_arg, uint64_t client_balance_sat_arg, uint16_t required_channel_confirmations_arg, uint16_t funding_confirms_within_blocks_arg, uint32_t channel_expiry_blocks_arg, struct LDKCOption_StrZ token_arg, bool announce_channel_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_new")] public static extern long LSPS1OrderParams_new(long _lsp_balance_sat_arg, long _client_balance_sat_arg, short _required_channel_confirmations_arg, short _funding_confirms_within_blocks_arg, int _channel_expiry_blocks_arg, long _token_arg, bool _announce_channel_arg);
	// uint64_t LSPS1OrderParams_clone_ptr(LDKLSPS1OrderParams *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_clone_ptr")] public static extern long LSPS1OrderParams_clone_ptr(long _arg);
	// struct LDKLSPS1OrderParams LSPS1OrderParams_clone(const struct LDKLSPS1OrderParams *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_clone")] public static extern long LSPS1OrderParams_clone(long _orig);
	// bool LSPS1OrderParams_eq(const struct LDKLSPS1OrderParams *NONNULL_PTR a, const struct LDKLSPS1OrderParams *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderParams_eq")] public static extern bool LSPS1OrderParams_eq(long _a, long _b);
	// void LSPS1CreateOrderResponse_free(struct LDKLSPS1CreateOrderResponse this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_free")] public static extern void LSPS1CreateOrderResponse_free(long _this_obj);
	// struct LDKLSPS1OrderId LSPS1CreateOrderResponse_get_order_id(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_get_order_id")] public static extern long LSPS1CreateOrderResponse_get_order_id(long _this_ptr);
	// void LSPS1CreateOrderResponse_set_order_id(struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr, struct LDKLSPS1OrderId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_set_order_id")] public static extern void LSPS1CreateOrderResponse_set_order_id(long _this_ptr, long _val);
	// struct LDKLSPS1OrderParams LSPS1CreateOrderResponse_get_order(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_get_order")] public static extern long LSPS1CreateOrderResponse_get_order(long _this_ptr);
	// void LSPS1CreateOrderResponse_set_order(struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr, struct LDKLSPS1OrderParams val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_set_order")] public static extern void LSPS1CreateOrderResponse_set_order(long _this_ptr, long _val);
	// struct LDKLSPSDateTime LSPS1CreateOrderResponse_get_created_at(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_get_created_at")] public static extern long LSPS1CreateOrderResponse_get_created_at(long _this_ptr);
	// void LSPS1CreateOrderResponse_set_created_at(struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr, struct LDKLSPSDateTime val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_set_created_at")] public static extern void LSPS1CreateOrderResponse_set_created_at(long _this_ptr, long _val);
	// enum LDKLSPS1OrderState LSPS1CreateOrderResponse_get_order_state(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_get_order_state")] public static extern LSPS1OrderState LSPS1CreateOrderResponse_get_order_state(long _this_ptr);
	// void LSPS1CreateOrderResponse_set_order_state(struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr, enum LDKLSPS1OrderState val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_set_order_state")] public static extern void LSPS1CreateOrderResponse_set_order_state(long _this_ptr, LSPS1OrderState _val);
	// struct LDKLSPS1PaymentInfo LSPS1CreateOrderResponse_get_payment(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_get_payment")] public static extern long LSPS1CreateOrderResponse_get_payment(long _this_ptr);
	// void LSPS1CreateOrderResponse_set_payment(struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr, struct LDKLSPS1PaymentInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_set_payment")] public static extern void LSPS1CreateOrderResponse_set_payment(long _this_ptr, long _val);
	// struct LDKLSPS1ChannelInfo LSPS1CreateOrderResponse_get_channel(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_get_channel")] public static extern long LSPS1CreateOrderResponse_get_channel(long _this_ptr);
	// void LSPS1CreateOrderResponse_set_channel(struct LDKLSPS1CreateOrderResponse *NONNULL_PTR this_ptr, struct LDKLSPS1ChannelInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_set_channel")] public static extern void LSPS1CreateOrderResponse_set_channel(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1CreateOrderResponse LSPS1CreateOrderResponse_new(struct LDKLSPS1OrderId order_id_arg, struct LDKLSPS1OrderParams order_arg, struct LDKLSPSDateTime created_at_arg, enum LDKLSPS1OrderState order_state_arg, struct LDKLSPS1PaymentInfo payment_arg, struct LDKLSPS1ChannelInfo channel_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_new")] public static extern long LSPS1CreateOrderResponse_new(long _order_id_arg, long _order_arg, long _created_at_arg, LSPS1OrderState _order_state_arg, long _payment_arg, long _channel_arg);
	// uint64_t LSPS1CreateOrderResponse_clone_ptr(LDKLSPS1CreateOrderResponse *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_clone_ptr")] public static extern long LSPS1CreateOrderResponse_clone_ptr(long _arg);
	// struct LDKLSPS1CreateOrderResponse LSPS1CreateOrderResponse_clone(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_clone")] public static extern long LSPS1CreateOrderResponse_clone(long _orig);
	// bool LSPS1CreateOrderResponse_eq(const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR a, const struct LDKLSPS1CreateOrderResponse *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1CreateOrderResponse_eq")] public static extern bool LSPS1CreateOrderResponse_eq(long _a, long _b);
	// enum LDKLSPS1OrderState LSPS1OrderState_clone(const enum LDKLSPS1OrderState *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderState_clone")] public static extern LSPS1OrderState LSPS1OrderState_clone(long _orig);
	// enum LDKLSPS1OrderState LSPS1OrderState_created(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderState_created")] public static extern LSPS1OrderState LSPS1OrderState_created();
	// enum LDKLSPS1OrderState LSPS1OrderState_completed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderState_completed")] public static extern LSPS1OrderState LSPS1OrderState_completed();
	// enum LDKLSPS1OrderState LSPS1OrderState_failed(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderState_failed")] public static extern LSPS1OrderState LSPS1OrderState_failed();
	// bool LSPS1OrderState_eq(const enum LDKLSPS1OrderState *NONNULL_PTR a, const enum LDKLSPS1OrderState *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OrderState_eq")] public static extern bool LSPS1OrderState_eq(long _a, long _b);
	// void LSPS1PaymentInfo_free(struct LDKLSPS1PaymentInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_free")] public static extern void LSPS1PaymentInfo_free(long _this_obj);
	// struct LDKLSPS1Bolt11PaymentInfo LSPS1PaymentInfo_get_bolt11(const struct LDKLSPS1PaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_get_bolt11")] public static extern long LSPS1PaymentInfo_get_bolt11(long _this_ptr);
	// void LSPS1PaymentInfo_set_bolt11(struct LDKLSPS1PaymentInfo *NONNULL_PTR this_ptr, struct LDKLSPS1Bolt11PaymentInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_set_bolt11")] public static extern void LSPS1PaymentInfo_set_bolt11(long _this_ptr, long _val);
	// struct LDKLSPS1OnchainPaymentInfo LSPS1PaymentInfo_get_onchain(const struct LDKLSPS1PaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_get_onchain")] public static extern long LSPS1PaymentInfo_get_onchain(long _this_ptr);
	// void LSPS1PaymentInfo_set_onchain(struct LDKLSPS1PaymentInfo *NONNULL_PTR this_ptr, struct LDKLSPS1OnchainPaymentInfo val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_set_onchain")] public static extern void LSPS1PaymentInfo_set_onchain(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1PaymentInfo LSPS1PaymentInfo_new(struct LDKLSPS1Bolt11PaymentInfo bolt11_arg, struct LDKLSPS1OnchainPaymentInfo onchain_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_new")] public static extern long LSPS1PaymentInfo_new(long _bolt11_arg, long _onchain_arg);
	// uint64_t LSPS1PaymentInfo_clone_ptr(LDKLSPS1PaymentInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_clone_ptr")] public static extern long LSPS1PaymentInfo_clone_ptr(long _arg);
	// struct LDKLSPS1PaymentInfo LSPS1PaymentInfo_clone(const struct LDKLSPS1PaymentInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_clone")] public static extern long LSPS1PaymentInfo_clone(long _orig);
	// bool LSPS1PaymentInfo_eq(const struct LDKLSPS1PaymentInfo *NONNULL_PTR a, const struct LDKLSPS1PaymentInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentInfo_eq")] public static extern bool LSPS1PaymentInfo_eq(long _a, long _b);
	// void LSPS1Bolt11PaymentInfo_free(struct LDKLSPS1Bolt11PaymentInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_free")] public static extern void LSPS1Bolt11PaymentInfo_free(long _this_obj);
	// enum LDKLSPS1PaymentState LSPS1Bolt11PaymentInfo_get_state(const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_get_state")] public static extern LSPS1PaymentState LSPS1Bolt11PaymentInfo_get_state(long _this_ptr);
	// void LSPS1Bolt11PaymentInfo_set_state(struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr, enum LDKLSPS1PaymentState val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_set_state")] public static extern void LSPS1Bolt11PaymentInfo_set_state(long _this_ptr, LSPS1PaymentState _val);
	// struct LDKLSPSDateTime LSPS1Bolt11PaymentInfo_get_expires_at(const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_get_expires_at")] public static extern long LSPS1Bolt11PaymentInfo_get_expires_at(long _this_ptr);
	// void LSPS1Bolt11PaymentInfo_set_expires_at(struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr, struct LDKLSPSDateTime val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_set_expires_at")] public static extern void LSPS1Bolt11PaymentInfo_set_expires_at(long _this_ptr, long _val);
	// uint64_t LSPS1Bolt11PaymentInfo_get_fee_total_sat(const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_get_fee_total_sat")] public static extern long LSPS1Bolt11PaymentInfo_get_fee_total_sat(long _this_ptr);
	// void LSPS1Bolt11PaymentInfo_set_fee_total_sat(struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_set_fee_total_sat")] public static extern void LSPS1Bolt11PaymentInfo_set_fee_total_sat(long _this_ptr, long _val);
	// uint64_t LSPS1Bolt11PaymentInfo_get_order_total_sat(const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_get_order_total_sat")] public static extern long LSPS1Bolt11PaymentInfo_get_order_total_sat(long _this_ptr);
	// void LSPS1Bolt11PaymentInfo_set_order_total_sat(struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_set_order_total_sat")] public static extern void LSPS1Bolt11PaymentInfo_set_order_total_sat(long _this_ptr, long _val);
	// struct LDKBolt11Invoice LSPS1Bolt11PaymentInfo_get_invoice(const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_get_invoice")] public static extern long LSPS1Bolt11PaymentInfo_get_invoice(long _this_ptr);
	// void LSPS1Bolt11PaymentInfo_set_invoice(struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR this_ptr, struct LDKBolt11Invoice val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_set_invoice")] public static extern void LSPS1Bolt11PaymentInfo_set_invoice(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1Bolt11PaymentInfo LSPS1Bolt11PaymentInfo_new(enum LDKLSPS1PaymentState state_arg, struct LDKLSPSDateTime expires_at_arg, uint64_t fee_total_sat_arg, uint64_t order_total_sat_arg, struct LDKBolt11Invoice invoice_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_new")] public static extern long LSPS1Bolt11PaymentInfo_new(LSPS1PaymentState _state_arg, long _expires_at_arg, long _fee_total_sat_arg, long _order_total_sat_arg, long _invoice_arg);
	// uint64_t LSPS1Bolt11PaymentInfo_clone_ptr(LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_clone_ptr")] public static extern long LSPS1Bolt11PaymentInfo_clone_ptr(long _arg);
	// struct LDKLSPS1Bolt11PaymentInfo LSPS1Bolt11PaymentInfo_clone(const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_clone")] public static extern long LSPS1Bolt11PaymentInfo_clone(long _orig);
	// bool LSPS1Bolt11PaymentInfo_eq(const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR a, const struct LDKLSPS1Bolt11PaymentInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Bolt11PaymentInfo_eq")] public static extern bool LSPS1Bolt11PaymentInfo_eq(long _a, long _b);
	// void LSPS1OnchainPaymentInfo_free(struct LDKLSPS1OnchainPaymentInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_free")] public static extern void LSPS1OnchainPaymentInfo_free(long _this_obj);
	// enum LDKLSPS1PaymentState LSPS1OnchainPaymentInfo_get_state(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_get_state")] public static extern LSPS1PaymentState LSPS1OnchainPaymentInfo_get_state(long _this_ptr);
	// void LSPS1OnchainPaymentInfo_set_state(struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr, enum LDKLSPS1PaymentState val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_set_state")] public static extern void LSPS1OnchainPaymentInfo_set_state(long _this_ptr, LSPS1PaymentState _val);
	// struct LDKLSPSDateTime LSPS1OnchainPaymentInfo_get_expires_at(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_get_expires_at")] public static extern long LSPS1OnchainPaymentInfo_get_expires_at(long _this_ptr);
	// void LSPS1OnchainPaymentInfo_set_expires_at(struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr, struct LDKLSPSDateTime val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_set_expires_at")] public static extern void LSPS1OnchainPaymentInfo_set_expires_at(long _this_ptr, long _val);
	// uint64_t LSPS1OnchainPaymentInfo_get_fee_total_sat(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_get_fee_total_sat")] public static extern long LSPS1OnchainPaymentInfo_get_fee_total_sat(long _this_ptr);
	// void LSPS1OnchainPaymentInfo_set_fee_total_sat(struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_set_fee_total_sat")] public static extern void LSPS1OnchainPaymentInfo_set_fee_total_sat(long _this_ptr, long _val);
	// uint64_t LSPS1OnchainPaymentInfo_get_order_total_sat(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_get_order_total_sat")] public static extern long LSPS1OnchainPaymentInfo_get_order_total_sat(long _this_ptr);
	// void LSPS1OnchainPaymentInfo_set_order_total_sat(struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_set_order_total_sat")] public static extern void LSPS1OnchainPaymentInfo_set_order_total_sat(long _this_ptr, long _val);
	// struct LDKAddress LSPS1OnchainPaymentInfo_get_address(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_get_address")] public static extern long LSPS1OnchainPaymentInfo_get_address(long _this_ptr);
	// void LSPS1OnchainPaymentInfo_set_address(struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr, struct LDKAddress val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_set_address")] public static extern void LSPS1OnchainPaymentInfo_set_address(long _this_ptr, long _val);
	// struct LDKCOption_u16Z LSPS1OnchainPaymentInfo_get_min_onchain_payment_confirmations(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_get_min_onchain_payment_confirmations")] public static extern long LSPS1OnchainPaymentInfo_get_min_onchain_payment_confirmations(long _this_ptr);
	// void LSPS1OnchainPaymentInfo_set_min_onchain_payment_confirmations(struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr, struct LDKCOption_u16Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_set_min_onchain_payment_confirmations")] public static extern void LSPS1OnchainPaymentInfo_set_min_onchain_payment_confirmations(long _this_ptr, long _val);
	// struct LDKCOption_AddressZ LSPS1OnchainPaymentInfo_get_refund_onchain_address(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_get_refund_onchain_address")] public static extern long LSPS1OnchainPaymentInfo_get_refund_onchain_address(long _this_ptr);
	// void LSPS1OnchainPaymentInfo_set_refund_onchain_address(struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR this_ptr, struct LDKCOption_AddressZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_set_refund_onchain_address")] public static extern void LSPS1OnchainPaymentInfo_set_refund_onchain_address(long _this_ptr, long _val);
	// uint64_t LSPS1OnchainPaymentInfo_clone_ptr(LDKLSPS1OnchainPaymentInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_clone_ptr")] public static extern long LSPS1OnchainPaymentInfo_clone_ptr(long _arg);
	// struct LDKLSPS1OnchainPaymentInfo LSPS1OnchainPaymentInfo_clone(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_clone")] public static extern long LSPS1OnchainPaymentInfo_clone(long _orig);
	// bool LSPS1OnchainPaymentInfo_eq(const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR a, const struct LDKLSPS1OnchainPaymentInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPaymentInfo_eq")] public static extern bool LSPS1OnchainPaymentInfo_eq(long _a, long _b);
	// enum LDKLSPS1PaymentState LSPS1PaymentState_clone(const enum LDKLSPS1PaymentState *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentState_clone")] public static extern LSPS1PaymentState LSPS1PaymentState_clone(long _orig);
	// enum LDKLSPS1PaymentState LSPS1PaymentState_expect_payment(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentState_expect_payment")] public static extern LSPS1PaymentState LSPS1PaymentState_expect_payment();
	// enum LDKLSPS1PaymentState LSPS1PaymentState_paid(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentState_paid")] public static extern LSPS1PaymentState LSPS1PaymentState_paid();
	// enum LDKLSPS1PaymentState LSPS1PaymentState_refunded(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentState_refunded")] public static extern LSPS1PaymentState LSPS1PaymentState_refunded();
	// bool LSPS1PaymentState_eq(const enum LDKLSPS1PaymentState *NONNULL_PTR a, const enum LDKLSPS1PaymentState *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1PaymentState_eq")] public static extern bool LSPS1PaymentState_eq(long _a, long _b);
	// void LSPS1OnchainPayment_free(struct LDKLSPS1OnchainPayment this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_free")] public static extern void LSPS1OnchainPayment_free(long _this_obj);
	// struct LDKStr LSPS1OnchainPayment_get_outpoint(const struct LDKLSPS1OnchainPayment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_get_outpoint")] public static extern long LSPS1OnchainPayment_get_outpoint(long _this_ptr);
	// void LSPS1OnchainPayment_set_outpoint(struct LDKLSPS1OnchainPayment *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_set_outpoint")] public static extern void LSPS1OnchainPayment_set_outpoint(long _this_ptr, long _val);
	// uint64_t LSPS1OnchainPayment_get_sat(const struct LDKLSPS1OnchainPayment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_get_sat")] public static extern long LSPS1OnchainPayment_get_sat(long _this_ptr);
	// void LSPS1OnchainPayment_set_sat(struct LDKLSPS1OnchainPayment *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_set_sat")] public static extern void LSPS1OnchainPayment_set_sat(long _this_ptr, long _val);
	// bool LSPS1OnchainPayment_get_confirmed(const struct LDKLSPS1OnchainPayment *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_get_confirmed")] public static extern bool LSPS1OnchainPayment_get_confirmed(long _this_ptr);
	// void LSPS1OnchainPayment_set_confirmed(struct LDKLSPS1OnchainPayment *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_set_confirmed")] public static extern void LSPS1OnchainPayment_set_confirmed(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKLSPS1OnchainPayment LSPS1OnchainPayment_new(struct LDKStr outpoint_arg, uint64_t sat_arg, bool confirmed_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_new")] public static extern long LSPS1OnchainPayment_new(long _outpoint_arg, long _sat_arg, bool _confirmed_arg);
	// uint64_t LSPS1OnchainPayment_clone_ptr(LDKLSPS1OnchainPayment *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_clone_ptr")] public static extern long LSPS1OnchainPayment_clone_ptr(long _arg);
	// struct LDKLSPS1OnchainPayment LSPS1OnchainPayment_clone(const struct LDKLSPS1OnchainPayment *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_clone")] public static extern long LSPS1OnchainPayment_clone(long _orig);
	// bool LSPS1OnchainPayment_eq(const struct LDKLSPS1OnchainPayment *NONNULL_PTR a, const struct LDKLSPS1OnchainPayment *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1OnchainPayment_eq")] public static extern bool LSPS1OnchainPayment_eq(long _a, long _b);
	// void LSPS1ChannelInfo_free(struct LDKLSPS1ChannelInfo this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_free")] public static extern void LSPS1ChannelInfo_free(long _this_obj);
	// struct LDKLSPSDateTime LSPS1ChannelInfo_get_funded_at(const struct LDKLSPS1ChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_get_funded_at")] public static extern long LSPS1ChannelInfo_get_funded_at(long _this_ptr);
	// void LSPS1ChannelInfo_set_funded_at(struct LDKLSPS1ChannelInfo *NONNULL_PTR this_ptr, struct LDKLSPSDateTime val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_set_funded_at")] public static extern void LSPS1ChannelInfo_set_funded_at(long _this_ptr, long _val);
	// struct LDKOutPoint LSPS1ChannelInfo_get_funding_outpoint(const struct LDKLSPS1ChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_get_funding_outpoint")] public static extern long LSPS1ChannelInfo_get_funding_outpoint(long _this_ptr);
	// void LSPS1ChannelInfo_set_funding_outpoint(struct LDKLSPS1ChannelInfo *NONNULL_PTR this_ptr, struct LDKOutPoint val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_set_funding_outpoint")] public static extern void LSPS1ChannelInfo_set_funding_outpoint(long _this_ptr, long _val);
	// struct LDKLSPSDateTime LSPS1ChannelInfo_get_expires_at(const struct LDKLSPS1ChannelInfo *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_get_expires_at")] public static extern long LSPS1ChannelInfo_get_expires_at(long _this_ptr);
	// void LSPS1ChannelInfo_set_expires_at(struct LDKLSPS1ChannelInfo *NONNULL_PTR this_ptr, struct LDKLSPSDateTime val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_set_expires_at")] public static extern void LSPS1ChannelInfo_set_expires_at(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1ChannelInfo LSPS1ChannelInfo_new(struct LDKLSPSDateTime funded_at_arg, struct LDKOutPoint funding_outpoint_arg, struct LDKLSPSDateTime expires_at_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_new")] public static extern long LSPS1ChannelInfo_new(long _funded_at_arg, long _funding_outpoint_arg, long _expires_at_arg);
	// uint64_t LSPS1ChannelInfo_clone_ptr(LDKLSPS1ChannelInfo *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_clone_ptr")] public static extern long LSPS1ChannelInfo_clone_ptr(long _arg);
	// struct LDKLSPS1ChannelInfo LSPS1ChannelInfo_clone(const struct LDKLSPS1ChannelInfo *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_clone")] public static extern long LSPS1ChannelInfo_clone(long _orig);
	// bool LSPS1ChannelInfo_eq(const struct LDKLSPS1ChannelInfo *NONNULL_PTR a, const struct LDKLSPS1ChannelInfo *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1ChannelInfo_eq")] public static extern bool LSPS1ChannelInfo_eq(long _a, long _b);
	// void LSPS1GetOrderRequest_free(struct LDKLSPS1GetOrderRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetOrderRequest_free")] public static extern void LSPS1GetOrderRequest_free(long _this_obj);
	// struct LDKLSPS1OrderId LSPS1GetOrderRequest_get_order_id(const struct LDKLSPS1GetOrderRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetOrderRequest_get_order_id")] public static extern long LSPS1GetOrderRequest_get_order_id(long _this_ptr);
	// void LSPS1GetOrderRequest_set_order_id(struct LDKLSPS1GetOrderRequest *NONNULL_PTR this_ptr, struct LDKLSPS1OrderId val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetOrderRequest_set_order_id")] public static extern void LSPS1GetOrderRequest_set_order_id(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS1GetOrderRequest LSPS1GetOrderRequest_new(struct LDKLSPS1OrderId order_id_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetOrderRequest_new")] public static extern long LSPS1GetOrderRequest_new(long _order_id_arg);
	// uint64_t LSPS1GetOrderRequest_clone_ptr(LDKLSPS1GetOrderRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetOrderRequest_clone_ptr")] public static extern long LSPS1GetOrderRequest_clone_ptr(long _arg);
	// struct LDKLSPS1GetOrderRequest LSPS1GetOrderRequest_clone(const struct LDKLSPS1GetOrderRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetOrderRequest_clone")] public static extern long LSPS1GetOrderRequest_clone(long _orig);
	// bool LSPS1GetOrderRequest_eq(const struct LDKLSPS1GetOrderRequest *NONNULL_PTR a, const struct LDKLSPS1GetOrderRequest *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1GetOrderRequest_eq")] public static extern bool LSPS1GetOrderRequest_eq(long _a, long _b);
	// void LSPS1Request_free(struct LDKLSPS1Request this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Request_free")] public static extern void LSPS1Request_free(long _this_ptr);
	// uint64_t LSPS1Request_clone_ptr(LDKLSPS1Request *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Request_clone_ptr")] public static extern long LSPS1Request_clone_ptr(long _arg);
	// struct LDKLSPS1Request LSPS1Request_clone(const struct LDKLSPS1Request *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Request_clone")] public static extern long LSPS1Request_clone(long _orig);
	// struct LDKLSPS1Request LSPS1Request_get_info(struct LDKLSPS1GetInfoRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Request_get_info")] public static extern long LSPS1Request_get_info(long _a);
	// struct LDKLSPS1Request LSPS1Request_create_order(struct LDKLSPS1CreateOrderRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Request_create_order")] public static extern long LSPS1Request_create_order(long _a);
	// struct LDKLSPS1Request LSPS1Request_get_order(struct LDKLSPS1GetOrderRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Request_get_order")] public static extern long LSPS1Request_get_order(long _a);
	// bool LSPS1Request_eq(const struct LDKLSPS1Request *NONNULL_PTR a, const struct LDKLSPS1Request *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Request_eq")] public static extern bool LSPS1Request_eq(long _a, long _b);
	// void LSPS1Response_free(struct LDKLSPS1Response this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_free")] public static extern void LSPS1Response_free(long _this_ptr);
	// uint64_t LSPS1Response_clone_ptr(LDKLSPS1Response *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_clone_ptr")] public static extern long LSPS1Response_clone_ptr(long _arg);
	// struct LDKLSPS1Response LSPS1Response_clone(const struct LDKLSPS1Response *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_clone")] public static extern long LSPS1Response_clone(long _orig);
	// struct LDKLSPS1Response LSPS1Response_get_info(struct LDKLSPS1GetInfoResponse a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_get_info")] public static extern long LSPS1Response_get_info(long _a);
	// struct LDKLSPS1Response LSPS1Response_get_info_error(struct LDKLSPSResponseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_get_info_error")] public static extern long LSPS1Response_get_info_error(long _a);
	// struct LDKLSPS1Response LSPS1Response_create_order(struct LDKLSPS1CreateOrderResponse a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_create_order")] public static extern long LSPS1Response_create_order(long _a);
	// struct LDKLSPS1Response LSPS1Response_create_order_error(struct LDKLSPSResponseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_create_order_error")] public static extern long LSPS1Response_create_order_error(long _a);
	// struct LDKLSPS1Response LSPS1Response_get_order(struct LDKLSPS1CreateOrderResponse a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_get_order")] public static extern long LSPS1Response_get_order(long _a);
	// struct LDKLSPS1Response LSPS1Response_get_order_error(struct LDKLSPSResponseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_get_order_error")] public static extern long LSPS1Response_get_order_error(long _a);
	// bool LSPS1Response_eq(const struct LDKLSPS1Response *NONNULL_PTR a, const struct LDKLSPS1Response *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Response_eq")] public static extern bool LSPS1Response_eq(long _a, long _b);
	// void LSPS1Message_free(struct LDKLSPS1Message this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Message_free")] public static extern void LSPS1Message_free(long _this_ptr);
	// uint64_t LSPS1Message_clone_ptr(LDKLSPS1Message *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Message_clone_ptr")] public static extern long LSPS1Message_clone_ptr(long _arg);
	// struct LDKLSPS1Message LSPS1Message_clone(const struct LDKLSPS1Message *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Message_clone")] public static extern long LSPS1Message_clone(long _orig);
	// struct LDKLSPS1Message LSPS1Message_request(struct LDKLSPSRequestId a, struct LDKLSPS1Request b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Message_request")] public static extern long LSPS1Message_request(long _a, long _b);
	// struct LDKLSPS1Message LSPS1Message_response(struct LDKLSPSRequestId a, struct LDKLSPS1Response b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Message_response")] public static extern long LSPS1Message_response(long _a, long _b);
	// bool LSPS1Message_eq(const struct LDKLSPS1Message *NONNULL_PTR a, const struct LDKLSPS1Message *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS1Message_eq")] public static extern bool LSPS1Message_eq(long _a, long _b);
	// void LSPS2ClientConfig_free(struct LDKLSPS2ClientConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientConfig_free")] public static extern void LSPS2ClientConfig_free(long _this_obj);
	// MUST_USE_RES struct LDKLSPS2ClientConfig LSPS2ClientConfig_new(void);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientConfig_new")] public static extern long LSPS2ClientConfig_new();
	// uint64_t LSPS2ClientConfig_clone_ptr(LDKLSPS2ClientConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientConfig_clone_ptr")] public static extern long LSPS2ClientConfig_clone_ptr(long _arg);
	// struct LDKLSPS2ClientConfig LSPS2ClientConfig_clone(const struct LDKLSPS2ClientConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientConfig_clone")] public static extern long LSPS2ClientConfig_clone(long _orig);
	// void LSPS2ClientHandler_free(struct LDKLSPS2ClientHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientHandler_free")] public static extern void LSPS2ClientHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKLSPSRequestId LSPS2ClientHandler_request_opening_params(const struct LDKLSPS2ClientHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKCOption_StrZ token);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientHandler_request_opening_params")] public static extern long LSPS2ClientHandler_request_opening_params(long _this_arg, long _counterparty_node_id, long _token);
	// MUST_USE_RES struct LDKCResult_LSPSRequestIdAPIErrorZ LSPS2ClientHandler_select_opening_params(const struct LDKLSPS2ClientHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKCOption_u64Z payment_size_msat, struct LDKLSPS2OpeningFeeParams opening_fee_params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientHandler_select_opening_params")] public static extern long LSPS2ClientHandler_select_opening_params(long _this_arg, long _counterparty_node_id, long _payment_size_msat, long _opening_fee_params);
	// void LSPS2ClientEvent_free(struct LDKLSPS2ClientEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientEvent_free")] public static extern void LSPS2ClientEvent_free(long _this_ptr);
	// uint64_t LSPS2ClientEvent_clone_ptr(LDKLSPS2ClientEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientEvent_clone_ptr")] public static extern long LSPS2ClientEvent_clone_ptr(long _arg);
	// struct LDKLSPS2ClientEvent LSPS2ClientEvent_clone(const struct LDKLSPS2ClientEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientEvent_clone")] public static extern long LSPS2ClientEvent_clone(long _orig);
	// struct LDKLSPS2ClientEvent LSPS2ClientEvent_opening_parameters_ready(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKCVec_LSPS2OpeningFeeParamsZ opening_fee_params_menu);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientEvent_opening_parameters_ready")] public static extern long LSPS2ClientEvent_opening_parameters_ready(long _request_id, long _counterparty_node_id, long _opening_fee_params_menu);
	// struct LDKLSPS2ClientEvent LSPS2ClientEvent_invoice_parameters_ready(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, uint64_t intercept_scid, uint32_t cltv_expiry_delta, struct LDKCOption_u64Z payment_size_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientEvent_invoice_parameters_ready")] public static extern long LSPS2ClientEvent_invoice_parameters_ready(long _request_id, long _counterparty_node_id, long _intercept_scid, int _cltv_expiry_delta, long _payment_size_msat);
	// bool LSPS2ClientEvent_eq(const struct LDKLSPS2ClientEvent *NONNULL_PTR a, const struct LDKLSPS2ClientEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ClientEvent_eq")] public static extern bool LSPS2ClientEvent_eq(long _a, long _b);
	// void LSPS2ServiceEvent_free(struct LDKLSPS2ServiceEvent this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceEvent_free")] public static extern void LSPS2ServiceEvent_free(long _this_ptr);
	// uint64_t LSPS2ServiceEvent_clone_ptr(LDKLSPS2ServiceEvent *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceEvent_clone_ptr")] public static extern long LSPS2ServiceEvent_clone_ptr(long _arg);
	// struct LDKLSPS2ServiceEvent LSPS2ServiceEvent_clone(const struct LDKLSPS2ServiceEvent *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceEvent_clone")] public static extern long LSPS2ServiceEvent_clone(long _orig);
	// struct LDKLSPS2ServiceEvent LSPS2ServiceEvent_get_info(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKCOption_StrZ token);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceEvent_get_info")] public static extern long LSPS2ServiceEvent_get_info(long _request_id, long _counterparty_node_id, long _token);
	// struct LDKLSPS2ServiceEvent LSPS2ServiceEvent_buy_request(struct LDKLSPSRequestId request_id, struct LDKPublicKey counterparty_node_id, struct LDKLSPS2OpeningFeeParams opening_fee_params, struct LDKCOption_u64Z payment_size_msat);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceEvent_buy_request")] public static extern long LSPS2ServiceEvent_buy_request(long _request_id, long _counterparty_node_id, long _opening_fee_params, long _payment_size_msat);
	// struct LDKLSPS2ServiceEvent LSPS2ServiceEvent_open_channel(struct LDKPublicKey their_network_key, uint64_t amt_to_forward_msat, uint64_t opening_fee_msat, struct LDKU128 user_channel_id, uint64_t intercept_scid);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceEvent_open_channel")] public static extern long LSPS2ServiceEvent_open_channel(long _their_network_key, long _amt_to_forward_msat, long _opening_fee_msat, long _user_channel_id, long _intercept_scid);
	// bool LSPS2ServiceEvent_eq(const struct LDKLSPS2ServiceEvent *NONNULL_PTR a, const struct LDKLSPS2ServiceEvent *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceEvent_eq")] public static extern bool LSPS2ServiceEvent_eq(long _a, long _b);
	// void LSPS2GetInfoRequest_free(struct LDKLSPS2GetInfoRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoRequest_free")] public static extern void LSPS2GetInfoRequest_free(long _this_obj);
	// struct LDKCOption_StrZ LSPS2GetInfoRequest_get_token(const struct LDKLSPS2GetInfoRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoRequest_get_token")] public static extern long LSPS2GetInfoRequest_get_token(long _this_ptr);
	// void LSPS2GetInfoRequest_set_token(struct LDKLSPS2GetInfoRequest *NONNULL_PTR this_ptr, struct LDKCOption_StrZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoRequest_set_token")] public static extern void LSPS2GetInfoRequest_set_token(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS2GetInfoRequest LSPS2GetInfoRequest_new(struct LDKCOption_StrZ token_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoRequest_new")] public static extern long LSPS2GetInfoRequest_new(long _token_arg);
	// uint64_t LSPS2GetInfoRequest_clone_ptr(LDKLSPS2GetInfoRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoRequest_clone_ptr")] public static extern long LSPS2GetInfoRequest_clone_ptr(long _arg);
	// struct LDKLSPS2GetInfoRequest LSPS2GetInfoRequest_clone(const struct LDKLSPS2GetInfoRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoRequest_clone")] public static extern long LSPS2GetInfoRequest_clone(long _orig);
	// bool LSPS2GetInfoRequest_eq(const struct LDKLSPS2GetInfoRequest *NONNULL_PTR a, const struct LDKLSPS2GetInfoRequest *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoRequest_eq")] public static extern bool LSPS2GetInfoRequest_eq(long _a, long _b);
	// void LSPS2RawOpeningFeeParams_free(struct LDKLSPS2RawOpeningFeeParams this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_free")] public static extern void LSPS2RawOpeningFeeParams_free(long _this_obj);
	// uint64_t LSPS2RawOpeningFeeParams_get_min_fee_msat(const struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_get_min_fee_msat")] public static extern long LSPS2RawOpeningFeeParams_get_min_fee_msat(long _this_ptr);
	// void LSPS2RawOpeningFeeParams_set_min_fee_msat(struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_set_min_fee_msat")] public static extern void LSPS2RawOpeningFeeParams_set_min_fee_msat(long _this_ptr, long _val);
	// uint32_t LSPS2RawOpeningFeeParams_get_proportional(const struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_get_proportional")] public static extern int LSPS2RawOpeningFeeParams_get_proportional(long _this_ptr);
	// void LSPS2RawOpeningFeeParams_set_proportional(struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_set_proportional")] public static extern void LSPS2RawOpeningFeeParams_set_proportional(long _this_ptr, int _val);
	// struct LDKLSPSDateTime LSPS2RawOpeningFeeParams_get_valid_until(const struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_get_valid_until")] public static extern long LSPS2RawOpeningFeeParams_get_valid_until(long _this_ptr);
	// void LSPS2RawOpeningFeeParams_set_valid_until(struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr, struct LDKLSPSDateTime val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_set_valid_until")] public static extern void LSPS2RawOpeningFeeParams_set_valid_until(long _this_ptr, long _val);
	// uint32_t LSPS2RawOpeningFeeParams_get_min_lifetime(const struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_get_min_lifetime")] public static extern int LSPS2RawOpeningFeeParams_get_min_lifetime(long _this_ptr);
	// void LSPS2RawOpeningFeeParams_set_min_lifetime(struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_set_min_lifetime")] public static extern void LSPS2RawOpeningFeeParams_set_min_lifetime(long _this_ptr, int _val);
	// uint32_t LSPS2RawOpeningFeeParams_get_max_client_to_self_delay(const struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_get_max_client_to_self_delay")] public static extern int LSPS2RawOpeningFeeParams_get_max_client_to_self_delay(long _this_ptr);
	// void LSPS2RawOpeningFeeParams_set_max_client_to_self_delay(struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_set_max_client_to_self_delay")] public static extern void LSPS2RawOpeningFeeParams_set_max_client_to_self_delay(long _this_ptr, int _val);
	// uint64_t LSPS2RawOpeningFeeParams_get_min_payment_size_msat(const struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_get_min_payment_size_msat")] public static extern long LSPS2RawOpeningFeeParams_get_min_payment_size_msat(long _this_ptr);
	// void LSPS2RawOpeningFeeParams_set_min_payment_size_msat(struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_set_min_payment_size_msat")] public static extern void LSPS2RawOpeningFeeParams_set_min_payment_size_msat(long _this_ptr, long _val);
	// uint64_t LSPS2RawOpeningFeeParams_get_max_payment_size_msat(const struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_get_max_payment_size_msat")] public static extern long LSPS2RawOpeningFeeParams_get_max_payment_size_msat(long _this_ptr);
	// void LSPS2RawOpeningFeeParams_set_max_payment_size_msat(struct LDKLSPS2RawOpeningFeeParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_set_max_payment_size_msat")] public static extern void LSPS2RawOpeningFeeParams_set_max_payment_size_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS2RawOpeningFeeParams LSPS2RawOpeningFeeParams_new(uint64_t min_fee_msat_arg, uint32_t proportional_arg, struct LDKLSPSDateTime valid_until_arg, uint32_t min_lifetime_arg, uint32_t max_client_to_self_delay_arg, uint64_t min_payment_size_msat_arg, uint64_t max_payment_size_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2RawOpeningFeeParams_new")] public static extern long LSPS2RawOpeningFeeParams_new(long _min_fee_msat_arg, int _proportional_arg, long _valid_until_arg, int _min_lifetime_arg, int _max_client_to_self_delay_arg, long _min_payment_size_msat_arg, long _max_payment_size_msat_arg);
	// void LSPS2OpeningFeeParams_free(struct LDKLSPS2OpeningFeeParams this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_free")] public static extern void LSPS2OpeningFeeParams_free(long _this_obj);
	// uint64_t LSPS2OpeningFeeParams_get_min_fee_msat(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_min_fee_msat")] public static extern long LSPS2OpeningFeeParams_get_min_fee_msat(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_min_fee_msat(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_min_fee_msat")] public static extern void LSPS2OpeningFeeParams_set_min_fee_msat(long _this_ptr, long _val);
	// uint32_t LSPS2OpeningFeeParams_get_proportional(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_proportional")] public static extern int LSPS2OpeningFeeParams_get_proportional(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_proportional(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_proportional")] public static extern void LSPS2OpeningFeeParams_set_proportional(long _this_ptr, int _val);
	// struct LDKLSPSDateTime LSPS2OpeningFeeParams_get_valid_until(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_valid_until")] public static extern long LSPS2OpeningFeeParams_get_valid_until(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_valid_until(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, struct LDKLSPSDateTime val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_valid_until")] public static extern void LSPS2OpeningFeeParams_set_valid_until(long _this_ptr, long _val);
	// uint32_t LSPS2OpeningFeeParams_get_min_lifetime(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_min_lifetime")] public static extern int LSPS2OpeningFeeParams_get_min_lifetime(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_min_lifetime(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_min_lifetime")] public static extern void LSPS2OpeningFeeParams_set_min_lifetime(long _this_ptr, int _val);
	// uint32_t LSPS2OpeningFeeParams_get_max_client_to_self_delay(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_max_client_to_self_delay")] public static extern int LSPS2OpeningFeeParams_get_max_client_to_self_delay(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_max_client_to_self_delay(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_max_client_to_self_delay")] public static extern void LSPS2OpeningFeeParams_set_max_client_to_self_delay(long _this_ptr, int _val);
	// uint64_t LSPS2OpeningFeeParams_get_min_payment_size_msat(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_min_payment_size_msat")] public static extern long LSPS2OpeningFeeParams_get_min_payment_size_msat(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_min_payment_size_msat(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_min_payment_size_msat")] public static extern void LSPS2OpeningFeeParams_set_min_payment_size_msat(long _this_ptr, long _val);
	// uint64_t LSPS2OpeningFeeParams_get_max_payment_size_msat(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_max_payment_size_msat")] public static extern long LSPS2OpeningFeeParams_get_max_payment_size_msat(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_max_payment_size_msat(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, uint64_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_max_payment_size_msat")] public static extern void LSPS2OpeningFeeParams_set_max_payment_size_msat(long _this_ptr, long _val);
	// struct LDKStr LSPS2OpeningFeeParams_get_promise(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_get_promise")] public static extern long LSPS2OpeningFeeParams_get_promise(long _this_ptr);
	// void LSPS2OpeningFeeParams_set_promise(struct LDKLSPS2OpeningFeeParams *NONNULL_PTR this_ptr, struct LDKStr val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_set_promise")] public static extern void LSPS2OpeningFeeParams_set_promise(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS2OpeningFeeParams LSPS2OpeningFeeParams_new(uint64_t min_fee_msat_arg, uint32_t proportional_arg, struct LDKLSPSDateTime valid_until_arg, uint32_t min_lifetime_arg, uint32_t max_client_to_self_delay_arg, uint64_t min_payment_size_msat_arg, uint64_t max_payment_size_msat_arg, struct LDKStr promise_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_new")] public static extern long LSPS2OpeningFeeParams_new(long _min_fee_msat_arg, int _proportional_arg, long _valid_until_arg, int _min_lifetime_arg, int _max_client_to_self_delay_arg, long _min_payment_size_msat_arg, long _max_payment_size_msat_arg, long _promise_arg);
	// uint64_t LSPS2OpeningFeeParams_clone_ptr(LDKLSPS2OpeningFeeParams *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_clone_ptr")] public static extern long LSPS2OpeningFeeParams_clone_ptr(long _arg);
	// struct LDKLSPS2OpeningFeeParams LSPS2OpeningFeeParams_clone(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_clone")] public static extern long LSPS2OpeningFeeParams_clone(long _orig);
	// bool LSPS2OpeningFeeParams_eq(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR a, const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2OpeningFeeParams_eq")] public static extern bool LSPS2OpeningFeeParams_eq(long _a, long _b);
	// void LSPS2GetInfoResponse_free(struct LDKLSPS2GetInfoResponse this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoResponse_free")] public static extern void LSPS2GetInfoResponse_free(long _this_obj);
	// struct LDKCVec_LSPS2OpeningFeeParamsZ LSPS2GetInfoResponse_get_opening_fee_params_menu(const struct LDKLSPS2GetInfoResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoResponse_get_opening_fee_params_menu")] public static extern long LSPS2GetInfoResponse_get_opening_fee_params_menu(long _this_ptr);
	// void LSPS2GetInfoResponse_set_opening_fee_params_menu(struct LDKLSPS2GetInfoResponse *NONNULL_PTR this_ptr, struct LDKCVec_LSPS2OpeningFeeParamsZ val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoResponse_set_opening_fee_params_menu")] public static extern void LSPS2GetInfoResponse_set_opening_fee_params_menu(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS2GetInfoResponse LSPS2GetInfoResponse_new(struct LDKCVec_LSPS2OpeningFeeParamsZ opening_fee_params_menu_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoResponse_new")] public static extern long LSPS2GetInfoResponse_new(long _opening_fee_params_menu_arg);
	// uint64_t LSPS2GetInfoResponse_clone_ptr(LDKLSPS2GetInfoResponse *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoResponse_clone_ptr")] public static extern long LSPS2GetInfoResponse_clone_ptr(long _arg);
	// struct LDKLSPS2GetInfoResponse LSPS2GetInfoResponse_clone(const struct LDKLSPS2GetInfoResponse *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoResponse_clone")] public static extern long LSPS2GetInfoResponse_clone(long _orig);
	// bool LSPS2GetInfoResponse_eq(const struct LDKLSPS2GetInfoResponse *NONNULL_PTR a, const struct LDKLSPS2GetInfoResponse *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2GetInfoResponse_eq")] public static extern bool LSPS2GetInfoResponse_eq(long _a, long _b);
	// void LSPS2BuyRequest_free(struct LDKLSPS2BuyRequest this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_free")] public static extern void LSPS2BuyRequest_free(long _this_obj);
	// struct LDKLSPS2OpeningFeeParams LSPS2BuyRequest_get_opening_fee_params(const struct LDKLSPS2BuyRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_get_opening_fee_params")] public static extern long LSPS2BuyRequest_get_opening_fee_params(long _this_ptr);
	// void LSPS2BuyRequest_set_opening_fee_params(struct LDKLSPS2BuyRequest *NONNULL_PTR this_ptr, struct LDKLSPS2OpeningFeeParams val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_set_opening_fee_params")] public static extern void LSPS2BuyRequest_set_opening_fee_params(long _this_ptr, long _val);
	// struct LDKCOption_u64Z LSPS2BuyRequest_get_payment_size_msat(const struct LDKLSPS2BuyRequest *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_get_payment_size_msat")] public static extern long LSPS2BuyRequest_get_payment_size_msat(long _this_ptr);
	// void LSPS2BuyRequest_set_payment_size_msat(struct LDKLSPS2BuyRequest *NONNULL_PTR this_ptr, struct LDKCOption_u64Z val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_set_payment_size_msat")] public static extern void LSPS2BuyRequest_set_payment_size_msat(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS2BuyRequest LSPS2BuyRequest_new(struct LDKLSPS2OpeningFeeParams opening_fee_params_arg, struct LDKCOption_u64Z payment_size_msat_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_new")] public static extern long LSPS2BuyRequest_new(long _opening_fee_params_arg, long _payment_size_msat_arg);
	// uint64_t LSPS2BuyRequest_clone_ptr(LDKLSPS2BuyRequest *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_clone_ptr")] public static extern long LSPS2BuyRequest_clone_ptr(long _arg);
	// struct LDKLSPS2BuyRequest LSPS2BuyRequest_clone(const struct LDKLSPS2BuyRequest *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_clone")] public static extern long LSPS2BuyRequest_clone(long _orig);
	// bool LSPS2BuyRequest_eq(const struct LDKLSPS2BuyRequest *NONNULL_PTR a, const struct LDKLSPS2BuyRequest *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyRequest_eq")] public static extern bool LSPS2BuyRequest_eq(long _a, long _b);
	// void LSPS2InterceptScid_free(struct LDKLSPS2InterceptScid this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2InterceptScid_free")] public static extern void LSPS2InterceptScid_free(long _this_obj);
	// uint64_t LSPS2InterceptScid_clone_ptr(LDKLSPS2InterceptScid *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2InterceptScid_clone_ptr")] public static extern long LSPS2InterceptScid_clone_ptr(long _arg);
	// struct LDKLSPS2InterceptScid LSPS2InterceptScid_clone(const struct LDKLSPS2InterceptScid *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2InterceptScid_clone")] public static extern long LSPS2InterceptScid_clone(long _orig);
	// bool LSPS2InterceptScid_eq(const struct LDKLSPS2InterceptScid *NONNULL_PTR a, const struct LDKLSPS2InterceptScid *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2InterceptScid_eq")] public static extern bool LSPS2InterceptScid_eq(long _a, long _b);
	// MUST_USE_RES struct LDKCResult_u64NoneZ LSPS2InterceptScid_to_scid(const struct LDKLSPS2InterceptScid *NONNULL_PTR this_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2InterceptScid_to_scid")] public static extern long LSPS2InterceptScid_to_scid(long _this_arg);
	// void LSPS2BuyResponse_free(struct LDKLSPS2BuyResponse this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_free")] public static extern void LSPS2BuyResponse_free(long _this_obj);
	// struct LDKLSPS2InterceptScid LSPS2BuyResponse_get_jit_channel_scid(const struct LDKLSPS2BuyResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_get_jit_channel_scid")] public static extern long LSPS2BuyResponse_get_jit_channel_scid(long _this_ptr);
	// void LSPS2BuyResponse_set_jit_channel_scid(struct LDKLSPS2BuyResponse *NONNULL_PTR this_ptr, struct LDKLSPS2InterceptScid val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_set_jit_channel_scid")] public static extern void LSPS2BuyResponse_set_jit_channel_scid(long _this_ptr, long _val);
	// uint32_t LSPS2BuyResponse_get_lsp_cltv_expiry_delta(const struct LDKLSPS2BuyResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_get_lsp_cltv_expiry_delta")] public static extern int LSPS2BuyResponse_get_lsp_cltv_expiry_delta(long _this_ptr);
	// void LSPS2BuyResponse_set_lsp_cltv_expiry_delta(struct LDKLSPS2BuyResponse *NONNULL_PTR this_ptr, uint32_t val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_set_lsp_cltv_expiry_delta")] public static extern void LSPS2BuyResponse_set_lsp_cltv_expiry_delta(long _this_ptr, int _val);
	// bool LSPS2BuyResponse_get_client_trusts_lsp(const struct LDKLSPS2BuyResponse *NONNULL_PTR this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_get_client_trusts_lsp")] public static extern bool LSPS2BuyResponse_get_client_trusts_lsp(long _this_ptr);
	// void LSPS2BuyResponse_set_client_trusts_lsp(struct LDKLSPS2BuyResponse *NONNULL_PTR this_ptr, bool val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_set_client_trusts_lsp")] public static extern void LSPS2BuyResponse_set_client_trusts_lsp(long _this_ptr, bool _val);
	// MUST_USE_RES struct LDKLSPS2BuyResponse LSPS2BuyResponse_new(struct LDKLSPS2InterceptScid jit_channel_scid_arg, uint32_t lsp_cltv_expiry_delta_arg, bool client_trusts_lsp_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_new")] public static extern long LSPS2BuyResponse_new(long _jit_channel_scid_arg, int _lsp_cltv_expiry_delta_arg, bool _client_trusts_lsp_arg);
	// uint64_t LSPS2BuyResponse_clone_ptr(LDKLSPS2BuyResponse *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_clone_ptr")] public static extern long LSPS2BuyResponse_clone_ptr(long _arg);
	// struct LDKLSPS2BuyResponse LSPS2BuyResponse_clone(const struct LDKLSPS2BuyResponse *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_clone")] public static extern long LSPS2BuyResponse_clone(long _orig);
	// bool LSPS2BuyResponse_eq(const struct LDKLSPS2BuyResponse *NONNULL_PTR a, const struct LDKLSPS2BuyResponse *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2BuyResponse_eq")] public static extern bool LSPS2BuyResponse_eq(long _a, long _b);
	// void LSPS2Request_free(struct LDKLSPS2Request this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Request_free")] public static extern void LSPS2Request_free(long _this_ptr);
	// uint64_t LSPS2Request_clone_ptr(LDKLSPS2Request *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Request_clone_ptr")] public static extern long LSPS2Request_clone_ptr(long _arg);
	// struct LDKLSPS2Request LSPS2Request_clone(const struct LDKLSPS2Request *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Request_clone")] public static extern long LSPS2Request_clone(long _orig);
	// struct LDKLSPS2Request LSPS2Request_get_info(struct LDKLSPS2GetInfoRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Request_get_info")] public static extern long LSPS2Request_get_info(long _a);
	// struct LDKLSPS2Request LSPS2Request_buy(struct LDKLSPS2BuyRequest a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Request_buy")] public static extern long LSPS2Request_buy(long _a);
	// bool LSPS2Request_eq(const struct LDKLSPS2Request *NONNULL_PTR a, const struct LDKLSPS2Request *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Request_eq")] public static extern bool LSPS2Request_eq(long _a, long _b);
	// void LSPS2Response_free(struct LDKLSPS2Response this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_free")] public static extern void LSPS2Response_free(long _this_ptr);
	// uint64_t LSPS2Response_clone_ptr(LDKLSPS2Response *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_clone_ptr")] public static extern long LSPS2Response_clone_ptr(long _arg);
	// struct LDKLSPS2Response LSPS2Response_clone(const struct LDKLSPS2Response *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_clone")] public static extern long LSPS2Response_clone(long _orig);
	// struct LDKLSPS2Response LSPS2Response_get_info(struct LDKLSPS2GetInfoResponse a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_get_info")] public static extern long LSPS2Response_get_info(long _a);
	// struct LDKLSPS2Response LSPS2Response_get_info_error(struct LDKLSPSResponseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_get_info_error")] public static extern long LSPS2Response_get_info_error(long _a);
	// struct LDKLSPS2Response LSPS2Response_buy(struct LDKLSPS2BuyResponse a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_buy")] public static extern long LSPS2Response_buy(long _a);
	// struct LDKLSPS2Response LSPS2Response_buy_error(struct LDKLSPSResponseError a);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_buy_error")] public static extern long LSPS2Response_buy_error(long _a);
	// bool LSPS2Response_eq(const struct LDKLSPS2Response *NONNULL_PTR a, const struct LDKLSPS2Response *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Response_eq")] public static extern bool LSPS2Response_eq(long _a, long _b);
	// void LSPS2Message_free(struct LDKLSPS2Message this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Message_free")] public static extern void LSPS2Message_free(long _this_ptr);
	// uint64_t LSPS2Message_clone_ptr(LDKLSPS2Message *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Message_clone_ptr")] public static extern long LSPS2Message_clone_ptr(long _arg);
	// struct LDKLSPS2Message LSPS2Message_clone(const struct LDKLSPS2Message *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Message_clone")] public static extern long LSPS2Message_clone(long _orig);
	// struct LDKLSPS2Message LSPS2Message_request(struct LDKLSPSRequestId a, struct LDKLSPS2Request b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Message_request")] public static extern long LSPS2Message_request(long _a, long _b);
	// struct LDKLSPS2Message LSPS2Message_response(struct LDKLSPSRequestId a, struct LDKLSPS2Response b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Message_response")] public static extern long LSPS2Message_response(long _a, long _b);
	// bool LSPS2Message_eq(const struct LDKLSPS2Message *NONNULL_PTR a, const struct LDKLSPS2Message *NONNULL_PTR b);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2Message_eq")] public static extern bool LSPS2Message_eq(long _a, long _b);
	// void LSPS2ServiceConfig_free(struct LDKLSPS2ServiceConfig this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceConfig_free")] public static extern void LSPS2ServiceConfig_free(long _this_obj);
	// const uint8_t (*LSPS2ServiceConfig_get_promise_secret(const struct LDKLSPS2ServiceConfig *NONNULL_PTR this_ptr))[32];
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceConfig_get_promise_secret")] public static extern long LSPS2ServiceConfig_get_promise_secret(long _this_ptr);
	// void LSPS2ServiceConfig_set_promise_secret(struct LDKLSPS2ServiceConfig *NONNULL_PTR this_ptr, struct LDKThirtyTwoBytes val);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceConfig_set_promise_secret")] public static extern void LSPS2ServiceConfig_set_promise_secret(long _this_ptr, long _val);
	// MUST_USE_RES struct LDKLSPS2ServiceConfig LSPS2ServiceConfig_new(struct LDKThirtyTwoBytes promise_secret_arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceConfig_new")] public static extern long LSPS2ServiceConfig_new(long _promise_secret_arg);
	// uint64_t LSPS2ServiceConfig_clone_ptr(LDKLSPS2ServiceConfig *NONNULL_PTR arg);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceConfig_clone_ptr")] public static extern long LSPS2ServiceConfig_clone_ptr(long _arg);
	// struct LDKLSPS2ServiceConfig LSPS2ServiceConfig_clone(const struct LDKLSPS2ServiceConfig *NONNULL_PTR orig);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceConfig_clone")] public static extern long LSPS2ServiceConfig_clone(long _orig);
	// void LSPS2ServiceHandler_free(struct LDKLSPS2ServiceHandler this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_free")] public static extern void LSPS2ServiceHandler_free(long _this_obj);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ LSPS2ServiceHandler_invalid_token_provided(const struct LDKLSPS2ServiceHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKLSPSRequestId request_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_invalid_token_provided")] public static extern long LSPS2ServiceHandler_invalid_token_provided(long _this_arg, long _counterparty_node_id, long _request_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ LSPS2ServiceHandler_opening_fee_params_generated(const struct LDKLSPS2ServiceHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKLSPSRequestId request_id, struct LDKCVec_LSPS2RawOpeningFeeParamsZ opening_fee_params_menu);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_opening_fee_params_generated")] public static extern long LSPS2ServiceHandler_opening_fee_params_generated(long _this_arg, long _counterparty_node_id, long _request_id, long _opening_fee_params_menu);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ LSPS2ServiceHandler_invoice_parameters_generated(const struct LDKLSPS2ServiceHandler *NONNULL_PTR this_arg, struct LDKPublicKey counterparty_node_id, struct LDKLSPSRequestId request_id, uint64_t intercept_scid, uint32_t cltv_expiry_delta, bool client_trusts_lsp, struct LDKU128 user_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_invoice_parameters_generated")] public static extern long LSPS2ServiceHandler_invoice_parameters_generated(long _this_arg, long _counterparty_node_id, long _request_id, long _intercept_scid, int _cltv_expiry_delta, bool _client_trusts_lsp, long _user_channel_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ LSPS2ServiceHandler_htlc_intercepted(const struct LDKLSPS2ServiceHandler *NONNULL_PTR this_arg, uint64_t intercept_scid, struct LDKThirtyTwoBytes intercept_id, uint64_t expected_outbound_amount_msat, struct LDKThirtyTwoBytes payment_hash);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_htlc_intercepted")] public static extern long LSPS2ServiceHandler_htlc_intercepted(long _this_arg, long _intercept_scid, long _intercept_id, long _expected_outbound_amount_msat, long _payment_hash);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ LSPS2ServiceHandler_htlc_handling_failed(const struct LDKLSPS2ServiceHandler *NONNULL_PTR this_arg, struct LDKHTLCDestination failed_next_destination);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_htlc_handling_failed")] public static extern long LSPS2ServiceHandler_htlc_handling_failed(long _this_arg, long _failed_next_destination);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ LSPS2ServiceHandler_payment_forwarded(const struct LDKLSPS2ServiceHandler *NONNULL_PTR this_arg, struct LDKChannelId next_channel_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_payment_forwarded")] public static extern long LSPS2ServiceHandler_payment_forwarded(long _this_arg, long _next_channel_id);
	// MUST_USE_RES struct LDKCResult_NoneAPIErrorZ LSPS2ServiceHandler_channel_ready(const struct LDKLSPS2ServiceHandler *NONNULL_PTR this_arg, struct LDKU128 user_channel_id, const struct LDKChannelId *NONNULL_PTR channel_id, struct LDKPublicKey counterparty_node_id);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_LSPS2ServiceHandler_channel_ready")] public static extern long LSPS2ServiceHandler_channel_ready(long _this_arg, long _user_channel_id, long _channel_id, long _counterparty_node_id);
	// bool is_valid_opening_fee_params(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR fee_params, const uint8_t (*promise_secret)[32]);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_is_valid_opening_fee_params")] public static extern bool is_valid_opening_fee_params(long _fee_params, long _promise_secret);
	// bool is_expired_opening_fee_params(const struct LDKLSPS2OpeningFeeParams *NONNULL_PTR fee_params);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_is_expired_opening_fee_params")] public static extern bool is_expired_opening_fee_params(long _fee_params);
	// struct LDKCOption_u64Z compute_opening_fee(uint64_t payment_size_msat, uint64_t opening_fee_min_fee_msat, uint64_t opening_fee_proportional);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_compute_opening_fee")] public static extern long compute_opening_fee(long _payment_size_msat, long _opening_fee_min_fee_msat, long _opening_fee_proportional);
	// void MessageQueue_free(struct LDKMessageQueue this_obj);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_MessageQueue_free")] public static extern void MessageQueue_free(long _this_obj);
	// void ProcessMessagesCallback_free(struct LDKProcessMessagesCallback this_ptr);
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_ProcessMessagesCallback_free")] public static extern void ProcessMessagesCallback_free(long _this_ptr);

	static long c_callback_l_l(int obj_ptr, int fn_id, long a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_l");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_l");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 0:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).get_per_commitment_point(a);
			case 1:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).release_commitment_secret(a);
			case 7:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_holder_commitment(a);
			case 12:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_closing_transaction(a);
			case 14:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_channel_announcement_with_funding_key(a);
			case 36:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).sign_bolt12_invoice(a);
			case 37:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).sign_gossip_message(a);
			case 40:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).read_chan_signer(a);
			case 41:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).get_destination_script(a);
			case 66:
				if (!(obj is LDKPersister)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersister in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersister)obj).persist_manager(a);
			case 67:
				if (!(obj is LDKPersister)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersister in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersister)obj).persist_graph(a);
			case 68:
				if (!(obj is LDKPersister)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersister in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersister)obj).persist_scorer(a);
			case 80:
				if (!(obj is LDKEventHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEventHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEventHandler)obj).handle_event(a);
			case 118:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).provided_init_features(a);
			case 130:
				if (!(obj is LDKNodeIdLookUp)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeIdLookUp in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeIdLookUp)obj).next_node_id(a);
			case 134:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).get_next_channel_announcement(a);
			case 135:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).get_next_node_announcement(a);
			case 143:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).provided_init_features(a);
			case 145:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).next_onion_message_for_peer(a);
			case 150:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).provided_init_features(a);
			case 157:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).provided_init_features(a);
			case 165:
				if (!(obj is LDKSignBolt12InvoiceFn)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignBolt12InvoiceFn in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignBolt12InvoiceFn)obj).sign_invoice(a);
			case 166:
				if (!(obj is LDKSignInvoiceRequestFn)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignInvoiceRequestFn in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignInvoiceRequestFn)obj).sign_invoice_request(a);
			case 169:
				if (!(obj is LDKCoinSelectionSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCoinSelectionSource in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCoinSelectionSource)obj).sign_psbt(a);
			case 172:
				if (!(obj is LDKWalletSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWalletSource in l_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWalletSource)obj).sign_psbt(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_l");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_l_callback(int obj_ptr, int fn_id, long a);
	static l_l_callback l_l_callback_inst = c_callback_l_l;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_l_invoker")] public static extern int register_l_l_invoker(l_l_callback callee);
	static int _run_l_l_registration = register_l_l_invoker(l_l_callback_inst);
	static long c_callback_l_ll(int obj_ptr, int fn_id, long a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_ll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_ll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 2:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).validate_holder_commitment(a, b);
			case 3:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).validate_counterparty_revocation(a, b);
			case 13:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_holder_anchor_input(a, b);
			case 26:
				if (!(obj is LDKUtxoLookup)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKUtxoLookup in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKUtxoLookup)obj).get_utxo(a, b);
			case 27:
				if (!(obj is LDKWatch)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWatch in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWatch)obj).watch_channel(a, b);
			case 39:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).derive_channel_signer(a, b);
			case 63:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).list(a, b);
			case 82:
				if (!(obj is LDKVerification)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKVerification in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKVerification)obj).hmac_for_offer_payment(a, b);
			case 123:
				if (!(obj is LDKAsyncPaymentsMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKAsyncPaymentsMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKAsyncPaymentsMessageHandler)obj).handle_held_htlc_available(a, b);
			case 126:
				if (!(obj is LDKDNSResolverMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKDNSResolverMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKDNSResolverMessageHandler)obj).handle_dnssec_query(a, b);
			case 131:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).handle_node_announcement(a, b);
			case 132:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).handle_channel_announcement(a, b);
			case 133:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).handle_channel_update(a, b);
			case 137:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).handle_reply_channel_range(a, b);
			case 138:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).handle_reply_short_channel_ids_end(a, b);
			case 139:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).handle_query_channel_range(a, b);
			case 140:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).handle_query_short_channel_ids(a, b);
			case 152:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).handle_custom_message(a, b);
			case 159:
				if (!(obj is LDKCustomOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomOnionMessageHandler in l_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomOnionMessageHandler)obj).read_custom_message(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_ll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_ll_callback(int obj_ptr, int fn_id, long a, long b);
	static l_ll_callback l_ll_callback_inst = c_callback_l_ll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_ll_invoker")] public static extern int register_l_ll_invoker(l_ll_callback callee);
	static int _run_l_ll_registration = register_l_ll_invoker(l_ll_callback_inst);
	static long c_callback_l_(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 4:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelSigner)obj).channel_keys_id();
			case 22:
				if (!(obj is LDKLockableScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKLockableScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKLockableScore)obj).read_lock();
			case 23:
				if (!(obj is LDKLockableScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKLockableScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKLockableScore)obj).write_lock();
			case 24:
				if (!(obj is LDKWriteableScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWriteableScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWriteableScore)obj).write();
			case 29:
				if (!(obj is LDKWatch)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWatch in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWatch)obj).release_pending_monitor_events();
			case 31:
				if (!(obj is LDKEntropySource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEntropySource in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEntropySource)obj).get_secure_random_bytes();
			case 32:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).get_inbound_payment_key();
			case 42:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).get_shutdown_scriptpubkey();
			case 51:
				if (!(obj is LDKType)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKType in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKType)obj).debug_str();
			case 52:
				if (!(obj is LDKType)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKType in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKType)obj).write();
			case 53:
				if (!(obj is LDKOnionMessageContents)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageContents in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageContents)obj).tlv_type();
			case 54:
				if (!(obj is LDKOnionMessageContents)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageContents in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageContents)obj).msg_type();
			case 55:
				if (!(obj is LDKOnionMessageContents)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageContents in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageContents)obj).write();
			case 56:
				if (!(obj is LDKOnionMessageContents)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageContents in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageContents)obj).debug_str();
			case 59:
				if (!(obj is LDKChangeDestinationSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChangeDestinationSource in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChangeDestinationSource)obj).get_change_destination_script();
			case 65:
				if (!(obj is LDKMigratableKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMigratableKVStore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMigratableKVStore)obj).list_all_keys();
			case 78:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKConfirm)obj).get_relevant_txids();
			case 84:
				if (!(obj is LDKMessageSendEventsProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMessageSendEventsProvider in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMessageSendEventsProvider)obj).get_and_clear_pending_msg_events();
			case 117:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).provided_node_features();
			case 119:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).get_chain_hashes();
			case 122:
				if (!(obj is LDKOffersMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOffersMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOffersMessageHandler)obj).release_pending_messages();
			case 125:
				if (!(obj is LDKAsyncPaymentsMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKAsyncPaymentsMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKAsyncPaymentsMessageHandler)obj).release_pending_messages();
			case 128:
				if (!(obj is LDKDNSResolverMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKDNSResolverMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKDNSResolverMessageHandler)obj).provided_node_features();
			case 129:
				if (!(obj is LDKDNSResolverMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKDNSResolverMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKDNSResolverMessageHandler)obj).release_pending_messages();
			case 142:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).provided_node_features();
			case 149:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).provided_node_features();
			case 153:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).get_and_clear_pending_msg();
			case 156:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).provided_node_features();
			case 160:
				if (!(obj is LDKCustomOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomOnionMessageHandler in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomOnionMessageHandler)obj).release_pending_custom_messages();
			case 164:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSocketDescriptor)obj).hash();
			case 167:
				if (!(obj is LDKScore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScore in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKScore)obj).write();
			case 170:
				if (!(obj is LDKWalletSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWalletSource in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWalletSource)obj).list_confirmed_utxos();
			case 171:
				if (!(obj is LDKWalletSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWalletSource in l_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWalletSource)obj).get_change_script();
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l__callback(int obj_ptr, int fn_id);
	static l__callback l__callback_inst = c_callback_l_;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l__invoker")] public static extern int register_l__invoker(l__callback callee);
	static int _run_l__registration = register_l__invoker(l__callback_inst);
	static void c_callback_void_l(int obj_ptr, int fn_id, long a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in void_l");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in void_l");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 5:
				if (!(obj is LDKChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelSigner in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelSigner)obj).provide_channel_parameters(a);
				return;
			case 21:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).time_passed(a);
				return;
			case 25:
				if (!(obj is LDKLogger)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKLogger in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKLogger)obj).log(a);
				return;
			case 30:
				if (!(obj is LDKBroadcasterInterface)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKBroadcasterInterface in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKBroadcasterInterface)obj).broadcast_transactions(a);
				return;
			case 58:
				if (!(obj is LDKFilter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFilter in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKFilter)obj).register_output(a);
				return;
			case 71:
				if (!(obj is LDKPersist)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersist in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKPersist)obj).archive_persisted_channel(a);
				return;
			case 76:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKConfirm)obj).transaction_unconfirmed(a);
				return;
			case 81:
				if (!(obj is LDKEventsProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEventsProvider in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKEventsProvider)obj).process_pending_events(a);
				return;
			case 112:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).peer_disconnected(a);
				return;
			case 147:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKOnionMessageHandler)obj).peer_disconnected(a);
				return;
			case 154:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in void_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKCustomMessageHandler)obj).peer_disconnected(a);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in void_l");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void void_l_callback(int obj_ptr, int fn_id, long a);
	static void_l_callback void_l_callback_inst = c_callback_void_l;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_l_invoker")] public static extern int register_void_l_invoker(void_l_callback callee);
	static int _run_void_l_registration = register_void_l_invoker(void_l_callback_inst);
	static long c_callback_l_lll(int obj_ptr, int fn_id, long a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_lll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_lll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 6:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_counterparty_commitment(a, b, c);
			case 10:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_holder_htlc_transaction(a, b, c);
			case 15:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_splicing_funding_input(a, b, c);
			case 16:
				if (!(obj is LDKScoreLookUp)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreLookUp in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKScoreLookUp)obj).channel_penalty_msat(a, b, c);
			case 47:
				if (!(obj is LDKMessageRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMessageRouter in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMessageRouter)obj).find_path(a, b, c);
			case 48:
				if (!(obj is LDKMessageRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMessageRouter in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMessageRouter)obj).create_blinded_paths(a, b, c);
			case 49:
				if (!(obj is LDKMessageRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKMessageRouter in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKMessageRouter)obj).create_compact_blinded_paths(a, b, c);
			case 60:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).read(a, b, c);
			case 83:
				if (!(obj is LDKVerification)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKVerification in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKVerification)obj).verify_for_offer_payment(a, b, c);
			case 121:
				if (!(obj is LDKOffersMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOffersMessageHandler in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOffersMessageHandler)obj).handle_message(a, b, c);
			case 158:
				if (!(obj is LDKCustomOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomOnionMessageHandler in l_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomOnionMessageHandler)obj).handle_custom_message(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_lll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_lll_callback(int obj_ptr, int fn_id, long a, long b, long c);
	static l_lll_callback l_lll_callback_inst = c_callback_l_lll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lll_invoker")] public static extern int register_l_lll_invoker(l_lll_callback callee);
	static int _run_l_lll_registration = register_l_lll_invoker(l_lll_callback_inst);
	static long c_callback_l_llll(int obj_ptr, int fn_id, long a, long b, long c, long d) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_llll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_llll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 8:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_justice_revoked_output(a, b, c, d);
			case 44:
				if (!(obj is LDKRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRouter in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRouter)obj).find_route(a, b, c, d);
			case 46:
				if (!(obj is LDKRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRouter in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRouter)obj).create_blinded_payment_paths(a, b, c, d);
			case 61:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_llll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).write(a, b, c, d);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_llll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_llll_callback(int obj_ptr, int fn_id, long a, long b, long c, long d);
	static l_llll_callback l_llll_callback_inst = c_callback_l_llll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llll_invoker")] public static extern int register_l_llll_invoker(l_llll_callback callee);
	static int _run_l_llll_registration = register_l_llll_invoker(l_llll_callback_inst);
	static long c_callback_l_lllll(int obj_ptr, int fn_id, long a, long b, long c, long d, long e) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_lllll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_lllll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 9:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lllll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_justice_revoked_htlc(a, b, c, d, e);
			case 11:
				if (!(obj is LDKEcdsaChannelSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKEcdsaChannelSigner in l_lllll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKEcdsaChannelSigner)obj).sign_counterparty_htlc_transaction(a, b, c, d, e);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_lllll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_lllll_callback(int obj_ptr, int fn_id, long a, long b, long c, long d, long e);
	static l_lllll_callback l_lllll_callback_inst = c_callback_l_lllll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lllll_invoker")] public static extern int register_l_lllll_invoker(l_lllll_callback callee);
	static int _run_l_lllll_registration = register_l_lllll_invoker(l_lllll_callback_inst);
	static void c_callback_void_lll(int obj_ptr, int fn_id, long a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in void_lll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in void_lll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 17:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).payment_path_failed(a, b, c);
				return;
			case 19:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).probe_failed(a, b, c);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in void_lll");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void void_lll_callback(int obj_ptr, int fn_id, long a, long b, long c);
	static void_lll_callback void_lll_callback_inst = c_callback_void_lll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_lll_invoker")] public static extern int register_void_lll_invoker(void_lll_callback callee);
	static int _run_void_lll_registration = register_void_lll_invoker(void_lll_callback_inst);
	static void c_callback_void_ll(int obj_ptr, int fn_id, long a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in void_ll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in void_ll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 18:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).payment_path_successful(a, b);
				return;
			case 20:
				if (!(obj is LDKScoreUpdate)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKScoreUpdate in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKScoreUpdate)obj).probe_successful(a, b);
				return;
			case 57:
				if (!(obj is LDKFilter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFilter in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKFilter)obj).register_tx(a, b);
				return;
			case 85:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_open_channel(a, b);
				return;
			case 86:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_open_channel_v2(a, b);
				return;
			case 87:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_accept_channel(a, b);
				return;
			case 88:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_accept_channel_v2(a, b);
				return;
			case 89:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_funding_created(a, b);
				return;
			case 90:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_funding_signed(a, b);
				return;
			case 91:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_channel_ready(a, b);
				return;
			case 92:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_shutdown(a, b);
				return;
			case 93:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_closing_signed(a, b);
				return;
			case 94:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_stfu(a, b);
				return;
			case 95:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_add_input(a, b);
				return;
			case 96:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_add_output(a, b);
				return;
			case 97:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_remove_input(a, b);
				return;
			case 98:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_remove_output(a, b);
				return;
			case 99:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_complete(a, b);
				return;
			case 100:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_signatures(a, b);
				return;
			case 101:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_init_rbf(a, b);
				return;
			case 102:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_ack_rbf(a, b);
				return;
			case 103:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_tx_abort(a, b);
				return;
			case 104:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_update_add_htlc(a, b);
				return;
			case 105:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_update_fulfill_htlc(a, b);
				return;
			case 106:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_update_fail_htlc(a, b);
				return;
			case 107:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_update_fail_malformed_htlc(a, b);
				return;
			case 108:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_commitment_signed(a, b);
				return;
			case 109:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_revoke_and_ack(a, b);
				return;
			case 110:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_update_fee(a, b);
				return;
			case 111:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_announcement_signatures(a, b);
				return;
			case 114:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_channel_reestablish(a, b);
				return;
			case 115:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_channel_update(a, b);
				return;
			case 116:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).handle_error(a, b);
				return;
			case 124:
				if (!(obj is LDKAsyncPaymentsMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKAsyncPaymentsMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKAsyncPaymentsMessageHandler)obj).handle_release_held_htlc(a, b);
				return;
			case 127:
				if (!(obj is LDKDNSResolverMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKDNSResolverMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKDNSResolverMessageHandler)obj).handle_dnssec_proof(a, b);
				return;
			case 144:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in void_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKOnionMessageHandler)obj).handle_onion_message(a, b);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in void_ll");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void void_ll_callback(int obj_ptr, int fn_id, long a, long b);
	static void_ll_callback void_ll_callback_inst = c_callback_void_ll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_ll_invoker")] public static extern int register_void_ll_invoker(void_ll_callback callee);
	static int _run_void_ll_registration = register_void_ll_invoker(void_ll_callback_inst);
	static ChannelMonitorUpdateStatus c_callback_ChannelMonitorUpdateStatus_ll(int obj_ptr, int fn_id, long a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in ChannelMonitorUpdateStatus_ll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in ChannelMonitorUpdateStatus_ll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 28:
				if (!(obj is LDKWatch)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKWatch in ChannelMonitorUpdateStatus_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKWatch)obj).update_channel(a, b);
			case 69:
				if (!(obj is LDKPersist)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersist in ChannelMonitorUpdateStatus_ll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersist)obj).persist_new_channel(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in ChannelMonitorUpdateStatus_ll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_ll_callback(int obj_ptr, int fn_id, long a, long b);
	static ChannelMonitorUpdateStatus_ll_callback ChannelMonitorUpdateStatus_ll_callback_inst = c_callback_ChannelMonitorUpdateStatus_ll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_ChannelMonitorUpdateStatus_ll_invoker")] public static extern int register_ChannelMonitorUpdateStatus_ll_invoker(ChannelMonitorUpdateStatus_ll_callback callee);
	static int _run_ChannelMonitorUpdateStatus_ll_registration = register_ChannelMonitorUpdateStatus_ll_invoker(ChannelMonitorUpdateStatus_ll_callback_inst);
	static long c_callback_l_Recipient(int obj_ptr, int fn_id, Recipient a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_Recipient");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_Recipient");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 33:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_Recipient");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).get_node_id(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_Recipient");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_Recipient_callback(int obj_ptr, int fn_id, Recipient a);
	static l_Recipient_callback l_Recipient_callback_inst = c_callback_l_Recipient;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_Recipient_invoker")] public static extern int register_l_Recipient_invoker(l_Recipient_callback callee);
	static int _run_l_Recipient_registration = register_l_Recipient_invoker(l_Recipient_callback_inst);
	static long c_callback_l_Recipientll(int obj_ptr, int fn_id, Recipient a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_Recipientll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_Recipientll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 34:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_Recipientll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).ecdh(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_Recipientll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_Recipientll_callback(int obj_ptr, int fn_id, Recipient a, long b, long c);
	static l_Recipientll_callback l_Recipientll_callback_inst = c_callback_l_Recipientll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_Recipientll_invoker")] public static extern int register_l_Recipientll_invoker(l_Recipientll_callback callee);
	static int _run_l_Recipientll_registration = register_l_Recipientll_invoker(l_Recipientll_callback_inst);
	static long c_callback_l_lRecipient(int obj_ptr, int fn_id, long a, Recipient b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_lRecipient");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_lRecipient");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 35:
				if (!(obj is LDKNodeSigner)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKNodeSigner in l_lRecipient");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKNodeSigner)obj).sign_invoice(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_lRecipient");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_lRecipient_callback(int obj_ptr, int fn_id, long a, Recipient b);
	static l_lRecipient_callback l_lRecipient_callback_inst = c_callback_l_lRecipient;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lRecipient_invoker")] public static extern int register_l_lRecipient_invoker(l_lRecipient_callback callee);
	static int _run_l_lRecipient_registration = register_l_lRecipient_invoker(l_lRecipient_callback_inst);
	static long c_callback_l_bll(int obj_ptr, int fn_id, bool a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_bll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_bll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 38:
				if (!(obj is LDKSignerProvider)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSignerProvider in l_bll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSignerProvider)obj).generate_channel_keys_id(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_bll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_bll_callback(int obj_ptr, int fn_id, bool a, long b, long c);
	static l_bll_callback l_bll_callback_inst = c_callback_l_bll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_bll_invoker")] public static extern int register_l_bll_invoker(l_bll_callback callee);
	static int _run_l_bll_registration = register_l_bll_invoker(l_bll_callback_inst);
	static int c_callback_i_ConfirmationTarget(int obj_ptr, int fn_id, ConfirmationTarget a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in i_ConfirmationTarget");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in i_ConfirmationTarget");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 43:
				if (!(obj is LDKFeeEstimator)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFeeEstimator in i_ConfirmationTarget");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKFeeEstimator)obj).get_est_sat_per_1000_weight(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in i_ConfirmationTarget");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate int i_ConfirmationTarget_callback(int obj_ptr, int fn_id, ConfirmationTarget a);
	static i_ConfirmationTarget_callback i_ConfirmationTarget_callback_inst = c_callback_i_ConfirmationTarget;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_i_ConfirmationTarget_invoker")] public static extern int register_i_ConfirmationTarget_invoker(i_ConfirmationTarget_callback callee);
	static int _run_i_ConfirmationTarget_registration = register_i_ConfirmationTarget_invoker(i_ConfirmationTarget_callback_inst);
	static long c_callback_l_llllll(int obj_ptr, int fn_id, long a, long b, long c, long d, long e, long f) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_llllll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_llllll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 45:
				if (!(obj is LDKRouter)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRouter in l_llllll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRouter)obj).find_route_with_id(a, b, c, d, e, f);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_llllll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_llllll_callback(int obj_ptr, int fn_id, long a, long b, long c, long d, long e, long f);
	static l_llllll_callback l_llllll_callback_inst = c_callback_l_llllll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llllll_invoker")] public static extern int register_l_llllll_invoker(l_llllll_callback callee);
	static int _run_l_llllll_registration = register_l_llllll_invoker(l_llllll_callback_inst);
	static short c_callback_s_(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in s_");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in s_");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 50:
				if (!(obj is LDKType)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKType in s_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKType)obj).type_id();
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in s_");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate short s__callback(int obj_ptr, int fn_id);
	static s__callback s__callback_inst = c_callback_s_;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_s__invoker")] public static extern int register_s__invoker(s__callback callee);
	static int _run_s__registration = register_s__invoker(s__callback_inst);
	static long c_callback_l_lllb(int obj_ptr, int fn_id, long a, long b, long c, bool d) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_lllb");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_lllb");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 62:
				if (!(obj is LDKKVStore)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKKVStore in l_lllb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKKVStore)obj).remove(a, b, c, d);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_lllb");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_lllb_callback(int obj_ptr, int fn_id, long a, long b, long c, bool d);
	static l_lllb_callback l_lllb_callback_inst = c_callback_l_lllb;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lllb_invoker")] public static extern int register_l_lllb_invoker(l_lllb_callback callee);
	static int _run_l_lllb_registration = register_l_lllb_invoker(l_lllb_callback_inst);
	static long c_callback_l_lllil(int obj_ptr, int fn_id, long a, long b, long c, int d, long e) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_lllil");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_lllil");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 64:
				if (!(obj is LDKOutputSpender)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOutputSpender in l_lllil");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOutputSpender)obj).spend_spendable_outputs(a, b, c, d, e);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_lllil");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_lllil_callback(int obj_ptr, int fn_id, long a, long b, long c, int d, long e);
	static l_lllil_callback l_lllil_callback_inst = c_callback_l_lllil;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lllil_invoker")] public static extern int register_l_lllil_invoker(l_lllil_callback callee);
	static int _run_l_lllil_registration = register_l_lllil_invoker(l_lllil_callback_inst);
	static ChannelMonitorUpdateStatus c_callback_ChannelMonitorUpdateStatus_lll(int obj_ptr, int fn_id, long a, long b, long c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in ChannelMonitorUpdateStatus_lll");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in ChannelMonitorUpdateStatus_lll");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 70:
				if (!(obj is LDKPersist)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKPersist in ChannelMonitorUpdateStatus_lll");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKPersist)obj).update_persisted_channel(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in ChannelMonitorUpdateStatus_lll");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate ChannelMonitorUpdateStatus ChannelMonitorUpdateStatus_lll_callback(int obj_ptr, int fn_id, long a, long b, long c);
	static ChannelMonitorUpdateStatus_lll_callback ChannelMonitorUpdateStatus_lll_callback_inst = c_callback_ChannelMonitorUpdateStatus_lll;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_ChannelMonitorUpdateStatus_lll_invoker")] public static extern int register_ChannelMonitorUpdateStatus_lll_invoker(ChannelMonitorUpdateStatus_lll_callback callee);
	static int _run_ChannelMonitorUpdateStatus_lll_registration = register_ChannelMonitorUpdateStatus_lll_invoker(ChannelMonitorUpdateStatus_lll_callback_inst);
	static void c_callback_void_lli(int obj_ptr, int fn_id, long a, long b, int c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in void_lli");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in void_lli");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 72:
				if (!(obj is LDKListen)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKListen in void_lli");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKListen)obj).filtered_block_connected(a, b, c);
				return;
			case 75:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in void_lli");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKConfirm)obj).transactions_confirmed(a, b, c);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in void_lli");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void void_lli_callback(int obj_ptr, int fn_id, long a, long b, int c);
	static void_lli_callback void_lli_callback_inst = c_callback_void_lli;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_lli_invoker")] public static extern int register_void_lli_invoker(void_lli_callback callee);
	static int _run_void_lli_registration = register_void_lli_invoker(void_lli_callback_inst);
	static void c_callback_void_li(int obj_ptr, int fn_id, long a, int b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in void_li");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in void_li");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 73:
				if (!(obj is LDKListen)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKListen in void_li");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKListen)obj).block_connected(a, b);
				return;
			case 74:
				if (!(obj is LDKListen)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKListen in void_li");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKListen)obj).block_disconnected(a, b);
				return;
			case 77:
				if (!(obj is LDKConfirm)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKConfirm in void_li");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKConfirm)obj).best_block_updated(a, b);
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in void_li");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void void_li_callback(int obj_ptr, int fn_id, long a, int b);
	static void_li_callback void_li_callback_inst = c_callback_void_li;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void_li_invoker")] public static extern int register_void_li_invoker(void_li_callback callee);
	static int _run_void_li_registration = register_void_li_invoker(void_li_callback_inst);
	static void c_callback_void_(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in void_");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in void_");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 79:
				if (!(obj is LDKFutureCallback)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKFutureCallback in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKFutureCallback)obj).call();
				return;
			case 120:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKChannelMessageHandler)obj).message_received();
				return;
			case 148:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKOnionMessageHandler)obj).timer_tick_occurred();
				return;
			case 162:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKSocketDescriptor)obj).disconnect_socket();
				return;
			case 173:
				if (!(obj is LDKProcessMessagesCallback)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKProcessMessagesCallback in void_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				((LDKProcessMessagesCallback)obj).call();
				return;
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in void_");
				Console.Error.Flush();
				Environment.Exit(45);
				return;
		}
	}
	public delegate void void__callback(int obj_ptr, int fn_id);
	static void__callback void__callback_inst = c_callback_void_;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_void__invoker")] public static extern int register_void__invoker(void__callback callee);
	static int _run_void__registration = register_void__invoker(void__callback_inst);
	static long c_callback_l_llb(int obj_ptr, int fn_id, long a, long b, bool c) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_llb");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_llb");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 113:
				if (!(obj is LDKChannelMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKChannelMessageHandler in l_llb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKChannelMessageHandler)obj).peer_connected(a, b, c);
			case 136:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in l_llb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).peer_connected(a, b, c);
			case 146:
				if (!(obj is LDKOnionMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKOnionMessageHandler in l_llb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKOnionMessageHandler)obj).peer_connected(a, b, c);
			case 155:
				if (!(obj is LDKCustomMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageHandler in l_llb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageHandler)obj).peer_connected(a, b, c);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_llb");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_llb_callback(int obj_ptr, int fn_id, long a, long b, bool c);
	static l_llb_callback l_llb_callback_inst = c_callback_l_llb;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llb_invoker")] public static extern int register_l_llb_invoker(l_llb_callback callee);
	static int _run_l_llb_registration = register_l_llb_invoker(l_llb_callback_inst);
	static bool c_callback_b_(int obj_ptr, int fn_id) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in b_");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in b_");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 141:
				if (!(obj is LDKRoutingMessageHandler)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKRoutingMessageHandler in b_");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKRoutingMessageHandler)obj).processing_queue_high();
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in b_");
				Console.Error.Flush();
				Environment.Exit(45);
				return false;
		}
	}
	public delegate bool b__callback(int obj_ptr, int fn_id);
	static b__callback b__callback_inst = c_callback_b_;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_b__invoker")] public static extern int register_b__invoker(b__callback callee);
	static int _run_b__registration = register_b__invoker(b__callback_inst);
	static long c_callback_l_sl(int obj_ptr, int fn_id, short a, long b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_sl");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_sl");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 151:
				if (!(obj is LDKCustomMessageReader)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCustomMessageReader in l_sl");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCustomMessageReader)obj).read(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_sl");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_sl_callback(int obj_ptr, int fn_id, short a, long b);
	static l_sl_callback l_sl_callback_inst = c_callback_l_sl;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_sl_invoker")] public static extern int register_l_sl_invoker(l_sl_callback callee);
	static int _run_l_sl_registration = register_l_sl_invoker(l_sl_callback_inst);
	static long c_callback_l_lb(int obj_ptr, int fn_id, long a, bool b) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_lb");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_lb");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 161:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in l_lb");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSocketDescriptor)obj).send_data(a, b);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_lb");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_lb_callback(int obj_ptr, int fn_id, long a, bool b);
	static l_lb_callback l_lb_callback_inst = c_callback_l_lb;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_lb_invoker")] public static extern int register_l_lb_invoker(l_lb_callback callee);
	static int _run_l_lb_registration = register_l_lb_invoker(l_lb_callback_inst);
	static bool c_callback_b_l(int obj_ptr, int fn_id, long a) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in b_l");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in b_l");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 163:
				if (!(obj is LDKSocketDescriptor)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKSocketDescriptor in b_l");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKSocketDescriptor)obj).eq(a);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in b_l");
				Console.Error.Flush();
				Environment.Exit(45);
				return false;
		}
	}
	public delegate bool b_l_callback(int obj_ptr, int fn_id, long a);
	static b_l_callback b_l_callback_inst = c_callback_b_l;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_b_l_invoker")] public static extern int register_b_l_invoker(b_l_callback callee);
	static int _run_b_l_registration = register_b_l_invoker(b_l_callback_inst);
	static long c_callback_l_llli(int obj_ptr, int fn_id, long a, long b, long c, int d) {
		if (obj_ptr >= js_objs.Count) {
			Console.Error.WriteLine("Got function call on unknown/free'd JS object in l_llli");
			Console.Error.Flush();
			Environment.Exit(42);
		}
		object obj = js_objs[obj_ptr].Target;
		if (obj == null) {
			Console.Error.WriteLine("Got function call on GC'd JS object in l_llli");
			Console.Error.Flush();
			Environment.Exit(43);
		}
		switch (fn_id) {
			case 168:
				if (!(obj is LDKCoinSelectionSource)) {
					Console.Error.WriteLine("Got function call to object that wasn't a LDKCoinSelectionSource in l_llli");
					Console.Error.Flush();
					Environment.Exit(44);
				}
				return ((LDKCoinSelectionSource)obj).select_confirmed_utxos(a, b, c, d);
			default:
				Console.Error.WriteLine("Got unknown function call with id " + fn_id + " from C in l_llli");
				Console.Error.Flush();
				Environment.Exit(45);
				return 0;
		}
	}
	public delegate long l_llli_callback(int obj_ptr, int fn_id, long a, long b, long c, int d);
	static l_llli_callback l_llli_callback_inst = c_callback_l_llli;
	[DllImport ("ldkcsharp", EntryPoint="CS_LDK_register_l_llli_invoker")] public static extern int register_l_llli_invoker(l_llli_callback callee);
	static int _run_l_llli_registration = register_l_llli_invoker(l_llli_callback_inst);
}
} } }